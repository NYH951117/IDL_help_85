<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>What's New in IDL&#160;8.4</title>
        <link href="../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="Resources/TableStyles/Description.css" rel="stylesheet" />
        <link href="Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../Resources/Scripts/require.min.js">
        </script>
        <script src="../Resources/Scripts/require.config.js">
        </script>
        <script src="../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <h1>What's New in IDL&#160;8.4</h1>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>If you are new to IDL or upgrading from an older version, see also:<a href="WhatsNew_in_8_0.htm">  <![CDATA[ ]]></a></p>
        <ul>
            <li value="1"><a href="Whats_New_8_3.htm">What's New in IDL&#160;8.3</a>
            </li>
            <li value="2"><a href="Whats_New_8_2_3.htm">What's New in IDL 8.2.3</a>
            </li>
            <li value="3"><a href="Whats_New_8_2_2.htm">What's New in IDL 8.2.2</a>
            </li>
            <li value="4"><a href="Whats_New_in_821.htm">What's New in IDL 8.2.1</a>
            </li>
            <li value="5"><a href="Whats_New_in_82.htm">What's New in IDL 8.2</a>
            </li>
            <li value="6"><a href="WhatsNew_in_8_1.htm">What's New in IDL 8.1</a>
            </li>
            <li value="7"><a href="WhatsNew_in_8_0.htm">What's New in IDL 8.0 </a>
            </li>
        </ul>
        <h2 class="API">New Features</h2>
        <h3>ALOG2 Function</h3>
        <p>The <a href="Reference Material/A/ALOG2.htm">ALOG2</a> function computes the logarithm base-2 of the input variable.</p>
        <h3>BigInteger Class</h3>
        <p>The BigInteger class allows you to create and manipulate integer numbers of any size. You can use BigIntegers in mathematical expressions in combination with other BigIntegers or regular numbers. The BigInteger class also has numerous methods for exploring the properties of your BigInteger numbers. For example:</p>
        <p class="Code">b = BigInteger(2)^1279 - 1</p>
        <p class="Code">HELP, b</p>
        <p class="Code">PRINT, '2^1279 - 1 is prime?', b.IsPrime() ? 'true' : 'false'</p>
        <p class="Code">c = b.NextPrime()</p>
        <p class="Code">PRINT, 'next prime is ', c - b, ' greater'</p>
        <p>IDL prints:</p>
        <p class="Code">B               BIGINTEGER &lt;ID=1 LENGTH=1279 bits&gt; = 1.0407932194664400...x10^385</p>
        <p class="Code">2^1279 - 1 is prime? true</p>
        <p class="Code">next prime is 2056 greater</p>
        <p>For more examples see the <a href="Reference Material/B/BIGINTEGER.htm">BigInteger</a> class.</p>
        <h3>BOOLEAN Variables</h3>
        <p>You can now create BOOLEAN variables which only contain the values 0 (false) or 1 (true). Boolean variables are actually variables of type BYTE with a special boolean flag. Because they are type BYTE, boolean variables can be used anywhere that a byte variable is used.</p>
        <p>There are also two new system variables, <a href="Creating IDL Programs/Appendices/Constant_System_Variable.htm#!TRUE">!TRUE</a> and <a href="Creating IDL Programs/Appendices/Constant_System_Variable.htm#!FALSE">!FALSE</a>, which are boolean variables with the value 1 and 0, respectively.</p>
        <p>The boolean flag is used when printing out HELP information, when modifying elements within a boolean array, and when converting to and from JSON. For example:</p>
        <p class="Code">a = [0.0, 1.0, 0.0, 3.0]</p>
        <p class="Code">b = BOOLEAN(a)</p>
        <p class="Code">b[2] = "yes" ; equal to "true"</p>
        <p class="Code">HELP, b</p>
        <p class="Code">PRINT, b</p>
        <p class="Code">PRINT, JSON_SERIALIZE(b)</p>
        <p>IDL prints:</p>
        <p class="Code">B&#160;              &#160;&#160;BOOLEAN   = Array[4]</p>
        <p class="Code">0&#160;&#160;1&#160;&#160;1&#160;&#160;1</p>
        <p class="Code">[false,true,true,true]</p>
        <p>For more information, see the <a href="Reference Material/B/BOOLEAN.htm">BOOLEAN</a> and <a href="Reference Material/B/BOOLARR.htm">BOOLARR</a> functions.</p>
        <h3>Code Coverage</h3>
        <p>You can now analyze the code coverage for your applications using the <a href="Reference Material/C/CODE_COVERAGE.htm">CODE_COVERAGE</a> function. The function returns the line numbers of code that were executed and not executed for your given routine. In addition, the Code Coverage feature has been integrated into the Workbench. You can turn on Code Coverage highlighting for Editors, as well as display Code Coverage statistics in the Profiler View:</p>
        <p>
            <img src="DevelopmentEnvironment/images/code_coverage4.png" />
        </p>
        <p>For more details see the <a href="Reference Material/C/CODE_COVERAGE.htm">CODE_COVERAGE</a> function, the <a href="DevelopmentEnvironment/QuickReference/CodeCoverage.htm">Code Coverage</a> Workbench page, and the <a href="DevelopmentEnvironment/QuickReference/ProfilerView.htm">Profiler View</a>.</p>
        <h3>Folder Watching System</h3>
        <p>The new <a href="Reference Material/F/FOLDERWATCH.htm">FOLDERWATCH</a> object monitors folders for changes and invokes a user-defined callback whenever a change occurs. This enables IDL programmers to create a "batch" client that watches a specified "hot folder" and subsequently performs processing when specific conditions have been met (e.g. a file has been added to, modified, or deleted from the folder).</p>
        <p class="Code">; Get working directory</p>
        <p class="Code">

CD, CURRENT=c</p>
        <p class="Code">

 

f = FOLDERWATCH( c, 'MyCallback', /ADDED )</p>
        <h3>FFT Power Spectrum</h3>
        <p>The new <a href="Reference Material/F/FFT_PowerSpectrum.htm">FFT_POWERSPECTRUM</a> function computes the Fourier Power Spectrum of an array. In addition, the function can return additional information including the amplitude, phase and significance levels associated with the result.</p>
        <h3>Generate Code in New Graphics</h3>
        <p>The <a href="IDL Graphics/GenerateCode Method.htm">Generate Code</a> method generates the code needed to reproduce the contents of a graphics window. This method can be used to generate code after changes have been made interactively in the graphics window, e.g., moving, resizing, or changing properties.</p>
        <p class="Code">p = PLOT(/TEST, THICK=3, COLOR='red', LAYOUT=[2,1,1])</p>
        <p class="Code">

b = BARPLOT(/TEST, FILL_COLOR='green', LAYOUT=[2,1,2], /CURRENT)

 
p.GenerateCode, 'mycode.pro'</p>
        <p>You also have the option to save all the data used in the visualizations within the graphics window so you can share the generated code.</p>
        <p>For more information on generating code, see the Generate Code <a href="GuideMe/GenerateCode.htm">Guide Me</a>.</p>
        <h3>Lambda Functions and Procedures</h3>
        <p>You can now create simple inline routines that can be used for functional programming. These Lambda routines can be used with the new  <a href="Reference Material/Static Methods/IDL_Variable.htm#Filter">::Filter</a>, <a href="Reference Material/Static Methods/IDL_Variable.htm#Map">::Map</a>, and <a href="Reference Material/Static Methods/IDL_Variable.htm#Reduce">::Reduce</a> methods, or you can simply call them as standalone functions or procedures. For example:</p>
        <p class="Code">; Use Map to return the square root of a number</p>
        <p class="Code">var = [0:5]</p>
        <p class="Code">PRINT, var.Map(LAMBDA(n: sqrt(n)))</p>
        <p>IDL prints:</p>
        <p class="Code">0.000000      1.00000      1.41421      1.73205      2.00000      2.23607</p>
        <p>Next use Lambda with the Filter method to return prime numbers:</p>
        <p class="Code">var = [2:50]</p>
        <p class="Code">lam = LAMBDA(n:n le 3 || MIN(n mod [2:FIX(SQRT(n))]))</p>
        <p class="Code">newvar = var.Filter(lam)</p>
        <p class="Code">PRINT, newvar</p>
        <p>IDL&#160;prints:</p>
        <p class="Code">2  3  5  7 11 13 17 19 23 29 31 37 41 43 47</p>
        <p>We can also make function calls directly on the returned Lambda variable:</p>
        <p class="Code">compile_opt idl2</p>
        <p class="Code">; Are these prime numbers?</p>
        <p class="Code">PRINT, lam(499), lam(4999), lam(49999), lam(499999), lam(4999999)</p>
        <p>IDL&#160;prints:</p>
        <p class="Code">1   1   1   0   1</p>
        <p>See <a href="Reference Material/L/LAMBDA.htm">LAMBDA</a> and <a href="Reference Material/L/LAMBDAP.htm">LAMBDAP</a> for details.</p>
        <h3>Variable Attributes</h3>
        <p>You can now access special attributes on all IDL variables. For example:</p>
        <p class="Code">var = RANDOMU(seed, 200, 100)</p>
        <p class="Code">PRINT, var.length</p>
        <p class="Code">PRINT, var.ndim</p>
        <p class="Code">PRINT, var.dim</p>
        <p class="Code">PRINT, var.typecode</p>
        <p class="Code">PRINT, var.typename</p>
        <p>IDL prints:</p>
        <p class="Code">20000</p>
        <p class="Code">2</p>
        <p class="Code">200         100</p>
        <p class="Code">4</p>
        <p class="Code">FLOAT</p>
        <p>These attributes provide a convenient shorthand for the SIZE, N_ELEMENTS, and TYPENAME functions, and are also faster to call. See <a href="Reference Material/Static Methods/Variable Attributes.htm">Variable Attributes</a> for details.</p>
        <h3>Static Methods for IDL&#160;Variables</h3>
        <p>You can now call special static methods on all IDL variables except objects and structures. For example:</p>
        <p class="Code">var1 = RANDOMU(seed, 200, 100)</p>
        <p class="Code">PRINT, var1.Mean()</p>
        <p class="Code">PRINT, var1.Total()</p>
        <p class="Code">var2 = var1.Sort()</p>
        <p class="Code">HELP, var2</p>
        <p>IDL prints:</p>
        <p class="Code">0.501100</p>
        <p class="Code">     10022.0</p>
        <p class="Code">VAR2            FLOAT     = Array[20000]</p>
        <p>Another example using strings:</p>
        <p class="Code">str = " IDL is Hard. "</p>
        <p class="Code">if (str.Contains("hard", /FOLD_CASE)) then $</p>
        <p class="Code">&#160;&#160;str = str.Replace("hard", "fun", /FOLD_CASE)</p>
        <p class="Code">str = str.ToUpper()</p>
        <p class="Code">str = str.Trim() ; remove leading/trailing whitespace</p>
        <p class="Code">PRINT, str</p>
        <p>IDL prints:</p>
        <p class="Code">IDL IS FUN.</p>
        <p>In many cases, calling the static method will be faster and more efficient than the equivalent function call. For example, the <a href="Reference Material/Static Methods/IDL_Variable.htm#Sort">::Sort</a> and <a href="Reference Material/Static Methods/IDL_Variable.htm#Uniq">::Uniq</a> methods both avoid making an intermediate "index" array and just return the sorted or unique elements.</p>
        <p>Many of these methods provide new functionality. For example, see the <a href="Reference Material/Static Methods/IDL_String.htm#CapWords">IDL_String::Capwords</a>, <a href="Reference Material/Static Methods/IDL_String.htm#StartsWith">::Startswith</a>, <a href="Reference Material/Static Methods/IDL_String.htm#EndsWith">::EndsWith</a>, and <a href="Reference Material/Static Methods/IDL_String.htm#Replace">::Replace</a> methods.</p>
        <h6><a href="Reference Material/Static Methods/IDL_Variable.htm">IDL Variable methods</a>
        </h6>
        <table style="margin-left: 0;margin-right: auto;mc-table-style: url('Resources/TableStyles/Description.css');" class="TableStyle_Description" cellspacing="0">
            <col />
            <col />
            <col />
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColSep">
                        <p>Compare</p>
                        <p>Convert</p>
                        <p>Diff</p>
                        <p>Equals</p>
                        <p>Filter</p>
                        <p>Finite</p>
                        <p>FromBits</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColSep">
                        <p>Hashcode</p>
                        <p>HasValue</p>
                        <p>IsFinite</p>
                        <p>IsInfinite</p>
                        <p>IsNaN</p>
                        <p>IsReal</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColSep">
                        <p>Map</p>
                        <p>NestedMap</p>
                        <p>PtrValid</p>
                        <p>Reduce</p>
                        <p>Reform</p>
                        <p>Shift</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColEnd">
                        <p>Sort</p>
                        <p>ToBits</p>
                        <p>ToDouble</p>
                        <p>ToInteger</p>
                        <p>ToString</p>
                        <p>Uniq</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h6><a href="Reference Material/Static Methods/IDL_String.htm">String methods</a>
        </h6>
        <table style="mc-table-style: url('Resources/TableStyles/Description.css');margin-left: 0;margin-right: auto;" class="TableStyle_Description" cellspacing="0">
            <col />
            <col />
            <col />
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColSep">
                        <p>Capwords</p>
                        <p>CharAt</p>
                        <p>Compress</p>
                        <p>Contains</p>
                        <p>EndsWith</p>
                        <p>Extract</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColSep">
                        <p>IndexOf</p>
                        <p>Insert</p>
                        <p>Join</p>
                        <p>LastIndexOf</p>
                        <p>Matches</p>
                        <p>Remove</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColSep">
                        <p>Replace</p>
                        <p>Reverse</p>
                        <p>Split</p>
                        <p>StartsWith</p>
                        <p>Strlen</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColEnd">
                        <p>Substring</p>
                        <p>ToByte</p>
                        <p>ToLower</p>
                        <p>ToUpper</p>
                        <p>Trim</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h6><a href="Reference Material/Static Methods/IDL_Number.htm">Number methods</a>
        </h6>
        <table style="mc-table-style: url('Resources/TableStyles/Description.css');margin-left: 0;margin-right: auto;" class="TableStyle_Description" cellspacing="0">
            <col />
            <col />
            <col />
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColSep">
                        <p>Ceil</p>
                        <p>Floor</p>
                        <p>Imaginary</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColSep">
                        <p>Mean</p>
                        <p>Median</p>
                        <p>Min</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColSep">
                        <p>Max</p>
                        <p>Product</p>
                        <p>Real</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColEnd">
                        <p>Round</p>
                        <p>Signum</p>
                        <p>Total</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h6><a href="Reference Material/Static Methods/IDL_Integer.htm">Integer methods</a>
        </h6>
        <table style="mc-table-style: url('Resources/TableStyles/Description.css');margin-left: 0;margin-right: auto;" class="TableStyle_Description" cellspacing="0">
            <col />
            <col />
            <col />
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColSep">
                        <p>BitGet</p>
                        <p>BitLength</p>
                        <p>BitSet</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColSep">
                        <p>BitShift</p>
                        <p>ToASCII</p>
                        <p>ToBinary</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColSep">
                        <p>ToHex</p>
                        <p>ToOctal</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColEnd">&#160;</td>
                </tr>
            </tbody>
        </table>
        <h6><a href="Reference Material/Static Methods/IDL_Pointer.htm">Pointer methods</a>
        </h6>
        <table style="mc-table-style: url('Resources/TableStyles/Description.css');margin-left: 0;margin-right: auto;" class="TableStyle_Description" cellspacing="0">
            <col />
            <col />
            <col />
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColSep">
                        <p>PtrType</p>
                        <p>Valid</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColSep">
                        <p>&#160;</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColSep">
                        <p>&#160;</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColEnd">&#160;</td>
                </tr>
            </tbody>
        </table>
        <p>For details see <a href="Creating IDL Programs/Components of the IDL Language/Static_Methods_Using.htm">Static Methods and Attributes</a>.</p>
        <h2 class="API">Updates</h2>
        <h3>ARRAY_EQUAL function NOT_EQUAL and QUIET keywords</h3>
        <p>The ARRAY_EQUAL function has new keywords: NOT_EQUAL and QUIET. The NOT_EQUAL keyword reverses the meaning of the test, which is useful for checking whether an array contains a particular value or not. The QUIET keyword suppresses any type conversion errors. See <a href="Reference Material/A/ARRAY_EQUAL.htm">ARRAY_EQUAL</a> for details.</p>
        <h3>ERRORPLOT Properties</h3>
        <p><a href="Reference Material/E/ERRORPLOT.htm">ERRORPLOT</a> has two new properties: ERRORBAR_LINESTYLE and ERRORBAR_THICK, to control the linestyle and thickness of just the error bars.</p>
        <h3>FILE_DELETE with Recycling</h3>
        <p>The <a href="Reference Material/F/FILE_DELETE.htm">FILE_DELETE</a> procedure now has a RECYCLE keyword, which will send files to the operating system's recycle (or trash) bin, instead of permanently deleting them. This keyword is only available on Windows platforms and is quietly ignored on other platforms.</p>
        <h3>Hash and List have new Filter, Map, NestedMap, Reduce methods</h3>
        <p>The List, Hash, Dictionary, and OrderedHash objects have three new methods:</p>
        <ul>
            <li value="1">The Filter method passes each data value through a boolean filter function or <a href="Reference Material/L/LAMBDA.htm">Lambda</a> function and returns only values that pass the test.</li>
            <li value="2">The Map method passes each data value through a user-defined function or <a href="Reference Material/L/LAMBDA.htm">Lambda</a> function.</li>
            <li value="3">The Reduce method passes each data value cumulatively from left to right through a user-defined function or <a href="Reference Material/L/LAMBDA.htm">Lambda</a> function and returns a single scalar result.</li>
        </ul>
        <p>The List object also has a new NestedMap method, which passes the data values and arguments in a nested loop, to perform list comprehension.</p>
        <p>For details see <a href="Reference Material/L/LIST.htm">List</a>, <a href="Reference Material/H/HASH.htm">Hash</a>, <a href="Reference Material/D/DICTIONARY.htm">Dictionary</a>, and <a href="Reference Material/O/ORDEREDHASH.htm">OrderedHash</a>.</p>
        <h3>Hash and OrderedHash with Case-Insensitive Keys</h3>
        <p>You can now create Hash and OrderedHash objects with case-insensitive keys. If the FOLD_CASE keyword is set, then the case for string keys will be ignored when accessing keys, adding new keys, removing keys, or changing values. Note that even though the key matching is case insensitive, these objects always preserve the case of the key when it was originally set. See <a href="Reference Material/H/HASH.htm">Hash</a> for details.</p>
        <h3>List.Sort() Method</h3>
        <p>The List object has a new <a href="Reference Material/L/LIST.htm#SortMethod">List::Sort</a> method which lets you sort the list elements using an optional compare function.</p>
        <h3>IDL_Container can now hold Pointers</h3>
        <p>The IDL_Container class has the following improvements:</p>
        <ul>
            <li value="1">You can now store pointers within an IDL_Container. The container must contain only object or only pointers (not a mix).</li>
            <li value="2">There is a new <a href="Reference Material/I/IDL_Container__Equals.htm">IDL_Container::Equals</a> method which tests a container of pointers against an input value.</li>
            <li value="3">By using a cached "current position" pointer, <a href="Reference Material/I/IDL_Container__Get.htm">IDL_Container::Get</a> is now significantly faster for sequential gets.</li>
        </ul>
        <p>For details see <a href="Reference Material/I/IDL_Container.htm">IDL_Container</a>.</p>
        <h3>IDL Workbench</h3>
        <p>Better chromacoding and formatting for structure fields and system variables.</p>
        <h3>IDLgrAxis</h3>
        <p>Added TICKUNITS="numeric" and TICKUNITS="scientific" as optional types to <a href="Object Classes/Graphics/IDLgrAxis.htm">IDLgrAxis</a>.</p>
        <h3>New NOSAVE Compiler Option</h3>
        <p>If a routine is marked with <code>compile_opt nosave</code>, then it will be excluded from IDL save files, unless the routine was specifically included as an input argument to the <a href="Reference Material/S/SAVE.htm">SAVE</a> routine. See <a href="Reference Material/C/COMPILE_OPT.htm">compile_opt</a> for details.</p>
        <h3>IDLitComponent has a new ::UnregisterProperty method</h3>
        <p>You can now unregister properties from any object than inherits from IDLitComponent. Unregistered properties will no longer appear in the Property Sheet for that object, but can still be accessed through ::GetProperty and ::SetProperty. See <a href="Object Classes/Miscellaneous/IDLitComponent__Unregister.htm">IDLitComponent::UnregisterProperty</a> for details.</p>
        <h3>Graphics Windows with No Toolbar</h3>
        <p>By default, graphics windows are created with a toolbar containing some common tools such as Print and Save. You can use the new NO_TOOLBAR keyword to avoid creating the toolbar. This allows you to create graphics windows that are smaller than the default size. This keyword is available on all graphics functions such as <a href="Reference Material/P/PLOT.htm">PLOT</a> or <a href="Reference Material/W/WINDOW.htm">WINDOW</a>.</p>
        <h3>Graphic Save and CopyWindow Produces Smoother Output</h3>
        <p>By default, when saving to a bitmap that is less than 300 dots-per-inch, IDL&#160;will now use anti-aliasing to produce a smoother output image. You can use a new ANTIALIAS keyword to control this default behavior. See the <a href="IDL Graphics/CopyWindow Method.htm">::CopyWindow</a> and  <a href="IDL Graphics/Save Method.htm">::Save</a> methods for details.</p>
        <h3>ISA function COMPLEX, FLOAT, INTEGER, STRING keywords</h3>
        <p>The ISA function has new keywords: COMPLEX, FLOAT, INTEGER, STRING. These allow you to test the data type of the input variable. See <a href="Reference Material/I/ISA.htm">ISA</a> for details.</p>
        <h3>JSON_SERIALIZE Enhancements</h3>
        <p>When converting an IDL structure, you can now set a new LOWERCASE keyword to convert the tag names to lowercase in the resulting JSON string.</p>
        <p>JSON_SERIALIZE now converts byte values into integer values (in the range 0–255) instead of a "true/false" boolean. Before, JSON_SERIALIZE used to convert all non-zero byte values to "true", which caused a loss of data.</p>
        <p>See <a href="Reference Material/J/JSON_SERIALIZE.htm">JSON_SERIALIZE</a> for details.</p>
        <h3>Support for Unicode Characters Beyond $FFFF</h3>
        <p>IDL's object and new graphics now allow you to input Unicode characters that have up to 8 hexadecimal digits. For example:</p>
        <p class="Code">p = PLOT(/TEST, TITLE="!Z(10900)", FONT_NAME="Aegean")</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>This example will only work if you have the Aegean font installed on your system.</p>
        <h3>Library updates</h3>
        <p>cURL library updated to version 7.36.0.</p>
        <ul>
            <li value="1">Resolves Heartbleed security bug.</li>
        </ul>
        <p>OpenSSL library updated to version 1.0.1g.</p>
        <ul>
            <li value="1">Resolves Heartbleed security bug.</li>
        </ul>
        <p>HDF5 library updated to provide read-only support for SZIP (v2.1) compression.</p>
        <h3>Non-Blocking Timers</h3>
        <p>The <a href="Reference Material/T/TIMER.htm">TIMER</a> object now has Block and Unblock methods. IDL no longer automatically interrupts callbacks.</p>
        <h3>Video Read</h3>
        <p>In previous versions of IDL messages from FFmpeg would be reported as errors and <a href="Object Classes/File Format/IDLffVideoRead.htm">IDLffVideoRead</a> object initialization would fail.</p>
        <p>Now in IDL 8.4 if the video file contains any video or audio codecs that are not supported then IDL will quietly ignore these codecs and continue to open the file.</p>
        <p>Users can set the new VERBOSE keyword to force IDL to issue informational messages when it encounters any unsupported codecs.</p>
        <h2 class="API">Note</h2>
        <p class="RedText">IDL 8.4 will be the last version to include the obsolete Live Tools routines. After IDL 8.4 these routines will no longer be included with the IDL distribution.</p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>