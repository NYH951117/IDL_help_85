<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Additional Topics|External Development Guide|Adding System Routines">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Registering Routines</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../../OtherTopics.htm">Additional Topics</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../EDG.htm">External Development Guide</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="AddingSystRoutines.htm">Adding System Routines</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Registering Routines</span>
        </div>
        <h1><a name="kanchor5517"></a>Registering Routines</h1>
        <h2 class="API">IDL_SysRtnAdd()</h2>
        <p>The <b>IDL_SysRtnAdd()</b> function adds system routines to IDL’s internal tables of system functions and procedures. As a programmer, you will need to call this function directly if you are linking a version of IDL to which you are adding routines, although this is very rare and not considered to be a good practice for maintainability reasons. </p>
        <p>More commonly, you use <b>IDL_SysRtnAdd()</b> in the <b>IDL_Load()</b> function of a <a href="DLM.htm">Dynamically Loadable Module (DLM)</a>. </p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span><a href="LinkImage.htm">LINKIMAGE</a> or <a href="DLM.htm">DLMs</a> are the preferred way to add system routines to IDL because they do not require building a separate IDL program. Of the two, we recommend the use of DLMs whenever possible. </p>
        <h3>Syntax</h3>
        <p class="Code">int IDL_SysRtnAdd(IDL_SYSFUN_DEF2 *defs, int is_function, int cnt)</p>
        <p>It returns True if it succeeds in adding the routine or False in the event of an error.</p>
        <h3>Arguments</h3>
        <h4>defs</h4>
        <p>An array of <b>IDL_SYSFUN_DEF2</b> structures, one per routine to be declared. This array must be defined with the C language static storage class because IDL keeps pointers to it. defs must be sorted by routine name in ascending lexical order.</p>
        <h4>is_function</h4>
        <p>Set this parameter to IDL_TRUE if the routines in defs are functions, and</p>
        <p>IDL_FALSE if they are procedures.</p>
        <h4>cnt</h4>
        <p>The number of <b>IDL_SYSFUN_DEF2</b> structures contained in the defs array. The definition of <b>IDL_SYSFUN_DEF2</b> is:</p>
        <p class="Code">typedef IDL_VARIABLE *(* IDL_SYSRTN_GENERIC)();</p>
        <p class="Code">typedef struct { </p>
        <p class="Code">&#160;&#160;&#160;IDL_SYSRTN_GENERIC funct_addr; </p>
        <p class="Code">&#160;&#160;&#160;char *name;</p>
        <p class="Code">&#160;&#160;&#160;unsigned short arg_min; </p>
        <p class="Code">&#160;&#160;&#160;unsigned short arg_max; </p>
        <p class="Code">&#160;&#160;&#160;int flags</p>
        <p class="Code">&#160;&#160;&#160;void *extra;</p>
        <p class="Code">&#160;&#160;&#160;} IDL_SYSFUN_DEF2;</p>
        <p><b>IDL_VARIABLE</b> structures are described in <a href="../IDLInternals - Variables/IDLVARIABLEStructure.htm">The IDL_VARIABLE Structure</a>.</p>
        <h4>funct_addr</h4>
        <p>Address of the function implementing the system routine.</p>
        <h4>name</h4>
        <p>The name by which the routine is to be invoked from within IDL. This should be a pointer to a null terminated string. The name should be capitalized. If the routine is an object method, the name should be fully qualified, which means that it should include the class name at the beginning followed by two consecutive colons, followed by the method name (e.g. <code>CLASS::METHOD</code>).</p>
        <h4>arg_min</h4>
        <p>The minimum number of arguments allowed for the routine.</p>
        <h4>arg_max</h4>
        <p>The maximum number of arguments allowed for the routine. If the routine does not place an upper value on the number of arguments, use the value <b>IDL_MAXPARAMS</b>.</p>
        <h4>flags</h4>
        <p>A bitmask that provides additional information about the routine. Its value can be any combination of the following values (bitwise OR-ed together to specify more than one at a time) or zero if no options are necessary:</p>
        <h4>IDL_SYSFUN_DEF_F_OBSOLETE</h4>
        <p>IDL should issue a warning message if this routine is called and !WARN.OBS_ROUTINE is set.</p>
        <h4>IDL_SYSFUN_DEF_F_KEYWORDS</h4>
        <p>This routine accepts keywords as well as plain arguments.</p>
        <h4>IDL_SYSFUN_DEF_F_METHOD</h4>
        <p>This routine is an object method.</p>
        <h4>extra</h4>
        <p>Reserved to <span class="DocumentTitleCompanyName">Exelis VIS</span>. The caller should set this to 0.</p>
        <h3>Example</h3>
        <p>The following example shows how to register a system routine linked directly with IDL. For simplicity, everything is placed in a single file. Normally, you would modularize things to allow easier code maintenance.</p>
        <p class="Code">#include &lt;stdio.h&gt;</p>
        <p class="Code">#include "idl_export.h"</p>
        <p class="Code">void prox1(int argc, IDL_VPTR argv[])</p>
        <p class="Code">{</p>
        <p class="Code_Indented">printf("prox1 %d\n", IDL_LongScalar(argv[0]));</p>
        <p class="Code">}</p>
        <p class="Code">main(int argc, char *argv[])</p>
        <p class="Code">{</p>
        <p class="Code_Indented">static IDL_SYSFUN_DEF2 new_pros[] = {</p>
        <p class="Code_Indented">{(IDL_SYSRTN_GENERIC) prox1, "PROX1", 1, 1, 0, 0}</p>
        <p class="Code_Indented">};</p>
        <p class="Code_Indented">if (!IDL_SysRtnAdd(new_pros, IDL_FALSE, 1)) IDL_Message(IDL_M_GENERIC, IDL_MSG_RET,</p>
        <p class="Code_Indented">"Error adding system routine");</p>
        <p class="Code_Indented">return IDL_Main(0, argc, argv);</p>
        <p class="Code">}</p>
        <p>This adds a system procedure named PROX1 which accepts a single argument. It converts this argument to a scalar longword integer and prints it.</p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>