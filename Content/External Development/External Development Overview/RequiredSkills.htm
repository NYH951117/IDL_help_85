<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Additional Topics|External Development Guide|External Development Overview">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Required Skills</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">  <![CDATA[ ]]></span><a class="MCBreadcrumbsLink" href="../../OtherTopics.htm">Additional Topics</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../EDG.htm">External Development Guide</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="EDGOverview.htm">External Development Overview</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Required Skills</span>
        </div>
        <h1>Required Skills</h1>
        <p>There is a large difference between the level at which a typical user sees IDL compared to that of the internals programmer. To the user, IDL is an easy-to-use, array-oriented language that combines numerical and graphical abilities, and runs on many platforms. Internally, IDL is a large C language program that includes a compiler, an interpreter, graphics, mathematical computation, user interface, and a large amount of operating system-dependent code.</p>
        <p> To be successful, the programmer must have experience and proficiency in many of the following areas:</p>
        <h2>Microsoft COM</h2>
        <p>To incorporate a COM object into your IDL program, you should be familiar with COM interfaces in general and the interface of the object you are using in particular.</p>
        <h2>Microsoft ActiveX</h2>
        <p>To incorporate an ActiveX control into your IDL widget application, you should be familiar with COM interfaces in general and the interface of the control you are using in particular.</p>
        <h2>Sun Java</h2>
        <p>To incorporate a Java object into your IDL program, you should be familiar with Java object classes in general and the methods and data members of the object you are using in particular.</p>
        <h2>UNIX RPC</h2>
        <p>To use IDL as an RPC server, a knowledge of Sun RPC (Also known as ONC RPC) is required. Sun RPC is the fundamental enabling technology that underlies the popular NFS (Network File System) software available on all UNIX systems, and as such, is universally available on UNIX. The system documentation on this subject should be sufficient.</p>
        <h2>ANSI C</h2>
        <p>IDL is written in ANSI C. To understand the data structures and routines described in this document, you must have a complete understanding of this language.</p>
        <h2>System C Compiler, Linker, and Libraries</h2>
        <p>In order to successfully integrate IDL with your code, you must fully understand the compilation tools being used as well as those used to build IDL and how they might interact. IDL is built with the standard C compiler used (and usually supplied) by the vendor of each platform to ensure full compatibility with all system components.</p>
        <h2>Inter-language Calling Conventions (C++, Fortran, …)</h2>
        <p>It is possible to link IDL directly with code written in compiled languages other than C although the details differ depending on the machine, language, and compiler used. It is the programmer’s responsibility to understand the inter-language calling conventions and rules for the target environment—there are too many possibilities for <span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span> to actively document them all. ANSI C is a standard system programming language on all systems supported by IDL, so it is usually straightforward to combine it with code written in other compiled languages. You need to understand:</p>
        <ul>
            <li value="1">The conventions used to pass parameters to functions in both languages. For example, C uses call-by-value while Fortran uses call-by-reference. It is easy to compensate for such conventions, but they must be taken into account.</li>
            <li value="2">Any systematic name changes applied by the compilers. For example, some compilers add underscores at the beginning or end of names of functions and global data.</li>
            <li value="3">Any run-time initialization that must be performed. On many systems, the real initial entry point for the program is not main(), but a different function that performs some initialization work and then calls your main() function. Usually these issues have been addressed by the system vendor, who has a large interest in allowing such inter-language usage:<ul><li value="1">If you call IDL from a program written in a language other than C, has the necessary initialization occurred?</li><li value="2">If you use IDL to call code written in a language other than C, do you need to take steps to initialize the runtime system for that language?</li><li value="3">Are the two runtime systems compatible?</li></ul></li>
        </ul>
        <p>Alternatives to direct linking (Microsoft COM or Active X) exist on some systems that simplify the details of inter-language linking.</p>
        <h2>C++</h2>
        <p> It is possible to combine IDL with C++ code. Callable IDL is especially simple, as all you need to do is to include the<code> idl_export.h</code> header file in your C++ code and then call the necessary IDL functions directly. Calling C++ code from IDL (<a href="../../Reference Material/C/CALL_EXTERNAL.htm">CALL_EXTERNAL</a>) is also possible, but there are some issues you should be aware of:</p>
        <ul>
            <li value="1">As a C program, IDL is not able to directly call C++ methods, or use other object-oriented features of the C++ language. To use these C++ features, you must supply a function with C linkage (using an extern “C” specification) for IDL to call. That routine, which is written in C++ is then able to use the C++ features.</li>
            <li value="2">IDL does not initialize any necessary C++ runtime code. Your system may require such code to be executed before your C++ code can run. Consult your system documentation for details. (Please be aware that this information can be difficult to find; locating it may require some detective work on your part.)</li>
        </ul>
        <h2>Fortran</h2>
        <p>Issues to be aware of when combining IDL with Fortran:</p>
        <ul>
            <li value="1">Understand the calling conventions of the two languages. C passes everything by value, and supplies an operator that lets you explicitly take the address of a memory object. Fortran passes everything by reference (by address). Some people find it helpful to write a C wrapper function to call their Fortran code and then have IDL call the wrapper. This is generally not necessary, but may be convenient.</li>
            <li value="2">IDL is a C program, and as such, does not initialize any necessary Fortran runtime code. Your system may require such code to be executed before your Fortran code can run. In particular, Fortran code that does its own input output often requires such startup code to be executed. Consult your system documentation for details. One common strategy that can minimize this sort of problem is to use IDL’s I/O facilities to do I/O, and have your Fortran code limit itself to computation.</li>
        </ul>
        <h2>Operating System Features and Conventions</h2>
        <p>With the exception of purely numerical code, the programmer must usually fully understand the target operating system environment in which IDL is running in order to write code to link with it.</p>
        <h3>Microsoft Windows</h3>
        <p>You must be an experienced Windows programmer with an understanding of Windows APIs and DLLs.</p>
        <h3>UNIX</h3>
        <p>You should understand system calls, signals, processes, standard C libraries, and possibly even X Windows depending on the scope of the code being linked.</p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>