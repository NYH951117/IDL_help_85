<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Additional Topics|External Development Guide|External Development Overview">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Supported Inter-Language Communication Techniques</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">  <![CDATA[ ]]></span><a class="MCBreadcrumbsLink" href="../../OtherTopics.htm">Additional Topics</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../EDG.htm">External Development Guide</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="EDGOverview.htm">External Development Overview</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Supported Inter-Language Communication Techniques</span>
        </div>
        <h1>Supported Inter-Language Communication Techniques</h1>
        <p>IDL supports a number of different techniques for communicating with the operating system and programs written in other languages. These methods are described, in brief, below.</p>
        <p>Options are presented in approximate order of increasing complexity. We recommend that you favor the simpler options at the head of this list over the more complex ones that follow if they are capable of solving your problem.</p>
        <p>It can be difficult to choose the best option — there is a certain amount of overlap between their abilities. We highlight the advantages and disadvantages of each method as well as make recommendations to help you decide which approach to take. By comparing this list with the requirements of the problem you are trying to solve, you should be able to quickly determine the best solution.</p>
        <h2>Translate into IDL</h2>
        <h3>Advantages</h3>
        <p>All the benefits of using a high level, interpreted, array oriented environment with high levels of platform independence.</p>
        <h3>Disadvantages</h3>
        <p>Not always possible.</p>
        <h3>Recommendation</h3>
        <p>Writing in IDL is the easiest path. If you have existing code in another language that is simple enough to translate to IDL, this is the best way to go. You should investigate the other options if the existing code is sufficiently complex, has desirable performance advantages, or is the reference implementation of some standardized package. Another good reason for considering the techniques described in this book is if you wish to access IDL abilities from a large program written in some other language.</p>
        <h2>SPAWN</h2>
        <p>The simplest (but most limited) way to access programs external to IDL is to use the <a href="../../Reference Material/S/SPAWN.htm">SPAWN</a> procedure. Calling <b>SPAWN</b> spawns a child process that executes a specified command. The output from <b>SPAWN</b> can be captured in an IDL string variable. In addition, IDL can communicate with a child process through a bi-directional pipe using SPAWN. More information about SPAWN can be found in <a href="../Miscellaneous EDG Topics/UsingSpawnAndPipes.htm">Using SPAWN and Pipes</a> or in the reference documentation for <a href="../../Reference Material/S/SPAWN.htm">SPAWN</a>.</p>
        <h3>Advantages</h3>
        <ul>
            <li value="1">Simplicity</li>
            <li value="2">Allows use of existing standalone programs.</li>
            <li value="3">Data can be sent to and returned by the program via a pipe, making sophisticated inter-program communication possible quickly and easily.</li>
        </ul>
        <h3>Disadvantages</h3>
        <ul>
            <li value="1">Can be a slow when transferring large datasets.</li>
            <li value="2">Programs may not have a useful user interface.</li>
        </ul>
        <h3>Recommendation</h3>
        <p>SPAWN is the easiest form of interprocess communication supported by IDL and allows accessing operating system commands directly.</p>
        <h2>Microsoft COM and ActiveX</h2>
        <p>IDL supports the inclusion of COM objects and ActiveX controls within IDL applications running on Microsoft Windows systems by encapsulating the object or control in an IDL object. Full access to the COM object or ActiveX control’s methods is available in this manner, allowing you to incorporate features not available in IDL into IDL programs. For more information, see  “Overview: COM and ActiveX in IDL” (IDL Connectivity Bridges).</p>
        <h3>Advantages</h3>
        <ul>
            <li value="1">Integrates easily with an important interprocess communication mechanism under Microsoft Windows.</li>
            <li value="2">May support a higher level interface than the function call interfaces supported by the remaining options.</li>
            <li value="3">Only supported under Microsoft Windows.</li>
        </ul>
        <h3>Recommendation</h3>
        <p>Incorporate COM objects or ActiveX controls into your Windows-only IDL application if doing so provides functionality you cannot easily duplicate in IDL.</p>
        <p>Use the IDL ActiveX control if you are writing a Windows-only application in a language that supports ActiveX and you wish to use IDL to perform computation or graphics within a framework established by this other application.</p>
        <h2>Sun Java</h2>
        <p>IDL also supports the inclusion of Java objects within IDL applications by encapsulating the object or control in an IDL object. Full access to the Java object is available in this manner, allowing you to incorporate features not available in IDL into IDL programs. For more information, see Chapter 5, “Using Java Objects in IDL” (IDL Connectivity Bridges).</p>
        <h3>Advantages</h3>
        <ul>
            <li value="1">Integrates easily with all types of Java code.</li>
            <li value="2">Can easily leverage existing Java objects into IDL.</li>
        </ul>
        <h3>Disadvantages</h3>
        <ul>
            <li value="1">Only supported under Microsoft Windows, Linux, Solaris, and Macintosh platforms supported in IDL.</li>
        </ul>
        <h3>Recommendation</h3>
        <p>Incorporate Java objects into your IDL application if doing so provides functionality you cannot easily duplicate in IDL.</p>
        <h2>UNIX Remote Procedure Calls (RPCs)</h2>
        <p>UNIX platforms can use Remote Procedure Calls (RPCs) to facilitate communication between IDL and other programs. IDL is run as an RPC server and your own program is run as a client. IDL’s RPC functionality is documented in <a href="../Remote Procedure Calls/RPC.htm">Remote Procedure Calls</a>.</p>
        <h3>Advantages</h3>
        <ul>
            <li value="1">Code executes in a process other than the one running IDL, possibly on another machine, providing robustness and protection in a distributed framework.</li>
            <li value="2">API is similar to that employed by Callable IDL, making it reasonable to switch from one to the other.</li>
            <li value="3">Possibility of overlapped execution on a multi-processor system.</li>
        </ul>
        <h3>Disadvantages</h3>
        <ul>
            <li value="1">Complexity of managing RPC servers.</li>
            <li value="2">Bandwidth limitations of network for moving large amounts of data.</li>
            <li value="3">Only supported under UNIX.</li>
        </ul>
        <h3>Recommendation</h3>
        <p>Use RPC if you are coding in a distributed UNIX-only environment and the amount of data being moved is reasonable on your network. <a href="../Using CALL_EXTERNAL/CALL_EXTERNAL.htm">CALL_EXTERNAL</a> might be more appropriate for especially simple tasks, or if the external code is not easily converted into an RPC server, or you lack RPC experience and knowledge.</p>
        <h2>CALL_EXTERNAL</h2>
        <p>IDL’s <a href="../../Reference Material/C/CALL_EXTERNAL.htm">CALL_EXTERNAL</a> function loads and calls routines contained in shareable object libraries. IDL and the called routine share the same memory and data space. <b>CALL_EXTERNAL</b> is much easier to use than either system routines (<a href="../Adding System Routines/LinkImage.htm">LINKIMAGE</a>, <a href="../Adding System Routines/DLM.htm">DLMs</a>) or Callable IDL and is often the best (and simplest) way to communicate with other programs. <b>CALL_EXTERNAL</b> is also supported on all IDL platforms.</p>
        <p>While many of the topics in this book can enhance your understanding of <b>CALL_EXTERNAL</b>, specific documentation and examples can be found in “Using CALL_EXTERNAL” and the reference documentation for <a href="../../Reference Material/C/CALL_EXTERNAL.htm">CALL_EXTERNAL</a>.</p>
        <h3>Advantages</h3>
        <ul>
            <li value="1">Allows calling arbitrary code written in other languages.</li>
            <li value="2">Requires little or no understanding of IDL internals.</li>
        </ul>
        <h3>Disadvantages</h3>
        <ul>
            <li value="1">Errors in coding can easily corrupt the IDL program.</li>
            <li value="2">Requires understanding of system programming, compiler, and linker.</li>
            <li value="3">Data must be passed to and from IDL in precisely the correct type and size or memory corruption and program errors will result.</li>
            <li value="4">System and hardware dependent, requiring different binaries for each target system.</li>
        </ul>
        <h3>Recommendation</h3>
        <p>Use <b>CALL_EXTERNAL</b> to call code written for general use in another language (that is, without knowledge of IDL internals). For safety, you should call your <b>CALL_EXTERNAL</b> functions within special IDL procedures or functions that do error checking of the inputs and return values. In this way, you can reduce the risks of corruption and give your callers an appropriate IDL-like interface to the new functionality. If you use this method to incorporate external code into IDL, We highly recommend that you also use the <a href="../../Reference Material/M/MAKE_DLL.htm">MAKE_DLL</a> procedure and the <b>AUTO_GLUE</b> keyword to <b>CALL_EXTERNAL</b>.</p>
        <p>If you lack knowledge of IDL internals, <b>CALL_EXTERNAL</b> is the best way to add external code quickly. Programmers who do understand IDL internals will often write a system routine instead to gain flexibility and full integration into IDL.</p>
        <h2>IDL System Routine (LINKIMAGE, DLMs)</h2>
        <p>It is possible to write system routines for IDL using a compiled language such as C. Such routines are written to have the standard IDL calling interface, and are dynamically linked, as with <b>CALL_EXTERNAL</b>. They are more difficult to write, but more flexible and powerful. System routines provide access to variables and other objects inside of IDL.</p>
        <h3>Advantages</h3>
        <ul>
            <li value="1">This is the most fully integrated option. It allows you to write IDL system routines that are indistinguishable from those written by<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>.</li>
            <li value="2">In use, system routines are very robust and fault tolerant.</li>
            <li value="3">Allows direct access to IDL user variables and other important data structures.</li>
        </ul>
        <h3>Disadvantages</h3>
        <ul>
            <li value="1">All the disadvantages of CALL_EXTERNAL.</li>
            <li value="2">Requires in-depth understanding of IDL internals.</li>
        </ul>
        <h3>Recommendation</h3>
        <p>Use system routines if you require the highest level of integration of your code into the IDL system. UNIX users with RPC experience should consider using RPCs to get the benefits of distributed processing. If your task is sufficiently simple or you do not have the desire or time to learn IDL internals, CALL_EXTERNAL is an efficient way to get the job done.</p>
        <h2>Callable IDL</h2>
        <p>IDL is packaged in a shareable form that allows other programs to call IDL as a subroutine. This shareable portion of IDL can be linked into your own programs. This use of IDL is referred to as <a href="../Callable IDL/CallableIDL.htm">Callable IDL</a> to distinguish it from the more usual case of calling your code from IDL via <b>CALL_EXTERNAL</b> or as a system routine (<a href="../../Reference Material/L/LINKIMAGE.htm">LINKIMAGE</a>, <a href="../../Reference Material/D/DLM_LOAD.htm">DLM</a>).</p>
        <p>This book contains the information necessary to successfully call IDL from your own code.</p>
        <h3>Advantages</h3>
        <ul>
            <li value="1">Supported on all systems.</li>
            <li value="2">Allows extremely low level access to IDL.</li>
        </ul>
        <h3>Disadvantages</h3>
        <ul>
            <li value="1">All the disadvantages of <b>CALL_EXTERNAL</b> or IDL system routines.</li>
            <li value="2">IDL imposes some limitations on programming techniques that your program can use.</li>
        </ul>
        <h3>Recommendation</h3>
        <p>Most platforms offer a specialized method to call other programs that might be more appropriate. Windows users should consider the ActiveX control or COM component. UNIX users should consider using the IDL RPC server. If these options are not appropriate for your task and you wish to call IDL from another program, then use Callable IDL.</p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>