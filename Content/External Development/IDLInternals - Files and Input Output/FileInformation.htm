<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Additional Topics|External Development Guide|IDLInternals - Files and Input Output">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>File Information</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../../OtherTopics.htm">Additional Topics</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../EDG.htm">External Development Guide</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="FilesIO.htm">IDLInternals - Files and Input Output</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">File Information</span>
        </div>
        <h1><a name="kanchor5488"></a>File Information</h1>
        <p>IDL maintains a file table in which it keeps a file descriptor for each file opened with <b>IDL_FileOpen()</b>. This table is indexed by the file Logical Unit Number, or LUN. These are the same LUNs IDL users use.</p>
        <p>The <b>IDL_FileStat()</b> function is used to get information about a file.</p>
        <h2 class="API">IDL_FileStat()</h2>
        <p class="Code">void IDL_FileStat(int unit, IDL_FILE_STAT *stat_blk)</p>
        <h3>unit</h3>
        <p>The logical unit number (LUN) of the file unit to be checked. This function should only be called on file units that are known to be open.</p>
        <h3>stat_blk</h3>
        <p>A pointer to an <b>IDL_FILE_STAT</b> struct to be filled in with information about the file. The information returned is valid only as long as the file remains open. You must not access the fields of an <b>IDL_FILE_STAT</b> once the file it refers to has been closed. This struct has the definition:</p>
        <p class="Code">typedef struct { </p>
        <p class="Code_Indented">char *name; </p>
        <p class="Code_Indented">short access;</p>
        <p class="Code_Indented">IDL_SFILE_FLAGS_T flags;</p>
        <p class="Code_Indented">FILE *fptr;</p>
        <p class="Code">} IDL_FILE_STAT;</p>
        <p>The fields of this struct are listed below:</p>
        <h4>name</h4>
        <p>A pointer to a null-terminated string containing the name the file was opened with.</p>
        <h4>access</h4>
        <p>A bit mask describing the access allowed to the file. The allowed bit values are:</p>
        <ul>
            <li value="1">IDL_OPEN_R: The file is open for input.</li>
            <li value="2">IDL_OPEN_W: The file is open for output.</li>
            <li value="3">IDL_OPEN_TRUNC: The file was truncated when it was opened. This implies that <b>IDL_OPEN_W</b> is also set.</li>
            <li value="4">IDL_OPEN_APND: The file was opened with the file pointer set just past the last byte of data in the file (the file is open for appending).</li>
        </ul>
        <h4>flags</h4>
        <p>A bit mask that gives special information about the file. The defined bits are:</p>
        <ul>
            <li value="1"><b>IDL_F_ISATTY</b>: The file is a terminal.</li>
            <li value="2"><b>IDL_F_ISAGUI</b>: The file is a Graphical User Interface.</li>
            <li value="3"><b>IDL_F_NOCLOSE</b>: The CLOSE command will refuse to close the file.</li>
            <li value="4"><b>IDL_F_MORE</b>: If the file is a terminal, output is sent through a pager similar to the UNIX more command. Details on this pager are not included in this document, and it is therefore not available for general use.</li>
            <li value="5"><b>IDL_F_XDR</b>: The file is read/written using XDR (eXternal Data Representation).</li>
            <li value="6"><b>IDL_F_DEL_ON_CLOSE</b>: The file will be deleted when it is closed.</li>
            <li value="7"><b>IDL_F_SR</b>: The file is a SAVE/RESTORE file.</li>
            <li value="8"><b>IDL_F_SWAP_ENDIAN</b>: The file has opposite byte order than that of the current system.</li>
            <li value="9"><b>IDL_F_VAX_FLOAT</b>: Binary float and double are in VAX F and D format.</li>
            <li value="10"><b>IDL_F_COMPRESS</b>:	The file is in compressed gzip format. If <b>IDL_F_SR</b> is set (the file is a SAVE/RESTORE file), the file contains zlib compressed data.</li>
            <li value="11"><b>IDL_F_UNIX_F77</b>:	The file is read/written in the format used by the UNIX Fortran (f77) compiler for unformatted binary data.</li>
            <li value="12"><b>IDL_F_PIPE</b>:	The file is a bi-directional data path connecting IDL to a child process created by the SPAWN procedure.</li>
            <li value="13"><b>IDL_F_UNIX_RAWIO</b>: No application level buffering will be performed for the file and all data transfers will go directly to the operating system for processing (e.g. read() and write() system calls under UNIX, Windows system-level API for MS Windows). Note that setting this bit does not guarantee that data will be written to the file immediately, because the operating system may buffer the data. This bit value was formerly called <b>IDL_F_UNIX_NOSTDIO</b>. <b>IDL_F_UNIX_RAWIO</b> is the preferred form, but both names are supported.</li>
            <li value="14"><b>IDL_F_UNIX_SPECIAL</b>: The file is a UNIX device special file such as a pipe. This differs from <b>IDL_F_PIPE</b> because it applies to any file, not only those opened with the <a href="../Miscellaneous EDG Topics/UsingSpawnAndPipes.htm">SPAWN</a> procedure.</li>
            <li value="15"><b>IDL_F_STDIO</b>: Use the C standard I/O library (stdio) to perform I/O on this file instead of any other native OS API that might be otherwise used. People intending to access IDL files via their own code should specify this flag if they intend to access the file from their external code as a stdio stream.</li>
            <li value="16"><b>IDL_F_SOCKET</b>: File is an internet TCP/IP socket.</li>
        </ul>
        <h4>fptr</h4>
        <p>The stdio stream file pointer to the file. This field can be used with standard library functions to perform I/O. This field is always valid, although you shouldn’t use it if the file is an XDR file. You can check for this by looking for the <b>IDL_F_XDR</b> bit in the flags field.</p>
        <p>If the file is not opened with the <b>IDL_F_STDIO</b> flag, fptr may be returned as an unusable NULL pointer, reflecting the fact that IDL is not using stdio to perform I/O on the file. If access to a valid fptr is important to your application, you should be sure to specify <b>IDL_F_STDIO</b> to the <b>extra_flags</b> argument to <b>IDL_FileOpen</b>, or use the <b>STDIO</b> keyword to <b>OPEN</b> if opening the file from the IDL user level.</p>
        <p>In addition to the requirement to set the <b>IDL_F_STDIO</b> flag, you should be aware that IDL buffers I/O at a layer above the stdio package. If your code does I/O directly to a file that is also being written to from the IDL user level, the IDL buffer may cause data to be written to the file in a different order than you expect. There are several approaches you can take to prevent this:</p>
        <ul>
            <li value="1">Tell IDL not to buffer, by opening the file from the IDL user level and specifying a value of -1 to the BUFSIZE keyword.</li>
            <li value="2">Disable stdio buffering by calling the stdio setbuf() function.</li>
            <li value="3">Ensure that you flush IDL’s buffer before you do any Input/Output, as discussed in <a href="FlushBuffData.htm">Flushing Buffered Data</a>.</li>
        </ul>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>