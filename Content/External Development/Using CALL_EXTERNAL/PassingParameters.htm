<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Additional Topics|External Development Guide|Using CALL_EXTERNAL">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Passing Parameters</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../../OtherTopics.htm">Additional Topics</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../EDG.htm">External Development Guide</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="CALL_EXTERNAL.htm">Using CALL_EXTERNAL</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Passing Parameters</span>
        </div>
        <h1><a name="kanchor5428"></a>Passing Parameters</h1>
        <p>IDL calls routines within a shareable library using the IDL portable calling convention, in which the routine is passed two arguments:</p>
        <p><b>argc</b>
        </p>
        <p>A count of the number of arguments being passed to the routine</p>
        <p><b>argv</b>
        </p>
        <p>An array of <b>argc</b> memory pointers, which are the addresses of the arguments (by reference) or the actual value of the argument (by value) depending on the types of arguments passed to <b>CALL_EXTERNAL</b> and the setting of the VALUE keyword to that function. You should note that while all types of data can be passed by reference, there are limitations on data types that can be passed by value, as described in the documentation for <a href="../../Reference Material/C/CALL_EXTERNAL.htm">CALL_EXTERNAL</a> (IDL Reference Guide).</p>
        <p>The <b>CALL_EXTERNAL</b> portable convention is necessary because IDL, like any program written in a compiled language, cannot generate arbitrary function calls at runtime. Only calls to interfaces that were known to it when it was compiled are possible. Naturally, most existing C functions are not written to use this interface. Calling such functions typically requires IDL users to write glue functions, the sole purpose of which is to be called by <b>CALL_EXTERNAL</b> with the portable convention, and then to take the arguments and pass them to the real target function using the natural interface for that function. The <b>AUTO_GLUE</b> keyword to <b>CALL_EXTERNAL</b> can be used to generate, compile, and load such glue routines automatically and on demand, without requiring user intervention. Auto Glue is described in <a href="UsingAutoGlue.htm">Using Auto Glue</a>. <b>AUTO_GLUE</b> does not eliminate the need for, or use of, the portable convention, but it can relieve the IDL user of the requirement to handle it explicitly. The end result is that calling existing function interfaces is easier to do, and less error prone.</p>
        <p>Routines called by <b>CALL_EXTERNAL</b> with the portable convention are defined with a prototype similar to the following:</p>
        <p class="Code">return_type example(int argc; void *argv[])</p>
        <p>where return_type is one of the data types which <b>CALL_EXTERNAL</b> can return. If this return_type is not IDL_LONG, a keyword must be used in the <b>CALL_EXTERNAL</b> call to indicate the actual type of the result.</p>
        <p>The parameter argc gives the number of arguments passed to the external routine by <b>CALL_EXTERNAL</b> in the <b>argv</b> array, while <b>argv</b> is an array containing the arguments. Arguments are passed either by value or by reference. Those passed by value are copied directly into the argv array, with the exception of scalar strings, which place a pointer to a null-terminated string in argv[i]. All arrays are passed by reference. Scalar items passed by reference (the default) place a pointer to the datum in <b>argv[i]</b>. Strings and string arrays passed by reference place a pointer to an <b>IDL_STRING</b> structure in <b>argv[i]</b>. This structure is defined as follows:</p>
        <p class="Code">typedef struct {</p>
        <p class="Code_Indented">IDL_STRING_SLEN_T slen;	/* Length of string */</p>
        <p class="Code_Indented">short stype;	/* type of string:	(0) static, (!0) dynamic */</p>
        <p class="Code_Indented">char *s;	/* Addr of string, invalid if slen == 0.	*/</p>
        <p class="Code">} IDL_STRING;</p>
        <p>See <a href="../../Reference Material/C/CALL_EXTERNAL.htm">CALL_EXTERNAL</a>  for additional details about passing parameters by value.</p>
        <p>It is important to note that IDL integer variables correspond to a 16-bit integer (a C signed short integer). For example, an integer variable could be defined in an IDL routine as follows:</p>
        <p class="Code">IDL&gt; A = 5	;default type of integer, not LONG</p>
        <p>The variable could then be passed by reference in a <b>CALL_EXTERNAL</b> call. The declaration and cast statement in the called C routine should be:</p>
        <p class="Code">short *a;</p>
        <p class="Code">a = (short *) argv[0];</p>
        <p>or</p>
        <p class="Code">IDL_INT *a;</p>
        <p class="Code">a = (IDL_INT *) argv[0];</p>
        <p>IDL_INT corresponds to a C short (16-bit integer), so either form is correct. The corresponding type in Fortran would be INTEGER*2.</p>
        <div class="mp_footer">Â© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>