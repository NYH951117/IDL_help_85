<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Additional Topics|External Development Guide|IDLInternals - Keyword Processing">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Overview of IDL Keyword Processing</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">  <![CDATA[ ]]></span><a class="MCBreadcrumbsLink" href="../../OtherTopics.htm">Additional Topics</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../EDG.htm">External Development Guide</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="IDLKeywordProcessing.htm">IDLInternals - Keyword Processing</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Overview of IDL Keyword Processing</span>
        </div>
        <h1>Overview of IDL Keyword Processing</h1>
        <p>IDL keyword processing can seem confusing at first glance, due to the interrelated data structures involved. However, as the examples that follow in this chapter will show, the concepts involved are relatively straightforward once you have seen and understood a concrete example such as <a href="KWExamples.htm">Keyword Examples</a>.</p>
        <p>Following is a skeleton of a system routine that accepts keyword arguments. These elements must be present in any such system routine:</p>
        <p class="Code">void keyword_sysrtn_skeleton(int argc, IDL_VPTR *argv, char *argk)</p>
        <p class="Code">{</p>
        <p class="Code">typedef struct {</p>
        <p class="Code">IDL_KW_RESULT_FIRST_FIELD; /* Must be first entry in struct */</p>
        <p class="Code">...	/* Variables specific to your keywords go here */</p>
        <p class="Code">} KW_RESULT;</p>
        <p class="Code">static IDL_KW_PAR kw_pars[] = {</p>
        <p class="Code">&#160;</p>
        <p class="Code">/*</p>
        <p class="Code">* Keyword definitions for the keywords you accept go here,</p>
        <p class="Code">* one definition per keyword. The keyword definitions refer</p>
        <p class="Code">* to fields within the KW_RESULT type defined above.</p>
        <p class="Code">*/</p>
        <p class="Code">...</p>
        <p class="Code">&#160;</p>
        <p class="Code">{ NULL }	/* List must be NULL terminated */</p>
        <p class="Code">&#160;</p>
        <p class="Code">};</p>
        <p class="Code">KW_RESULT kw;	/* Variable which will hold the keyword values */</p>
        <p class="Code">&#160;</p>
        <p class="Code">(void) IDL_KWProcessByOffset(argc, argv, argk, kw_pars, </p>
        <p class="Code">&#160;&#160;&#160;(IDL_VPTR *) 0, 1, &amp;kw);</p>
        <p class="Code">/* The body of your routine */</p>
        <p class="Code">&#160;</p>
        <p class="Code">IDL_KW_FREE;</p>
        <p class="Code">}</p>
        <p>IDL keyword processing is made up of the following data structures and steps:</p>
        <ul>
            <li value="1">A NULL terminated array of <a href="IDL_KW_PAR.htm">IDL_KW_PAR</a> structures must be present. Each entry in this array describes the keyword processing required for a single keyword.</li>
            <li value="2">If a keyword represents an input-only, by-value array, the <b>IDL_KW_PAR</b> structure that describes it points at an auxiliary <a href="IDL_KW_ARR_DESC.htm">IDL_KW_ARR_DESC_R</a> structure that supplies the additional array specific information.</li>
            <li value="3">The system routine must declare a local type definition named KW_RESULT, and a variable of this type named kw. The <b>KW_RESULT</b> type contains all of the data fields that will be set as a result of processing the keywords described by the <b>IDL_KW_PAR</b> and <b>IDL_KW_ARR_DESC_R</b> structures described above. The <b>IDL_KW_PAR</b> and <b>IDL_KW_ARR_DESC_R</b> structures refer to the fields of the KW_RESULT structure by their offset from the beginning of the structure. The <b>IDL_KW_OFFSETOF()</b> macro is used to compute this offset.</li>
            <li value="4">The system routine calls the <a href="ProcessingKeywords.htm">IDL_KWProcessByOffset()</a> function, passing it the address of the <b>IDL_KW_PAR</b> array, and the <b>KW_RESULT</b> variable (kw).</li>
            <li value="5">After <b>IDL_KWProcessByOffset()</b> is called, the <b>KW_RESULT</b> structure (kw) contains the results, which can be accessed freely by the system routine.</li>
            <li value="6">Before returning, the system routine must invoke the <b>IDL_KW_FREE</b> macro. This macro ensures that any dynamic memory used by <b>IDL_KWProcessByOffset()</b> is properly released.</li>
            <li value="7">System routines are not required to, and generally do not, call <b>IDL_KW_FREE</b> before throwing errors using <b>IDL_Message()</b> with the <b>IDL_MSG_LONGJMP</b> or <b>IDL_MSG_IO_LONGJMP</b> action codes. In these cases, the IDL interpreter automatically knows to release the resources used by keyword processing on your behalf.</li>
        </ul>
        <div class="mp_footer">Â© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>