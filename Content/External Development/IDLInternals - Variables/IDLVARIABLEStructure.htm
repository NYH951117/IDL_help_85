<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Additional Topics|External Development Guide|IDLInternals - Variables">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>The IDL_VARIABLE Structure</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../../OtherTopics.htm">Additional Topics</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../EDG.htm">External Development Guide</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="IDLInternalVariables.htm">IDLInternals - Variables</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">The IDL_VARIABLE Structure</span>
        </div>
        <h1><a name="kanchor5451"></a>The IDL_VARIABLE Structure</h1>
        <p>IDL variables are represented by <b>IDL_VARIABLE</b> structures. The definition of <b>IDL_VARIABLE</b> is as follows:</p>
        <p class="Code">typedef struct { </p>
        <p class="Code_Indented">UCHAR type; </p>
        <p class="Code_Indented">UCHAR flags;</p>
        <p class="Code_Indented">IDL_ALLTYPES value;</p>
        <p class="Code">}	IDL_VARIABLE;</p>
        <p>An <b>IDL_VPTR</b> is a pointer to an <b>IDL_VARIABLE</b> structure:</p>
        <p class="Code">typedef IDL_VARIABLE *IDL_VPTR;</p>
        <p>The <b>IDL_ALLTYPES</b> union is defined as:</p>
        <p class="Code">typedef union {</p>
        <p class="Code_Indented">UCHAR c;	&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Scalar IDL_TYP_BYTE */ </p>
        <p class="Code_Indented">IDL_INT i;	&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Scalar IDL_TYP_INT */</p>
        <p class="Code_Indented">IDL_UINT ui;	&#160;&#160;&#160;&#160;&#160;&#160;/* Unsigned short integer value */</p>
        <p class="Code_Indented">IDL_LONG l;	&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Scalar IDL_TYP_LONG */ </p>
        <p class="Code_Indented">IDL_ULONG ul;	&#160;&#160;&#160;&#160;&#160;/* Unsigned long value */ </p>
        <p class="Code_Indented">IDL_LONG64 l64;	&#160;&#160;&#160;/* 64-bit integer value */</p>
        <p class="Code_Indented">IDL_ULONG64 ul64;	&#160;/* Unsigned 64-bit integer value */</p>
        <p class="Code_Indented">float f;	&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Scalar IDL_TYP_FLOAT */ </p>
        <p class="Code_Indented">double d;	&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Scalar IDL_TYP_DOUBLE */ </p>
        <p class="Code_Indented">IDL_COMPLEX cmp;	&#160;&#160;/* Scalar IDL_TYP_COMPLEX */ </p>
        <p class="Code_Indented">IDL_DCOMPLEX dcmp; /* Scalar IDL_TYP_DCOMPLEX */ </p>
        <p class="Code_Indented">IDL_STRING str;	&#160;&#160;&#160;/* Scalar IDL_TYP_STRING */ </p>
        <p class="Code_Indented">IDL_ARRAY *arr;	&#160;&#160;&#160;/* Pointer to array descriptor */ </p>
        <p class="Code_Indented">IDL_SREF s;	&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Structure descriptor */ </p>
        <p class="Code_Indented">IDL_HVID hvid;	&#160;&#160;&#160;&#160;/* Heap variable identifier */</p>
        <p class="Code">}IDL_ALLTYPES;</p>
        <p>The basic scalar types are contained directly in this union, while arrays and structures are represented by the <b>IDL_ARRAY</b> and <b>IDL_SREF</b> structures that are discussed later in this chapter. The type field of the <b>IDL_VARIABLE</b> structure contains one of the type codes discussed in “Type Codes” on page 114. When a variable is initially created, it is given the type code <b>IDL_TYP_UNDEF</b>, indicating that the variable contains no value.</p>
        <p>The <b>flags</b> field is a bit mask that specifies information about the variable. As a programmer adding code to the IDL system, you will rarely need to set bits in this mask. These bits are set by whatever portion of IDL created the variable. You can check them to make sure the characteristics of the variable fit the requirements of your routine (see “Checking Arguments”).</p>
        <p>The defined bits in the mask are:</p>
        <h3>IDL_V_CONST</h3>
        <p>If this flag is set, the variable is actually a constant. This means that storage for the <b>IDL_VARIABLE</b> resides inside the code section of the user procedure or function that used it. The IDL compiler generates such <b>IDL_VARIABLE</b>s when an expression involving a constant occurs. For example, the IDL statement:</p>
        <p class="Code">PRINT, 23 * A</p>
        <p>causes the compiler to generate a constant for the “23”. You must not change the value of this type of “variable”.</p>
        <h3>IDL_V_TEMP</h3>
        <p>If this flag is set, the variable is a temporary variable. IDL maintains a pool of nameless <b>IDL_VARIABLE</b>s that can be checked out and returned as needed. Such variables are used by the interpreter to temporarily store the results of expressions on the stack. For example, the statement:</p>
        <p class="Code">PRINT, 2 * 3</p>
        <p>will cause the interpreter to go through a sequence of events similar to:</p>
        <ol>
            <li value="1">  Push a constant variable for the 2 on the stack.</li>
            <li value="2">  Push a constant variable for the 3 on the stack.</li>
            <li value="3">Allocate a temporary variable, pop the two constants from the stack, perform the multiplication with the result going into the temporary variable.</li>
            <li value="4">  Push the temporary variable onto the stack.</li>
            <li value="5">Call the PRINT system procedure specifying one argument.</li>
            <li value="6">  Remove the argument to PRINT from the stack, and return the temporary variable.</li>
        </ol>
        <p>Temporary variables are also used inside user procedures and functions. See <a href="TemporaryVariables.htm">Temporary Variables</a> .</p>
        <h3>IDL_V_ARR</h3>
        <p>If this flag is set, the variable is an array, and the value field of the <b>IDL_VARIABLE</b> points to an array descriptor.</p>
        <h3>IDL_V_FILE</h3>
        <p>If this flag is set, the variable is a file variable, as created by IDL’s <a href="../../Reference Material/A/ASSOC.htm">ASSOC</a> function.</p>
        <h3>IDL_V_DYNAMIC</h3>
        <p>If this flag is set, the memory used by this <b>IDL_VARIABLE</b> is dynamically allocated. This bit is set for arrays, structures, and for variables of <b>IDL_TYP_STRING</b> (because the memory referenced via the string pointer is dynamic).</p>
        <h3>IDL_V_STRUCT</h3>
        <p>If this flag is set, the variable is a structure, and the value field of the <b>IDL_VARIABLE</b> points to the structure descriptor. For implementation reasons, all structure variables are also arrays, so <b>IDL_V_STRUCT</b> also implies I<b>DL_V_ARR</b>. Therefore, it is impossible to have a scalar structure. However, single-element structure arrays are quite common.</p>
        <p>Because structure variables have their type field set to <b>IDL_TYP_STRUCT</b>, the <b>IDL_V_STRUCT</b> bit is redundant. It exists for efficiency reasons.</p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>