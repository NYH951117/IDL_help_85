<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../" data-mc-conditions="" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Language|Objects|Operator Overloading">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Operator Overloading Summary</title>
        <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">  <![CDATA[ ]]></span><a class="MCBreadcrumbsLink" href="../IDL Programming.htm">Language</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../Object Classes/ref_part2.htm">Objects</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbsSelf">Operator Overloading</span><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Operator Overloading Summary</span>
        </div>
        <h1><a name="obj_operators_3013489070_998687"></a><a name="obj_operators_3013489070_39858"></a>Operator Overloading Summary</h1>
        <p>Combining routines and code in objects can be a powerful programming technique, but sometimes it is convenient to treat objects like basic types. For example, to add the properties of two objects, object-oriented programming requires you to call the property access methods, add the returned values, and store the value (possibly in the property of a third object that you must create). Operator overloading allows you to move this potentially complex code into an object method and invoke it using standard operator syntax.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>To use object operator overloading, at least one of the operands must be an object. In the case of unary operators, the operand must be a scalar object that defines the overloaded operator method. For binary operators, at least one of the operands must be a scalar object that defines the overloaded operator method, and the second operand can be of any type.</p>
        <p>For example, suppose you have an object class named <code>lengthObject</code>, each instance of which has a LENGTH property. Given two <code>lengthObject</code>s, you could do the following to create a third object whose LENGTH property was equal to the sum of the first two:</p>
        <p class="Code">oLengthC = OBJ_NEW('lengthObject')</p>
        <p class="Code">oLengthA-&gt;GETPROPERTY, LENGTH = lengthA</p>
        <p class="Code">oLengthB-&gt;GETPROPERTY, LENGTH = lengthB</p>
        <p class="Code">oLengthC-&gt;SETPROPERTY, LENGTH = lengthA + lengthB</p>
        <p>If you perform this operation often, it might make sense to create an object method that handles the details of getting and setting properties. You might, for example, create an <code>AddLengths</code> method to the <code>lengthObject</code> class as follows:</p>
        <p class="Code">PRO lengthObject::AddLengths, oLengthA, oLengthB</p>
        <p class="Code">&#160;&#160;&#160;oLengthA-&gt;GETPROPERTY, LENGTH = lengthA</p>
        <p class="Code">&#160;&#160;&#160;oLengthB-&gt;GETPROPERTY, LENGTH = lengthB</p>
        <p class="Code">&#160;&#160;&#160;self-&gt;SETPROPERTY, LENGTH = lengthA + lengthB</p>
        <p class="Code">END</p>
        <p>With this method in place, the code to add the lengths looks like:</p>
        <p class="Code">oLengthC = OBJ_NEW('lengthObject')</p>
        <p class="Code">oLengthC-&gt;AddLengths, oLengthA, oLengthB</p>
        <p>Object operator overloading offers an even simpler alternative. By writing an operator overload method for the <code>lengthObject</code>’s plus (+) operator rather than the <code>AddLengths</code> method, we can add length objects as if they were simple variables:</p>
        <p class="Code">oLengthC = oLengthA + oLengthB</p>
        <p>The custom-written overloaded plus method would handle the details of reading and writing to the given objects, creating a new <code>lengthObject</code>, and storing the sum in the new object’s LENGTH property. In this example, the operator overload method might look something like this:</p>
        <p class="Code">FUNCTION lengthObject::_overloadPlus, oLengthA, oLengthB</p>
        <p class="Code">&#160;&#160;&#160;oLengthC = OBJ_NEW('lengthObject')</p>
        <p class="Code">&#160;&#160;&#160;oLengthA-&gt;GETPROPERTY, LENGTH = lengthA</p>
        <p class="Code">&#160;&#160;&#160;oLengthB-&gt;GETPROPERTY, LENGTH = lengthB</p>
        <p class="Code">&#160;&#160;&#160;oLengthC-&gt;SETPROPERTY, LENGTH = lengthA + lengthB</p>
        <p class="Code">&#160;&#160;&#160;RETURN, oLengthC</p>
        <p class="Code">END</p>
        <p>By overloading the + operator for this object class, we can move the complexity of the code that adds the LENGTH values into the object class itself, and dramatically simplify the higher-level code.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Not all of IDL’s standard operators can be overloaded. See <a href="Overloadable_Operators.htm#obj_operators_3013489070_998698">Overloadable Operators </a>for details.</p>
        <h2 class="API">Overloading Informational Routines</h2>
        <p>When the Implied Print, PRINT/PRINTF, HELP, SIZE, and N_ELEMENTS routines are called with overloaded objects, the routines query the object’s appropriate <code>_overload</code> method for the information to return. You can write your own <code>_overload</code> methods to change what information these routines return. For discussions on overloading these routines, see <a href="Overloading_the_SIZE_and.htm#obj_operators_3013489070_1005910">Overloading the SIZE and N_ELEMENTS Functions</a> and <a href="Overloading_the_HELP_and.htm#obj_operators_3013489070_1008312">Overloading the Help and Print Procedures</a>.</p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>