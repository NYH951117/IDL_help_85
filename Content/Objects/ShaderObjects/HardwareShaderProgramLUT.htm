<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Hardware Shader Program for LUT&#160;Shader</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <h1>Hardware Shader Program for LUT&#160;Shader</h1>
        <p>This example reads the shader source from text files. The vertex shader (<code>LUTShaderVert.txt</code> located in <code>examples/doc/shaders</code>) contains the following code:</p>
        <p>void main (void)</p>
        <p class="Code">{</p>
        <p class="Code_Indented">gl_TexCoord[0] = gl_MultiTexCoord0;</p>
        <p class="Code_Indented">gl_Position = ftransform();</p>
        <p class="Code">}</p>
        <p>This basic vertex program passes along the texture coordinate and then applies a transform to the vertex to correctly position it on the screen. The <code>gl_TexCoord[0]</code> is a varying variable that transmits data from the vertex program to the fragment shader program.</p>
        <p>The fragment shader (<code>LUTShaderFrag.txt</code> located in <code>examples/doc/shaders</code>) contains the following code:</p>
        <p class="Code">uniform sampler2D _IDL_ImageTexture;</p>
        <p class="Code">uniform sampler1D lut;</p>
        <p class="Code">&#160;</p>
        <p class="Code">void main(void)</p>
        <p class="Code">{</p>
        <p class="Code_Indented">float i = texture2D(_IDL_ImageTexture, gl_TexCoord[0].xy).r;</p>
        <p class="Code_Indented">gl_FragColor = texture1D(lut, i);</p>
        <p class="Code">}</p>
        <p>The fragment shader is where the lookup happens. The uniform variable, lut, which was defined in the IDL application using SetUniformVariable, contains the lookup table in a 1-D texture (of GLSL type sampler1D). As previously explained, the LUT</p>
        <p>is loaded into a texture map for efficiency.</p>
        <p>The <code>_IDL_ImageTexture</code> variable is a reserved uniform variable that provides access to the 2-D base image (of GLSL type sampler2D). When a shader object is associated with an IDLgrImage object, and the uniform variable is not defined using SetUniformVariable in the IDL application, the base image object (a texture mapped onto a rectangle) is stored in a reserved uniform variable named <code>_IDL_ImageTexture</code>. The base image is the IDLgrImage to which the shader is attached. If it is attached to more than one image, the base image is the one currently being shaded. Non-base images are those passed to the shader program using SetUniformVariable.</p>
        <p>Since more than one texture is used in the rendering of the image (the <code>_IDL_ImageTexture</code> base image texture and the LUT texture), this is referred to as multi-texturing.</p>
        <p>The GLSL<code> texture2D</code> procedure call reads the texel at the current texture coordinate. This procedure typically returns a floating point, four-element vector (containing red, green, blue, and alpha values). But with a greyscale image, the red, green, and blue values are the same, so the appending <i>.r</i> keeps only the red channel and assigns it to the float<i> i</i>.</p>
        <p>The GLSL <code>texture1D</code> procedure takes two parameters, the<i> lut</i> and<i> i</i> (the texture coordinate that instructs it which texel to sample). This value normally ranges from 0.0 to 1.0 (0.0 being the first texel, 1.0 the last). Since the value read from the image into<i> i</i> also normally ranges between 0.0 and 1.0, it is possible to use it directly as a texture coordinate to do the lookup.</p>
        <p>When performing a lookup on the CPU, you directly access the LUT array using the pixel value as the index. A pixel value of 0 corresponds to the first entry in the LUT and a pixel value of 255 corresponds to the last entry.</p>
        <p>However, in a shader program the texture coordinate lookup is possible because before a pixel reaches the fragment shader it is converted to floating point by OpenGL. In the case of an 8-bit greyscale image, the range is 0.0 to 1.0. That means a pixel with value 0 becomes 0.0 and 255 becomes 1.0. When doing the coordinate texture lookup on the GPU, the texture1D procedure does the lookup by using the converted pixel values where pixel value of 0 corresponds to the first LUT entry and a pixel value of 1.0 (converted from 255) corresponds to the last entry.</p>
        <h2>Assign LUT Shader Program to Shader Object</h2>
        <p>You need to supply the program code to the shader object so that it is available to the graphics card when it is needed. To accomplish this, you can use shader object properties VERTEX_PROGRAM_FILE and FRAGMENT_PROGRAM_FILE to associate external shader program components with the shader object.</p>
        <p>Add the following code to the bottom of your Init function:</p>
        <p class="Code">vertexFile=filepath('LUTShaderVert.txt', $</p>
        <p class="Code_Indented">SUBDIRECTORY=['examples','doc', 'shaders'])</p>
        <p class="Code">fragmentFile=filepath('LUTShaderFrag.txt', $</p>
        <p class="Code_Indented">SUBDIRECTORY=['examples','doc', 'shaders'])</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code">self-&gt;IDLgrShader::SetProperty, $</p>
        <p class="Code_Indented">VERTEX_PROGRAM_FILENAME=vertexFile, $</p>
        <p class="Code_Indented">FRAGMENT_PROGRAM_FILENAME=fragmentFile</p>
        <p>At this point, you can easily add image display code to your program and test your LUT shader. The result of applying one of IDLâ€™s pre-defined colortables appears in the following figure.</p>
        <p>
            <img src="../../images/Shaders_LUT_Example.png" />
        </p>
        <h2>Software Fallback for the LUT Shader</h2>
        <p>The following code performs the LUT lookup. When there is not sufficient hardware support for shaders or when the FORCE_FILTER keyword is set on initialization, the colortables changes result from the following code instead of a shader program. You will likely find that performance slows significantly.</p>
        <p class="Code">Function shader_lut_doc::Filter, Image</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Allocate return array of same dimension and type.</p>
        <p class="Code">sz = SIZE(Image)</p>
        <p class="Code">newImage = FLTARR(sz[1:3], /NOZERO)</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Get the LUT uniform variable.</p>
        <p class="Code">self-&gt;GetUniformVariable, 'lut', oLUT</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Read the LUT data from the 1-D image.</p>
        <p class="Code">oLUT-&gt;GetProperty, DATA=lut</p>
        <p class="Code_Indented">FOR y=0, sz[3]-1 DO BEGIN</p>
        <p class="Code_Indented">&#160;&#160;FOR x=0, sz[2]-1 DO BEGIN</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">&#160;&#160;; Read from the image.</p>
        <p class="Code_Indented">&#160;&#160;idr = Image[0,x,y]</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">&#160;&#160;; Convert from 0.0-1.0 back to 0-255.</p>
        <p class="Code_Indented">&#160;&#160;idr *= 255</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">&#160;&#160;; Get the number of image channels.</p>
        <p class="Code_Indented">&#160;&#160;szlut = SIZE(lut)</p>
        <p class="Code_Indented">&#160;&#160;IF szlut[0] EQ 1 THEN BEGIN</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">&#160;&#160;&#160;&#160;; Greyscale LUT, only 1 channel.</p>
        <p class="Code_Indented">&#160;&#160;&#160;&#160;grey = lut[idr]</p>
        <p class="Code_Indented">&#160;&#160;&#160;&#160;fgrey = FLOAT(grey) / 255.0</p>
        <p class="Code_Indented">&#160;&#160;&#160;&#160;newImage[0,x,y] = fgrey</p>
        <p class="Code_Indented">&#160;&#160;&#160;&#160;newImage[1,x,y] = fgrey</p>
        <p class="Code_Indented">&#160;&#160;&#160;&#160;newImage[2,x,y] = fgrey</p>
        <p class="Code_Indented">&#160;&#160;&#160;&#160;newImage[3,x,y] = 1.0</p>
        <p class="Code_Indented">&#160;&#160;ENDIF ELSE BEGIN</p>
        <p class="Code_Indented">&#160;&#160;&#160;&#160;;; RGB LUT.</p>
        <p class="Code_Indented">&#160;&#160;&#160;&#160;rgb = lut[*, idr]</p>
        <p class="Code_Indented">&#160;&#160;&#160;&#160;frgb = FLOAT(rgb) / 255.0</p>
        <p class="Code_Indented">&#160;&#160;&#160;&#160;newImage[0:2,x,y] = frgb</p>
        <p class="Code_Indented">&#160;&#160;&#160;&#160;newImage[3,x,y] = 1.0</p>
        <p class="Code_Indented">&#160;&#160;ENDELSE</p>
        <p class="Code">&#160;&#160;ENDFOR</p>
        <p class="Code">ENDFOR</p>
        <p class="Code">RETURN, newImage</p>
        <p class="Code">END</p>
        <p>IDL always passes the image to the Filter method in RGBA floating-point pixel-interleaved format, so you don't have to worry about a lot of input data combinations. IDL also clamps the data this function returns to the [0.0, 1.0] range and scales it to the correct pixel range, usually [0, 255], for your display device.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Uniform variables are, in a sense, free-form properties in the IDLgrShader superclass. Within the Filter method, accessing the lut texture map from the uniform variable maintains consistency since this is same place the hardware shader obtains it. This reduces the chance for confusion.</p>
        <p>At this point, you can test your work by writing a simple display program that loads your data into an IDLgrImage object, creates an instance of your<code> shader_lut_doc</code> object and attaches the LUT to your image object by setting the object reference of the shader in the SHADER property of IDLgrImage. You also need to set the FORCE_FILTER property on class initialization so that the filter fallback runs, even if you have shader hardware:</p>
        <p class="Code">oLUTshader = OBJ_NEW('shader_lut_doc', /FORCE_FILTER)</p>
        <p>&#160;</p>
        <div class="mp_footer">Â© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>