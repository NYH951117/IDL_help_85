<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Filter Chain Shaders</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <h1>Filter Chain Shaders</h1>
        <p>A series of image filtering shaders can be grouped and applied sequentially to an image. To do so, add each shader to an <a href="../../Object Classes/Graphics/IDLgrFilterChain.htm">IDLgrFilterChain</a> object, which is a specialized type of container designed to hold <a href="../../Object Classes/Graphics/IDLgrShader.htm">IDLgrShader</a> objects or objects that subclass from IDLgrShader. Then associate the IDLgrFilterChain object with the IDLgrImage object using the SHADER property. When the scene is drawn, the image data is modified by each shader program according to container order. The output from the first shader is processed by each subsequent shader until all shader programs have been applied. IDL then draws the result to the window.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>This functionality requires support for GLSL frame buffer object extension in addition to the standard hardware support required by IDLgrShader. See the IDLgrWindow::GetDeviceInfo methods’s FRAMEBUFFER_OBJECT_EXTENSION keyword for details).</p>
        <p>The following example creates an IDLgrFilterChain object and lets you add and remove individual <a href="../../Object Classes/Graphics/IDLgrShaderConvol3.htm">IDLgrShaderConvol3</a> objects, which provide the ability to apply sharpening, smoothing, and edge detection convolution filters to an image. Like the IDLgrShaderBytscl object, the pre-defined IDLgrShaderConvol3 object includes a software fallback that is automatically used when there is not sufficient hardware support for shader operations.</p>
        <p>See <a href="FilterChainExample.htm">Filter Chain Example</a>&#160;for more information and additional examples.</p>
        <h3>Example Code</h3>
        <p>See <code>shader_filterchain_doc__define.pro</code>, located in the <code>examples/doc/shaders</code> subdirectory of the IDL distribution, for the complete, working example. Run the example by entering <code>obj=OBJ_NEW('shader_filterchain_doc')</code> at the IDL command prompt or view the file in an IDL Editor window by entering <code>.EDIT shader_filterchain_doc__define.pro</code>.</p>
        <h2>Basic Filter Chain Shader Object Class</h2>
        <p>The shader_filterchain_doc object class inherits from IDLgrFilterChain, which inherits container manipulation methods from IDL_Container, but also includes the FORCE_FILTER method common to IDLgrShader. This means that you can test any software based alternative code provided in a shader’s Filter method as described in “Providing a Software Alternative to Shaders”. Since this example uses the pre-defined <a href="../../Object Classes/Graphics/IDLgrShaderConvol3.htm">IDLgrShaderConvol3</a> object, there is no need to specify vertex or fragment programs since these are inherent to the object definition.</p>
        <p>In addition to the typical object definition code, this example creates instances of the four types of pre-defined convolution filters and stores them in an object array:</p>
        <p class="Code">oIdentity = OBJ_NEW("IDLgrShaderConvol3", KERNEL=0)</p>
        <p class="Code">oSmooth = OBJ_NEW("IDLgrShaderConvol3", KERNEL=1)</p>
        <p class="Code">oSharpen = OBJ_NEW("IDLgrShaderConvol3", KERNEL=2)</p>
        <p class="Code">oEdge = OBJ_NEW("IDLgrShaderConvol3", KERNEL=3)</p>
        <p class="Code">objarray = [oIdentity, oSmooth, oSharpen, oEdge]</p>
        <p>Since an unmodified image is loaded first, make sure the identity convolution filter is the only item in the filter chain object (self in the following lines). Then associate the <a href="../../Object Classes/Graphics/IDLgrFilterChain.htm">IDLgrFilterChain</a> object with the image using the SHADER property.</p>
        <p class="Code">self-&gt;Add, oIdentity</p>
        <p class="Code">oImage-&gt;SetProperty, SHADER=self</p>
        <p>In this program, you can select among four check boxes to apply varying combinations of convolution filters to a grayscale image. Each time you select a different check box, the list of shaders are removed from the IDLgrFilterChain container and then the selected items are re-added.</p>
        <p class="Code">; Remove all items from the collection and add back</p>
        <p class="Code">; selected shaders.</p>
        <p class="Code">self-&gt;Remove, /ALL</p>
        <p class="Code">selected = WHERE(value EQ 1)</p>
        <p class="Code">IF N_ELEMENTS(selected) GT 1 || selected NE -1 THEN BEGIN</p>
        <p class="Code">&#160;&#160;self-&gt;Add, (*pstate).objarray[where (value EQ 1)]</p>
        <p class="Code">ENDIF</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Update base and covolution factors for all</p>
        <p class="Code">; selected shaders.</p>
        <p class="Code">shaderObjs=self-&gt;Get(/ALL, COUNT=count)</p>
        <p class="Code">FOR i =0, count-1 DO BEGIN</p>
        <p class="Code">&#160;&#160;shaderObjs[i]-&gt;SetProperty,</p>
        <p class="Code">&#160;&#160;&#160;&#160;BASE_BLEND_FACTOR=(*pState).basefactor, $</p>
        <p class="Code">&#160;&#160;&#160;&#160;CONVOL_BLEND_FACTOR=(*pState).convolfactor</p>
        <p class="Code">ENDFOR</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Draw.</p>
        <p class="Code">(*pState).oWindow-&gt;Draw, (*pState).oView</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Shaders are applied in container order. You could use different user interface controls to provide a way to apply shaders in a specific order instead of using check boxes.</p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>