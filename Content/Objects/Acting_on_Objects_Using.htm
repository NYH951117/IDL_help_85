<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../" data-mc-conditions="" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Language|Objects|Using IDL Objects">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Acting on Objects Using Methods </title>
        <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../Resources/TableStyles/Description.css" rel="stylesheet" />
        <link href="../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../IDL Programming.htm">Language</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../Object Classes/ref_part2.htm">Objects</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbsSelf">Using IDL Objects</span><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Acting on Objects Using Methods</span>
        </div>
        <h1><a name="objects_3041994433_1016265"></a><a name="objects_3041994433_24523"></a>Acting on Objects Using Methods </h1>
        <p>In <a name="kanchor4841"></a>order to perform an action on an object’s instance data, you must call one of the object’s <i>methods</i>. In addition to their own specific methods, all object classes shipped with IDL except for the IDL_Container class have four methods in <a name="kanchor4842"></a>common: Cleanup, In<a name="kanchor4843"></a>it, Get<a name="kanchor4844"></a>Property, and Set<a name="kanchor4845"></a>Property. The Cleanup and Init methods are life-cycle <a name="kanchor4846"></a>methods, and cannot be called directly except within a subclass’ Cleanup or Init method. The GetProperty and SetProperty methods allow you to inspect (get) or change (set) the various properties associated with a given object.</p>
        <h2 class="API">Method Invocation Operators</h2>
        <p>IDL recognizes two forms of the method invocation operator:</p>
        <table class="TableStyle_Description" style="margin-left: 0;margin-right: auto;caption-side: top;mc-table-style: url('../Resources/TableStyles/Description.css');" cellspacing="0">
            <col class="Column-Column1" />
            <col class="Column-Column1" />
            <col class="Column-Column1" />
            <thead>
                <tr class="Head-Header1">
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColSep">
                        <p>Form</p>
                    </td>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColSep">
                        <p>Syntax</p>
                    </td>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColEnd">
                        <p>Notes</p>
                    </td>
                </tr>
            </thead>
            <tbody>
                <tr class="Body-Body1">
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>.</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p class="Code">Obj.Method_Name</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Introduced in IDL 8.0</p>
                    </td>
                </tr>
                <tr class="Body-Body2">
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColSep">
                        <p>-&gt;</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColSep">
                        <p class="Code">Obj-&gt;Method_Name</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColEnd">
                        <p>Introduced in IDL 5.0</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p>Beginning with IDL 8.0, you can use the . and -&gt; forms of the operator interchangeably; they are equivalent. Code intended to run on systems hosting versions of IDL prior to 8.0 should use the -&gt; form.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Discussion and example code in the IDL help system uses both forms of the method invocation operator. Discussion of object-oriented programming generally uses the older -&gt; form, while discussion of the IDL graphics API introduced in IDL 8.0 generally uses the . form.</p>
        <h2 class="API">Object Method Syntax</h2>
        <p>In an object reference topic, the Syntax section of each object method shows the proper syntax for calling the method.</p>
        <h3>Procedure Methods</h3>
        <p>IDL <a name="kanchor4847"></a>procedure methods have the syntax:</p>
        <p><i>Obj</i>.<i>Procedure_Name</i>, <i>Argument </i>[, <i>Optional_Arguments</i>]</p>
        <p>or</p>
        <p><i>Obj</i>-&gt;<i>Procedure_Name</i>, <i>Argument </i>[, <i>Optional_Arguments</i>]</p>
        <p>where <i>Obj</i> is a valid object reference, <i>Procedure_Name</i> is the name of the procedure method, <i>Argument</i> is a required parameter, and <i>Optional_Argument</i> is an optional parameter to the procedure method. The square brackets around optional arguments are not used in the actual call to the procedure, they are simply used to denote the optional nature of the arguments within this document.</p>
        <h3>Function Methods</h3>
        <p>IDL <a name="kanchor4848"></a>function methods have the syntax:</p>
        <p><i>Result</i> = <i>Obj</i>.<i>Function_Name</i>(<i>Argument </i>[<i>, Optional_Arguments</i>])</p>
        <p>or</p>
        <p><i>Result</i> = <i>Obj</i>-&gt;<i>Function_Name</i>(<i>Argument </i>[<i>, Optional_Arguments</i>])</p>
        <p>where <i>Obj</i> is a valid object reference, <i>Result</i> is the returned value of the function method, <i>Function_Name</i> is the name of the function method, <i>Argument</i> is a required parameter, and <i>Optional_Argument</i> is an optional parameter. The square brackets around optional arguments are not used in the actual call to the function, they are simply used to denote the optional nature of the arguments within this document. </p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>All arguments and keywords to functions should be supplied <i>within</i> the parentheses that follow the function’s name.</p>
        <h2 class="API"><a name="kanchor4849"></a>Arguments</h2>
        <p>The <i>Arguments</i> section describes each valid argument to the method. </p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>These arguments are positional parameters that must be supplied in the order indicated by the method’s syntax.</p>
        <h3>Named Variables</h3>
        <p>Often, arguments that contain values upon return from the function or procedure method (“output arguments”) are described as accepting “<a name="kanchor4850"></a>named variables.” A named variable is a valid IDL variable name. This variable <i>does not</i> need to be defined before being used as an output argument. Note, however that when an argument calls for a named variable, only a named variable can be used—sending an expression causes an error.</p>
        <h3><a name="kanchor4851"></a>Keywords</h3>
        <p>The <i>Keywords</i> section describes each valid keyword argument to the method. </p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Keyword arguments are formal parameters that can be supplied in any order.</p>
        <p>Keyword arguments are supplied to IDL methods by including the keyword name followed by an equal sign (“=”) and the value to which the keyword should be set. Note that keywords can be abbreviated to their shortest unique length. For example, the XSTYLE keyword can be abbreviated to XST.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>In the case of Init, GetProperty and SetProperty methods, keywords often correspond to object <i>properties</i>.</p>
        <h3>Setting Keywords</h3>
        <p>When the documentation for a <a name="kanchor4852"></a>keyword says something similar to, “Set this keyword to enable logarithmic plotting,” the keyword is simply a switch that turns an option on and off. In general, setting such keywords equal to 1 (or using the /KEYWORD syntax) causes the option to be turned on. Explicitly setting the keyword to zero (or not including the keyword) turns the option off.</p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>