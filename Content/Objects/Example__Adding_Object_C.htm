<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../" data-mc-conditions="" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Language|Objects|Operator Overloading">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Example: Adding Object Color Values</title>
        <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">  <![CDATA[ ]]></span><a class="MCBreadcrumbsLink" href="../IDL Programming.htm">Language</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../Object Classes/ref_part2.htm">Objects</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbsSelf">Operator Overloading</span><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Example: Adding Object Color Values</span>
        </div>
        <h1><a name="obj_operators_3013489070_999198"></a><a name="obj_operators_3013489070_42128"></a>Example: Adding Object Color Values</h1>
        <p class="ExampleCode">The colorCircle_doc object definition and operator overloading code listed in this section is contained in the procedure file <code>colorcircle_doc__define.pro</code>, and is located in the <code>examples/doc/objects</code> subdirectory of the IDL distribution. To view the file in an IDL editor window, enter .EDIT colorcircle_doc__define.pro at the IDL command line.</p>
        <p>The previous example was a straightforward implementation of the plus (+) operator. However, you can implement an overloaded operator routine to do less obvious tasks, or even tasks completely unrelated to the implied operation. In this example, we will implement the plus (+) operator to change the color of a circle object.</p>
        <p>The following code, located in <code>colorcircle_doc__define.pro</code>, defines the colorCircle_doc object and the overloaded plus operator method.</p>
        <p class="Code">; Initialize a colorCircle_doc object. Use an IDLgrPolygon to </p>
        <p class="Code">; create the actual circle, using the color value specified at</p>
        <p class="Code">; creation. If present, the POSITION keyword is used to position</p>
        <p class="Code">; multiple circles so that they do not overlap.</p>
        <p class="Code">&#160;</p>
        <p class="Code">FUNCTION colorCircle_doc::Init, COLOR=Color, POSITION=position</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;position = (N_ELEMENTS(position) EQ 0) ? 0 : position</p>
        <p class="Code">&#160;&#160;&#160;x = SIN(2*!PI/100 * FINDGEN(100))+position*3</p>
        <p class="Code">&#160;&#160;&#160;y = COS(2*!PI/100 * FINDGEN(100))</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;v = self-&gt;IDLgrPolygon::Init(x, y, COLOR=Color)</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;RETURN, v</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Overload the "+" (plus) operator for the colorCircle_doc object</p>
        <p class="Code">; Adding two colorCircle_doc objects sums the colors</p>
        <p class="Code">&#160;</p>
        <p class="Code">FUNCTION colorCircle_doc::_overloadplus, input1, input2</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;; Return to the calling routine if an error occurs</p>
        <p class="Code">&#160;&#160;&#160;ON_ERROR, 2</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;msg = 'Specify ColorCircle objects or three-element vectors'</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;; Only perform the addition if the input arguments are of the</p>
        <p class="Code">&#160;&#160;&#160;; correct form -- either a colorCircle_doc object or a</p>
        <p class="Code">&#160;&#160;&#160;; three-element [r,g,b] vector.</p>
        <p class="Code">&#160;&#160;&#160;IF (SIZE(input1, /TYPE) EQ 11) &amp;&amp; OBJ_ISA(input1, $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;'colorCircle_doc') THEN BEGIN</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;input1-&gt;GETPROPERTY, COLOR=c1</p>
        <p class="Code">&#160;&#160;&#160;ENDIF ELSE BEGIN</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;IF (N_ELEMENTS(input1) EQ 3) THEN BEGIN</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c1 = input1</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;ENDIF ELSE BEGIN</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;MESSAGE, msg, LEVEL=0</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;ENDELSE</p>
        <p class="Code">&#160;&#160;&#160;ENDELSE</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;IF (SIZE(input2, /TYPE) EQ 11) &amp;&amp; OBJ_ISA(input2, $ </p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;'colorCircle_doc') THEN BEGIN</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;input2-&gt;GETPROPERTY, COLOR=c2</p>
        <p class="Code">&#160;&#160;&#160;ENDIF ELSE BEGIN</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;IF (N_ELEMENTS(input2) EQ 3) THEN BEGIN</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c2 = input2</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;ENDIF ELSE BEGIN</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;MESSAGE, msg, LEVEL=0</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;ENDELSE</p>
        <p class="Code">&#160;&#160;&#160;ENDELSE</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;; Here we assume an additive light model, where each color</p>
        <p class="Code">&#160;&#160;&#160;; channel is the sum of the inputs' color channels.</p>
        <p class="Code">&#160;&#160;&#160;; The sum can not be greater than 255.</p>
        <p class="Code">&#160;&#160;&#160;c3 = (FIX(c1) + c2) &lt; 255</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;; Create a new colorCircle_doc object with the new color,</p>
        <p class="Code">&#160;&#160;&#160;; and return a reference to the object.</p>
        <p class="Code">&#160;&#160;&#160;oNew=OBJ_NEW('colorCircle_doc', COLOR=c3, POSITION=2)</p>
        <p class="Code">&#160;&#160;&#160;RETURN, oNew</p>
        <p class="Code">&#160;</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Define the colorCircle_doc object</p>
        <p class="Code">; Note that this class inherits from both the IDLgrPolygon</p>
        <p class="Code">; and IDL_Object classes.</p>
        <p class="Code">&#160;</p>
        <p class="Code">PRO colorCircle_doc__define</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;STRUCT = { colorCircle_doc, $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;INHERITS IDLgrPolygon, $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;INHERITS IDL_Object }</p>
        <p class="Code">&#160;</p>
        <p class="Code">END</p>
        <p>&#160;</p>
        <p>The following code snippet adds two colorCircle_doc objects and displays the results with XOBJVIEW.</p>
        <p class="Code">; Create some colorCircle_doc objects<br /><br />CircleA = ColorCircle_doc(COLOR=[255,0,0], POSITION=0)<br />CircleB = ColorCircle_doc(COLOR=[0,0,255], POSITION=1)<br /><br />; Add the objects<br />CircleC = CircleA + CircleB</p>
        <p class="Code">PRINT, CircleC.color<br /><br />; Create a model to hold the graphic objects<br />oCircleModel = OBJ_NEW('IDLgrModel', LIGHTING=0)<br /><br />; Add the objects to the model<br />oCircleModel.Add, CircleA<br />oCircleModel.Add, CircleB<br />oCircleModel.Add, CircleC<br /><br />; Draw the view with XOBJVIEW<br />XOBJVIEW, oCircleModel, /BLOCK, $<br />&#160;&#160;&#160;TITLE='Object Overloading--Color Addition'</p>
        <p>&#160;</p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>