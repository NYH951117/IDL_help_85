<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../" data-mc-conditions="" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Language|Objects|Operator Overloading">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Creating Operator Overloading Methods</title>
        <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">  <![CDATA[ ]]></span><a class="MCBreadcrumbsLink" href="../IDL Programming.htm">Language</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../Object Classes/ref_part2.htm">Objects</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbsSelf">Operator Overloading</span><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Creating Operator Overloading Methods</span>
        </div>
        <h1><a name="obj_operators_3013489070_999111"></a><a name="obj_operators_3013489070_73382"></a>Creating Operator Overloading Methods</h1>
        <p>To overload an object operator:</p>
        <ol>
            <li value="1">Enable operator overloading for the class by inheriting the IDL_Object class. Refer to <a href="../Object Classes/Miscellaneous/IDL_Object.htm">IDL_Object</a> for more information.</li>
            <li value="2">Add an <code>_overload*</code> method to the object that redefines the operator behavior. The valid overloaded operator method names are listed in <a href="Overloadable_Operators.htm#obj_operators_3013489070_999066">Overloaded Object Operator Method Names</a>.</li>
        </ol>
        <h2 class="API">Binary Operators</h2>
        <p>For binary operators, the user-supplied method must be a function that accepts two input arguments. The value on the left side of the operator is passed as the first argument, and the value on the right side of the operator is passed as the second argument. The leftmost object that defines an <code>_overload</code> method for the operator is passed as the implicit self argument. The function can return any value.</p>
        <p>For example, the following shows a simple overloading of the bitwise AND operator that returns 1 if both operands are objects or zero if only one operand is an object.</p>
        <p class="Code">FUNCTION className::_overloadAND, arg1, arg2</p>
        <p class="Code">&#160;&#160;&#160;RETURN, (SIZE(arg1, /TYPE) EQ 11) &amp;&amp; $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(SIZE(arg2, /TYPE) EQ 11) ? 1 : 0</p>
        <p class="Code">END</p>
        <h2 class="API">Unary Operators</h2>
        <p>For most unary operators, the user-supplied method must be a function that accepts no arguments. The object being operated on is used as the implicit self argument. For example, the following shows a simple overloading of the <code>-</code> (negation) operator that returns a string denying that the object is of the class that it actually is:</p>
        <p class="Code">FUNCTION className::_overloadMinusUnary</p>
        <p class="Code">&#160;&#160;&#160; RETURN, 'I am not a '+OBJ_CLASS(self)</p>
        <p class="Code">END</p>
        <h2 class="API">Information Routines</h2>
        <p>For the overloadable information routines (HELP, PRINT, and SIZE), the user-supplied method must be a function that returns values appropriate for the specific information routine:</p>
        <h4>HELP</h4>
        <p>The <code>_overloadHelp</code> method accepts a single string argument (the name of the variable passed to the HELP procedure), and must return a string or array of strings, which will be printed to the console as the output from the HELP procedure. For example:</p>
        <p class="Code">FUNCTION className::_overloadHelp, Varname</p>
        <p class="Code">&#160;&#160;&#160;class = OBJ_CLASS(self)</p>
        <p class="Code">&#160;&#160;&#160;text = 'The '+Varname+' variable is an object of class '+class</p>
        <p class="Code">&#160;&#160;&#160;RETURN, text</p>
        <p class="Code">END</p>
        <h4>PRINT</h4>
        <p>The <code>_overloadPrint</code> method can return a variable of any datatype, which will be passed to the PRINT procedure and printed with the default formatting. For example, the following method definition:</p>
        <p class="Code">FUNCTION className::_overloadPrint</p>
        <p class="Code">&#160;&#160;&#160;self-&gt;GetProperty, OBJ_DATA = data</p>
        <p class="Code">&#160;&#160;&#160;RETURN, data</p>
        <p class="Code">END</p>
        <p>would print out the value of the object’s OBJ_DATA property.</p>
        <h4>SIZE</h4>
        <p>The <code>_overloadSize</code> method must return a scalar or vector that specifies the number of elements in each “dimension” of the object, as if it were an array of one or more dimensions. For example, the following method definition returns the dimensions of the variable contained in the object’s OBJ_DATA field:</p>
        <p class="Code">FUNCTION className::_overloadSize</p>
        <p class="Code">&#160;&#160;&#160;self-&gt;GetProperty, OBJ_DATA = data</p>
        <p class="Code">&#160;&#160;&#160;RETURN, SIZE(data, /DIMENSIONS)</p>
        <p class="Code">END</p>
        <p>The value returned by the <code>_overloadSize</code> method is used by the SIZE procedure to construct the number of elements, the number of dimensions, and the size of each dimension of the object. Other values reported by SIZE (such as the data type code or type name) are not altered by the <code>_overloadSize</code> method.</p>
        <p>Note that the N_ELEMENTS function will return the product of the values returned by the <code>_overloadSize</code> method as the total number of elements of the object.</p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>