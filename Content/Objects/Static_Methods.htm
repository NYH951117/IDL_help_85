<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../" data-mc-conditions="" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Language|Objects|Using IDL Objects">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Static Methods and Properties</title>
        <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../IDL Programming.htm">Language</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../Object Classes/ref_part2.htm">Objects</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbsSelf">Using IDL Objects</span><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Static Methods and Properties</span>
        </div>
        <h1>Static Methods and Properties</h1>
        <h2>Static Methods</h2>
        <p><a name="kanchor4853"></a>In  addition to calling methods on an object instance, you can also call static (or class) methods on a class. In order to call a method as "static," you will need to mark the method with a special "compile_opt static" flag. Usually, the documentation for the class will indicate which methods are object methods and which are static class methods.</p>
        <h3>Static Procedure Methods</h3>
        <p>IDL static procedure methods have the syntax:</p>
        <p><i>Classname</i>.<i>ProcedureName</i>[, <i>Arguments</i>] [, <i>KEYWORDS=Keywords</i>]</p>
        <p>where:</p>
        <ul>
            <li value="1"><i>Classname</i> is a valid class name</li>
            <li value="2"><i>ProcedureName</i> is the name of the static procedure method </li>
            <li value="3"><i>Arguments</i> are the required or optional positional parameters</li>
            <li value="4"><i>Keywords</i> are any optional keywords. </li>
        </ul>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>The square brackets are not used in the actual call. They are simply used in the documentation to denote that the arguments and keywords are optional.</p>
        <p>For example:</p>
        <p class="Code">MyClass.DoSomething, a, b, /SPECIAL</p>
        <p>This will execute the <code>DoSomething</code> class method on the <code>MyClass</code> class, passing in two arguments <i>a</i> and <i>b</i>, as well as a keyword set equal to 1.</p>
        <h3>Static Function Methods</h3>
        <p>IDL static function methods have the syntax:</p>
        <p><i>Result</i> = <i>Classname</i>.<i>FunctionName</i>( [, <i>Arguments</i>] [, <i>KEYWORDS=Keywords</i>] )</p>
        <p>where: </p>
        <ul>
            <li value="1"><i>Result</i> is the returned value </li>
            <li value="2"><i>Classname</i> is a valid class name </li>
            <li value="3"><i>FunctionName</i> is the name of the static function method </li>
            <li value="4"><i>Arguments</i> are the required or optional positional parameters </li>
            <li value="5"><i>Keywords</i> are any optional keywords  </li>
        </ul>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Again, the square brackets are not used in the actual call, they are simply used to denote that the arguments and keywords are optional.</p>
        <p>For example:</p>
        <p class="Code">Result = MyClass.Calculate(a, b, /ALL)</p>
        <p>This statement executes the <code>Calculate</code> class method on the <code>MyClass</code> class, passing in two arguments <i>a</i> and <i>b</i>, as well as a keyword set equal to 1.</p>
        <h3><a name="kanchor4854"></a>Arguments</h3>
        <p>The <i>Arguments</i> section describes each valid argument to the method. </p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>These arguments are positional parameters that must be supplied in the order indicated by the method’s syntax.</p>
        <h3>Named Variables</h3>
        <p><a name="kanchor4855"></a>Often, arguments that contain values upon return from the function or procedure method (“output arguments”) are described as accepting “named variables.” A named variable is simply a valid IDL variable name. This variable <i>does not</i> need to be defined before being used as an output argument. Note, however that when an argument calls for a named variable, only a named variable can be used—sending an expression causes an error.</p>
        <h3><a name="kanchor4856"></a>Keywords</h3>
        <p>The <i>Keywords</i> section describes each valid keyword argument to the method. </p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Keyword arguments are formal parameters that can be supplied in any order.</p>
        <p>Supply keyword arguments to IDL methods by including the keyword name followed by an equal sign (“=”) and the value to which the keyword should be set. </p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>You can abbreviate keywords  to their shortest unique length. For example, you can abbreviate the XSTYLE keyword  to XST.</p>
        <h3>Setting Keywords</h3>
        <p><a name="kanchor4857"></a>When the documentation for a keyword states something similar to, “Set this keyword to enable logarithmic plotting,” the keyword is simply a switch that turns an option on and off. In general, setting such keywords equal to 1 (or using the /KEYWORD syntax) causes IDL to turn the option on. Explicitly setting the keyword to zero (or not including the keyword) turns the option off.</p>
        <h2>Static Properties</h2>
        <p>Classes can also have static properties, which can be accessed using the "dot" syntax:</p>
        <p><i>Value</i> = <i>Classname</i>.<i>PropertyName</i></p>
        <p>For example:</p>
        <p class="Code">value = MyClass.Color</p>
        <p class="Code">PRINT, MyClass.Linestyle</p>
        <p>Internally, IDL routes the class properties to the class' GetProperty method. Because static classes have no "state" and do not persist, you will need to hard-code any static property values within the GetProperty method, or you will need to compute them "on the fly."</p>
        <h2>Static Method Calls versus Array Indexing</h2>
        <p>In IDL, by default both square brackets [ ] and parentheses ( ) can be used for array indexing. However, parentheses are also used for function calls. Because of this duplication, the IDL compiler cannot distinguish between function calls and array indexing. For example, you might have a static method call:</p>
        <p class="Code">Result = MyClass.Calculate(a, b)</p>
        <p>However, it is just as likely that you might be doing an array index into a structure:</p>
        <p class="Code">Result = MyStruct.Field(a, b)</p>
        <p>By default, IDL will be unable to distinguish between these two calls and in certain cases will throw a syntax error. To avoid any confusion, you should always use <code>compile_opt strictarr</code> (or <code>compile_opt idl2</code>) at the top of your procedures and functions. This will force you to use square brackets for all array indexing within that routine. The IDL compiler will then treat any parentheses as function calls.</p>
        <h3>Use of Static Methods at the Main Program Level</h3>
        <p>Normally, if you are doing static method calls within a routine, it is straightforward to insert <code>compile_opt strictarr</code> to avoid any confusion with parentheses. However, if you are executing ad-hoc IDL commands at the main program level, it might be confusing to suddenly receive syntax errors when trying to make static method calls.</p>
        <p>Because of this issue, if you use a static method call at the main program level (either at the command prompt or in a $MAIN program), IDL will then automatically turn on <code>compile_opt strictarr</code> for the main level. From that point on, you must then be sure to use square brackets for array indexing. See <a href="../Reference Material/C/COMPILE_OPT.htm">compile_opt</a> for details.</p>
        <p>&#160;</p>
        <h2>Examples of Static Methods</h2>
        <p>The <a href="../Reference Material/C/CLIPBOARD.htm">Clipboard::Get</a> and <a href="../Reference Material/C/CLIPBOARD.htm">Clipboard::Set</a> methods are static. For example, enter the following commands at the IDL&#160;prompt:</p>
        <p class="Code">Clipboard.Set, "My text on the system clipboard"</p>
        <p class="Code">print, Clipboard.Get()</p>
        <p>IDL prints:</p>
        <p class="Code">My text on the system clipboard</p>
        <p>&#160;</p>
        <p>The <a href="../Object Classes/File Format/IDLffVideoRead.htm">IDLffVideoRead</a> and <a href="../Object Classes/File Format/IDLffVideoWrite.htm">IDLffVideoWrite</a> classes have static methods for retrieving the list of available formats and codecs:</p>
        <p class="Code">print, IDLffVideoRead.GetFormats()</p>
        <p class="Code">print, IDLffVideoRead.GetCodecs()</p>
        <p class="Code">print, IDLffVideoWrite.GetFormats()</p>
        <p class="Code">print, IDLffVideoWrite.GetCodecs()</p>
        <p>IDL prints:</p>
        <p class="Code">avi flv gif mjpeg mov,mp4,m4a,3gp,3g2,mj2 swf wav</p>
        <p class="Code">flv gif h263 h264 mjpeg mpeg4 ...</p>
        <p class="Code">avi flv gif mjpeg mov mp4 swf wav webm</p>
        <p class="Code">flv gif h263 mjpeg mpeg4 msmpeg4v2 msmpeg4 ...</p>
        <p>&#160;</p>
        <p>The <a href="../Reference Material/I/IDLUNIT.htm">IDLUnit</a> class has methods for adding, listing, and removing physical units:</p>
        <p class="Code">; Add "shake" to the list of units.</p>
        <p class="Code">IDLUnit.AddUnit, 'shake', '10 nanoseconds', PLURAL='shakes', SYMBOL='sh'</p>
        <p class="Code">; Now that we have added the unit, we can use it:</p>
        <p class="Code">PRINT, IDLUnit('2 shake to picoseconds')</p>
        <p>IDL prints:</p>
        <p class="Code">20000 picoseconds</p>
        <h2>See Also</h2>
        <p><a href="Creating_Static_Methods.htm">Creating Static Methods</a> <![CDATA[ ]]></p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>