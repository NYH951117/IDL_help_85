<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Generate Code</title>
        <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <h1><a name="top"></a>Generate Code</h1>
        <p>You can generate much of the code needed to recreate the content of a graphics window. The examples on this page include adding lines to the generated code, and converting the code to an IDL function.</p>
        <h2>Adding to the Generated Code</h2>
        <p>As certain things are currently not supported by the GenerateCode method, the code to achieve these things must be added after the code is generated. For example, generate a test contour plot with the following:</p>
        <p class="Code">c = CONTOUR(/test)</p>
        <p>Then add a COLORBAR to the graphic using the Insert Colorbar operation on the toolbar. Because the COLORBAR is currently not supported, it will not appear in the generated output after you press the Generate Code button. If the Generate Code with the Save Data option is used, the generated code will looking something like the following:</p>
        <p class="Code">; Code generated by IDL</p>
        <p class="Code">  restore, "c:\mycode.sav"</p>
        <p class="Code">  z0 = data['z0']</p>
        <p class="Code">
  x0 = data['x0']</p>
        <p class="Code">  y0 = data['y0']</p>
        <p class="Code">
  contour0 = CONTOUR(z0, x0, y0)  ; &lt;- Data required</p>
        <p>In order to have the COLORBAR appear when running the code, you must modify it manually. Add the following line immediately following the call to CONTOUR:</p>
        <p class="Code">  cb = COLORBAR(TARGET=contour0)</p>
        <p>Now when the code is run, the COLORBAR will appear in the window.</p>
        <p>Note: be sure to set the TARGET keyword to the desired visualization.</p>
        <h2>Converting the code to a function</h2>
        <p>Use the Generate Code utility to create a function that you can call to  apply properties to any future visualizations. An example of this would be a SCATTERPLOT, but with different default symbols and colors than the defaults. To achieve this, start with a basic SCATTERPLOT, simply using the /TEST option as the real data will be used later.</p>
        <p class="Code">s = SCATTERPLOT(/TEST)</p>
        <p>Using the toolbar in the graphics window, the symbol, the fill color, the line color and the symbol size can be easily changed to the desired defaults. Now, when the Generated Code method is run (no need to use the Save Data option), the resulting code will look something like the following:</p>
        <p class="Code">; Code generated by IDL</p>
        <p class="Code"> scatterplot0 = SCATTERPLOT(x, y, $  ; &lt;- Data required</p>
        <p class="Code">    SYM_COLOR=[253,61,41], $</p>
        <p class="Code">    SYMBOL=24, $</p>
        <p class="Code">    SYM_SIZE=2.0000000, $</p>
        <p class="Code">    SYM_FILLED=1, $</p>
        <p class="Code">    SYM_FILL_COLOR=[4,14,222])</p>
        <p>To use this code as a function, you would need to add two lines of code. First add a signature line to the top of the file, ensuring that the input variables are the same as those in the call to the graphic, e.g., x and y. A line of code such as the following:</p>
        <p class="Code"> function myscatterplot, x, y</p>
        <p>Second, since this is a function, it must return something. Just before the end of the file, insert the following to return a reference to the graphic that you just created:</p>
        <p class="Code"> return, scatterplot0</p>
        <p>The entire code should now look something like this:</p>
        <p class="Code">function myscatterplot, x,y</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Code generated by IDL</p>
        <p class="Code"> scatterplot0 = SCATTERPLOT(x, y, $  ; &lt;- Data required</p>
        <p class="Code">    SYM_COLOR=[253,61,41], $</p>
        <p class="Code">    SYMBOL=24, $</p>
        <p class="Code">    SYM_SIZE=2.0000000, $</p>
        <p class="Code">    SYM_FILLED=1, $</p>
        <p class="Code">    SYM_FILL_COLOR=[4,14,222])</p>
        <p class="Code">&#160;</p>
        <p class="Code">return, scatterplot0</p>
        <p class="Code">&#160;</p>
        <p class="Code">end</p>
        <p>Now you can call this new function from IDL (instead of the original SCATTERPLOT) and all the "new" default properties will be applied. Note that since this returns a reference to the underlying SCATTERPLOT, the returned value can be used in the future exactly as in a regular SCATTERPLOT. Example:</p>
        <p class="Code">x = randomu(seed, 100)</p>
        <p class="Code">y = randomu(seed, 100)</p>
        <p class="Code">s = myscatterplot(x, y)</p>
        <p class="Code">s.title = 'Random data'</p>
        <h2 class="API">See Also</h2>
        <ul>
            <li value="1"><a href="propChanges.htm">Change Graphics Properties</a>
            </li>
            <li value="2"><a href="../GUInavigation/visualize.htm">Graphics examples</a>
            </li>
            <li value="3"><a href="../IDL Graphics/Rotate Method.htm">Rotate Method</a>
            </li>
            <li value="4"><a href="../IDL Graphics/FormattingSymsAndLines.htm">Formatting IDL&#160;Graphics Symbols and Lines
			</a>
            </li>
        </ul>
        <div class="mp_footer">Â© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>