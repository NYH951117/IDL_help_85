<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Creating a Graphics Event Handler Class</title>
        <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../Resources/TableStyles/Description.css" rel="stylesheet" />
        <link href="../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <h1><a name="kanchor5878"></a>Creating a Graphics Event Handler Class</h1>
        <p>You can create a custom event handler to handle events in a graphics              <a href="../Reference Material/W/WINDOW.htm">WINDOW</a> or a <a href="../Reference Material/W/WIDGET_WINDOW.htm">WIDGET_WINDOW</a>. The event handler class must be a subclass of GraphicsEventAdapter. Your subclass can then override any of the following methods: ::MouseDown, ::MouseUp, ::MouseMotion, ::MouseWheel, ::KeyHandler, and ::SelectChange. </p>
        <p>Each function method must return a value of 0 to turn off default event handling or 1 to perform default event handling.</p>
        <p>See the <a href="#EX_WINDOW" class="selected">WINDOW&#160;example</a> and <a href="#EX_WIDGET" class="selected">WIDGET_WINDOW example</a>, below.</p>
        <h2 class="API">Syntax</h2>
        <p>The syntax of the various event handler methods are similar, as the following list shows. </p>
        <p class="Syntax"><i>Result</i> = obj.MouseDown(<em>Window, X, Y, <a href="#Button" class="selected">Button</a>, <a href="#KeyMods" class="selected">KeyMods</a>,  <a href="#Clicks" class="selected">Clicks</a></em>)</p>
        <p class="Syntax"><i>Result</i> = obj.MouseMotion(<em>Window, X, Y, <a href="#KeyMods" class="selected">KeyMods</a></em>)</p>
        <p class="Syntax"><i>Result</i> = obj.MouseUp(<em>Window, X, Y, <a href="#Button" class="selected">Button</a></em>)</p>
        <p class="Syntax"><i>Result</i> = obj.MouseWheel(<em>Window, X, Y, <a href="#Delta" class="selected">Delta</a>, <a href="#KeyMods" class="selected">KeyMods</a></em>)</p>
        <p class="Syntax"><i>Result</i> = obj.KeyHandler(<em>Window, <a href="#IsASCII" class="selected">IsASCII</a>, <a href="#Characte" class="selected">Character</a>, <a href="#KeyValue" class="selected">KeyValue</a>, X, Y, <a href="#Press" class="selected">Press</a>, <a href="#Release" class="selected">Release</a>, <a href="#KeyMods" class="selected">KeyMods</a></em>)</p>
        <p class="Syntax"><i>Result</i> = obj.SelectChange(<em>Window, <a href="#Graphic" class="selected">Graphic</a>, <a href="#Mode" class="selected">Mode</a>, <a href="#WasSelec" class="selected">WasSelected</a></em>)</p>
        <h2 class="API">Arguments</h2>
        <h3>Window</h3>
        <p>The object reference of the window in which the event occurred.</p>
        <h3>X</h3>
        <p>The x-coordinate location of the mouse cursor (in device coordinates) at the time of the event.</p>
        <h3>Y</h3>
        <p>The y-coordinate of the mouse cursor (in device coordinates) at the time of the event.</p>
        <h3><a name="Button"></a>Button</h3>
        <p>The value of the clicked button. Possible values are:</p>
        <table class="TableStyle_Description" style="margin-left: 0;margin-right: auto;caption-side: top;mc-table-style: url('../Resources/TableStyles/Description.css');" cellspacing="0">
            <col class="Column-Column1" />
            <col class="Column-Column1" />
            <thead>
                <tr class="Head-Header1">
                    <th class="TableStyle_Description_Head_0_0_RowSep_ColSep">
                        <p>Value</p>
                    </th>
                    <th class="TableStyle_Description_Head_0_0_RowSep_ColEnd">
                        <p>Mouse Button</p>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr class="Body-Body1">
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>1</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Left </p>
                    </td>
                </tr>
                <tr class="Body-Body2">
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p>2</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>Middle</p>
                    </td>
                </tr>
                <tr class="Body-Body1">
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColSep">
                        <p>4</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColEnd">
                        <p>Right </p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h3><a name="Clicks"></a>Clicks</h3>
        <p>The value indicating how many button clicks occurred. The value is 1 for a single click and 2 for a double click.</p>
        <h3><a name="Delta"></a>Delta</h3>
        <p>The value indicating the direction and number of movements of the mouse wheel. </p>
        <p>Pushing the wheel generates positive values, pulling the wheel generates negative values. The magnitude of the value depends on the device setting for the individual mouse, but is usually limited to small integer values such as +1, -1, +2, -2, etc.</p>
        <h3><a name="KeyMods"></a>KeyMods</h3>
        <p>The value containing a bitwise mask indicating which modifier keys are active at the time the mouse event happens. Possible values are: </p>
        <table style="caption-side: bottom;mc-table-style: url('../Resources/TableStyles/Description.css');margin-left: 0;margin-right: auto;" cellspacing="0" class="TableStyle_Description">
            <col />
            <col />
            <thead>
                <tr>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColSep">
                        <p>Value</p>
                    </td>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColEnd">
                        <p>Modifier Key</p>
                    </td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>1</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Shift</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p>2</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>Control</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>4</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Caps lock</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColSep">
                        <p>8</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColEnd">
                        <p>Alt</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h3><a name="IsASCII"></a>IsASCII</h3>
        <p>A scalar byte value that indicates whether the keyboard event corresponds to an ASCII character. If IsASCII is non-zero, the Character argument will be set to a byte value corresponding to the character of the pressed key. If IsASCII is zero, the KeySymbol argument will be set to a numeric value indicating the key that was pressed.</p>
        <h3><a name="Characte"></a>Character</h3>
        <p>If IsASCII is non-zero, this argument is set to a byte value corresponding to the ASCII character of the key that was pressed. Otherwise, this argument is set to zero.</p>
        <h3><a name="KeyValue"></a>KeyValue</h3>
        <p>If IsASCII is zero, this argument is set to a value that indicates the key that was pressed. Otherwise, this argument is set to zero. Possible values are:</p>
        <table class="TableStyle_Description" style="margin-left: 0;margin-right: auto;caption-side: top;mc-table-style: url('../Resources/TableStyles/Description.css');" cellspacing="0">
            <col class="Column-Column1" />
            <col class="Column-Column1" />
            <thead>
                <tr class="Head-Header1">
                    <th class="TableStyle_Description_Head_0_0_RowSep_ColSep">
                        <p>Value</p>
                    </th>
                    <th class="TableStyle_Description_Head_0_0_RowSep_ColEnd">
                        <p>Key</p>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr class="Body-Body1">
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>1</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Shift</p>
                    </td>
                </tr>
                <tr class="Body-Body2">
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p>2</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>Control</p>
                    </td>
                </tr>
                <tr class="Body-Body1">
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>3</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Caps lock</p>
                    </td>
                </tr>
                <tr class="Body-Body2">
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p>4 </p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>Alt</p>
                    </td>
                </tr>
                <tr class="Body-Body1">
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>5</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Left</p>
                    </td>
                </tr>
                <tr class="Body-Body2">
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p>6</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>Right</p>
                    </td>
                </tr>
                <tr class="Body-Body1">
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>7</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Up</p>
                    </td>
                </tr>
                <tr class="Body-Body2">
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p>8</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>Down</p>
                    </td>
                </tr>
                <tr class="Body-Body1">
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>9</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Page up</p>
                    </td>
                </tr>
                <tr class="Body-Body2">
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p>10</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>Page down</p>
                    </td>
                </tr>
                <tr class="Body-Body1">
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>11</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Home</p>
                    </td>
                </tr>
                <tr class="Body-Body2">
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColSep">
                        <p>12</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColEnd">
                        <p>End</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>On East Asian (Chinese, Japanese, Korean) localized Windows operating systems with an Asian language pack installed, characters entered in the Windows Input Method Manager (IMM)composition window are returned in the   the <i>KeyValue</i> argument as  unsigned integers representing a Wide character (Unicode value). The  <a href="../Reference Material/I/I18N_WIDECHARTOMULTIBYTE.htm">I18N_WIDECHARTOMULTIBYTE</a> routine can  convert these  characters to multibyte strings. For more information, see <a href="../Creating IDL Programs/Internationalizing Code.htm">Internationalizing Code</a>.</p>
        <h3><a name="Press"></a>Press</h3>
        <p>The value indicating that this event represents a key press. This argument is non-zero if the event is the result of pressing the key.</p>
        <h3><a name="Release"></a>Release</h3>
        <p>The value indicating that this event represents a key release. This argument is non-zero if the event is the result of releasing the key.</p>
        <h3><a name="Graphic"></a>Graphic</h3>
        <p>The graphic to be selected or unselected.</p>
        <h3 class="Argument"><a name="Mode"></a>Mode</h3>
        <p>A value representing the mode that was used for the current selection. Possible values are:</p>
        <table style="caption-side: bottom;mc-table-style: url('../Resources/TableStyles/Description.css');margin-left: 0;margin-right: auto;" cellspacing="0" class="TableStyle_Description">
            <col />
            <col />
            <thead>
                <tr>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColSep">
                        <p>Value</p>
                    </td>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColEnd">
                        <p>Selection Type</p>
                    </td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>0</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Unselect</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p>1</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>Select</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>2</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Toggled selection</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColSep">
                        <p>3</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColEnd">
                        <p>Additive </p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h3 class="Argument"><a name="WasSelec"></a>WasSelected</h3>
        <p>A value indicating if the graphic item was already selected prior to this event. A value of 1 indicates an item was previously selected; 0 if not selected.</p>
        <h2 class="API">GraphicsEventAdapter Class</h2>
        <p>The GraphicsEventAdapter class provides a default implementation for all of the event handler methods. The default implementation simply returns a value of 1 for each of the methods. For convenience, you should create your event handler as a subclass of GraphicsEventAdapter and only override the methods that you need.</p>
        <p>The GraphicsEventAdapter class is written in the IDL&#160;language. Its source code can be found in the file <code>graphicseventadapter__define.pro</code> in the <code>lib/graphics</code> subdirectory of the IDL distribution.</p>
        <h2 class="API"><a name="EX_WINDOW"></a>Example Using WINDOW</h2>
        <p>In the following example code, the RBBox class create a "rubber-band" box. The <code>RBBox::MouseDown</code> method creates a polygon and caches the start point of a drag operation. In the <code>RBBox::MouseMotion</code> method the polygon is updated with the current location of the cursor. In the <code>RBBox::MouseUp</code> method, the polygon is again updated and the color of the polygon is modified. Copy this code into a new IDL file and run it. To test the code, drag and drop the mouse to draw a box in the graphic window.</p>
        <p class="Code">FUNCTION RBBox::MouseDown, oWin, $</p>
        <p class="Code_Indented">x, y, iButton, KeyMods, nClicks</p>
        <p class="Code_Indented">if (~ISA(self.poly)) then begin</p>
        <p class="Code_Indented">; Add a hidden polygon for the rubber-band box.</p>
        <p class="Code_Indented">self.poly = POLYGON([0,0,0],[0,0,0], /DEVICE, $</p>
        <p class="Code_Indented">LINESTYLE='--', /HIDE, $</p>
        <p class="Code_Indented">FILL_TRANSPARENCY=90, FILL_BACKGROUND = 1, FILL_COLOR='red')</p>
        <p class="Code_Indented">endif</p>
        <p class="Code_Indented">self.x0 = x</p>
        <p class="Code_Indented">self.y0 = y</p>
        <p class="Code_Indented">self.buttonDown = 1</p>
        <p class="Code_Indented">self.poly.HIDE = 0</p>
        <p class="Code_Indented">self.poly.SetData, [0,0,0], [0,0,0]</p>
        <p class="Code_Indented">self.poly.LINESTYLE='--'</p>
        <p class="Code_Indented">RETURN, 0 ; Skip default event handling</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">FUNCTION RBBox::MouseMotion, oWin, x, y, KeyMods</p>
        <p class="Code_Indented">IF self.buttonDown then begin</p>
        <p class="Code_Indented">&#160;&#160;&#160;x0 = self.x0</p>
        <p class="Code_Indented">&#160;&#160;&#160;y0 = self.y0</p>
        <p class="Code_Indented">&#160;&#160;&#160;xVector=[x0,x0,x,x,x0]</p>
        <p class="Code_Indented">&#160;&#160;&#160;yVector=[y0,y,y,y0,y0]</p>
        <p class="Code_Indented">&#160;&#160;&#160;xy = self.poly.ConvertCoord(xVector, yVector, /DEVICE, /TO_NORMAL)</p>
        <p class="Code_Indented">&#160;&#160;&#160;self.poly.SetData, REFORM(xy[0,*]), REFORM(xy[1,*])</p>
        <p class="Code_Indented">ENDIF</p>
        <p class="Code_Indented">RETURN, 0 ; Skip default event handling</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">FUNCTION RBBox::MouseUp, oWin, x, y, iButton</p>
        <p class="Code_Indented">IF (~self.buttonDown) THEN RETURN, 0</p>
        <p class="Code_Indented">x0 = self.x0</p>
        <p class="Code_Indented">y0 = self.y0</p>
        <p class="Code_Indented">xVector=[x0,x0,x,x,x0]</p>
        <p class="Code_Indented">yVector=[y0,y,y,y0,y0]</p>
        <p class="Code_Indented">xy = self.poly.ConvertCoord(xVector, yVector, /DEVICE, /TO_NORMAL)</p>
        <p class="Code_Indented">self.poly.SetData, REFORM(xy[0,*]), REFORM(xy[1,*])</p>
        <p class="Code_Indented">self.poly.LINESTYLE='-'</p>
        <p class="Code_Indented">self.buttonDown=0</p>
        <p class="Code_Indented">; Clear the current selections</p>
        <p class="Code_Indented">oSelect = oWin.GetSelect()</p>
        <p class="Code_Indented">FOREACH oVis, oSelect do oVis.Select, /UNSELECT</p>
        <p class="Code_Indented">; Do a hit test and select new items.</p>
        <p class="Code_Indented">oVisList = oWin.HitTest(x0+(x-x0)/2, y0+(y-y0)/2, $</p>
        <p class="Code_Indented">&#160;&#160;&#160;DIMENSIONS=ABS([x-x0, y-y0]) &gt; 10)</p>
        <p class="Code_Indented">FOREACH vis, oVisList do begin</p>
        <p class="Code_Indented">&#160;&#160;&#160;if vis ne self.poly then vis.Select, /ADD</p>
        <p class="Code_Indented">ENDFOREACH</p>
        <p class="Code_Indented">RETURN, 0 ; Skip default event handling</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">PRO RBBox__define</p>
        <p class="Code_Indented">; We must subclass from GraphicsEventAdapter.</p>
        <p class="Code_Indented">void = {RBBox, inherits GraphicsEventAdapter, $</p>
        <p class="Code_Indented">X0: 0, Y0:0, BUTTONDOWN:0, POLY:OBJ_NEW()}</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">PRO RBBoxEventsTest</p>
        <p class="Code_Indented">x = Findgen(200)</p>
        <p class="Code_Indented">y = Sin(x*2*!PI/25.0)*Exp(-0.01*x)</p>
        <p class="Code_Indented">p = PLOT(x, y, TITLE='Click, hold mouse down and drag, release to draw box')</p>
        <p class="Code_Indented">p.window.EVENT_HANDLER=Obj_New('RBBox')<br /></p>
        <p class="Code">END</p>
        <h2 class="API"><a name="EX_WIDGET"></a>Example Using WIDGET_WINDOW</h2>
        <p>In this example, only the MouseMotion event method is used. The event coordinates (in device coordinates) are converted to data coordinates and displayed in a label widget below the draw widget. A crosshair is also drawn at the nearest plot data point. Save all of the code in a file, <code>exwidgetwindowevents.pro</code>, and then run the <code>ExWidgetWindowEvents </code>procedure.</p>
        <p class="Code">&#160;</p>
        <p class="Code">FUNCTION ExWidWin::Init, plot, label, crosshair</p>
        <p class="Code_Indented">self.plot = plot</p>
        <p class="Code_Indented">self.label = label</p>
        <p class="Code_Indented">self.crosshair = crosshair</p>
        <p class="Code_Indented">return, 1</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">FUNCTION ExWidWin::MouseMotion, oWin, x, y, KeyMods</p>
        <p class="Code_Indented">; Convert from screen coordinates to data coordinates.</p>
        <p class="Code_Indented">xy = self.plot.ConvertCoord(x, y, /DEVICE, /TO_DATA)</p>
        <p class="Code_Indented">; "Snap" the location to the nearest plot point.</p>
        <p class="Code_Indented">xy = self.plot.GetValueAtLocation(xy[0])</p>
        <p class="Code_Indented">; Update the crosshair location and the label</p>
        <p class="Code_Indented">self.crosshair.LOCATION = xy</p>
        <p class="Code_Indented">probe = STRING(xy[0:1], FORMAT='(2F9.2)')</p>
        <p class="Code_Indented">WIDGET_CONTROL, self.label, SET_VALUE=probe</p>
        <p class="Code_Indented">return, 1 ; Perform default event handling</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">PRO ExWidWin__define</p>
        <p class="Code_Indented">void = {ExWidWin, inherits GraphicsEventAdapter, $</p>
        <p class="Code_Indented">plot: OBJ_NEW(), label: 0L, crosshair: OBJ_NEW()}</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">PRO ExWidgetWindowEvents_event, event</p>
        <p class="Code_Indented">; Be sure to process the internal window event first.</p>
        <p class="Code_Indented">; This handles selection, translation, rotation, etc.</p>
        <p class="Code_Indented">w = WIDGET_EVENT(/NOWAIT)</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">CASE TAG_NAMES(event, /STRUCTURE_NAME) of</p>
        <p class="Code_Indented">&#160;&#160;&#160;'WIDGET_BASE': BEGIN</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">&#160;&#160;&#160;; Handle base resize events. Retrieve our cached padding,</p>
        <p class="Code_Indented">&#160;&#160;&#160;; and our new size.</p>
        <p class="Code_Indented">&#160;&#160;&#160;WIDGET_CONTROL, event.id, GET_UVALUE=pad, TLB_GET_SIZE=newSize</p>
        <p class="Code_Indented">&#160;&#160;&#160;wDraw = WIDGET_INFO(event.top, FIND_BY_UNAME='ex_widwin_window')</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">&#160;&#160;&#160;; Change the draw widget to match the new size, minus padding.</p>
        <p class="Code_Indented">&#160;&#160;&#160;xy = newSize - pad</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">&#160;&#160;&#160;WIDGET_CONTROL, wDraw, $</p>
        <p class="Code_Indented">&#160;&#160;&#160;&#160;&#160;&#160;DRAW_XSIZE=xy[0], DRAW_YSIZE=xy[1], $</p>
        <p class="Code_Indented">&#160;&#160;&#160;&#160;&#160;&#160;SCR_XSIZE=xy[0], SCR_YSIZE=xy[1]</p>
        <p class="Code_Indented">&#160;&#160;&#160;END</p>
        <p class="Code_Indented">&#160;&#160;&#160;ELSE: ; do nothing</p>
        <p class="Code_Indented">ENDCASE</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code">END</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code">PRO ExWidgetWindowEvents</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">; Create the widgets (start unmapped)</p>
        <p class="Code_Indented">wBase = WIDGET_BASE(/COLUMN, /TLB_SIZE_EVENTS, MAP=0)</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">wDraw = WIDGET_WINDOW(wBase, $</p>
        <p class="Code_Indented">&#160;&#160;&#160;UNAME='ex_widwin_window', $</p>
        <p class="Code_Indented">&#160;&#160;&#160;X_SCROLL_SIZE=640, Y_SCROLL_SIZE=512)</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">w1 = WIDGET_LABEL(wBase, /ALIGN_LEFT, /DYNAMIC)</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">WIDGET_CONTROL, wBase, /REALIZE</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">; Cache the padding between the base and the draw</p>
        <p class="Code_Indented">WIDGET_CONTROL, wBase, TLB_GET_SIZE=basesize</p>
        <p class="Code_Indented">padding = basesize - [640, 512]</p>
        <p class="Code_Indented">WIDGET_CONTROL, wBase, SET_UVALUE=padding</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">; Retrieve the newly-created Window object.</p>
        <p class="Code_Indented">WIDGET_CONTROL, wDraw, GET_VALUE=win</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">; Make sure this is the current window</p>
        <p class="Code_Indented">win.Select</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">p = PLOT(/TEST, /CURRENT)</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">; Change crosshair to "manual" mode and set some properties.</p>
        <p class="Code_Indented">c = p.CROSSHAIR</p>
        <p class="Code_Indented">c.STYLE = 'Manual'</p>
        <p class="Code_Indented">c.COLOR = 'Red'</p>
        <p class="Code_Indented">c.LINESTYLE = '-'</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">; Cache the graphics references for the event handlers</p>
        <p class="Code_Indented">handler = OBJ_NEW('ExWidWin', p, w1, c)</p>
        <p class="Code_Indented">win.EVENT_HANDLER = handler</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">; Draw the widgets and start the event processing</p>
        <p class="Code_Indented">WIDGET_CONTROL, wBase, /MAP</p>
        <p class="Code_Indented">XMANAGER, 'ExWidgetWindowEvents', wBase, /NO_BLOCK</p>
        <p class="Code">END</p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>