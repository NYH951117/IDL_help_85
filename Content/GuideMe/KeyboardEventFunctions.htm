<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Creating Keyboard Event Functions</title>
        <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../Resources/TableStyles/Description.css" rel="stylesheet" />
        <link href="../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <h1>Creating Keyboard Event Functions</h1>
        <p>You can create custom functions to handle keyboard events in a graphics              <a href="../Reference Material/W/WINDOW.htm">WINDOW</a> or in a <a href="../Reference Material/W/WIDGET_WINDOW.htm">WIDGET_WINDOW</a>. These functions must use the syntax described below.</p>
        <p>Each function must return a value of 0 to turn off default event handling or 1 to perform default event handling. </p>
        <p class="Tip" data-mc-autonum="&lt;b&gt;Tip: &lt;/b&gt;"><span class="autonumber"><span><b>Tip: </b></span></span>Instead of creating a separate function for each event handler, you may find it convenient to use a custom event handling class along with the EVENT_HANDLER property. See&#160;<a href="GraphicsEventHandler.htm">Creating an Event Handler Class to Control Events</a> for details on how to write this object class.</p>
        <h2 class="API">Syntax</h2>
        <p><i>Result</i> = FUNCTION_NAME(<em>Window, IsASCII, Character, KeyValue, X, Y, Press, Release, KeyMods</em>)</p>
        <p>Where FUNCTION_NAME is a unique name for the function, which will be called from one of the keyboard event handling keywords of             <a href="../Reference Material/W/WINDOW.htm">WINDOW</a> or <a href="../Reference Material/W/WIDGET_WINDOW.htm">WIDGET_WINDOW</a>. Avoid using generic names such as "KeyboardHandler" to prevent name collisions with other applications using event handlers.</p>
        <h2 class="API">Arguments</h2>
        <h3>Window</h3>
        <p>The object reference of the window in which a keyboard event happened.</p>
        <h3>IsASCII</h3>
        <p>A scalar byte value that indicates whether the keyboard event corresponds to an ASCII character. If IsASCII is non-zero, the Character argument will be set to a byte value corresponding to the character of the pressed key. If IsASCII is zero, the KeySymbol argument will be set to a numeric value indicating the key that was pressed.</p>
        <h3>Character</h3>
        <p>If IsASCII is non-zero, this argument is set to a byte value corresponding to the ASCII character of the key that was pressed. Otherwise, this argument is set to zero.</p>
        <h3><a name="KeyValue"></a>KeyValue</h3>
        <p>If IsASCII is zero, this argument is set to a value that indicates the key that was pressed. Otherwise, this argument is set to zero. Possible values are:</p>
        <table class="TableStyle_Description" style="margin-left: 0;margin-right: auto;caption-side: top;mc-table-style: url('../Resources/TableStyles/Description.css');" cellspacing="0">
            <col class="Column-Column1" />
            <col class="Column-Column1" />
            <thead>
                <tr class="Head-Header1">
                    <th class="TableStyle_Description_Head_0_0_RowSep_ColSep">
                        <p>Value</p>
                    </th>
                    <th class="TableStyle_Description_Head_0_0_RowSep_ColEnd">
                        <p>Key</p>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr class="Body-Body1">
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>1</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Shift</p>
                    </td>
                </tr>
                <tr class="Body-Body2">
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p>2</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>Control</p>
                    </td>
                </tr>
                <tr class="Body-Body1">
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>3</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Caps lock</p>
                    </td>
                </tr>
                <tr class="Body-Body2">
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p>4 </p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>Alt</p>
                    </td>
                </tr>
                <tr class="Body-Body1">
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>5</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Left</p>
                    </td>
                </tr>
                <tr class="Body-Body2">
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p>6</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>Right</p>
                    </td>
                </tr>
                <tr class="Body-Body1">
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>7</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Up</p>
                    </td>
                </tr>
                <tr class="Body-Body2">
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p>8</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>Down</p>
                    </td>
                </tr>
                <tr class="Body-Body1">
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>9</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Page up</p>
                    </td>
                </tr>
                <tr class="Body-Body2">
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p>10</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>Page down</p>
                    </td>
                </tr>
                <tr class="Body-Body1">
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>11</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Home</p>
                    </td>
                </tr>
                <tr class="Body-Body2">
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColSep">
                        <p>12</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColEnd">
                        <p>End</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>On East Asian (Chinese, Japanese, Korean) localized Windows operating systems with an Asian language pack installed, characters entered in the Windows Input Method Manager (IMM)composition window are returned in the   the <i>KeyValue</i> argument as  unsigned integers representing a Wide character (Unicode value). The  <a href="../Reference Material/I/I18N_WIDECHARTOMULTIBYTE.htm">I18N_WIDECHARTOMULTIBYTE</a> routine can  convert these  characters to multibyte strings. For more information, see <a href="../Creating IDL Programs/Internationalizing Code.htm">Internationalizing Code</a>.</p>
        <h3>X</h3>
        <p>The position to the right of the lower left corner of the drawable area, in device coordinates (pixels).</p>
        <h3>Y</h3>
        <p>The position above the lower left corner of the drawable area, in device coordinates (pixels).</p>
        <h3>Press</h3>
        <p>The value indicating that this event represents a key press. This argument is non-zero if the event is the result of pressing the key.</p>
        <h3>Release</h3>
        <p>The value indicating that this event represents a key release. This argument is non-zero if the event is the result of releasing the key.</p>
        <h3>KeyMods</h3>
        <p>The value containing a bitwise mask indicating which modifier keys are active at the time of the keyboard event. If a bit is zero, the key is up; if the bit is set, the key is pressed. The following table describes the bits in this bit mask. Possible values are:</p>
        <table style="caption-side: bottom;mc-table-style: url('../Resources/TableStyles/Description.css');margin-left: 0;margin-right: auto;" cellspacing="0" class="TableStyle_Description">
            <col />
            <col />
            <thead>
                <tr>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColSep">
                        <p>Value</p>
                    </td>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColEnd">
                        <p>Modifier Key</p>
                    </td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>1</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Shift</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p>2</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>Control</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>4</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Caps lock</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColSep">
                        <p>8</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColEnd">
                        <p>Alt</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2 class="API"><a name="Example"></a>Example</h2>
        <p>In the following example code, the KeyboardEventsTestHandler function creates graphic element selections based on the keyboard character that is typed. Copy this code into a new IDL file and compile it. The example below this one is a test that you can run to see these selections work.</p>
        <p>
            <img src="../Resources/Images/KeyboardEventHandler.jpg" />
        </p>
        <p class="Code">FUNCTION KeyboardEventsTestHandler, Window, $</p>
        <p class="Code_Indented">IsASCII, Character, KeyValue, X, Y, Press, Release, KeyMods</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">print, 'KeyboardHandler'</p>
        <p class="Code_Indented">help, Window, $</p>
        <p class="Code_Indented">&#160;&#160;&#160;IsASCII, Character, KeyValue, X, Y, Press, Release, KeyMods</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">IF Release then return, 1</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">graphics = Window.uValue</p>
        <p class="Code_Indented">graphics[0].select, /clear</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">FOREACH graphic, graphics do begin</p>
        <p class="Code_Indented">&#160;&#160;&#160;CASE string(character) OF</p>
        <p class="Code_Indented">&#160;&#160;&#160;'t': if ISA(graphic, 'TEXT') then graphic.select, /ADD</p>
        <p class="Code_Indented">&#160;&#160;&#160;'c': if ISA(graphic, 'ELLIPSE') then graphic.select, /ADD</p>
        <p class="Code_Indented">&#160;&#160;&#160;'l': if ISA(graphic, 'POLYLINE') then graphic.select, /ADD</p>
        <p class="Code_Indented">&#160;&#160;&#160;'p': if ISA(graphic, 'POLYGON') then graphic.select, /ADD</p>
        <p class="Code_Indented">&#160;&#160;&#160;ELSE:</p>
        <p class="Code_Indented">&#160;&#160;&#160;ENDCASE</p>
        <p class="Code_Indented">ENDFOREACH</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">Window.refresh</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">RETURN, 0 ; Skip default event handling</p>
        <p class="Code">END</p>
        <h3>Keyboard Character Selection Example</h3>
        <p>Run the following code example to test the event handling functions defined in the previous code example.</p>
        <p class="Code">PRO KeyboardEventsTest</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">window = window()</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">text1=text(.2, .95, 'Type t to select text, c for circles, p for polygons, l for lines')</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">text2=text(.5, .8, 'Text 1')</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">text3=text(.5, .65, 'Text 2')</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">circle = ELLIPSE(500, 150, MAJOR=50, /device, $</p>
        <p class="Code_Indented">&#160;&#160;&#160;FILL_COLOR="yellow")</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">x = indgen(200)+225</p>
        <p class="Code_Indented">y = SIN(2.0*FINDGEN(200)*!PI/25.0)*EXP(-0.02*FINDGEN(200))*100 + 150</p>
        <p class="Code_Indented">polygon = POLYGON(x, y, /device, $</p>
        <p class="Code_Indented">&#160;&#160;&#160;/FILL_BACKGROUND, FILL_COLOR=!COLOR.LIGHT_STEEL_BLUE)</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">x = [100, 200, 200, 100, 100]</p>
        <p class="Code_Indented">y = [100, 100, 200, 200, 100]</p>
        <p class="Code_Indented">line = POLYLINE(x, y, /DEVICE)</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">window.uValue = [text1, text2, text3, circle, polygon, line]</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">window.KEYBOARD_HANDLER='KeyboardEventsTestHandler'</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code">END</p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>