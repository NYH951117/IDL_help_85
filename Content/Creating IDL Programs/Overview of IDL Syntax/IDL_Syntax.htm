<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Environment|Getting Started">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>IDL Documentation Syntax</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/TableStyles/Description.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../../IDL Concepts.htm">Environment</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../../Getting Started.htm">Getting Started</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Documentation Syntax</span>
        </div>
        <h1><a name="intro_2908375474_syntax_conventions"><a name="intro_2908375474_982979"></a></a><a name="intro_2908375474_67897"></a><a name="kanchor1"></a>IDL Documentation Syntax</h1>
        <p>The following table lists the syntax elements used in the IDL help system for  documentation on routines, functions, and objects:</p>
        <table style="mc-table-style: url('../../Resources/TableStyles/Description.css');margin-left: 0;margin-right: auto;caption-side: bottom;" cellspacing="0" class="TableStyle_Description">
            <col />
            <col />
            <thead>
                <tr>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColSep">
                        <p>Element</p>
                    </td>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColEnd">
                        <p>Description</p>
                    </td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p><a href="#Square" class="selected">[ ] (Square brackets)</a>
                        </p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Indicates that the contents are optional. Do not include the brackets in your call.</p>
                        <p>Brackets are also used when creating and accessing arrays.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p><i>[ ]</i> (Italicized square brackets)</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>Indicates that the square brackets are part of the statement (used to define an array).</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p><i>Argument</i>
                        </p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Arguments are shown in italics, and must be specified in the order listed.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p><a href="#Keywords" class="selected">KEYWORD</a>
                        </p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>Keywords are all caps, and can be specified in any order. For functions, all arguments and keywords must be contained within parentheses.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p><a href="#Keywords" class="selected">/KEYWORD</a>
                        </p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Indicates a <a href="#Keywords" class="selected">boolean keyword</a>.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p><i>Italics</i>
                        </p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>Indicates arguments, expressions, or statements for which you must provide values.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p><a href="#Braces" class="selected">{ } (Braces)</a>
                        </p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <ul>
                            <li value="1">Indicates that you must choose one of the values they contain</li>
                            <li value="2">Encloses a list of possible values, separated by vertical lines ( | )</li>
                            <li value="3">Encloses useful information about a keyword</li>
                            <li value="4">Defines an IDL structure (this is the only case in which the braces are included in the call).</li>
                        </ul>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p>| (Vertical lines)</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>Separates multiple values or keywords.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>[,&#160;<i>Value<sub>1</sub></i>, ... , <i>Value<sub>n</sub></i>]</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Indicates that any number of values can be specified.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColSep">
                        <p>[,&#160;<i>Value<sub>1</sub></i>, ... , <i>Value<sub>8</sub></i>]</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColEnd">
                        <p>Indicates the maximum number of values that can be specified.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2 class="API"><a name="intro_2908375474_40412"></a>Elements of Syntax</h2>
        <h3><a name="Square"></a>Square Brackets ( [ ] )</h3>
        <ul>
            <li value="1">Content between square brackets is optional. Pay close attention to the grouping of square brackets. Consider the following examples:</li>
        </ul>
        <p class="indent">ROUTINE_NAME, <i>Value1</i> [,&#160;<i>Value2</i>] [,&#160;<i>Value3</i>]: You must include <i>Value1</i>. You do not have to include <i>Value2</i> or <i>Value3</i>. <i>Value2</i> and <i>Value3</i> can be specified independently.</p>
        <p class="indent">ROUTINE_NAME, <i>Value1</i> [,&#160;<i>Value2</i>, <i>Value3</i>]: You must include <i>Value1</i>. You do not have to include <i>Value2</i> or <i>Value3</i>, but you must include both <i>Value2</i> and <i>Value3</i>, or neither.</p>
        <p class="indent">ROUTINE_NAME [,&#160;<i>Value1</i> [,&#160;<i>Value2</i>]]: You can specify <i>Value1</i> without specifying <i>Value2</i>, but if you specify <i>Value2</i>, you must also specify <i>Value1</i>.</p>
        <ul>
            <li value="1">Do not include square brackets in your statement unless the brackets are italicized. Consider the following syntax:</li>
        </ul>
        <p class="indent"><i>Result</i> = KRIG2D( <i>Z</i> [,&#160;<i>X</i>, <i>Y</i>] [,&#160;BOUNDS=<i>[xmin</i>, <i>ymin</i>, <i>xmax</i>, <i>ymax]</i>] )</p>
        <p class="indent">An example of a valid statement is:</p>
        <p class="indent">R = KRIG2D( Z, X, Y, BOUNDS=[0,0,1,1] )</p>
        <ul>
            <li value="1">Note that when [,&#160;<i>Value<sub>1</sub></i>, ... , <i>Value<sub>n</sub></i>] is listed, you can specify any number of arguments. When an explicit number is listed, as in [,&#160;<i>Value<sub>1</sub></i>, ... , <i>Value<sub>8</sub></i>], you can specify only as many arguments as are listed.</li>
        </ul>
        <h3><a name="Braces"></a>Braces ( { } )</h3>
        <ul>
            <li value="1">For certain keywords, a list of the possible values is provided. This list is enclosed in braces, and the choices are separated by a vertical line ( | ). Do not include the braces in your statement. For example, consider the following syntax:</li>
        </ul>
        <p class="indent">READ_JPEG [,&#160;TRUE={1 | 2 | 3 }]</p>
        <p class="indent">In this example, you must choose either 1, 2, or 3. An example of a valid statement is:</p>
        <p class="indent">READ_JPEG, TRUE=1</p>
        <ul>
            <li value="1">Braces are used to enclose the allowable range for a keyword value. Unless otherwise noted, ranges provided are inclusive. Consider the following syntax:</li>
        </ul>
        <p class="indent"><i>Result</i> = CVTTOBM( <i>Array</i> [,&#160;THRESHOLD=<i>value</i>{0 to 255}] )</p>
        <p class="indent">An example of a valid statement is:</p>
        <p class="indent"><i>Result</i> = CVTTOBM( A, THRESHOLD=150 )</p>
        <ul>
            <li value="1">Braces are also used to provide useful information about a keyword. For example:</li>
        </ul>
        <p class="indent">[,&#160;LABEL=<i>n</i>{label every <i>n</i>th gridline}]</p>
        <p class="indent">Do not include the braces or their content in your statement.</p>
        <ul>
            <li value="1">Certain keywords are prefaced by X, Y, or Z. Braces are used for these keywords to indicate that you must choose one of the values it contains. For example, [{X | Y}RANGE=<i>array</i>] indicates that you can specify either XRANGE=<i>array</i> or YRANGE=<i>array</i>. </li>
            <li value="2">Note that in IDL, braces are used to define structures. When defining a structure, you <i>do</i> want to include the braces in your statement.</li>
        </ul>
        <h3>Italics</h3>
        <ul>
            <li value="1">Italicized words are arguments, expressions, or statements for which you must provide values. The value you provide can be a numerical value, such as 10, an expression, such as DIST(100), or a named variable. For keywords that expect a string value, the syntax is listed as KEYWORD=<i>string</i>. The value you provide can be a string, such as 'Hello' (enclosed in single quotation marks), or a variable that holds a string value.</li>
            <li value="2">The italicized values that must be provided for keywords are listed in the most helpful terms possible. For example, [,&#160;XSIZE=<i>pixels</i>] indicates that the XSIZE keyword expects a value in pixels, while [,&#160;ORIENTATION=<i>ccw_degrees_from_horiz</i>] indicates that you must provide a value in degrees, measured counter-clockwise from horizontal.</li>
        </ul>
        <h2 class="API">Procedures</h2>
        <p>IDL&#160;<a name="kanchor2"></a>procedures use the following general syntax:</p>
        <p>PROCEDURE_NAME, <i>Argument</i> [, <i>Optional_Argument</i>]</p>
        <p>where PROCEDURE_NAME is the name of the procedure, <i>Argument</i> is a required parameter, and <i>Optional_Argument</i> is an optional parameter to the procedure.</p>
        <h2 class="API">Functions</h2>
        <p><a name="kanchor3"></a>IDL functions use the following general syntax:</p>
        <p><i>Result</i> = FUNCTION_NAME( <i>Argument</i> [, <i>Optional_Argument</i>] )</p>
        <p>where <i>Result</i> is the returned value of the function, FUNCTION_NAME is the name of the function, <i>Argument</i> is a required parameter, and <i>Optional_Argument</i> is an optional parameter. Note that all arguments and keyword arguments to functions should be supplied <i>within</i> the parentheses that follow the function’s name.</p>
        <p>Functions do not always have to be used in assignment statements (i.e., <code>A=SIN(10.2)</code>), they can be used just like any other IDL expression. For example, you could print the result of <code>SIN(10.2)</code> by entering the command:</p>
        <p class="Code">PRINT, SIN(10.2)</p>
        <h2 class="API"><a name="kanchor4"></a><a name="kanchor5"></a>Arguments</h2>
        <p>The “Arguments” section describes each valid argument to the routine. Note that these arguments are <a name="kanchor6"></a>positional parameters that must be supplied in the order indicated by the routine’s syntax.</p>
        <h3>Named Variables</h3>
        <p>Often, arguments that contain values upon return from the function or procedure (“output arguments”) are described as accepting “<a name="kanchor7"></a>named variables”. A named variable is simply a valid IDL variable name. This variable <i>does not</i> need to be defined before being used as an output argument. Note, however that when an argument calls for a named variable, only a named variable can be used—sending an expression causes an error.</p>
        <h2 class="API"><a name="Keywords"></a><a name="kanchor8"></a><a name="kanchor9"></a>Keywords</h2>
        <p><a name="kanchor10"></a>The “Keywords” section describes each valid keyword argument to the routine. Keyword arguments are formal parameters that can be supplied in any order.</p>
        <p>Keyword arguments are supplied to IDL routines by including the keyword name followed by an equal sign (“=”) and the value to which the keyword should be set. The value can be a value, an expression, or a <i>named variable</i> (a <a name="kanchor11"></a>named variable is simply a valid IDL variable name).</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>If you set a keyword equal to an <i>undefined</i> named variable, IDL will quietly ignore the value.</p>
        <p>For example, to produce a plot with diamond-shaped plotting symbols, the PSYM keyword should be set to 4 as follows:</p>
        <p class="Code">PLOT, FINDGEN(10), PSYM=4</p>
        <p>Note the following when specifying keywords:</p>
        <ul>
            <li value="1">Certain keywords are boolean, meaning they can only be set to  0 or 1. These keywords are switches used to turn an option on and off. Usually, setting such keywords equal to 1 causes the option to be turned on. Explicitly setting the keyword to 0 (or not including the keyword) turns the option off. In the syntax listings in this reference, all keywords that are preceded by a slash can be set by prefacing them by the slash. For example, <code>SURFACE, DIST(10), /SKIRT</code> is a shortcut for <code>SURFACE, DIST(10), SKIRT=1</code>. To turn the option back off, you must set the keyword equal to 0, as in <code>SURFACE, DIST(10), SKIRT=0</code>.</li>
        </ul>
        <p class="indent">In rare cases, a keyword’s default value is 1. In these cases, the syntax is listed as KEYWORD=0, as in SLIDE_IMAGE [,&#160;<i>Image</i>] [,&#160;CONGRID=0]. In this example, CONGRID is set to 1 by default. If you specify CONGRID=0, you can turn it back on by specifying either /CONGRID or CONGRID=1.</p>
        <ul>
            <li value="1">Some keywords  obtain values that can be used upon return from the function or procedure. These keywords are listed as KEYWORD=<i>variable</i>. Any valid variable name can be used for these keywords, and the variable does not need to be defined first. Note, however, that when a keyword calls for a named variable, only a named variable can be used—sending an expression causes an error.</li>
        </ul>
        <p class="indent">For example, the WIDGET_CONTROL procedure can return the user values of widgets in a named variable using the GET_UVALUE keyword. To return the user value for a widget ID (contained in the variable <code>mywidget</code>) in the variable <code>userval</code>, you would use the command:</p>
        <p class="Code_Indented">WIDGET_CONTROL, mywidget, GET_UVALUE = userval</p>
        <p class="indent">Upon return from the procedure, <code>userval</code> contains the user value. Note that <code>userval </code>did not have to be defined before the call to WIDGET_CONTROL.</p>
        <ul>
            <li value="1">Some routines have keywords that are mutually exclusive, meaning only one of the keywords can be present in a given statement. These keywords are grouped together, and separated by a vertical line. For example, consider the following syntax:</li>
        </ul>
        <p class="indent">PLOT, [<i>X</i>,] <i>Y</i> [,&#160;/DATA | , /DEVICE | , /NORMAL] </p>
        <p class="indent">In this example, you can choose either DATA, DEVICE, or NORMAL, but not more than one. An example of a valid statement is:</p>
        <p class="indent">PLOT, SIN(A), /DEVICE</p>
        <ul>
            <li value="1">Keywords can be abbreviated to their shortest unique length. For example, the XSTYLE keyword can be abbreviated to XST because there are no other keywords in IDL that begin with XST. You cannot shorten XSTYLE to XS, however, because there are other keywords that begin with XS, such as XSIZE.</li>
        </ul>
        <h2 class="API">Properties</h2>
        <p>The “Properties” section describes each valid property for the routine. Properties are formal parameters that you can supply in any order during the routine's call. In some instances, you can also change the values of properties after you have initially called a routine.</p>
        <ul>
            <li value="1">Properties are assigned by stating the property name, followed by the "=" sign and finally the value you are assigning.</li>
            <li value="2">Some properties are Boolean, meaning they can only be set to 0 or 1. Boolean properties can be set during a routine's initial call by explicitly assigning a value or by the alternate "/" syntax. In the following example, both versions of the HIDE syntax have the same effect on the graphic:</li>
        </ul>
        <p class="indent"><i>result</i> = PLOT(<i>X, Y</i>, /HIDE)</p>
        <p class="indent"><i>result</i> = PLOT(<i>X, Y</i>,  HIDE=1)</p>
        <p class="indent">Usually, setting such properties equal to 1 causes the option to be turned on. Explicitly setting the property to 0 (or not including the property) turns the option off. In the syntax listings in this reference, all properties that are preceded by a slash can be set by prefacing them by the slash. For example, PLOT(<i>myData</i>, /HIDE) is a shortcut for PLOT(<i>myData</i>, HIDE=1). To turn the option back off, you must set the keyword equal to 0, as in PLOT(<i>myData</i>, HIDE=0) or change the property using the <a href="../../Object Classes/IDL Object Class Overview/Object_Properties.htm#Setting">dot syntax</a>.</p>
        <p>For more detailed information on setting and changing Properties, see: <a href="../../Object Classes/IDL Object Class Overview/Object_Properties.htm">Modifying Object Properties</a> and <a href="../../GuideMe/propChanges.htm">Changing Graphics Properties.</a></p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>