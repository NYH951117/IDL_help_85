<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-conditions="" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Language|Variables">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Monitoring Variable Values</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../../IDL Programming.htm">Language</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../Variables.htm">Variables</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Monitoring Variable Values</span>
        </div>
        <h1><a name="debug_2348412560_542765"></a><a name="debug_2348412560_58614"></a>Monitoring Variable Values</h1>
        <p>When execution halts, there are several ways to see the values of program variables. These include:</p>
        <ul>
            <li value="1">Check variable values from the command line — see <a href="#debug_2348412560_542914" class="selected">Showing Variable Values During Execution</a>.</li>
            <li value="2">Use the Variable Watch window — see <a href="#debug_2348412560_542775" class="selected">The Variables View</a></li>
            <li value="3">Recover "missing" variables — see <a href="#debug_2348412560_543057" class="selected">Disappearing Variables</a></li>
        </ul>
        <h2 class="API"><a name="debug_2348412560_542914"></a><a name="debug_2348412560_44343"></a>Showing Variable Values During Execution</h2>
        <p>When execution stops you can query the values of current variables in the program scope using the PRINT and HELP routines. For instance, suppose you have created the following program:</p>
        <p class="Code">FUNCTION hello_who, who </p>
        <p class="Code">   RETURN, 'Hello ' + who </p>
        <p class="Code">END </p>
        <p class="Code">&#160;</p>
        <p class="Code">PRO hello_main </p>
        <p class="Code">   name = '' </p>
        <p class="Code">   READ, name, PROMPT='Enter Name: ' </p>
        <p class="Code">   str = HELLO_WHO(name) </p>
        <p class="Code">   PRINT, str </p>
        <p class="Code">END </p>
        <p>Place a breakpoint on the <code>PRINT, str </code>line and then compile and run the program. Enter a name at the IDL command line when prompted. When execution halts, return the value of the <code>name</code> variable by entering, </p>
        <p class="Code">PRINT, name</p>
        <p>The Console view shows the name you have entered. </p>
        <p>Return information about the <code>str</code> variable by entering:</p>
        <p class="Code">HELP, str</p>
        <p>The Console view shows the variable name, data type and value. This information is also available in the Variables view, described in the following section. </p>
        <p class="Tip" data-mc-autonum="&lt;b&gt;Tip: &lt;/b&gt;"><span class="autonumber"><span><b>Tip: </b></span></span>You can also place PRINT and HELP statements in your program to see variable values without pausing program execution. As these statements are encountered, values are printed to the Console. </p>
        <h2 class="API"><a name="debug_2348412560_542775"></a><a name="debug_2348412560_81959"></a>The Variables View</h2>
        <p>The Variab<a name="kanchor4654"></a>les view window displays the values of variables in the current execution context. If the calling context changes during execution — as when stepping into a procedure or function — the variable table is replaced with a table appropriate to the new context. </p>
        <h2 class="API"><a name="debug_2348412560_543057"></a><a name="debug_2348412560_17461"></a>Disappearing <a name="kanchor4655"></a><a name="kanchor4656"></a>Variables</h2>
        <p>IDL users may find that all their variables have seemingly disappeared after an error occurs inside a procedure or function. The misunderstood subtlety is that after the error occurs, IDL’s <a name="kanchor4657"></a>context is <i>inside the called procedure</i>, not in the main level. All variables in procedures and functions, with the exception of parameters and common variables, are local in scope. Typing <a href="../../Reference Material/R/RETURN.htm#R_822202989_836821">RETURN</a> or <a href="../../Reference Material/R/RETALL.htm#R_822202989_836817">RETALL</a> will make the lost variables reappear.</p>
        <p>RETALL is best suited for use when an error is detected in a procedure and it is desired to return immediately to the main program level despite nested procedure calls. RETALL issues RETURN commands until the main program level is reached.</p>
        <p>The HELP command can be used to see the current call stack (i.e., which program unit IDL is in and which program unit called it). For more information, see <a href="../../Reference Material/H/HELP.htm#H_835179117_748700">HELP</a>.</p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>