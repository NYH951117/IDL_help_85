<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Environment|Using Procedures, Functions, SAVE Files">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Defining a Procedure</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">  <![CDATA[ ]]></span><a class="MCBreadcrumbsLink" href="../../IDL Concepts.htm">Environment</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../IDL Program Types.htm">Using Procedures, Functions, SAVE Files</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Defining a Procedure</span>
        </div>
        <h1><a name="procedures_3673536221_758353"></a><a name="procedures_3673536221_97690"></a>Defining a Procedure</h1>
        <p>A sequence of one or more IDL statements can be given a name, compiled, and saved for future use with the procedure definition statement. Once a procedure has been successfully compiled, it can be executed using a procedure call statement interactively from the terminal, from a main program, or from another procedure or function.</p>
        <p>The general format for the definition of a procedure is as follows:</p>
        <p class="Code">PRO Name, Parameter1, ..., Parametern</p>
        <p class="Code">&#160;&#160;&#160;; Statements defining procedure.</p>
        <p class="Code">&#160;&#160;&#160;Statement1</p>
        <p class="Code">&#160;&#160;&#160;Statement2</p>
        <p class="Code">&#160;&#160;&#160;...</p>
        <p class="Code">; End of procedure definition.</p>
        <p class="Code">END</p>
        <p>The PRO statement must be the first line in a user-written IDL procedure.</p>
        <p>Calling a user-written procedure that is in a directory in the IDL search path (!PATH) and has the same name as the prefix of the <code>.sav </code>or <code>.pro</code> file, causes the procedure to be read from the disk, compiled, and executed without interrupting program execution.</p>
        <h2 class="API"><a name="procedures_3673536221_99300"></a>Calling a Procedure</h2>
        <p>The syntax of the procedure call statement is as follows:</p>
        <p class="Code" style="font-family: Courier;font-style: italic;font-size: 9pt;"><i>Procedure_Name, Parameter</i><sub class="italic">1</sub><i>, Parameter</i><sub class="italic">2</sub><i>, ..., Parameter</i><sub class="italic">n</sub>
        </p>
        <p>The procedure call statement invokes a system, user-written, or externally-defined procedure. The parameters that follow the procedure’s name are passed to the procedure. When the called procedure finishes, control resumes at the statement following the procedure call statement. Procedure names can be up to 128 characters long.</p>
        <p>Procedures can come from the following sources:</p>
        <ul>
            <li value="1">System procedures provided with IDL.</li>
            <li value="2">User-written procedures written in IDL and compiled with the .RUN command.</li>
            <li value="3">User-written procedures that are compiled automatically because they reside in directories in the search path. These procedures are compiled the first time they are used.</li>
            <li value="4">Procedures written in IDL, that are included with the IDL distribution, located in directories that are specified in the search path.</li>
            <li value="5">Under many operating systems, user-written system procedures coded in FORTRAN, C, or any language that follows the standard calling conventions, which have been dynamically linked with IDL using the LINKIMAGE or CALL_EXTERNAL procedures.</li>
        </ul>
        <h2 class="API"><a name="procedures_3673536221_97867"></a>Procedure Examples</h2>
        <p>Some procedures can be called without any parameters. For example:</p>
        <p class="Code">IPLOT</p>
        <p>This is a procedure call to launch the iPlot iTool. There are no explicit inputs or outputs. You can also call iPlot with parameters including data and color specifications: </p>
        <p class="Code">data = RANDOMU(Seed,45)</p>
        <p class="Code">IPLOT, data, COLOR=[255,0,0]</p>
        <p>This opens the iPlot tool and passes it random plot data. The <code>data</code> parameter is an argument and the COLOR parameter is a keyword. These elements are described in more detail in <a href="Parameters.htm#procedures_3673536221_771956">Parameters</a>.</p>
        <p>You can also create a named program consisting of a procedure. For example, suppose you have a file called <code>hello_world.pro</code> containing the following code:</p>
        <p class="Code">PRO hello_world</p>
        <p class="Code">&#160;&#160;&#160;PRINT, 'Hello World'</p>
        <p class="Code">END</p>
        <p>This IDL “program” consists of a single <i>user-defined procedure</i>. </p>
        <p>IDL program files are assumed to have the extension <code>.pro</code> or the extension <code>.sav</code>. When IDL searches for a user-defined procedure or function, it searches for files consisting of the name of the procedure or function, followed by the <code>.pro</code> or <code>.sav</code> extension. Procedures and functions can also accept arguments and keywords. Both arguments and keywords allow the program that calls the routine to pass data in the form of IDL variables or expressions to the routine.</p>
        <p>For example, the previous user-defined procedure could be changed to include an argument and a keyword:</p>
        <p class="Code">PRO hello_world, name, INCLUDE_NAME = include</p>
        <p class="Code">   IF (KEYWORD_SET(include) &amp;&amp; (N_ELEMENTS(name) NE 0)) THEN BEGIN</p>
        <p class="Code">      PRINT, 'Hello World From '+ name </p>
        <p class="Code">   ENDIF ELSE PRINT, 'Hello World'</p>
        <p class="Code">END</p>
        <p>Now if the INCLUDE_NAME keyword is set to a value greater than zero, the above procedure will include the string contained within the <code>name</code> variable if a value was supplied for the <i>name</i> argument. Enter the following procedure call at the command line: </p>
        <p class="Code">hello_world, name, /INCLUDE_NAME</p>
        <p>IDL prints,</p>
        <p class="Code">Hello World</p>
        <p>Now define a string name and repeat the procedure call: </p>
        <p class="Code">name = "Horton"</p>
        <p class="Code">hello_world, name, /INCLUDE_NAME</p>
        <p>IDL prints:</p>
        <p class="Code">Hello World From Horton</p>
        <p>This example uses the KEYWORD_SET and N_ELEMENTS functions in order to handle the possibility of missing information in a procedure or function call. See <a href="Determining_if_a_Keyword.htm#procedures_3673536221_758330">Determining if a Keyword is Set</a>for more information. </p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>