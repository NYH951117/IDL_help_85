<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Language|Arrays">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Array Subscript Ranges
        </title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/TableStyles/Description.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../../IDL Programming.htm">Language</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../Arrays.htm">Arrays</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Array Subscript Ranges</span>
        </div>
        <h1><a name="arrays_3727706888_762145"></a><a name="kanchor4439"></a><a name="kanchor4440"></a><a name="arrays_3727706888_67346"></a>Array Subscript<a name="kanchor4441"></a> Ranges
        </h1>
        <p>Subscript ranges are used to select a <a name="kanchor4442"></a>subarray from an array by giving the starting and ending subscripts of the subarray in each dimension. Subscript ranges can be combined with scalar and array subscripts and with other subscript ranges. Any rectangular portion of an array can be selected with subscript ranges.
        </p>
        <h2 class="API"><a name="arrays_3727706888_762195"></a><a name="arrays_3727706888_62541"></a>Types of Subscript Ranges
        </h2>
        <p>There are six types of subscript ranges: 
        </p>
        <table style="border-left-style: solid;border-left-width: 0px;border-right-style: solid;border-right-width: 0px;border-top-style: solid;border-top-width: 0px;border-bottom-style: solid;border-bottom-width: 2px;margin-left: 0;margin-right: auto;caption-side: bottom;mc-table-style: url('../../Resources/TableStyles/Description.css');" class="TableStyle_Description" cellspacing="0">
            <col />
            <col />
            <thead>
                <tr>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColSep">
                        <p>Subscript Format</p>
                    </td>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColEnd">
                        <p>Description</p>
                    </td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p><code>[*]</code>
                        </p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>All elements of a dimension. </p>
                        <p>This form is used with multidimensional arrays to select all elements along the dimension. For example, if <code>arr</code> is a 10-column by 12-row array, <code>arr[*, 11]</code> is the last row of <code>arr</code>, composed of elements <code>[arr[0,11], arr[1,11], ..., arr[9,11]]</code>, and is a 10-element row vector. Similarly, <code>arr[0, *]</code> is the first column of <code>arr</code>, <code>[arr[0,0], arr[0,1],..., arr[0,11]]</code>, and its dimensions are 1 column by 12 rows.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p><code>[s</code><sub class="Courier">0</sub><code>:s</code><sub class="Courier">1</sub><code>]</code>
                        </p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>Subscript range from <code>s</code><sub class="Courier">0</sub> to <code>s</code><sub class="Courier">1</sub>.</p>
                        <p>This denotes all elements whose subscripts range from the expression <code>s</code><sub class="Courier">0</sub> through <code>s</code><sub class="Courier">1</sub>(<code>s</code><sub class="Courier">0</sub> must not be greater than <code>s</code><sub class="Courier">1</sub>). For example, if the variable <code>vec</code> is a 10-element vector, <code>vec[4:8]</code> is a five-element vector composed of <code>vec[4]</code> through <code>vec[8]</code>. Negative indices may be used, where <code>-1</code> indicates the last element. For example, <code>vec[-6:-2]</code> returns the same five elements as <code>vec[4:8]</code>.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p><code>[s</code><sub class="Courier">0</sub><code>:*]</code>
                        </p>
                        <p><i> or</i>
                        </p>
                        <p><code>[s</code><sub class="Courier">0</sub><code>:-1]</code>
                        </p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>A range from the given element to the last element of dimension.</p>
                        <p>This denotes all elements from a given element to the last element of the dimension. If the variable <code>vec</code> is a 50-element vector, <code>vec[10:*]</code> is a 40-element vector made from <code>vec[10]</code> through <code>vec[49]</code>.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p><code>[s</code><sub class="Courier">0</sub><code>:s</code><sub class="Courier">1</sub><code>:n]</code>
                        </p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>Every <code>n</code>-th element in a range of subscripts from <code>s</code><sub class="Courier">0</sub> to <code>s</code><sub class="Courier">1</sub>. </p>
                        <p>The expression <code>n</code> is referred to as the <a name="kanchor4443"></a>subscript <i>stride</i>. The stride value may be positive or negative (but must not be zero). If the stride is positive then <code>s</code><sub class="Courier">0</sub> must be less than or equal to <code>s</code><sub class="Courier">1</sub>. If the stride is negative then <code>s</code><sub class="Courier">0</sub> must be greater than or equal to <code>s</code><sub class="Courier">1</sub>. If the stride is 1, then the result is identical in meaning to [<code>s</code><sub class="Courier">0</sub><code>:s</code><sub class="Courier">1</sub>], as described above. For example, if the variable <code>vec</code> is a 50-element vector, <code>vec[5:13:2]</code> is a five-element vector composed of <code>vec[5]</code>, <code>vec[7]</code>, <code>vec[9]</code>, <code>vec[11]</code>, and <code>vec[13]</code>. In another example, <code>vec[-1:0:-3]</code> would return every third element of <code>vec</code>, in reverse order.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p><code>[s</code><sub class="Courier">0</sub><code>:*:n]</code>
                        </p>
                        <p><i> or</i>
                        </p>
                        <p><code>[s</code><sub class="Courier">0</sub><code>:-1:n]</code>
                        </p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Every <code>n</code>-th element from element <code>s</code><sub class="Courier">0</sub> to the end of the dimension.</p>
                        <p>The expression <code>n</code> is referred to as the subscript <i>stride</i>. If the variable <code>vec</code> is a 50-element vector, <code>vec[10:*:4]</code> is a 10-element vector made from every fourth element between <code>vec[10]</code> through <code>vec[46]</code>.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColSep">
                        <p><code>[n]</code>
                        </p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColEnd">
                        <p>A simple subscript, either positive or negative. </p>
                        <p>Positive subscripts are indexed from the beginning of the array, while negative subscripts are indexed from the end (where <code>-1</code> is the last element). When used with multidimensional arrays, simple subscripts specify only elements with subscripts equal to the given subscript in that dimension.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p>Multidimensional subarrays can be specified using any combination of the above forms. For example, if <code>arr</code> is a 10x10 array, <code>arr[*,0:4]</code> returns a 10 x 5 array that is made from all columns of rows 0 to 4 of <code>arr</code>.
        </p>
        <h2 class="API"><a name="arrays_3727706888_762198"></a><a name="arrays_3727706888_28633"></a>Dimensionality of Subarrays
        </h2>
        <p>The <a name="kanchor4444"></a>dimensions of an extracted subarray are determined by the size in each dimension of the subscript range expression. In general, the number of dimensions is equal to the number of subscripts and subscript ranges. The size of the <i>n</i>-th dimension is equal to one if a simple subscript was used to specify that dimension in the subscript; otherwise, it is equal to the number of elements selected by the corresponding range expression.
        </p>
        <p>Degenerate dimensions (trailing dimensions with a size of one) are removed. If <code>arr</code> is a 10-column by 12-row array, the expression <code>arr[*,11]</code> results in a row vector with a single dimension. (The result of the expression is a 10-column by 1-row array; the last dimension is degenerate and is removed.) On the other hand, the expression <code>arr[0, *]</code> became a column vector with dimensions of [1, 12], showing that the structure of columns is preserved because the dimension with a size of one does not appear at the end.
        </p>
        <p>To see this, enter the following statements in IDL:
        </p>
        <p class="Code">arr = INDGEN(10,12)
        </p>
        <p class="Code">HELP, arr
        </p>
        <p class="Code">HELP, arr[*,11]
        </p>
        <p class="Code">HELP, arr[0,*]
        </p>
        <p>In the following examples, <code>vec</code> is a 50-element floating-point vector, and <code>arr</code> is a 10-column by 12-row integer array. Some typical subscript range expressions are as follows:
        </p>
        <p class="Code">vec = BINDGEN(50)
        </p>
        <p class="Code">arr = BINDGEN(10,12)
        </p>
        <p class="Code">&#160;</p>
        <p class="Code">; Elements 5 through 10 of vec, a six-element vector.
        </p>
        <p class="Code">print, vec[5:10]
        </p>
        <p class="Code">&#160;</p>
        <p class="Code">; A three-element vector.
        </p>
        <p class="Code">I = 25</p>
        <p class="Code">print, vec[I - 1:I + 1]
        </p>
        <p class="Code">&#160;</p>
        <p class="Code">; The same vector.
        </p>
        <p class="Code">print, [vec[I - 1], vec[I], vec[I + 1]]
        </p>
        <p class="Code">&#160;</p>
        <p class="Code">; Elements from vec[4] to the end, a 46-element (50-4) vector.
        </p>
        <p class="Code">print, vec[4:*]
        </p>
        <p class="Code">&#160;</p>
        <p class="Code">; Values of the elements with even subscripts in vec.
        </p>
        <p class="Code">print, vec[0:*:2]
        </p>
        <p class="Code">&#160;</p>
        <p class="Code">; The same as above, but in reverse order.
        </p>
        <p class="Code">print, vec[-2:0:-2]
        </p>
        <p class="Code">&#160;</p>
        <p class="Code">; Values of the elements with odd subscripts in vec:
        </p>
        <p class="Code">print, vec[1:*:2]
        </p>
        <p class="Code">&#160;</p>
        <p class="Code">; The same as above, but in reverse order.
        </p>
        <p class="Code">print, vec[-1:0:-2]
        </p>
        <p class="Code">&#160;</p>
        <p class="Code">; The fourth column of arr, a 1 column by 12 row vector.
        </p>
        <p class="Code">print, arr[3, *]
        </p>
        <p class="Code">&#160;</p>
        <p class="Code">; The first row of arr, a 10-element row vector. Note, the last 
        </p>
        <p class="Code">; dimension was removed because it was degenerate.
        </p>
        <p class="Code">print, arr[*, 0]
        </p>
        <p class="Code">&#160;</p>
        <p class="Code">; The nine-point neighborhood surrounding arr[X,Y], a 3 by 3 array.
        </p>
        <p class="Code">X = 3</p>
        <p class="Code">Y = 4</p>
        <p class="Code">print, arr[X - 1:X + 1, Y - 1:Y + 1]
        </p>
        <p class="Code">&#160;</p>
        <p class="Code">; Three columns of arr, a 3 by 12 subarray:
        </p>
        <p class="Code">print, arr[3:5,*]
        </p>
        <p class="Code">&#160;</p>
        <p class="Code">; The same three columns of arr, with the columns reversed:
        </p>
        <p class="Code">print, arr[5:3:-1,*]
        </p>
        <p class="Code">&#160;</p>
        <p>To <a name="kanchor4445"></a>insert the contents of an array called <code>A</code> into array <code>B</code>, starting at point <code>B</code>[13, 24], use the following statement:
        </p>
        <p class="Code">B[13, 24] = A
        </p>
        <p>If <code>A</code> is a 5-column by 6-row array, elements <code>B</code>[13:17, 24:29] are replaced by the contents of array <code>A</code>.
        </p>
        <p>In the next example, a<a name="kanchor4446"></a> subarray is moved from one position to another:
        </p>
        <p class="Code">B[100, 200] = B[200:300, 300:400]
        </p>
        <p>A subarray of <code>B</code>, specifically the columns 200 to 300 and rows 300 to 400, is moved to columns 100 to 200 and rows 200 to 300, respectively.
        </p>
        <p>Assuming the variable <code>B</code> is a 512 x 512-byte array, some examples are as follows:</p>
        <p class="Code">; Store 1 in every element of the i-th row.
        </p>
        <p class="Code">array[*, I] = 1
        </p>
        <p class="Code">&#160;</p>
        <p class="Code">; Store 1 in every element of the j-th column.
        </p>
        <p class="Code">array[J, *] = 1
        </p>
        <p class="Code">&#160;</p>
        <p class="Code">; Zero all the rows of columns 200 through 220 of array.
        </p>
        <p class="Code">array[200:220, *] = 0
        </p>
        <p class="Code">&#160;</p>
        <p class="Code">; Zero the last 5 rows of columns 200 through 220 of array.
        </p>
        <p class="Code">array[200:220, -5:-1] = 0
        </p>
        <p class="Code">&#160;</p>
        <p class="Code">; Store the value 100 in all the elements of array.
        </p>
        <p class="Code">array[*] = 100
        </p>
        <h2 class="API"><a name="arrays_3727706888_762264"></a><a name="arrays_3727706888_97808"></a>Avoid Using Range Subscripts for Assignment
        </h2>
        <p>It is possible to use range subscripts in an assignment statement, however, when possible, you should avoid using range subscripts in favor of using scalar or array subscripts. This type of assignment statement takes the following form:
        </p>
        <p class="Code"><i>Variable[Subscript_Range]</i> = <i>Expression</i></p>
        <p>A subscript range specifies a beginning and ending subscripts, which are separated by the colon character. An ending subscript equal to the size of the dimension minus one can be written as *. For example, <code>arr[I:J]</code> denotes those points in the vector <code>arr</code> with subscripts between <code>I</code> and <code>J</code> inclusive. <code>I</code> must be less than or equal to <code>J</code> and greater than or equal to zero. See above for more details on subscript ranges.
        </p>
        <p>When possible, you should avoid using range subscripts in favor of using scalar or array subscripts. In the following example, the array elements of <code>X</code> are inserted into array <code>A</code>. The slow way uses subscript ranges, specifying the insertion of <code>X</code> array elements into the 5th through 7th elements of <code>A</code>. The fast way uses a scalar subscript specifying the first element (the 5th) to be replaced with the elements of <code>A</code>.
        </p>
        <p class="Code">A = INTARR(10)</p>
        <p class="Code">X = [1,1,1]</p>
        <p class="Code">PRINT, 'A = ', A</p>
        <p class="Code">; Slow way:</p>
        <p class="Code">t = SYSTIME(1) &amp; FOR i=0L,100000 DO A[4:6] = X &amp;</p>
        <p class="Code">&#160;&#160;&#160;PRINT,'Slow way: ', SYSTIME(1)-t</p>
        <p class="Code">PRINT, 'A = ', A</p>
        <p class="Code">; Correct way is 4 times faster:</p>
        <p class="Code">t = SYSTIME(1) &amp; FOR i=0L,100000 DO A[4] = X &amp; </p>
        <p class="Code">&#160;&#160;&#160;PRINT, 'Fast way: ', SYSTIME(1)-t</p>
        <p class="Code">PRINT, 'A = ', A</p>
        <p>IDL prints:
        </p>
        <p class="Code">A =&#160;&#160;0&#160;&#160;&#160;0&#160;&#160;&#160;0&#160;&#160;&#160;0&#160;&#160;&#160;0&#160;&#160;&#160;0&#160;&#160;&#160;0&#160;&#160;&#160;0&#160;&#160;&#160;0&#160;&#160;&#160;0</p>
        <p class="Code">Slow way:       0.47000003</p>
        <p class="Code">A =&#160;&#160;0&#160;&#160;&#160;0&#160;&#160;&#160;0&#160;&#160;&#160;0&#160;&#160;&#160;1&#160;&#160;&#160;1&#160;&#160;&#160;1&#160;&#160;&#160;0&#160;&#160;&#160;0&#160;&#160;&#160;0</p>
        <p class="Code">Fast way:       0.12100005</p>
        <p class="Code">A =&#160;&#160;0&#160;&#160;&#160;0&#160;&#160;&#160;0&#160;&#160;&#160;0&#160;&#160;&#160;1&#160;&#160;&#160;1&#160;&#160;&#160;1&#160;&#160;&#160;0&#160;&#160;&#160;0&#160;&#160;&#160;0</p>
        <p>The statement <code>A[4] = X</code>, where <code>X</code> is a three-element array, causes IDL to start at index 4 of array <code>A</code>, and replace the next three elements in <code>A</code> with the elements in <code>X</code>. Because of the way it is implemented in IDL, <code>A[4] = X </code>is much more efficient than <code>A[4:6] = X</code>. 
        </p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>