<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Language|Operators">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Logical Operators</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/TableStyles/Description.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../../IDL Programming.htm">Language</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../Operators.htm">Operators</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Logical Operators</span>
        </div>
        <h1><a name="expressions_2976722315_1032730"></a><a name="expressions_2976722315_77678"></a>Logical Operators<a name="kanchor4586"></a></h1>
        <p>IDL supports three logical operators: <a href="#expressions_2976722315_1032751" class="selected">&amp;&amp;</a>, <a href="#expressions_2976722315_1032775" class="selected">||</a>, and <a href="#expressions_2976722315_1032795" class="selected">~</a>. When dealing with logical operators, non-zero numerical values, non-empty strings, and non-empty heap variables (pointers and object references) are considered true, everything else is false.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Programmers familiar with the C programming language, and the many languages that share its syntax, may expect <code>~</code> to perform bitwise negation (1’s complement), and for <code>!</code> to be used for logical negation. This is not the case in IDL: <code>!</code> is used to reference system variables, the NOT operator performs bitwise negation, and <code>~</code> performs logical negation.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>If one or both of the operands are objects, the operator may be overloaded. See <a href="../../Objects/Object_Operator_Overload.htm#obj_operators_3013489070_998687">Object Operator Overloading Overview</a> for more information.</p>
        <table style="mc-table-style: url('../../Resources/TableStyles/Description.css');margin-left: 0;margin-right: auto;caption-side: bottom;" cellspacing="0" class="TableStyle_Description">
            <col />
            <col />
            <col />
            <thead>
                <tr>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColSep">
                        <p>Operator</p>
                    </td>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColSep">
                        <p>Description</p>
                    </td>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColEnd">
                        <p>Example</p>
                    </td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p><a name="expressions_2976722315_1032751"></a><a name="expressions_2976722315_11697"></a>&amp;&amp;</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p><a name="kanchor4587"></a>Logical AND</p>
                        <p>Returns  true (1) whenever both of its operands are true; otherwise, returns false (0). Non-zero numerical values, non-empty strings, and non-null heap variables (pointers and object references) are considered true, everything else is false.</p>
                        <p>Operands must be scalars or single-element arrays. The &amp;&amp; operator <i>short-circuits</i>; the second operand will not be evaluated if the first is false. See <a href="#expressions_2976722315_1032819" class="selected">Short-circuiting</a> for details.</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p class="Code">PRINT, 5 &amp;&amp; 7</p>
                        <p>IDL Prints:</p>
                        <p><code>1</code>
                        </p>
                        <p class="Code">PRINT, 5 &amp;&amp; 2</p>
                        <p>IDL Prints:</p>
                        <p><code>1</code>
                        </p>
                        <p class="Code">PRINT, 4 &amp;&amp; 0</p>
                        <p>IDL Prints:</p>
                        <p><code>0</code>
                        </p>
                        <p class="Code">PRINT, "" &amp;&amp; "sun"</p>
                        <p>IDL Prints:</p>
                        <p class="Code"><code>0</code>
                        </p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p><a name="expressions_2976722315_1032775"></a><a name="expressions_2976722315_70560"></a>||</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p><a name="kanchor4588"></a>Logical OR</p>
                        <p>Returns  true (1) whenever either of its operands are true; otherwise, returns false (0). Uses the same test for “truth” as the <a href="#expressions_2976722315_1032751" class="selected">&amp;&amp;</a> operator.</p>
                        <p>Operands must be scalars or single-element arrays. The || operator <i>short-circuits</i>; the second operand will not be evaluated if the first is true. See <a href="#expressions_2976722315_1032819" class="selected">Short-circuiting</a> for details.</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p class="Code">IF ((5 GT 3) || (4 GT 5)) $</p>
                        <p class="Code">&#160;&#160;&#160;THEN PRINT, 'True'</p>
                        <p class="Code">&#160;</p>
                        <p>IDL Prints: </p>
                        <p style="margin-bottom: 3pt;font-family: Courier;font-size: 10pt;"><code> True</code>
                        </p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColSep">
                        <p><a name="expressions_2976722315_1032795"></a><a name="expressions_2976722315_24703"></a>~</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColSep">
                        <p><a name="kanchor4589"></a>Logical negation</p>
                        <p>Returns  true (1) when its operand is false; otherwise, returns false (0).<br />Uses the same test for “truth” as the <a href="#expressions_2976722315_1032751" class="selected">&amp;&amp;</a> operator.</p>
                        <p>&#160;</p>
                        <p>For lists and hashes, the logical negation operator returns true (1) if the list or hash is empty; otherwise it returns false (0).</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColEnd">
                        <p class="Code">PRINT, ~ [1, 2, 0]</p>
                        <p class="Code">&#160;</p>
                        <p>IDL Prints: </p>
                        <p style="margin-bottom: 3pt;font-family: Courier;font-size: 10pt;"><code> 0&#160;&#160;0&#160;&#160;1</code>
                        </p>
                        <p>&#160;</p>
                        <p>&#160;</p>
                        <p class="Code">list = LIST()</p>
                        <p class="Code">IF (~list) $</p>
                        <p class="Code">&#160;&#160;&#160;THEN PRINT, 'Empty List'</p>
                        <p class="Code">&#160;</p>
                        <p>IDL Prints: </p>
                        <p><code> Empty List</code>
                        </p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2 class="API"><a name="expressions_2976722315_1032819"></a><a name="expressions_2976722315_16756"></a>Short-circuiting</h2>
        <p>The <code>&amp;&amp;</code> and <code>||</code> logical operators, added to IDL in version 6.0, are<i> short-circuiting</i> operators. This means that IDL does not evaluate the second operand unless it is necessary in order to determine the proper overall answer. Short-circuiting behavior can be powerful, since it allows you to base the decision to compute the value of the second operand on the value of the first operand. For instance, in the expression:</p>
        <p class="Code">Result = Op1 &amp;&amp; Op2 </p>
        <p>IDL does not evaluate <code>Op2</code> if <code>Op1</code> is false, because it already knows that the result of the entire operation will be false. Similarly in the expression:</p>
        <p class="Code">Result = Op1 || Op2 </p>
        <p>IDL does not evaluate <code>Op2</code> if <code>Op1</code> is true, because it already knows that the result of the entire operation will be true.</p>
        <p>If you want to ensure that both operands are evaluated (perhaps because the operand is an expression that changes value when evaluated), use the <a href="../../Reference Material/L/LOGICAL_AND.htm#L_826528365_983100">LOGICAL_AND</a> and <a href="../../Reference Material/L/LOGICAL_OR.htm#L_826528365_983101">LOGICAL_OR</a> functions or the bitwise AND and OR operators.</p>
        <h2 class="API">Additional Logical Operator Examples</h2>
        <p>Results of relational expressions can be combined into more complex expressions using the logical operators. Some examples of relational and logical expressions are as follows:</p>
        <p class="Code">;True if A is between 25 and 50. If A is an array, then the result </p>
        <p class="Code">;is an array of zeros and ones.</p>
        <p class="Code">(A LE 50) &amp;&amp; (A GE 25)</p>
        <p class="Code">&#160;</p>
        <p class="Code">;True if A is less than 25 or greater than 50. This is the inverse </p>
        <p class="Code">;of the first.</p>
        <p class="Code">(A GT 50) || (A LT 25)</p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>