<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Language|Operators">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Operator Precedence</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/TableStyles/Description.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../../IDL Programming.htm">Language</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../Operators.htm">Operators</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Operator Precedence</span>
        </div>
        <h1><a name="expressions_2976722315_1033406"></a><a name="expressions_2976722315_58205"></a><a name="kanchor4606"></a>Operator Precedence</h1>
        <p>The following table lists IDL’s operator precedence. Operators with the highest precedence are evaluated first. Operators with equal precedence are evaluated from left to right.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>See <a href="#expressions_2976722315_1033942" class="selected">Efficiency and Expression Evaluation Order</a> for information on creating efficient statements. </p>
        <table style="mc-table-style: url('../../Resources/TableStyles/Description.css');margin-left: 0;margin-right: auto;caption-side: bottom;" cellspacing="0" class="TableStyle_Description">
            <col />
            <col />
            <thead>
                <tr>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColSep">
                        <p>Priority</p>
                    </td>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColEnd">
                        <p>Operator</p>
                    </td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td rowspan="2" class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>First (highest)</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>( ) (parentheses, to group expressions)</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>[ ] (brackets, to concatenate arrays)</p>
                    </td>
                </tr>
                <tr>
                    <td rowspan="3" class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>Second</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>. (structure field dereference)</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>[ ] (brackets, to subscript an array)</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>( ) (parentheses, used in a function call)</p>
                    </td>
                </tr>
                <tr>
                    <td rowspan="4" class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p>Third</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p><code>*</code> (pointer dereference)</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p><code>^</code> (exponentiation)</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>++ (increment)</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>-- (decrement)</p>
                    </td>
                </tr>
                <tr>
                    <td rowspan="4" class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p>Fourth</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p><code>*</code> (multiplication)</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p><code>#</code> and <code>##</code> (matrix multiplication)</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p><code>/</code>(division)</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p><code>MOD</code> (modulus)</p>
                    </td>
                </tr>
                <tr>
                    <td rowspan="6" class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p>Fifth</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p><code>+</code> (addition)</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p><code>-</code> (subtraction and negation)</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p><code>&lt;</code> (minimum)</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p><code>&gt;</code> (maximum)</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p><code>NOT</code> (bitwise negation)</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p><code>~</code> (logical negation)</p>
                    </td>
                </tr>
                <tr>
                    <td rowspan="6" class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p>Sixth</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p><code>EQ</code> (equality)</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p><code>NE</code> (not equal)</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p><code>LE</code> (less than or equal)</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p><code>LT</code> (less than)</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p><code>GE</code> (greater than or equal)</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p><code>GT</code> (greater than)</p>
                    </td>
                </tr>
                <tr>
                    <td rowspan="3" class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p>Seventh</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p><code>AND</code> (bitwise AND)</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p><code>OR</code> (bitwise OR)</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p><code>XOR</code> (bitwise exclusive OR)</p>
                    </td>
                </tr>
                <tr>
                    <td rowspan="2" class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>Eighth</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p><code>&amp;&amp;</code> (logical AND)</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p><code>||</code> (logical OR)</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColSep">
                        <p>Ninth</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColEnd">
                        <p>?: (conditional expression)</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>There is also a data type hierarchy that affects the result of mathematical operations. See <a href="Data_Type_and_Structure.htm#constants_818058343_699867">Data Type and Structure of Expressions</a> for details.</p>
        <p>The effect of a given operator is based on both position and the rules of operator precedence. This concept is shown by the following examples.</p>
        <p class="Code">A = 4 + 5 * 2</p>
        <p>A is equal to 14 since the multiplication operator has a higher precedence than the addition operator. Parentheses can be used to override the default evaluation.</p>
        <p class="Code">A = (4 + 5) * 2</p>
        <p>In this case, A equals 18 because the parentheses have higher operator precedence than the multiplication operator; the expression inside the parentheses is evaluated first, and the result is multiplied by two.</p>
        <p>Position within the expression is used to determine the order of evaluation when two or more operators share the same operator precedence. Consider the following:</p>
        <p class="Code">A = 6 / 2 * 3</p>
        <p>In this case, A equals 9, since the division operator is to the left of the multiplication operator. The subexpression <code>6 / 2</code> is evaluated before the multiplication is done, even though the multiplication and division operators have the same precedence. Again, parentheses can be used to override the default evaluation order:</p>
        <p class="Code">A = 6 / (2 * 3)</p>
        <p>In this case, A equals 1, because the expression inside parentheses is evaluated first.</p>
        <p>A useful rule of thumb is, “when in doubt, parenthesize”. Some examples of expressions are provided in the following table.</p>
        <table style="mc-table-style: url('../../Resources/TableStyles/Description.css');margin-left: 0;margin-right: auto;caption-side: bottom;" cellspacing="0" class="TableStyle_Description">
            <col />
            <col />
            <thead>
                <tr>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColSep">
                        <p>Expression</p>
                    </td>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColEnd">
                        <p>Value</p>
                    </td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>A + 1</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>The sum of A and 1.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p>A &lt; 2 + 1</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>The smaller of A or two, plus one.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>A &lt; 2 * 3</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>The smaller of A and six, since * has higher precedence than &lt;.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p>2 * SQRT(A)</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>Twice the square root of A.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColSep">
                        <p>A + 'Thursday'</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColEnd">
                        <p>The concatenation of the strings A and “Thursday.” An error results if A is not a string</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2 class="API"><a name="expressions_2976722315_1033942"></a><a name="expressions_2976722315_26496"></a>Efficiency and Expression Evaluation Order</h2>
        <p>The order in which an expression is evaluated can have a significant effect on program speed. Consider the following statement, where A is an array:</p>
        <p class="Code">; Scale A from 0 to 16.</p>
        <p class="Code">B = A * 16. / MAX(A)</p>
        <p>This statement first multiplies every element in A by 16 and then divides each element by the value of the maximum element. The number of operations required is twice the number of elements in A. A much faster way of computing the same result is used in the following statement:</p>
        <p class="Code">; Scale A from 0 to 16 using only one array operation.</p>
        <p class="Code">B = A * (16./MAX(A))</p>
        <p>or</p>
        <p class="Code">; Operators of equal priority are evaluated from left to right. </p>
        <p class="Code">; Only one array operation is required.</p>
        <p class="Code">B = 16./MAX(A) * A </p>
        <p>The faster method only performs one operation for each element in A, plus one scalar division. To see the speed difference on your own machine, execute the following statements:</p>
        <p class="Code">A = RANDOMU(seed, 512, 512)</p>
        <p class="Code">t1 = SYSTIME(1) &amp; B = A*16./MAX(A) &amp; t2 = SYSTIME(1)</p>
        <p class="Code">PRINT, 'Time for inefficient calculation: ', t2-t1</p>
        <p class="Code">t3 = SYSTIME(1) &amp; B = 16./MAX(A)*A &amp; t4 = SYSTIME(1)</p>
        <p class="Code">PRINT, 'Time for efficient calculation: ', t4-t3</p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>