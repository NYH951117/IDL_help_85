<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Language|Arrays">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Using Arrays as Array Subscripts</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../../IDL Programming.htm">Language</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../Arrays.htm">Arrays</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Using Arrays as Array Subscripts</span>
        </div>
        <h1><a name="arrays_3727706888_754431"></a><a name="arrays_3727706888_37378"></a><a name="arrays_3727706888_94902"></a>Using Arrays as Array <a name="kanchor4460"></a>Subscripts</h1>
        <p>Arrays can be used as subscripts to other arrays. Each element in the <i>subscript array</i> selects an element in the subscripted array. When subscript arrays are used in conjunction with subscript ranges (as discussed in <a href="Combining_Array_Subscrip.htm#arrays_3727706888_515304">Combining Array Subscripts</a>), more than one element may be selected for each element of the subscript array.</p>
        <p>If no subscript ranges are present, the length and dimensionality of the result is the same as that of the subscript expression. The type of the result is the same as that of the subscripted array. If only one subscript is present, all subscripts are interpreted as if the subscripted array has one dimension.</p>
        <p>If the subscript expression applied to the variable is an array and an array appears on the right side of the statement:</p>
        <p class="Code"><i>Variable[Array] </i>= <i>Array</i></p>
        <p>then elements from the right side are stored in the elements designated by the subscript vector. Only those elements of the subscripted variable whose subscripts appear in the subscript vector are changed. Note the use of array subscripts (double brackets). For example, the statement</p>
        <p class="Code">B[[ 2, 4, 6 ]] = [4, 16, 36]</p>
        <p>is equivalent to the following series of assignment statements:</p>
        <p class="Code">B[2] = 4</p>
        <p class="Code">B[4] = 16</p>
        <p class="Code">B[6] = 36</p>
        <p>For another example, consider the statements:</p>
        <p class="Code">A = [6, 5, 1, 8, 4, 3]</p>
        <p class="Code">B = [0, 2, 4, 1]</p>
        <p class="Code">C = A[B]</p>
        <p class="Code">PRINT, C</p>
        <p>This produces the following output:</p>
        <p class="Code">6       1       4       5</p>
        <p>The first element of <code>C</code> is 6 because that is the number in the 0 position of <code>A</code>. The second is 1 because the value in <code>B</code> of 2 indicates the third position in <code>A</code>, and so on.</p>
        <p>Subscript elements are interpreted as if the subscripted variable is a vector. For example, if <code>A</code> is a 10 x <code>n</code> matrix, the element <code>A[i, j]</code> has the subscript <code>i + 10*j</code>.</p>
        <p>When there is an array expression on the right, it is inserted into the array appearing on the left side of the equal sign starting at the point designated by the scalar subscript. For example, the following creates <code>intArr</code>, a 5 column by 2 row integer array of zeros. Insert array <code>B</code> into <code>intArr</code> beginning at the position designated by the scalar subscript (note the use of single brackets).</p>
        <p class="Code">A = INTARR(5,2)</p>
        <p class="Code">B = [222, 333, 444]</p>
        <p class="Code">A[1] = B</p>
        <p class="Code">PRINT, A</p>
        <p class="Code">0     222     333     444       0</p>
        <p class="Code">0       0       0       0       0</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>The subscript array is converted to longword type before use if necessary. Regardless of structure, this subscript array is interpreted as a vector. </p>
        <h2 class="API"><a name="arrays_3727706888_753120"></a><a name="arrays_3727706888_55225"></a>Array Subscripts and Clipping</h2>
        <p>If an element of the subscript array is less than or equal to zero, the first element of the subscripted array is selected. If an element of the subscript array is greater than or equal to the last subscript in the subscripted array, the last element is selected.</p>
        <p>This <i>clipping</i> of out of bounds elements can be disabled within a routine by using the STRICTARRSUBS option to the COMPILE_OPT statement. (See the documentation for <a href="../../Reference Material/C/COMPILE_OPT.htm#C_854643309_998462">COMPILE_OPT</a> for details.) If STRICTARRSUBS is in force, then array subscripts that refer to out of bounds elements will instead cause IDL to issue an error and stop execution, just as an out-of-range scalar subscript does.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Because of the confusion between the clipping of array subscripts and the use of negative indices (see the next section), it is best to avoid using code that relies on this clipping behavior.</p>
        <h2 class="API">Negative Indices versus Array Subscripts</h2>
        <p>As shown above, for array subscripts, negative elements are clipped to 0. However, for subscript ranges, negative indices may be used to index from the end of the array. For example:</p>
        <p class="Code">A = BINDGEN(5)</p>
        <p class="Code">print, A[[-2,-1,0]]</p>
        <p>IDL prints:</p>
        <p class="Code">0   0   0</p>
        <p>Now try the following:</p>
        <p class="Code">print, A[-2], A[-1], A[0]</p>
        <p>IDL prints:</p>
        <p class="Code">3   4   0</p>
        <p>In the first case, since an array was used for indexing, then IDL clips all three elements of the subscript array to subscript 0. In the second case, since scalar elements were used, IDL treats these as subscript ranges, and indexes from the end of the array.</p>
        <h2 class="API"><a name="arrays_3727706888_91297"></a>Examples Using Arrays as Subscripts</h2>
        <p>One way to create a square <code>n</code> x <code>n</code><a name="kanchor4461"></a>identity matrix is as follows:</p>
        <p class="Code">A = FLTARR(N, N)</p>
        <p class="Code">A[INDGEN(N) * (N + 1)] = 1.0</p>
        <p>The expression <code>INDGEN(N)*(N + 1)</code> results in a vector containing the subscripts of the diagonal elements <code>[0, N+1, 2N+2, ..., (N-1)*(N+1)]</code>. The following statements create a 10x10 identity matrix:</p>
        <p class="Code">A = FLTARR(10, 10)</p>
        <p class="Code">A[INDGEN(10) * 11] = 1.0</p>
        <p>Yet another way is to use two array subscripts. The statements:</p>
        <p class="Code">A = FLTARR(N, N)</p>
        <p class="Code">A[INDGEN(N), INDGEN(N)] = 1.0</p>
        <p>create the array subscripts <code>[[0,0], [1,1], ..., [n-1, n-1]]</code>. </p>
        <p>Assume the variable <code>A</code> is a 10 by 10 array. Here, the subscripts of the diagonal elements (<code>A[0,0], A[1,1], ..., A[9, 9]</code>) are equal to 0, 11, 22, …, 99. The elements of the vector <code>INDGEN(10)*11</code> also are equal to 0, 11, 22, ..., 99, so the expression<code> A[INDGEN(10) * 11]</code> yields a 10-element vector containing to the diagonal elements of A. </p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>