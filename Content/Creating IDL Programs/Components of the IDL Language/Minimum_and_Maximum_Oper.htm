<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Language|Operators">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Minimum and Maximum Operators</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/TableStyles/Description.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../../IDL Programming.htm">Language</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../Operators.htm">Operators</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Minimum and Maximum Operators</span>
        </div>
        <h1><a name="expressions_2976722315_1032603"></a><a name="expressions_2976722315_23512"></a>Minimum and <a name="kanchor4610"></a><a name="kanchor4611"></a>Maximum Operators</h1>
        <p>The IDL minimum and maximum operators return the smaller or larger of their operands, as described below. </p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Negated values must be enclosed in parentheses in order for IDL to interpret them correctly.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>If one or both of the operands are objects, the operator may be overloaded.</p>
        <table style="mc-table-style: url('../../Resources/TableStyles/Description.css');margin-left: 0;margin-right: auto;caption-side: bottom;" cellspacing="0" class="TableStyle_Description">
            <col />
            <col />
            <col />
            <thead>
                <tr>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColSep">
                        <p>Operator</p>
                    </td>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColSep">
                        <p>Description</p>
                    </td>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColEnd">
                        <p>Example</p>
                    </td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>&lt;</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>Minimum operator.<br />The value of "A &lt; B" is equal to the smaller of A or B.</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Set A equal to 3: </p>
                        <p class="Code">A = 5 &lt; 3<br /></p>
                        <p>Set A equal to -6. Use parentheses to avoid a syntax error.</p>
                        <p class="Code">A = 5 &lt; (-6)<br /></p>
                        <p>Set all points in array ARR that are larger than 100 to 100:</p>
                        <p class="Code">ARR = ARR &lt; 100<br /></p>
                        <p>Set X to the smallest of the three operands:</p>
                        <p class="Code">X = X0 &lt; X1 &lt; X2</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColSep">
                        <p>&gt;</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColSep">
                        <p>Maximum operator.<br />"A &gt; B" is equal to  the larger of A or B.</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColEnd">
                        <p>Use '&gt;' to avoid taking the log of zero or negative numbers:</p>
                        <p class="Code">C = ALOG(D &gt; 1E - 6)<br /></p>
                        <p>Plot positive points only. Negative points are plotted as zero:</p>
                        <p class="Code">PLOT, ARR &gt; 0</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2 class="API">Using Minimum or Maximum with Signed and Unsigned Integers</h2>
        <p>When using the minimum and maximum operators with signed and unsigned integers, you should be careful of automatic type conversions. With signed and unsigned integers of the same size (16, 32, or 64 bits), the left operand determines the result type. For example: 5 &lt; 65535u will give –1 since the 65535 will be converted to a signed integer first. On the other hand, 65535u &lt; 5 will give 5 since the 5 will be converted to an unsigned integer. For more details on automatic type conversions see <a href="Data_Type_and_Structure.htm">Data Type and Structure of Expressions</a>.</p>
        <h2 class="API"><a name="expressions_2976722315_1032656"></a><a name="expressions_2976722315_93911"></a>Using Minimum or Maximum with Complex Numbers</h2>
        <p>For complex numbers, the absolute value is used to determine which value is smaller or larger. If both values have the same magnitude then the first value is returned.</p>
        <h3>Minimum Operator Examples</h3>
        <p class="Code">; Set A equal to 1+2i, since ABS(1+2i) is less than ABS(2-4i):</p>
        <p class="Code">A = COMPLEX(1,2) &lt; COMPLEX(2,-4)</p>
        <p class="Code">; Set A equal to 1-2i, since ABS(1-2i) equals ABS(-2+i):</p>
        <p class="Code">A = COMPLEX(1,-2) &lt; COMPLEX(-2,1)</p>
        <h3>Maximum Operator Examples</h3>
        <p class="Code">; Set A equal to 2-4i, since ABS(2-4i) is greater than ABS(1+2i)</p>
        <p class="Code">A = COMPLEX(1,2) &gt; COMPLEX(2,-4)</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Set A equal to 1-2i, since ABS(1-2i) equals ABS(-2+i)</p>
        <p class="Code">A = COMPLEX(1,-2) &gt; COMPLEX(-2,1)</p>
        <h2 class="API"><a name="expressions_2976722315_1032669"></a><a name="expressions_2976722315_68869"></a>Using Minimum or Maximum with NaN Values</h2>
        <p>Typically in IDL, the result of any operation involving the special value NaN is simply NaN. For efficiency, IDL does not check the values of A and B for NaN values before performing the minimum or maximum operation. If A or B contains a NaN value, the result is undefined and can be either NaN or the other non-NaN value, depending on the specific hardware and operating system. If you suspect that one of your operands contains NaN values, you might want to use the FINITE function to ensure that you return NaN values in the result. For example, if A and B are scalars:</p>
        <p class="Code">A = !VALUES.F_NAN</p>
        <p class="Code">B = 5</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Result is undefined and can either be 5 or NaN:</p>
        <p class="Code">PRINT, A &gt; B</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Result must be NaN if either operand is NaN:</p>
        <p class="Code">PRINT, ( FINITE(A) &amp;&amp; FINITE(B) ) ? ( A &gt; B ) : !VALUES.F_NAN</p>
        <p>This second method also avoids any floating-point math errors. If A and B are arrays, the following method can be used:</p>
        <p class="Code">C = REPLICATE( !VALUES.F_NAN, N_ELEMENTS(A) )</p>
        <p class="Code">good = WHERE( FINITE(A) and FINITE(B), ngood )</p>
        <p class="Code">IF ( ngood GT 0 ) THEN C[good] = A[good] &gt; B[good]</p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>