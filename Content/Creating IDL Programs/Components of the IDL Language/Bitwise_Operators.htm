<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Language|Program Control">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Bitwise Operators</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/TableStyles/Description.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../../IDL Programming.htm">Language</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../Program Control.htm">Program Control</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Bitwise Operators</span>
        </div>
        <h1><a name="expressions_2976722315_1032844"></a><a name="expressions_2976722315_66838"></a>Bitwise Operators<a name="kanchor4599"></a></h1>
        <p>There are four bitwise operators in IDL: <a href="#expressions_2976722315_1057374" class="selected">AND</a>, <a href="#expressions_2976722315_1057399" class="selected">NOT</a>, <a href="#expressions_2976722315_1057429" class="selected">OR</a>, and <a href="#expressions_2976722315_1057449" class="selected">XOR</a>. For integer operands (byte, signed- and unsigned-integer, longword, and 64-bit longword data types), bitwise operators operate on each bit of the operand or operands independently.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>If one or both of the operands are objects, the operator may be overloaded.</p>
        <table style="mc-table-style: url('../../Resources/TableStyles/Description.css');border-left-style: solid;border-left-width: 0px;border-right-style: solid;border-right-width: 0px;border-top-style: solid;border-top-width: 0px;border-bottom-style: solid;border-bottom-width: 2px;border-bottom-color: #d3d3d3;margin-left: 0;margin-right: auto;caption-side: bottom;" cellspacing="0" class="TableStyle_Description">
            <col />
            <col />
            <col />
            <thead>
                <tr>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColSep">
                        <p>Operator</p>
                    </td>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColSep">
                        <p>Description</p>
                    </td>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColEnd">
                        <p>Example</p>
                    </td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p><a name="expressions_2976722315_1057374"></a><a name="expressions_2976722315_93321"></a>AND</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p><a name="kanchor4600"></a>Bitwise AND</p>
                        <p>For integer, longword, and byte operands, a bitwise AND operation is performed. If the operands are scalars, it returns a scalar value. If either operand is an array, it returns an array containing one value for each element of the shortest array operand. </p>
                        <p>Before the operation, the second operand is converted to the same type as the first operand.</p>
                        <p>For operations on other types, the result is equal to the second operand if the first operand is not equal to zero or an empty string; otherwise, the result is zero or an empty string.</p>
                        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>The bitwise AND operator is not valid for heap variable operands</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>The statement</p>
                        <p class="Code">5&#160;AND&#160;6&#160;=&#160;4</p>
                        <p>is represented in binary as follows:</p>
                        <p class="Code">0101 AND 0110 = 0100<br /></p>
                        <p class="Code">PRINT, (5 GT 2) AND (4 GT 2)</p>
                        <p>IDL Prints: <code>1</code></p>
                        <p class="Code">PRINT, (5 GT 2) AND (4 GT 5)</p>
                        <p>IDL Prints: <code>0</code></p>
                        <p class="Code">PRINT, 5 AND 7</p>
                        <p>IDL Prints: <code>5</code></p>
                        <p class="Code">PRINT, 5 AND 2</p>
                        <p>IDL Prints: <code>0</code></p>
                        <p class="Code">PRINT, 4 AND 2</p>
                        <p>IDL Prints: <code>0</code></p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p><a name="expressions_2976722315_1057399"></a><a name="expressions_2976722315_98075"></a>NOT</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p><a name="kanchor4601"></a>Bitwise NOT</p>
                        <p>Returns the bitwise inverse of its scalar or array operand (returns scalar if operand is a scalar, or returns an array containing one value for each element of the operand array). </p>
                        <p>For integer, longword, and byte operands, NOT returns the complement of each bit of the operand. For floating-point operands, the result is 1.0 if the operand is zero; otherwise, the result is zero.</p>
                        <p>For pointer or object references, NOT returns 0 for null references and 1 for non-null references. It is the same as the logical not operator (~) for these types. 
                        </p>
                        <p class="CellWarning">Use caution when using the return value from the bitwise NOT operator as an operand for the logical operators <code>&amp;&amp;</code> and <code>||</code>. See <a href="#expressions_2976722315_1057479" class="selected">Using the NOT Operator</a> for additional discussion.</p>
                        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Not valid for string or complex operands.</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>The statement</p>
                        <p class="Code">NOT 4 = -5</p>
                        <p>is represented in binary as follows:</p>
                        <p class="Code">NOT 0100 = 1011<br /></p>
                        <p class="Code">PRINT, NOT 1</p>
                        <p>IDL Prints: </p>
                        <p class="Code" style="font-family: Courier;font-size: 10pt;"><code>-2</code>
                            <br />
                        </p>
                        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Modern computers use the “2s complement” representation for negative signed integers. This means that to arrive at the decimal representation of a negative binary number (a string of binary digits with a one as the most significant bit), you must take the complement of each bit, add one, convert to decimal, and prepend a negative sign. For example, NOT 0 equals -1, NOT 1 equals -2, etc.</p>
                        <p style="margin-bottom: 3pt;font-family: Courier;font-size: 10pt;">&#160;</p>
                        <p class="Code">IF (NOT (5 GT 6)) THEN $</p>
                        <p class="Code">&#160;&#160;&#160;PRINT, 'True'<br /></p>
                        <p>IDL Prints: </p>
                        <p style="margin-bottom: 3pt;font-family: Courier;font-size: 10pt;"><code>True</code>
                        </p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p><a name="expressions_2976722315_1057429"></a><a name="expressions_2976722315_75649"></a>OR</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p><a name="kanchor4602"></a>Bitwise OR</p>
                        <p>Performs the logical “inclusive or” operation on two scalar or array operands (returning a scalar value for scalar operands, or returning an array containing one value for each element of the shortest array operand. </p>
                        <p>Before the operation, the second operand is converted to the same type as the first operand.</p>
                        <p>For integer or byte operands, a bitwise inclusive OR is performed. For floating- point operands, returns the first operand if it is non- zero, or the 2nd operand otherwise.</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>For integer operands, OR performs a bitwise inclusive “or” operation and returns the result. The statement:</p>
                        <p class="Code">3 OR 5 = 7</p>
                        <p>is represented in binary as follows: </p>
                        <p class="Code">0011 OR 0101 = 0111</p>
                        <p class="Code">&#160;</p>
                        <p class="Code">IF ((5 GT 3) OR $</p>
                        <p class="Code">   (4 GT 5)) THEN $</p>
                        <p class="Code">   PRINT, 'True'</p>
                        <p>IDL Prints: </p>
                        <p class="Code">True</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColSep">
                        <p><a name="expressions_2976722315_1057449"></a><a name="expressions_2976722315_50648"></a>XOR</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColSep">
                        <p><a name="kanchor4603"></a>Bitwise exclusive XOR</p>
                        <p>XOR is only valid for byte, integer, and longword operands.</p>
                        <p>Performs the logical “exclusive or” operation on two scalar or array operands (returning a scalar value for scalar operands, or returning an array containing one value for each element of the shortest array operand. </p>
                        <p>A bit in the result is set to 1 if the corresponding bits in the operands are different; if they are equal, it is set to zero.</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColEnd">
                        <p>For integer operands, XOR sets a bit in the result to 1 if the corresponding bits in the operands are different or to 0 if they are equal. The statement:</p>
                        <p class="Code">3&#160;XOR&#160;5&#160;=&#160;6</p>
                        <p>is represented in binary as follows:</p>
                        <p class="Code">0011 XOR 0101 = 0110</p>
                        <p>&#160;</p>
                        <p class="Code">IF ((5 GT 3) XOR (4  GT 5)) THEN $</p>
                        <p class="Code">&#160;&#160;&#160;PRINT, 'Different' $</p>
                        <p class="Code">&#160;&#160;&#160;ELSE PRINT, 'Same'</p>
                        <p class="Code">&#160;</p>
                        <p>IDL Prints:</p>
                        <p class="Code">Different</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2 class="API"><a name="expressions_2976722315_1057479"></a><a name="expressions_2976722315_83947"></a>Using the NOT Operator</h2>
        <p>Due to the bitwise nature of the NOT operator, logical negation operations should always use <code>~</code> in preference to NOT, reserving NOT exclusively for bitwise computations. Consider a statement such as:</p>
        <p class="Code">IF ((NOT EOF(lun)) &amp;&amp; device_ready) THEN <i>statement</i></p>
        <p>which wants to execute <i>statement</i> if the file specified by the variable <code>lun</code> has data remaining, and the variable <code>device_ready</code> is non-zero. When EOF returns the value 1, the expression <code>NOT EOF(lun)</code> yields &#8209;2, due to the bitwise nature of the NOT operator. The <code>&amp;&amp;</code> operator interprets the value &#8209;2 as true, and will therefore attempt to execute <i>statement</i> incorrectly in many cases. The proper way to write the above statement is:</p>
        <p class="Code">IF ((~ EOF(lun)) &amp;&amp; device_ready) THEN <i>statement</i></p>
        <h2 class="API">Additional Bitwise Operator Examples</h2>
        <p>Some examples of bitwise expressions are as follows:</p>
        <p class="Code">; Displays the “negative” of an image contained in the array IMG.</p>
        <p class="Code">TV, NOT IMG</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Adds the hexadecimal constant FF (255 in decimal) to the array</p>
        <p class="Code">; ARR. This masks the lower 8-bits and zeros the upper bits.</p>
        <p class="Code">ARR AND 'FF'X</p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>