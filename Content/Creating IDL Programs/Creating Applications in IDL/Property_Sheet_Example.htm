<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Language|Widgets|About Property Sheet Widgets">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Property Sheet Example</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">  <![CDATA[ ]]></span><a class="MCBreadcrumbsLink" href="../../IDL Programming.htm">Language</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="Widget Application Techniques.htm">Widgets</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="About_Property_Sheet_Wid.htm">About Property Sheet Widgets</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Property Sheet Example</span>
        </div>
        <h1><a name="widget_propertysheet_3756481120_127259"></a><a name="widget_propertysheet_3756481120_76817"></a>Property Sheet Example</h1>
        <p>The following example provides a property sheet containing all the available controls, including user-defined properties of a custom component.</p>
        <p>Enter the following text into the IDL Editor:</p>
        <p class="Code">; Property Sheet Demo</p>
        <p class="Code">;</p>
        <p class="Code">; This program contains these sections of code:</p>
        <p class="Code">;</p>
        <p class="Code">; (1) Definition of the IDLitTester class.</p>
        <p class="Code">; (2) Methods for handling the user-defined data type.</p>
        <p class="Code">; (3) Event handlers and main widget program.</p>
        <p class="Code">&#160;</p>
        <p class="Code">;================================================</p>
        <p class="Code">; (1) Definition of the IDLitTester class.</p>
        <p class="Code">;------------------------------------------------</p>
        <p class="Code">; IDLitTester</p>
        <p class="Code">;</p>
        <p class="Code">; Superclasses:</p>
        <p class="Code">;   IDLitComponent</p>
        <p class="Code">;</p>
        <p class="Code">; Subclasses:</p>
        <p class="Code">;   none</p>
        <p class="Code">;</p>
        <p class="Code">; Interfaces:</p>
        <p class="Code">;   IIDLProperty</p>
        <p class="Code">;</p>
        <p class="Code">; Intrinsic Methods:</p>
        <p class="Code">; none (because it contains no objects)</p>
        <p class="Code">&#160;</p>
        <p class="Code">;------------------------------------------------</p>
        <p class="Code">; IDLitTester::Init</p>
        <p class="Code">&#160;</p>
        <p class="Code">FUNCTION IDLitTester::Init, _REF_EXTRA = _extra</p>
        <p class="Code">&#160;</p>
        <p class="Code">compile_opt idl2</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Initialize the superclass.</p>
        <p class="Code">IF (self-&gt;IDLitComponent::Init() ne 1) THEN $</p>
        <p class="Code">&#160;&#160;&#160;RETURN, 0</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Create IDLitTester.</p>
        <p class="Code">; Nothing to do, for now.</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Register properties.</p>
        <p class="Code">;</p>
        <p class="Code">; * Only registered properties will show up in the property sheet.</p>
        <p class="Code">; * &lt;identifier&gt; must match self.&lt;identifier&gt;.</p>
        <p class="Code">&#160;</p>
        <p class="Code">self-&gt;RegisterProperty, 'BOOLEAN', /BOOLEAN , $</p>
        <p class="Code">&#160;&#160;&#160;NAME = 'Boolean', DESCRIPTION = 'TRUE or FALSE'</p>
        <p class="Code">&#160;</p>
        <p class="Code">self-&gt;RegisterProperty, 'COLOR', /COLOR, $</p>
        <p class="Code">&#160;&#160;&#160;NAME = 'Color', DESCRIPTION = 'Color (RGB)'</p>
        <p class="Code">&#160;</p>
        <p class="Code">self-&gt;RegisterProperty, 'USERDEF', USERDEF = '', $</p>
        <p class="Code">&#160;&#160;&#160;NAME = 'User Defined', DESCRIPTION = 'User defined property'</p>
        <p class="Code">&#160;</p>
        <p class="Code">self-&gt;RegisterProperty, 'NUMBER1', /INTEGER , $</p>
        <p class="Code">&#160;&#160;&#160;NAME = 'Integer', DESCRIPTION = 'Integer in [-100, 100]', $</p>
        <p class="Code">&#160;&#160;&#160;valid_range = [-100, 100]</p>
        <p class="Code">&#160;</p>
        <p class="Code">self-&gt;RegisterProperty, 'NUMBER2', /FLOAT, $</p>
        <p class="Code">&#160;&#160;&#160;NAME = 'Floating Point', DESCRIPTION = 'Number trackbar', $</p>
        <p class="Code">&#160;&#160;&#160;valid_range = [-19.0D, 6.0D, 0.33333333333333D]</p>
        <p class="Code">&#160;</p>
        <p class="Code">self-&gt;RegisterProperty, 'NUMBER3', /FLOAT, $</p>
        <p class="Code">&#160;&#160;&#160;NAME = 'Floating Point', $</p>
        <p class="Code">&#160;&#160;&#160;DESCRIPTION = 'Double in [-1.0, 1.0]', $</p>
        <p class="Code">&#160;&#160;&#160;valid_range = [-1.0D, 1.0D]</p>
        <p class="Code">&#160;</p>
        <p class="Code">self-&gt;RegisterProperty, 'LINESTYLE', /LINESTYLE, $</p>
        <p class="Code">&#160;&#160;&#160;NAME = 'Line Style', DESCRIPTION = 'Line style'</p>
        <p class="Code">&#160;</p>
        <p class="Code">self-&gt;RegisterProperty, 'LINETHICKNESS', /THICKNESS , $</p>
        <p class="Code">&#160;&#160;&#160;NAME = 'Line Thickness', $</p>
        <p class="Code">&#160;&#160;&#160;DESCRIPTION = 'Line thickness (pixels)'</p>
        <p class="Code">&#160;</p>
        <p class="Code">self-&gt;RegisterProperty, 'STRINGOLA', /STRING , $</p>
        <p class="Code">&#160;&#160;&#160;NAME = 'String', DESCRIPTION = 'Just some text'</p>
        <p class="Code">&#160;</p>
        <p class="Code">self-&gt;RegisterProperty, 'SYMBOL', /SYMBOL , $</p>
        <p class="Code">&#160;&#160;&#160;NAME = 'Symbol', DESCRIPTION = 'Symbol of some sort'</p>
        <p class="Code">&#160;</p>
        <p class="Code">self-&gt;RegisterProperty, 'STRINGLIST', $</p>
        <p class="Code">&#160;&#160;&#160;NAME = 'String List', DESCRIPTION = 'Enumerated list', $</p>
        <p class="Code">&#160;&#160;&#160;enumlist = ['dog', 'cat', 'bat', 'rat', 'nat', $</p>
        <p class="Code">&#160;&#160;&#160;'emu', 'owl', 'pig', 'hog', 'ant']</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Set any property values.</p>
        <p class="Code">self-&gt;SetProperty, _EXTRA = _extra</p>
        <p class="Code">&#160;</p>
        <p class="Code">RETURN, 1</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">;------------------------------------------------</p>
        <p class="Code">; IDLitTester::Cleanup</p>
        <p class="Code">&#160;</p>
        <p class="Code">PRO IDLitTester::Cleanup</p>
        <p class="Code">&#160;</p>
        <p class="Code">compile_opt idl2</p>
        <p class="Code">&#160;</p>
        <p class="Code">self-&gt;IDLitComponent::Cleanup</p>
        <p class="Code">&#160;</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">;------------------------------------------------</p>
        <p class="Code">; IDLitTester::GetProperty</p>
        <p class="Code">;</p>
        <p class="Code">; Implemention for IIDLProperty interface</p>
        <p class="Code">&#160;</p>
        <p class="Code">PRO IDLitTester::GetProperty, $</p>
        <p class="Code">&#160;&#160;&#160;boolean = boolean, $</p>
        <p class="Code">&#160;&#160;&#160;color = color, $</p>
        <p class="Code">&#160;&#160;&#160;userdef = userdef, $</p>
        <p class="Code">&#160;&#160;&#160;font = font, $</p>
        <p class="Code">&#160;&#160;&#160;number1 = number1, $</p>
        <p class="Code">&#160;&#160;&#160;number2 = number2, $</p>
        <p class="Code">&#160;&#160;&#160;number3 = number3, $</p>
        <p class="Code">&#160;&#160;&#160;linestyle = linestyle, $</p>
        <p class="Code">&#160;&#160;&#160;linethickness = linethickness, $</p>
        <p class="Code">&#160;&#160;&#160;stringola = stringola, $</p>
        <p class="Code">&#160;&#160;&#160;stringlist = stringlist, $</p>
        <p class="Code">&#160;&#160;&#160;symbol = symbol, $</p>
        <p class="Code">&#160;&#160;&#160;_REF_EXTRA = _extra</p>
        <p class="Code">&#160;</p>
        <p class="Code">compile_opt idl2</p>
        <p class="Code">&#160;</p>
        <p class="Code">IF (arg_present(boolean)) THEN boolean = self.boolean</p>
        <p class="Code">IF (arg_present(color)) THEN color = self.color</p>
        <p class="Code">IF (arg_present(userdef)) THEN userdef = self.userdef</p>
        <p class="Code">IF (arg_present(font)) THEN font = self.font</p>
        <p class="Code">IF (arg_present(number1)) THEN number1 = self.number1</p>
        <p class="Code">IF (arg_present(number2)) THEN number2 = self.number2</p>
        <p class="Code">IF (arg_present(number3)) THEN number3 = self.number3</p>
        <p class="Code">IF (arg_present(linestyle)) THEN linestyle = self.linestyle</p>
        <p class="Code">IF (arg_present(linethickness)) $</p>
        <p class="Code">&#160;&#160;&#160;THEN linethickness = self.linethickness</p>
        <p class="Code">IF (arg_present(stringola)) THEN stringola = self.stringola</p>
        <p class="Code">IF (arg_present(stringlist)) THEN stringlist = self.stringlist</p>
        <p class="Code">IF (arg_present(symbol)) THEN symbol = self.symbol</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Superclass' properties:</p>
        <p class="Code">IF (n_elements(_extra) gt 0) THEN $</p>
        <p class="Code">&#160;&#160;&#160;self-&gt;IDLitComponent::GetProperty, _EXTRA = _extra</p>
        <p class="Code">&#160;</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">;------------------------------------------------</p>
        <p class="Code">; IDLitTester::SetProperty</p>
        <p class="Code">;</p>
        <p class="Code">; Implementation for IIDLProperty interface</p>
        <p class="Code">&#160;</p>
        <p class="Code">PRO IDLitTester::SetProperty, $</p>
        <p class="Code">&#160;&#160;&#160;boolean = boolean, $</p>
        <p class="Code">&#160;&#160;&#160;color = color, $</p>
        <p class="Code">&#160;&#160;&#160;userdef = userdef, $</p>
        <p class="Code">&#160;&#160;&#160;font = font, $</p>
        <p class="Code">&#160;&#160;&#160;number1 = number1, $</p>
        <p class="Code">&#160;&#160;&#160;number2 = number2, $</p>
        <p class="Code">&#160;&#160;&#160;number3 = number3, $</p>
        <p class="Code">&#160;&#160;&#160;linestyle = linestyle, $</p>
        <p class="Code">&#160;&#160;&#160;linethickness = linethickness, $</p>
        <p class="Code">&#160;&#160;&#160;stringola = stringola, $</p>
        <p class="Code">&#160;&#160;&#160;stringlist = stringlist, $</p>
        <p class="Code">&#160;&#160;&#160;symbol = symbol, $</p>
        <p class="Code">&#160;&#160;&#160;_REF_EXTRA = _extra</p>
        <p class="Code">&#160;</p>
        <p class="Code">compile_opt idl2</p>
        <p class="Code">&#160;</p>
        <p class="Code">IF (n_elements(boolean) ne 0) THEN self.boolean = boolean</p>
        <p class="Code">IF (n_elements(color) ne 0) THEN self.color = color</p>
        <p class="Code">IF (n_elements(userdef) ne 0) THEN self.userdef = userdef</p>
        <p class="Code">IF (n_elements(font) ne 0) THEN self.font = font</p>
        <p class="Code">IF (n_elements(number1) ne 0) THEN self.number1 = number1</p>
        <p class="Code">IF (n_elements(number2) ne 0) THEN self.number2 = number2</p>
        <p class="Code">IF (n_elements(number3) ne 0) THEN self.number3 = number3</p>
        <p class="Code">IF (n_elements(linestyle) ne 0) THEN self.linestyle = linestyle</p>
        <p class="Code">IF (n_elements(linethickness) ne 0) THEN $</p>
        <p class="Code">&#160;&#160;&#160;self.linethickness = linethickness</p>
        <p class="Code">IF (n_elements(stringola) ne 0) THEN self.stringola = stringola</p>
        <p class="Code">IF (n_elements(stringlist) ne 0) THEN self.stringlist = stringlist</p>
        <p class="Code">IF (n_elements(symbol) ne 0) THEN self.symbol = symbol</p>
        <p class="Code">&#160;</p>
        <p class="Code">self-&gt;IDLitComponent::SetProperty, _EXTRA = _extra</p>
        <p class="Code">&#160;</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">;------------------------------------------------</p>
        <p class="Code">; IDLitTester__Define</p>
        <p class="Code">&#160;</p>
        <p class="Code">PRO IDLitTester__Define</p>
        <p class="Code">&#160;</p>
        <p class="Code">compile_opt idl2, hidden</p>
        <p class="Code">&#160;</p>
        <p class="Code">struct = {$</p>
        <p class="Code">&#160;&#160;&#160;IDLitTester, $</p>
        <p class="Code">&#160;&#160;&#160;inherits IDLitComponent, $</p>
        <p class="Code">&#160;&#160;&#160;boolean:0L, $</p>
        <p class="Code">&#160;&#160;&#160;color:[0B,0B,0B], $</p>
        <p class="Code">&#160;&#160;&#160;userdef:"", $</p>
        <p class="Code">&#160;&#160;&#160;number1:0L, $</p>
        <p class="Code">&#160;&#160;&#160;number2:0D, $</p>
        <p class="Code">&#160;&#160;&#160;number3:0D, $</p>
        <p class="Code">&#160;&#160;&#160;linestyle:0L, $</p>
        <p class="Code">&#160;&#160;&#160;linethickness:0L, $</p>
        <p class="Code">&#160;&#160;&#160;stringola:"", $</p>
        <p class="Code">&#160;&#160;&#160;stringlist:0L, $</p>
        <p class="Code">&#160;&#160;&#160;symbol:0L $</p>
        <p class="Code">&#160;&#160;&#160;}</p>
        <p class="Code">&#160;</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">;================================================</p>
        <p class="Code">; (2) Methods for handling the user-defined data type.</p>
        <p class="Code">;------------------------------------------------</p>
        <p class="Code">; UserDefEvent</p>
        <p class="Code">;</p>
        <p class="Code">; This procedure is just part of the widget code for</p>
        <p class="Code">; the user defined property.</p>
        <p class="Code">&#160;</p>
        <p class="Code">PRO UserDefEvent, e</p>
        <p class="Code">&#160;</p>
        <p class="Code">IF (tag_names(e, /structure_name) eq 'WIDGET_BUTTON') $</p>
        <p class="Code">&#160;&#160;&#160;THEN BEGIN</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;widget_control, e.top, get_uvalue = uvalue</p>
        <p class="Code">&#160;&#160;&#160;widget_control, e.id, get_uvalue = numb_ness</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;propsheet  = uvalue.propsheet</p>
        <p class="Code">&#160;&#160;&#160;component  = uvalue.component</p>
        <p class="Code">&#160;&#160;&#160;identifier = uvalue.identifier</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;; Set the human readable value.</p>
        <p class="Code">&#160;&#160;&#160;component-&gt;SetPropertyAttribute, $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;identifier, userdef = numb_ness</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;; Set the real value of the component.</p>
        <p class="Code">&#160;&#160;&#160;component-&gt;SetPropertyByIdentifier, identifier, numb_ness</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;WIDGET_CONTROL, propsheet, refresh_property = identifier</p>
        <p class="Code">&#160;&#160;&#160;PRINT, 'Changed: ', uvalue.identifier, ': ', numb_ness</p>
        <p class="Code">&#160;&#160;&#160;WIDGET_CONTROL, e.top, /destroy</p>
        <p class="Code">&#160;</p>
        <p class="Code">ENDIF</p>
        <p class="Code">&#160;</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">;------------------------------------------------</p>
        <p class="Code">; GetUserDefValue</p>
        <p class="Code">;</p>
        <p class="Code">; Creates widgets used to modify the user defined property's</p>
        <p class="Code">; value.  The value is actually set in UserDefEvent.</p>
        <p class="Code">&#160;</p>
        <p class="Code">PRO GetUserDefValue, e</p>
        <p class="Code">&#160;</p>
        <p class="Code">base = WIDGET_BASE(/row, title = 'Pick a Number', $</p>
        <p class="Code">&#160;&#160;&#160;/modal, group_leader = e.top)</p>
        <p class="Code">&#160;</p>
        <p class="Code">one = WIDGET_BUTTON(base, value = 'one', uvalue = 'oneness')</p>
        <p class="Code">two = WIDGET_BUTTON(base, value = 'two', uvalue = 'twoness')</p>
        <p class="Code">six = WIDGET_BUTTON(base, value = 'six', uvalue = 'sixness')</p>
        <p class="Code">ten = WIDGET_BUTTON(base, value = 'ten', uvalue = 'tenness')</p>
        <p class="Code">&#160;</p>
        <p class="Code">; We will need this info when we set the value</p>
        <p class="Code">WIDGET_CONTROL, base, $</p>
        <p class="Code">&#160;&#160;&#160;SET_UVALUE = {propsheet:e.id, $</p>
        <p class="Code">&#160;&#160;&#160;component:e.component, $</p>
        <p class="Code">&#160;&#160;&#160;identifier:e.identifier}</p>
        <p class="Code">&#160;</p>
        <p class="Code">WIDGET_CONTROL, base, /REALIZE</p>
        <p class="Code">&#160;</p>
        <p class="Code">XMANAGER, 'UserDefEvent', base, event_handler = 'UserDefEvent'</p>
        <p class="Code">&#160;</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">;================================================</p>
        <p class="Code">; (3) Event handlers and main widget program.</p>
        <p class="Code">;------------------------------------------------</p>
        <p class="Code">;</p>
        <p class="Code">; Event handling code for the main widget program and</p>
        <p class="Code">; the main widget program.</p>
        <p class="Code">&#160;</p>
        <p class="Code">;------------------------------------------------</p>
        <p class="Code">; prop_event</p>
        <p class="Code">;</p>
        <p class="Code">; The property sheet generates an event whenever the user changes</p>
        <p class="Code">; a value.  The event holds the property's identifier and type, and</p>
        <p class="Code">; an object reference to the component.</p>
        <p class="Code">;</p>
        <p class="Code">; Note: widget_control, e.id, get_value = objref also retrieves an</p>
        <p class="Code">; object reference to the component.</p>
        <p class="Code">&#160;</p>
        <p class="Code">PRO prop_event, e</p>
        <p class="Code">&#160;</p>
        <p class="Code">IF (e.type eq 0) THEN BEGIN   ; Value changed</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Get the value of the property identified by e.identifier.</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;IF (e.proptype ne 0) THEN BEGIN</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;; Get the value from the property sheet.</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;value = widget_info(e.id, property_value = e.identifier)</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;; Set the component's property's value.</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;e.component-&gt;SetPropertyByIdentifier, e.identifier, $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;value</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;; Print the change in the component's property value.</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;PRINT, 'Changed', e.identifier, ': ', value</p>
        <p class="Code">&#160;&#160;&#160;ENDIF ELSE BEGIN</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;; Use alternative means to get the value.</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;GetUserDefValue, e</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;ENDELSE</p>
        <p class="Code">&#160;</p>
        <p class="Code">ENDIF ELSE BEGIN                ; selection changed</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;PRINT, 'Selected: ' + e.identifier</p>
        <p class="Code">&#160;&#160;&#160;r = e.component-&gt;GetPropertyByIdentifier(e.identifier, value)</p>
        <p class="Code">&#160;&#160;&#160;PRINT, ' Current Value: ', value</p>
        <p class="Code">&#160;</p>
        <p class="Code">ENDELSE</p>
        <p class="Code">&#160;</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">;------------------------------------------------</p>
        <p class="Code"><a name="widget_propertysheet_3756481120_refresh">; refresh_event</a>
        </p>
        <p class="Code">&#160;</p>
        <p class="Code">PRO refresh_event, e</p>
        <p class="Code">&#160;</p>
        <p class="Code">WIDGET_CONTROL, e.id, get_uvalue = uvalue</p>
        <p class="Code">&#160;</p>
        <p class="Code">uvalue.o-&gt;SetProperty, boolean = 0L</p>
        <p class="Code">uvalue.o-&gt;SetProperty, color = [255, 0, 46]</p>
        <p class="Code">uvalue.o-&gt;SetPropertyAttribute, 'userdef', userdef = "Yeehaw!"</p>
        <p class="Code">uvalue.o-&gt;SetProperty, number1 = 99L</p>
        <p class="Code">uvalue.o-&gt;SetProperty, number2 = -13.1</p>
        <p class="Code">uvalue.o-&gt;SetProperty, number3 = 6.5</p>
        <p class="Code">uvalue.o-&gt;SetProperty, linestyle = 6L</p>
        <p class="Code">uvalue.o-&gt;SetProperty, stringola = 'It worked!'</p>
        <p class="Code">uvalue.o-&gt;SetProperty, stringlist = 6L</p>
        <p class="Code">uvalue.o-&gt;SetProperty, symbol = 6L</p>
        <p class="Code">&#160;</p>
        <p class="Code">uvalue.o-&gt;SetPropertyAttribute, 'Number1', sensitive = 1</p>
        <p class="Code">uvalue.o-&gt;SetPropertyAttribute, 'Number2', sensitive = 1</p>
        <p class="Code">&#160;</p>
        <p class="Code">WIDGET_CONTROL, uvalue.prop, $</p>
        <p class="Code">&#160;&#160;&#160;REFRESH_PROPERTY = ['boolean', 'color', 'userdef', $</p>
        <p class="Code">&#160;&#160;&#160;'number1', 'number2', 'number3', 'linestyle', $</p>
        <p class="Code">&#160;&#160;&#160;'stringola', 'stringlist', 'symbol']</p>
        <p class="Code">&#160;</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">;------------------------------------------------</p>
        <p class="Code">; reload_event</p>
        <p class="Code">&#160;</p>
        <p class="Code">PRO reload_event, e</p>
        <p class="Code">&#160;</p>
        <p class="Code">WIDGET_CONTROL, e.id, GET_UVALUE = uvalue</p>
        <p class="Code">&#160;</p>
        <p class="Code">LoadValues, uvalue.o</p>
        <p class="Code">&#160;</p>
        <p class="Code">WIDGET_CONTROL, uvalue.prop, SET_VALUE = uvalue.o</p>
        <p class="Code">&#160;</p>
        <p class="Code">update_state, e.top, 1</p>
        <p class="Code">&#160;</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">;------------------------------------------------</p>
        <p class="Code"><a name="widget_propertysheet_3756481120_hide">; hide_event</a>
        </p>
        <p class="Code">&#160;</p>
        <p class="Code">PRO hide_event, e</p>
        <p class="Code">&#160;</p>
        <p class="Code">WIDGET_CONTROL, e.id, get_uvalue = uvalue</p>
        <p class="Code">&#160;</p>
        <p class="Code">uvalue.o-&gt;SetPropertyAttribute, 'color', HIDE</p>
        <p class="Code">&#160;</p>
        <p class="Code">WIDGET_CONTROL, uvalue.prop, refresh_property = 'color'</p>
        <p class="Code">&#160;</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">;------------------------------------------------</p>
        <p class="Code"><a name="widget_propertysheet_3756481120_show">; show_event</a>
        </p>
        <p class="Code">&#160;</p>
        <p class="Code">PRO show_event, e</p>
        <p class="Code">&#160;</p>
        <p class="Code">WIDGET_CONTROL, e.id, get_uvalue = uvalue</p>
        <p class="Code">&#160;</p>
        <p class="Code">uvalue.o-&gt;SetPropertyAttribute, 'color', hide = 0</p>
        <p class="Code">&#160;</p>
        <p class="Code">WIDGET_CONTROL, uvalue.prop, REFRESH_PROPERTY = 'color'</p>
        <p class="Code">&#160;</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">;------------------------------------------------</p>
        <p class="Code"><a name="widget_propertysheet_3756481120_clear">; clear_event</a>
        </p>
        <p class="Code">&#160;</p>
        <p class="Code">PRO clear_event, e</p>
        <p class="Code">&#160;</p>
        <p class="Code">update_state, e.top, 0</p>
        <p class="Code">&#160;</p>
        <p class="Code">WIDGET_CONTROL, e.id, GET_UVALUE = uvalue</p>
        <p class="Code">&#160;</p>
        <p class="Code">WIDGET_CONTROL, uvalue.prop, SET_VALUE = SET_VALUE()</p>
        <p class="Code">&#160;</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">;------------------------------------------------</p>
        <p class="Code">; psdemo_large_event</p>
        <p class="Code">;</p>
        <p class="Code">; Handles resize events for the property sheet demo program.</p>
        <p class="Code">&#160;</p>
        <p class="Code">PRO psdemo_large_event, e</p>
        <p class="Code">&#160;</p>
        <p class="Code">WIDGET_CONTROL, e.id, GET_UVALUE = base</p>
        <p class="Code">geo_tlb = WIDGET_INFO(e.id, /GEOMETRY)</p>
        <p class="Code">&#160;</p>
        <p class="Code">WIDGET_CONTROL, base.prop, $</p>
        <p class="Code">   SCR_XSIZE = geo_tlb.xsize - (2*geo_tlb.xpad), $</p>
        <p class="Code">   SCR_YSIZE = geo_tlb.ysize - (2*geo_tlb.ypad)</p>
        <p class="Code">&#160;</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">;------------------------------------------------</p>
        <p class="Code"><a name="widget_propertysheet_3756481120_sensitivity">; sensitivity_event</a>
        </p>
        <p class="Code">;</p>
        <p class="Code">; Procedure to test sensitizing and desensitizing</p>
        <p class="Code">&#160;</p>
        <p class="Code">PRO sensitivity_event, e</p>
        <p class="Code">&#160;</p>
        <p class="Code">WIDGET_CONTROL, e.id, GET_UVALUE = uvalue, GET_VALUE = value</p>
        <p class="Code">&#160;</p>
        <p class="Code">IF (value eq 'Desensitize') THEN b = 0 $</p>
        <p class="Code">ELSE b = 1</p>
        <p class="Code">&#160;</p>
        <p class="Code">uvalue.o-&gt;SetPropertyAttribute, 'Boolean', sensitive = b</p>
        <p class="Code">uvalue.o-&gt;SetPropertyAttribute, 'Color', sensitive = b</p>
        <p class="Code">uvalue.o-&gt;SetPropertyAttribute, 'UserDef', sensitive = b</p>
        <p class="Code">uvalue.o-&gt;SetPropertyAttribute, 'Number1', sensitive = b</p>
        <p class="Code">uvalue.o-&gt;SetPropertyAttribute, 'Number2', sensitive = b</p>
        <p class="Code">uvalue.o-&gt;SetPropertyAttribute, 'Number3', sensitive = b</p>
        <p class="Code">uvalue.o-&gt;SetPropertyAttribute, 'LineStyle', sensitive = b</p>
        <p class="Code">uvalue.o-&gt;SetPropertyAttribute, 'LineThickness', sensitive = b</p>
        <p class="Code">uvalue.o-&gt;SetPropertyAttribute, 'Stringola', sensitive = b</p>
        <p class="Code">uvalue.o-&gt;SetPropertyAttribute, 'Symbol', sensitive = b</p>
        <p class="Code">uvalue.o-&gt;SetPropertyAttribute, 'StringList', sensitive = b</p>
        <p class="Code">&#160;</p>
        <p class="Code">WIDGET_CONTROL, uvalue.prop, $</p>
        <p class="Code">&#160;&#160;&#160;refresh_property = ['Boolean', 'Color', 'UserDef', $</p>
        <p class="Code">&#160;&#160;&#160;'Number1', 'Number2', 'Number3', 'LineStyle', $</p>
        <p class="Code">&#160;&#160;&#160;'LineThickness', 'Stringola', 'Symbol', 'StringList']</p>
        <p class="Code">&#160;</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">;------------------------------------------------</p>
        <p class="Code"><a name="widget_propertysheet_3756481120_LoadValues">; LoadValues</a>
        </p>
        <p class="Code">&#160;</p>
        <p class="Code">PRO LoadValues, o</p>
        <p class="Code">&#160;</p>
        <p class="Code">o-&gt;SetProperty, boolean = 1L&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;; 0 or 1</p>
        <p class="Code">o-&gt;SetProperty, color = [200, 100, 50]&#160;&#160;&#160;; RGB</p>
        <p class="Code">o-&gt;SetPropertyAttribute, 'userdef', userdef = "" </p>
        <p class="Code">; to be set later</p>
        <p class="Code">o-&gt;SetProperty, number1 = 42L&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;; integer</p>
        <p class="Code">o-&gt;SetProperty, number2 = 0.0&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;; double</p>
        <p class="Code">o-&gt;SetProperty, number3 = 0.1&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;; double</p>
        <p class="Code">o-&gt;SetProperty, linestyle = 4L &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;; 5th item (zero based)</p>
        <p class="Code">o-&gt;SetProperty, linethickness = 4L&#160;&#160;&#160;&#160;&#160;&#160;&#160;; pixels</p>
        <p class="Code">o-&gt;SetProperty, stringola = "This is a silly string."</p>
        <p class="Code">o-&gt;SetProperty, stringlist = 3L&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;; 4th item in list</p>
        <p class="Code">o-&gt;SetProperty, symbol = 4L&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;; 5th symbol in list</p>
        <p class="Code">&#160;</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">;------------------------------------------------</p>
        <p class="Code"><a name="widget_propertysheet_3756481120_quit">; quit_event</a>
        </p>
        <p class="Code">&#160;</p>
        <p class="Code">PRO quit_event, e</p>
        <p class="Code">&#160;</p>
        <p class="Code">WIDGET_CONTROL, e.top, DESTROY</p>
        <p class="Code">&#160;</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">;------------------------------------------------</p>
        <p class="Code">; update_state</p>
        <p class="Code">&#160;</p>
        <p class="Code">PRO update_state, top, sensitive</p>
        <p class="Code">&#160;</p>
        <p class="Code">WIDGET_CONTROL, top, GET_UVALUE = uvalue</p>
        <p class="Code">&#160;</p>
        <p class="Code">FOR i = 0, n_elements(uvalue.b) - 1 do $</p>
        <p class="Code">&#160;&#160;&#160;WIDGET_CONTROL, uvalue.b[i], sensitive = sensitive</p>
        <p class="Code">&#160;</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">;------------------------------------------------</p>
        <p class="Code">; psdemo_large</p>
        <p class="Code">&#160;</p>
        <p class="Code">PRO psdemo_large</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Create and initialize the component.</p>
        <p class="Code">&#160;</p>
        <p class="Code">o = OBJ_NEW('IDLitTester')</p>
        <p class="Code">&#160;</p>
        <p class="Code">LoadValues, o</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Create some widgets.</p>
        <p class="Code">&#160;</p>
        <p class="Code">base = WIDGET_BASE(/COLUMN, /TLB_SIZE_EVENT, $</p>
        <p class="Code">&#160;&#160;&#160;TITLE = 'Property Sheet Demo (Large)')</p>
        <p class="Code">&#160;</p>
        <p class="Code">prop = WIDGET_PROPERTYSHEET(base, value = o, $</p>
        <p class="Code">&#160;&#160;&#160;YSIZE = 13, /FRAME, event_pro = 'prop_event')</p>
        <p class="Code">&#160;</p>
        <p class="Code">b1 = WIDGET_BUTTON(base, value = 'Refresh', $</p>
        <p class="Code">&#160;&#160;&#160;uvalue = {o:o, prop:prop}, $</p>
        <p class="Code">&#160;&#160;&#160;event_pro = 'refresh_event')</p>
        <p class="Code">&#160;</p>
        <p class="Code">b2 = WIDGET_BUTTON(base, value = 'Reload', $</p>
        <p class="Code">&#160;&#160;&#160;uvalue = {o:o, prop:prop}, $</p>
        <p class="Code">&#160;&#160;&#160;event_pro = 'reload_event')</p>
        <p class="Code">&#160;</p>
        <p class="Code">b3 = WIDGET_BUTTON(base, value = 'Hide Color', $</p>
        <p class="Code">&#160;&#160;&#160;uvalue = {o:o, prop:prop}, $</p>
        <p class="Code">&#160;&#160;&#160;event_pro = 'hide_event')</p>
        <p class="Code">&#160;</p>
        <p class="Code">b4 = WIDGET_BUTTON(base, value = 'Show Color', $</p>
        <p class="Code">&#160;&#160;&#160;uvalue = {o:o, prop:prop}, $</p>
        <p class="Code">&#160;&#160;&#160;event_pro = 'show_event')</p>
        <p class="Code">&#160;</p>
        <p class="Code">b5 = WIDGET_BUTTON(base, value = 'Clear', $</p>
        <p class="Code">&#160;&#160;&#160;uvalue = {o:o, prop:prop}, $</p>
        <p class="Code">&#160;&#160;&#160;event_pro = 'clear_event')</p>
        <p class="Code">&#160;</p>
        <p class="Code">b6 = WIDGET_BUTTON(base, value = 'Desensitize', $</p>
        <p class="Code">&#160;&#160;&#160;uvalue = {o:o, prop:prop}, $</p>
        <p class="Code">&#160;&#160;&#160;event_pro = 'sensitivity_event')</p>
        <p class="Code">&#160;</p>
        <p class="Code">b7 = WIDGET_BUTTON(base, value = 'Sensitize', $</p>
        <p class="Code">&#160;&#160;&#160;uvalue = {o:o, prop:prop}, $</p>
        <p class="Code">&#160;&#160;&#160;event_pro = 'sensitivity_event')</p>
        <p class="Code">&#160;</p>
        <p class="Code">b8 = WIDGET_BUTTON(base, value = 'Quit', $</p>
        <p class="Code">EVENT_PRO = 'quit_event')</p>
        <p class="Code">; Buttons that can't be pushed after clearing:</p>
        <p class="Code">b = [b1, b3, b4, b5, b6, b7] </p>
        <p class="Code">&#160;</p>
        <p class="Code">; Activate the widgets.</p>
        <p class="Code">&#160;</p>
        <p class="Code">WIDGET_CONTROL, base, SET_UVALUE = {prop:prop, b:b}, /REALIZE</p>
        <p class="Code">&#160;</p>
        <p class="Code">XMANAGER, 'psdemo_large', base, /NO_BLOCK</p>
        <p class="Code">&#160;</p>
        <p class="Code">END</p>
        <p>The following figure displays the output of this example, as user-defined property sheet:</p>
        <p>&#160;</p>
        <p>
            <img src="../../images/wid_prop_large.gif" />
        </p>
        <p>To demonstrate the controls available from the WIDGET_PROPERTYSHEET, do the following and note the <code>Selected</code> and <code>Changed</code> messages in the IDL Output Log: </p>
        <ul>
            <li value="1">Change the <b>Boolean</b> field to <b>False</b>.</li>
            <li value="2">Select a new <b>Color</b> from the color picker.</li>
            <li value="3">Select a new “numberness” value in the <b>User Defined</b> field.</li>
            <li value="4">Change the <b>Integer</b> field to a new value. Note that this field has been restricted to integers in the range -100 to 100.</li>
            <li value="5">Change the first <b>Floating Point</b> field to a new value by moving the slider.</li>
            <li value="6">Change the second <b>Floating Point</b> field to a new value by editing the text. Note that this field has been restricted to floating point numbers in the range -1.0 to 1.0. </li>
            <li value="7">Change the <b>Line Style</b> field to a new style.</li>
            <li value="8">Change the <b>Line Thickness</b> field to a new thickness.</li>
            <li value="9">Select a new symbol in the <b>Symbol</b> field.</li>
            <li value="10">Select a new string from the <b>String List</b>.</li>
        </ul>
        <p>Click the eight buttons at the bottom of the property sheet to initiate the following events:</p>
        <ul>
            <li value="1">The <b>Refresh</b> button loads the data specified in <code>refresh_event</code> into the property sheet, using the REFRESH_PROPERTY keyword to WIDGET_CONTROL.</li>
            <li value="2">The <b>Reload</b> button reloads the data specified in <code>LoadValues</code> into the property sheet, using the SET_VALUE keyword to WIDGET_CONTROL.</li>
            <li value="3">The <b>Hide Color</b> button runs <code>hide_event</code>, which sets the HIDE attribute for the color property to one.</li>
            <li value="4">The <b>Show Color</b> button runs <code>show_event</code>, which sets the HIDE attribute for the color property to zero.</li>
            <li value="5">The <b>Clear</b> button runs <code>clear_event</code>, which creates a new set of empty objects, deactivating all but the <b>Reload</b> button.</li>
            <li value="6">The <b>Desensitize</b> button runs <code>sensitivity_event</code>, which deactivates the displayed fields.</li>
            <li value="7">The <b>Sensitize</b> button runs <code>sensitivity_event</code>, which reactivates the displayed fields.</li>
            <li value="8">The <b>Quit</b> button runs <code>quit_event</code>, which destroys the top-level base and ends the program.</li>
        </ul>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>