<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>What's New in IDL&#160;8.5</title>
        <link href="../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../Resources/Scripts/require.min.js">
        </script>
        <script src="../Resources/Scripts/require.config.js">
        </script>
        <script src="../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">  <![CDATA[ ]]></span><span class="MCBreadcrumbs">What's New</span>
        </div>
        <h1>What's New in IDL&#160;8.5</h1>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>If you are new to IDL or upgrading from an older version, see also:<a href="WhatsNew_in_8_0.htm"> <![CDATA[ ]]></a></p>
        <ul>
            <li value="1"><a href="Whats_New_8_4_1.htm">What's New in IDL&#160;8.4.1</a>
            </li>
            <li value="2"><a href="Whats_New_8_4.htm">What's New in IDL&#160;8.4</a>
            </li>
            <li value="3"><a href="Whats_New_8_3.htm">What's New in IDL&#160;8.3</a>
            </li>
            <li value="4"><a href="Whats_New_8_2_3.htm">What's New in IDL 8.2.3</a>
            </li>
            <li value="5"><a href="Whats_New_8_2_2.htm">What's New in IDL 8.2.2</a>
            </li>
            <li value="6"><a href="Whats_New_in_821.htm">What's New in IDL 8.2.1</a>
            </li>
            <li value="7"><a href="Whats_New_in_82.htm">What's New in IDL 8.2</a>
            </li>
            <li value="8"><a href="WhatsNew_in_8_1.htm">What's New in IDL 8.1</a>
            </li>
            <li value="9"><a href="WhatsNew_in_8_0.htm">What's New in IDL 8.0 </a>
            </li>
        </ul>
        <h2 class="API">New Features</h2>
        <h3>Python Bridge</h3>
        <p>IDL now has a bridge from IDL to Python and Python to IDL. From your IDL&#160;code, you can now access any Python modules, transfer variables, and call built-in functions. Similarly, from your Python code, you can make IDL calls, transfer variables, and manipulate IDL objects. The bridge has the following features: </p>
        <ul>
            <li value="1">Works with Python 2.7+ and Python 3.4+</li>
            <li value="2">Access to all IDL routines and Python modules</li>
            <li value="3">Seamless: looks just like an IDL object or Python module</li>
            <li value="4">All bridge output is redirected to the standard output</li>
            <li value="5">Case sensitivity and row/column major is handled automatically</li>
            <li value="6">Can execute arbitrary command strings in either language</li>
            <li value="7">Automatic data conversion from IDL arrays to numpy arrays</li>
            <li value="8">Data is passed by reference when calling routines/methods</li>
            <li value="9">Can pass main variables back &amp; forth</li>
        </ul>
        <p>For example, within IDL, you could execute the following Python commands to create a matplotlib plot:</p>
        <p class="Code">IDL&gt; <b>ran = Python.Import('numpy.random')</b></p>
        <p class="Code">IDL&gt; <b>arr = ran.rand(100)  ; call "rand" method</b></p>
        <p class="Code">IDL&gt; <b>plt = Python.Import('matplotlib.pyplot')</b></p>
        <p class="Code">IDL&gt; <b>p = plt.plot(arr)  &#160;&#160;; call "plot", pass an array</b></p>
        <p class="Code">IDL&gt; <b>void = plt.show(block=0)  ; pass keyword</b></p>
        <p>Within IDL, you can also directly enter Python "command-line mode":</p>
        <p class="Code">IDL&gt; <b>&gt;&gt;&gt;</b></p>
        <p class="Code">&gt;&gt;&gt; <b>import matplotlib.pyplot as plt</b></p>
        <p class="Code">&gt;&gt;&gt; <b>import numpy.random as ran</b></p>
        <p class="Code">&gt;&gt;&gt; <b>arr = ran.rand(100)</b></p>
        <p class="Code">&gt;&gt;&gt; <b>p = plt.plot(arr)</b></p>
        <p class="Code">&gt;&gt;&gt; <b>plt.show()</b></p>
        <p class="Code">&gt;&gt;&gt; </p>
        <p class="Code">IDL&gt;</p>
        <p>On the Python side, you can easily access all IDL&#160;functionality:</p>
        <p class="Code">&gt;&gt;&gt; <b>from idlpy import IDL</b></p>
        <p class="Code">&gt;&gt;&gt; <b>import numpy.random as ran</b></p>
        <p class="Code">&gt;&gt;&gt; <b>arr = ran.rand(100)</b></p>
        <p class="Code">&gt;&gt;&gt; <b>p = IDL.plot(arr, title='My Plot')</b></p>
        <p class="Code">&gt;&gt;&gt; <b>p.color = 'red'</b></p>
        <p class="Code">&gt;&gt;&gt; <b>p.save('myplot.pdf')</b></p>
        <p class="Code">&gt;&gt;&gt; <b>p.close()</b></p>
        <p>For more information see the <a href="Connectivity Bridges/Python/Python.htm">Python Bridge</a> documentation.</p>
        <h3>IDL IPython Notebook Kernel</h3>
        <p>Along with the Python Bridge, IDL&#160;now has a kernel for running IDL in an IPython notebook. See the <a href="Connectivity Bridges/Python/Python.htm">Python Bridge</a> documentation for details.</p>
        <h3>Color Selection</h3>
        <p>The <a href="Reference Material/D/DIALOG_COLORPICKER.htm">DIALOG_COLORPICKER</a> function allows you to interactively select a color using a selection dialog. The basic dialog grid includes 64 standard colors. You can et custom and preferred colors using keywords.</p>
        <h3>Function Pointers</h3>
        <p>IDL_Object has a new _overloadFunction method which allows you to create "function pointers" in IDL. By implementing IDL_Object::_overloadFunction for your class, you can have your object behave like an IDL function. See <a href="Object Classes/Miscellaneous/IDL_Object_overloadFunction.htm">IDL_Object::_overloadFunction</a> for details.</p>
        <h3>Dynamic Methods</h3>
        <p>IDL_Object has a new _overloadMethod method which allows you to create "dynamic methods" in IDL. By implementing IDL_Object::_overloadMethod for your class, your users can call arbitrary methods on your object. See <a href="Object Classes/Miscellaneous/IDL_Object_overloadMethod.htm">IDL_Object::_overloadMethod</a> for details.</p>
        <h3>IDL_Variable::ToList Method</h3>
        <p>You can use the new IDL_Variable::ToList method to easily convert IDL variables into lists. See <a href="Reference Material/Static Methods/IDL_Variable.htm#ToList">IDL_Variable::ToList</a> for details.</p>
        <h3>WGET to Retrieve URL Files</h3>
        <p>You can use the new <a href="Reference Material/W/WGET.htm">WGET</a> function to quickly and easily retrieve files from URLs:</p>
        <p class="Code">IDL&gt; WGET('http://www.google.com/index.html',FILENAME='test.html')</p>
        <p class="Code">C:\test.html</p>
        <h2 class="API">Updates</h2>
        <h3>BARPLOT, ELLIPSE, and POLYGON now support fill patterns</h3>
        <p>BARPLOT, ELLIPSE, and POLYGON now have four new properties: PATTERN_BITMAP, PATTERN_ORIENTATION, PATTERN_SPACING, and PATTERN_THICK. You can use these properties to create either pattern fills or line fills. For example:<img src="Reference Material/images/barplot_3_ex_315x206.gif" style="float: right;width: 315;height: 206;" /></p>
        <p class="Code">data = (RANDOMU(s,10)+0.1) &lt; 1</p>
        <p class="Code">bottom = (data/4-0.1) &gt; 0</p>
        <p class="Code">b = BARPLOT(data, $</p>
        <p class="Code">&#160;&#160;BOTTOM_VALUES=bottom, $</p>
        <p class="Code">&#160;&#160;FILL_COLOR='red', $</p>
        <p class="Code">&#160;&#160;BOTTOM_COLOR='yellow', $</p>
        <p class="Code">&#160;&#160;C_RANGE=[0,1], $</p>
        <p class="Code">&#160;&#160;/HORIZONTAL, PATTERN_ORIENTATION=45, $</p>
        <p class="Code">&#160;&#160;PATTERN_SPACING=6, PATTERN_THICK=3)</p>
        <p>For details see <a href="Reference Material/B/BARPLOT.htm">BARPLOT</a>, <a href="Reference Material/E/ELLIPSE.htm">ELLIPSE</a>, and <a href="Reference Material/P/POLYGON.htm">POLYGON</a>.</p>
        <h3>HASH: Auto-Instantiation of Nested Hash Elements</h3>
        <p>Previously, to create a nested hash of hashes, you would need to use multiple statements, such as the following:</p>
        <p class="Code">h = HASH()</p>
        <p class="Code">h['a'] = HASH()</p>
        <p class="Code">h['a', 'b'] = HASH()</p>
        <p class="Code">h['a', 'b', 'c'] = 5</p>
        <p>Now, when you use "unknown" subscripts for array indexing, IDL will automatically create the  necessary nested hash. For example:</p>
        <p class="Code">h = HASH()</p>
        <p class="Code">h['a', 'b', 'c'] = 5</p>
        <p class="Code">PRINT, h, /IMPLIED</p>
        <p>IDL prints:</p>
        <p class="Code">{</p>
        <p class="Code_Indented">"a": {</p>
        <p class="Code_Indented2">"b": {</p>
        <p class="Code_Indented2">&#160;&#160;"c": 5</p>
        <p class="Code_Indented2">}</p>
        <p class="Code_Indented">}</p>
        <p class="Code">}</p>
        <h3>IDLgrPalette::NearestColor Now Accepts Arrays</h3>
        <p>The <a href="Object Classes/Graphics/IDLgrPalette__NearestCol.htm">IDLgrPalette::NearestColor</a> method now accepts arrays for the red, green, and blue arguments. This significantly increases the speed when computing the nearest color for thousands of input values.</p>
        <h3>READ_CSV Can Now Read from URLs</h3>
        <p>The <a href="Reference Material/R/READ_CSV.htm">READ_CSV</a> function can now read CSV files that are on a remote server, simply by specifying a URL for the file name. The <a href="Reference Material/Q/QUERY_CSV.htm">QUERY_CSV</a> function can also be used with URLs.</p>
        <h3>SOCKET: Create Server-Side Sockets</h3>
        <p>The SOCKET procedure has three new keywords to enable you to create server-side sockets. The ACCEPT keyword specifies a LUN on which to accept communications, the LISTEN keyword specifies a port to listen to, and the PORT keyword specifies the port number. See <a href="Reference Material/S/SOCKET.htm">SOCKET</a> for details.</p>
        <h3>Library updates</h3>
        <h3>Upgrade to CDF Library</h3>
        <p>The CDF library has been upgraded to version 3.6.0.4. In addition, the <a href="Reference Material/C/CDF Routines/CDF_LIB_INFO.htm">CDF_LIB_INFO</a> and <a href="Reference Material/C/CDF Routines/CDF_CONTROL.htm">CDF_CONTROL</a> routines have new keywords for handling leap seconds and sparse records.</p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>