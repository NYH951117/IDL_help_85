<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Routines (alphabetical)|Object Classes|Miscellaneous Object Classes|IDLitWindow">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>IDLitWindow Methods</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/TableStyles/Property_Table.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">  <![CDATA[ ]]></span><a class="MCBreadcrumbsLink" href="../../images/ref_part1.htm">Routines (alphabetical)</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../ObjectClasses.htm">Object Classes</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="objects_misc.htm">Miscellaneous Object Classes</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">IDLitWindow Methods</span>
        </div>
        <h1>IDLitWindow Methods</h1>
        <h1 class="ObjMethod"><a name="top"></a>IDLitWindow::Add<a name="IDLitWindow::Add"></a></h1>
        <p>The IDLitWindow::Add procedure method adds the given object(s) to the window.</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Obj</i>-&gt;[<a href="#top" class="selected">IDLitWindow</a>::]Add, <i>Objects</i> [, <a href="#POSITION" class="selected">POSITION</a>=<i>value</i>]</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">Objects</h3>
        <p>A reference (or array of references) to the object(s) to be added to the window. Any of the objects that inherit from IDLgrViewGroup are added directly to the window’s scene, which represents a container for all of the views (and their corresponding visualization hierarchies) that appear within a window. The remaining objects are added to the current view within the window’s scene.</p>
        <h2 class="API">Keywords</h2>
        <h3 class="Keyword">POSITION</h3>
        <p>Set this keyword equal to a scalar or array containing the zero-based indices of the position within the container at which the new object should be placed.</p>
        <h1 class="ObjMethod">IDLitWindow::AddWindowEventObserver<a name="IDLitWindow::AddWindowEventObserver"></a></h1>
        <p>The IDLitWindow::AddWindowEventObserver procedure method adds the given object(s) to the list of observers that are to be notified of events that occur within the window. Each observer must implement one or more methods corresponding to bits in the IDLitWindow object’s event mask, as set by the <a href="#IDLitWindow::SetEventMask" class="selected">IDLitWindow::SetEventMask</a> method.</p>
        <table class="TableStyle_Property_Table" style="mc-table-style: url('../../Resources/TableStyles/Property_Table.css');margin-left: 0;margin-right: auto;" cellspacing="0">
            <thead>
                <tr>
                    <th class="TableStyle_Property_Table_Head_0_0_RowSep_ColSep">
                        <p>Bit</p>
                    </th>
                    <th class="TableStyle_Property_Table_Head_0_0_RowSep_ColSep">
                        <p>Value</p>
                    </th>
                    <th class="TableStyle_Property_Table_Head_0_0_RowSep_ColSep">
                        <p>Event Type</p>
                    </th>
                    <th class="TableStyle_Property_Table_Head_0_0_RowSep_ColEnd">
                        <p>Required Methods</p>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_ColSep">
                        <p>0</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_ColSep">
                        <p>1</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_ColSep">
                        <p>Button Events</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_ColEnd">
                        <p><a href="#IDLitWindow::OnMouseDown" class="selected">OnMouseDown</a>
                        </p>
                        <p><a href="#IDLitWindow::OnMouseUp" class="selected">OnMouseUp</a>
                        </p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColSep">
                        <p>1</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColSep">
                        <p>2</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColSep">
                        <p>Motion Events</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColEnd">
                        <p><a href="#IDLitWindow::OnMouseMotion" class="selected">OnMouseMotion</a>
                        </p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_1_0_ColSep">
                        <p>2</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_ColSep">
                        <p>4</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_ColSep">
                        <p>Keyboard Events</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_ColEnd">
                        <p><a href="#IDLitWindow::OnKeyboard" class="selected">OnKeyboard</a>
                        </p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_1_0_RowSep_ColSep">
                        <p>3</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_RowSep_ColSep">
                        <p>8</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_RowSep_ColSep">
                        <p>Tracking Events</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_RowSep_ColEnd">n/a</td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_ColSep">
                        <p>4</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_ColSep">
                        <p>16</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_ColSep">
                        <p>Timer Events</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_ColEnd">
                        <p><a href="#IDLitWindow::OnTimer" class="selected">OnTimer</a>
                        </p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_RowEnd_ColSep">
                        <p>5</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_RowEnd_ColSep">
                        <p>32</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_RowEnd_ColSep">
                        <p>Wheel Events</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_RowEnd_ColEnd">
                        <p><a href="#IDLitWindow::OnWheel" class="selected">OnWheel</a>
                        </p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p>When an event occurs within this window, the corresponding method (from the list above) will be called for each observer in the window’s list.</p>
        <h2 class="API">Syntax</h2>
        <p><i>Obj</i>-&gt;[<a href="#top" class="selected">IDLitWindow</a>::]AddWindowEventObserver, <i>Objects</i></p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">Objects</h3>
        <p>A reference (or vector of references) to the object(s) to be added as window event observers.</p>
        <h2 class="API">Keywords</h2>
        <p>None</p>
        <h1 class="ObjMethod">IDLitWindow::Cleanup<a name="IDLitWindow::Cleanup"></a></h1>
        <p>The IDLitWindow::Cleanup procedure method performs all cleanup on the object.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Cleanup methods are special <i>lifecycle methods</i>, and as such cannot be called outside the context of object creation and destruction. This means that in most cases, you cannot call the Cleanup method directly. There is one exception to this rule: if you write your own subclass of this class, you can call the Cleanup method from within the Init or Cleanup method of the subclass.</p>
        <h2 class="API">Syntax</h2>
        <p>OBJ_DESTROY, <i>Obj</i></p>
        <p>or</p>
        <p><i>Obj</i>-&gt;[<a href="#top" class="selected">IDLitWindow</a>::]Cleanup &#160;&#160;(<i>In a lifecycle method only</i>)</p>
        <h2 class="API">Arguments</h2>
        <p>None</p>
        <h2 class="API">Keywords</h2>
        <p>None</p>
        <h1 class="ObjMethod">IDLitWindow::ClearSelections<a name="IDLitWindow::ClearSelections"></a></h1>
        <p>The IDLitWindow::ClearSelections procedure method clears the window’s list of currently selected items (within its current view). The items within the current view that had been selected are deselected.</p>
        <h2 class="API">Syntax</h2>
        <p><i>Obj</i>-&gt;[<a href="#top" class="selected">IDLitWindow</a>::]ClearSelections</p>
        <h2 class="API">Arguments</h2>
        <p>None</p>
        <h2 class="API">Keywords</h2>
        <p>None</p>
        <h1 class="ObjMethod">IDLitWindow::DoHitTest<a name="IDLitWindow::DoHitTest"></a></h1>
        <p>The IDLitWindow::DoHitTest function method performs a hit test to determine which visualizations within the destination are displayed at a given pixel location.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>The objects returned in Result are the “top-level” objects (usually IDLgrModel or IDLitVisualization objects). Objects contained by the returned objects can be returned using the SUB_HIT keyword.</p>
        <h2 class="API">Syntax</h2>
        <p><i>Obj</i>-&gt;[<a href="#top" class="selected">IDLitWindow</a>::]DoHitTest(<i>X</i>, <i>Y</i> [, <a href="#DIMENSIONS" class="selected">DIMENSIONS</a>=[<i>width</i>, <i>height</i>]] [, /<a href="#ORDER" class="selected">ORDER</a>] [, <a href="#SUB_HIT" class="selected">SUB_HIT</a>=<i>variable</i>] [, <a href="#UNITS" class="selected">UNITS</a>={0 | 1 | 2 | 3}])</p>
        <h2 class="API">Return Value</h2>
        <p>Returns a vector of references to the objects (usually IDLgrModel or IDLitVisualization objects) that appear at the given location. If no visualizations are displayed at that location, a null reference is returned.</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">X</h3>
        <p>A floating-point value representing the x-location at which the hit test is to be performed.</p>
        <h3 class="Argument">Y</h3>
        <p>A floating-point value representing the y-location at which the hit test is to be performed.</p>
        <h2 class="API">Keywords</h2>
        <h3 class="Keyword"><a name="DIMENSIONS"></a>DIMENSIONS</h3>
        <p>Set this keyword to a two-element integer vector, [w, h], to specify the dimensions (width and height) of the hit test box. The hit test box is centered at the location specified by the X and Y arguments. Any object that falls within this hit test box will be included in the return vector. By default, the hit test box is 3 pixels by 3 pixels.</p>
        <h3 class="Keyword"><a name="ORDER"></a>ORDER</h3>
        <p>Set this keyword to control the ordering of objects in the returned hit test list when the objects are at the same distance from the viewer. Set ORDER=0 (the default) to return the objects in the order in which they were drawn. Set ORDER=1 to return objects in the reversed order from which they were drawn.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>If the visualization objects use DEPTH_TEST_FUNCTION=4 (less than or equal), then it is recommended that the ORDER keyword be set to 1 to ensure that objects at the same depth are returned in the same order in which they appear visually.</p>
        <h3 class="Keyword"><a name="SUB_HIT"></a>SUB_HIT</h3>
        <p>Set this keyword to a named variable that will contain references to all <i>contained</i> visualization objects that satisfy all of the following conditions:</p>
        <ul>
            <li value="1">The objects are contained by the nearest hit visualization (the first object in the return value)</li>
            <li value="2">The objects are SELECT_TARGETs (see <a href="../Graphics/IDLgrModel.htm">IDLgrModel</a>)</li>
            <li value="3">The objects are actively displayed at the given <i>X</i> and <i>Y</i> coordinates</li>
        </ul>
        <p>The results of SUB_HIT are returned in the order in which the sub-hit visualizations appear in the graphics hierarchy. Sub-hits are only returned for the first visualization.</p>
        <h3 class="Keyword"><a name="UNITS"></a>UNITS</h3>
        <p>Set this keyword to a scalar value to indicate the units of measure for the <i>X</i>, <i>Y</i> arguments and the DIMENSIONS keyword. Valid values include:</p>
        <ul>
            <li value="1">0 = Device (default)</li>
            <li value="2">1 = Inches</li>
            <li value="3">2 = Centimeters</li>
            <li value="4">3 = Normalized: relative to the dimensions of the primary monitor/screen, as stored in the SCREEN_DIMENSIONS property</li>
        </ul>
        <h1 class="ObjMethod">IDLitWindow::GetEventMask<a name="IDLitWindow::GetEventMask"></a></h1>
        <p>The IDLitWindow::GetEventMask function method returns a bitwise mask representing the events that are enabled for this window.</p>
        <h2 class="API">Syntax</h2>
        <p><i>Obj</i>-&gt;[<a href="#top" class="selected">IDLitWindow</a>::]GetEventMask([, <a href="#BUTTON_EVENTS" class="selected">BUTTON_EVENTS</a>=<i>variable</i>] [, <a href="#KEYBOARD_EVENTS" class="selected">KEYBOARD_EVENTS</a>=<i>variable</i>] [, <a href="#MOTION_EVENTS" class="selected">MOTION_EVENTS</a>=<i>variable</i>] [, <a href="#TIMER_EVENTS" class="selected">TIMER_EVENTS</a>=<i>variable</i>] [, <a href="#TRACKING_EVENTS" class="selected">TRACKING_EVENTS</a>=<i>variable</i>] [, <a href="#WHEEL_EVENTS" class="selected">WHEEL_EVENTS</a>=<i>variable</i>] )</p>
        <h2 class="API">Return Value</h2>
        <p>Returns the bitwise mask as an unsigned long integer. The bits in the mask are as follows:</p>
        <table class="TableStyle_Property_Table" style="mc-table-style: url('../../Resources/TableStyles/Property_Table.css');margin-left: 0;margin-right: auto;caption-side: top;" cellspacing="0">
            <col />
            <col />
            <col />
            <thead>
                <tr>
                    <th class="TableStyle_Property_Table_Head_0_0_RowSep_ColSep">
                        <p>Bit</p>
                    </th>
                    <th class="TableStyle_Property_Table_Head_0_0_RowSep_ColSep">
                        <p>Value</p>
                    </th>
                    <th class="TableStyle_Property_Table_Head_0_0_RowSep_ColEnd">
                        <p>Event</p>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_ColSep">
                        <p>0</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_ColSep">
                        <p>1</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_ColEnd">
                        <p>Button Events</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColSep">
                        <p>1</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColSep">
                        <p>2</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColEnd">
                        <p>Motion Events</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_1_0_ColSep">
                        <p>2</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_ColSep">
                        <p>4</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_ColEnd">
                        <p>Keyboard Events</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_1_0_RowSep_ColSep">
                        <p>3</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_RowSep_ColSep">
                        <p>8</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_RowSep_ColEnd">
                        <p>Tracking Events</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_ColSep">
                        <p>4</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_ColSep">
                        <p>16</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_ColEnd">
                        <p>Timer Events</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_RowEnd_ColSep">
                        <p>5</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_RowEnd_ColSep">
                        <p>32</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_RowEnd_ColEnd">
                        <p>Wheel Events</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2 class="API">Arguments</h2>
        <p>None</p>
        <h2 class="API">Keywords</h2>
        <h3 class="Keyword">BUTTON_EVENTS</h3>
        <p>Set this keyword equal to a named variable that will contain a 1 if mouse button events are currently enabled for this window, or a 0 otherwise.</p>
        <h3 class="Keyword">KEYBOARD_EVENTS</h3>
        <p>Set this keyword equal to a named variable that will contain a 1 if keyboard events are currently enabled for this window, or a 0 otherwise.</p>
        <h3 class="Keyword">MOTION_EVENTS</h3>
        <p>Set this keyword equal to a named variable that will contain a 1 if mouse motion events are currently enabled for this window, or a 0 otherwise.</p>
        <h3 class="Keyword">TIMER_EVENTS</h3>
        <p>Set this keyword equal to a named variable that will contain a 1 if timer events are currently enabled for this window, or a 0 otherwise.</p>
        <h3 class="Keyword">TRACKING_EVENTS</h3>
        <p>Set this keyword equal to a named variable that will contain a 1 if tracking events are currently enabled for this window, or a 0 otherwise.</p>
        <h3 class="Keyword">WHEEL_EVENTS</h3>
        <p>Set this keyword equal to a named variable that will contain a 1 if wheel events are currently enabled for this window, or a 0 otherwise.</p>
        <h1 class="ObjMethod">IDLitWindow::GetProperty<a name="IDLitWindow::GetProperty"></a></h1>
        <p>The IDLitWindow::GetProperty procedure method retrieves the value of an IDLitWindow property, and should be called by the subclass’ GetProperty method. This method also retrieves properties defined in the superclass.</p>
        <h2 class="API">Syntax</h2>
        <p><i>Obj</i>-&gt;[<a href="#top" class="selected">IDLitWindow</a>::]GetProperty[, PROPERTY=<i>variable</i>]</p>
        <h2 class="API">Arguments</h2>
        <p>None</p>
        <h2 class="API">Keywords</h2>
        <p>Any property listed under <a href="../Graphics/IDLgrWindow_Properties.htm">IDLgrWindow Properties</a> that contains the word “Yes” in the “Get” column of the properties table can be retrieved using this method. To retrieve the value of a property, specify the property name as a keyword set equal to a named variable that will contain the value of the property.</p>
        <h1 class="ObjMethod">IDLitWindow::GetSelectedItems<a name="IDLitWindow::GetSelectedItems"></a></h1>
        <p>The IDLitWindow::GetSelectedItems function method returns the objects (visualizations only, by default) currently selected within this window’s scene.</p>
        <h2 class="API">Syntax</h2>
        <p><i>Obj</i>-&gt;[<a href="#top" class="selected">IDLitWindow</a>::]GetSelectedItems([, /<a href="#ALL" class="selected">ALL</a>] [, <a href="#COUNT" class="selected">COUNT</a>=<i>named variable</i>])</p>
        <h2 class="API">Return Value</h2>
        <p>Returns a vector of references to the objects currently selected within this window’s scene. If no objects are currently selected, this function returns a –1.</p>
        <h2 class="API">Arguments</h2>
        <p>None</p>
        <h3>Keywords</h3>
        <h3 class="Keyword">ALL</h3>
        <p>Set this keyword to return all classes of selected items. By default, only visualizations are returned.</p>
        <h3 class="Keyword">COUNT<a name="COUNT"></a></h3>
        <p>Set this keyword to a named variable that will contain the number of items returned by this method.</p>
        <h1 class="ObjMethod">IDLitWindow::Init<a name="IDLitWindow::Init"></a></h1>
        <p>The IDLitWindow::Init function method initializes the window object.</p>
        <p>This function method initializes the IDLitWindow object, and should be called by the subclass’s Init method. This method also calls the superclass’s Init method.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Init methods are special <i>lifecycle methods</i>, and as such cannot be called outside the context of object creation. This means that in most cases, you cannot call the Init method directly. There is one exception to this rule: if you write your own subclass of this class, you can call the Init method from within the Init method of the subclass.</p>
        <h2 class="API">Syntax</h2>
        <p><i>Obj</i> = OBJ_NEW('IDLitWindow'[, PROPERTY=<i>value</i>])</p>
        <p>or</p>
        <p><i>Result</i> = <i>Obj</i>-&gt;[<a href="#top" class="selected">IDLitWindow</a>::]Init([, PROPERTY=<i>value</i>])      (<i>In a lifecycle method only</i>)</p>
        <h2 class="API">Return Value</h2>
        <p>When this method is called indirectly, as part of the call to the OBJ_NEW function, the return value is an object reference to the newly-created object.</p>
        <p>When called directly within a subclass Init method, the return value is 1 if initialization was successful, or 0 otherwise.</p>
        <h2 class="API">Arguments</h2>
        <p>None</p>
        <h2 class="API">Keywords</h2>
        <p>Any property listed under <a href="../Graphics/IDLgrWindow_Properties.htm">IDLitWindow Properties</a> that contains the word “Yes” in the “Init” column of the properties table can be initialized during object creation using this method. To initialize the value of a property, specify the property name as a keyword set equal to the appropriate property value.</p>
        <h1 class="ObjMethod">IDLitWindow::OnEnter<a name="IDLitWindow::OnEnter"></a></h1>
        <p>The IDLitWindow::OnEnter procedure method handles notification from the window that a mouse enter event has occurred.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>This method is only a stub and provides no functionality. In your subclass of IDLitWindow, you should override this method to provide your own functionality. Your method will be automatically called when a mouse enter event occurs.</p>
        <h2 class="API">Syntax</h2>
        <p><i>Obj</i>-&gt;[<a href="#top" class="selected">IDLitWindow</a>::]OnEnter</p>
        <h2 class="API">Arguments</h2>
        <p>None</p>
        <h2 class="API">Keywords</h2>
        <p>None</p>
        <h1 class="ObjMethod">IDLitWindow::OnExit<a name="IDLitWindow::OnExit"></a></h1>
        <p>The IDLitWindow::OnExit procedure method handles notification from the window that a mouse exit event has occurred.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>This method is only a stub and provides no functionality. In your subclass of IDLitWindow, you should override this method to provide your own functionality. Your method will be automatically called when a mouse exit event occurs.</p>
        <h2 class="API">Syntax</h2>
        <p><i>Obj</i>-&gt;[<a href="#top" class="selected">IDLitWindow</a>::]OnExit</p>
        <h2 class="API">Arguments</h2>
        <p>None</p>
        <h2 class="API">Keywords</h2>
        <p>None</p>
        <h1 class="ObjMethod">IDLitWindow::OnExpose<a name="IDLitWindow::OnExpose"></a></h1>
        <p>The IDLitWindow::OnExpose procedure method handles notification from the window that an expose event has occurred.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>By default, the OnExpose method will automatically redraw the graphics hierarchy. If you are using a subclass of IDLitWindow and require additional functionality, you should override this method. Your method will be automatically called when an expose event occurs.</p>
        <h2 class="API">Syntax</h2>
        <p><i>Obj</i>-&gt;[<a href="#top" class="selected">IDLitWindow</a>::]OnExpose, <i>X</i>, <i>Y</i>, <i>Width</i>, <i>Height</i></p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">X</h3>
        <p>A floating-point value representing the x-coordinate of the lower left corner of the newly exposed portion of the canvas (in device coordinates).</p>
        <h3 class="Argument">Y</h3>
        <p>A floating-point value representing the y-coordinate of the lower left corner of the newly exposed portion of the canvas (in device coordinates).</p>
        <h3 class="Argument">Width</h3>
        <p>A floating-point value representing the width of the newly exposed portion of the canvas (in device coordinates).</p>
        <h3 class="Argument">Height</h3>
        <p>A floating-point value representing the height of the newly exposed portion of the canvas (in device coordinates).</p>
        <h2 class="API">Keywords</h2>
        <p>None</p>
        <h1 class="ObjMethod">IDLitWindow::OnKeyboard<a name="IDLitWindow::OnKeyboard"></a></h1>
        <p>The IDLitWindow::OnKeyboard procedure method handles notification (from the native window device) that a keyboard event has occurred, and passes along that notification to all observers in the list of window event observers (as specified by calls to the <a href="#IDLitWindow::AddWindowEventObserver" class="selected">IDLitWindow::AddWindowEventObserver</a> method). You can also simulate a keyboard event by calling this method directly.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Window event observers that handle keyboard events must implement the OnKeyboard method, as described in <a href="#Implemen" class="selected">Implementing the OnKeyboard Interface</a>. In addition, window event observers must implement the OnMouseDown, OnMouseMotion, and OnMouseUp methods. See <a href="#IDLitWindow::AddWindowEventObserver" class="selected">IDLitWindow::AddWindowEventObserver</a> for details.</p>
        <h2 class="API">Syntax</h2>
        <p><i>Obj</i>-&gt;[<a href="#top" class="selected">IDLitWindow</a>::]OnKeyboard, <i>IsASCII</i>, <i>Character</i>, <i>KeySymbol</i>, <i>X</i>, <i>Y</i>, <i>Press</i>, <i>Release</i>, <i>Modifiers</i></p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">IsASCII</h3>
        <p>A scalar byte value that indicates whether the keyboard event corresponds to a character in the ASCII character set. If <i>IsASCII</i> is non-zero, the <i>Character</i> argument will be set to that ASCII character. If <i>IsASCII</i> is zero, the <i>KeySymbol</i> argument will be set to a numeric value indicating the key that was pressed.</p>
        <h3 class="Argument">Character</h3>
        <p>If <i>IsASCII</i> is non-zero, this argument is set to a byte value containing the ASCII character that corresponds to the key that was pressed. Otherwise, this argument is set to zero.</p>
        <h3 class="Argument">KeySymbol</h3>
        <p>If <i>IsASCII</i> is zero, this argument is set to a long integer that indicates the key that was pressed. Otherwise, this argument is set to zero. Valid values for key symbols include:</p>
        <table class="TableStyle_Property_Table" style="mc-table-style: url('../../Resources/TableStyles/Property_Table.css');margin-left: 0;margin-right: auto;" cellspacing="0">
            <col />
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_ColSep">
                        <p>1</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_ColEnd">
                        <p>Shift</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColSep">
                        <p>2</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColEnd">
                        <p>Control</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_1_0_ColSep">
                        <p>3</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_ColEnd">
                        <p>Caps Lock</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_1_0_RowSep_ColSep">
                        <p>4</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_RowSep_ColEnd">
                        <p>Alt</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_ColSep">
                        <p>5</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_ColEnd">
                        <p>Left</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColSep">
                        <p>6</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColEnd">
                        <p>Right</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_1_0_ColSep">
                        <p>7</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_ColEnd">
                        <p>Up</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_1_0_RowSep_ColSep">
                        <p>8</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_RowSep_ColEnd">
                        <p>Down</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_ColSep">
                        <p>9</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_ColEnd">
                        <p>Page Up</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColSep">
                        <p>10</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColEnd">
                        <p>Page Down</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_1_0_ColSep">
                        <p>11</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_ColEnd">
                        <p>Home</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_1_0_RowEnd_ColSep">
                        <p>12</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_RowEnd_ColEnd">
                        <p>End</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h3 class="Argument">X,Y</h3>
        <p>Long integers containing the x-coordinate and y-coordinate of the mouse cursor (in device coordinates) at the time of the event.</p>
        <h3 class="Argument">Press</h3>
        <p>A long integer indicating whether this event represents a key press. This argument is non-zero if the event is the result of pressing the key.</p>
        <h3 class="Argument">Release</h3>
        <p>A long integer indicating whether this event represents a key release. This argument is non-zero if the event is the result of releasing the key.</p>
        <h3 class="Argument">Modifiers</h3>
        <p>A long integer containing a bitwise mask indicating which modifier keys are active at the time of the keyboard event. If a bit is zero, the key is up; if the bit is set, the key is pressed. The following table describes the bits in this bit mask:</p>
        <table class="TableStyle_Property_Table" style="mc-table-style: url('../../Resources/TableStyles/Property_Table.css');margin-left: 0;margin-right: auto;" cellspacing="0">
            <thead>
                <tr>
                    <th class="TableStyle_Property_Table_Head_0_0_RowSep_ColSep">
                        <p>Bit</p>
                    </th>
                    <th class="TableStyle_Property_Table_Head_0_0_RowSep_ColSep">
                        <p>Value</p>
                    </th>
                    <th class="TableStyle_Property_Table_Head_0_0_RowSep_ColEnd">
                        <p>Modifier Key</p>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_ColSep">
                        <p>0</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_ColSep">
                        <p>1</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_ColEnd">
                        <p>Shift</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColSep">
                        <p>1</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColSep">
                        <p>2</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColEnd">
                        <p>Control</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_1_0_ColSep">
                        <p>2</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_ColSep">
                        <p>4</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_ColEnd">
                        <p>Caps Lock</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_1_0_RowEnd_ColSep">
                        <p>3</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_RowEnd_ColSep">
                        <p>8</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_RowEnd_ColEnd">
                        <p>Alt</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2 class="API">Keywords</h2>
        <p>None</p>
        <h3><a name="Implemen"></a>Implementing the OnKeyboard Interface</h3>
        <p>When defining a window event observer that handles keyboard events, you must implement an OnKeyboard procedure method with the following signature:</p>
        <p class="Code">PRO OnKeyboard, Window, IsASCII, Character, KeySymbol, X, Y, $</p>
        <p class="Code"> &#160;&#160;Press, Release, Modifiers</p>
        <p>where the <i>Window</i> argument is an object reference to the IDLitWindow object in which the event was generated, and all of the other arguments are described above.</p>
        <p>In addition, you must implement OnMouseDown, OnMouseMotion, and OnMouseUp procedure methods, as discussed in <a href="#IDLitWindow::AddWindowEventObserver" class="selected">IDLitWindow::AddWindowEventObserver</a>.</p>
        <h1 class="ObjMethod">IDLitWindow::OnMouseDown<a name="IDLitWindow::OnMouseDown"></a></h1>
        <p>The IDLitWindow::OnMouseDown procedure method handles notification (from the native window device) that a mouse down event has occurred, and passes along that notification to all observers in the list of window event observers (as specified by calls to the <a href="#IDLitWindow::AddWindowEventObserver" class="selected">IDLitWindow::AddWindowEventObserver</a> method). You can also simulate a mouse down event by calling this method directly.</p>
        <p>Window event observers that handle mouse down events must implement the OnMouseDown method, as described in <a href="#Implemen2" class="selected">Implementing the OnMouseDown Interface</a>. In addition, window event observers must implement the OnKeyboard, OnMouseMotion, and OnMouseUp methods. See <a href="#IDLitWindow::AddWindowEventObserver" class="selected">IDLitWindow::AddWindowEventObserver</a> for details.</p>
        <h2 class="API">Syntax</h2>
        <p><i>Obj</i>-&gt;[<a href="#top" class="selected">IDLitWindow</a>::]OnMouseDown, <i>X</i>, <i>Y</i>, <i>ButtonMask</i>, <i>Modifiers</i>, <i>NumClicks</i></p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">X</h3>
        <p>A long integer representing the x-location (in device coordinates) of the mouse event.</p>
        <h3 class="Argument">Y</h3>
        <p>A long integer representing the y-location (in device coordinates) of the mouse event.</p>
        <h3 class="Argument">ButtonMask</h3>
        <p>An integer containing a bitwise mask indicating which of the left, center, or right mouse button was pressed:</p>
        <table class="TableStyle_Property_Table" style="mc-table-style: url('../../Resources/TableStyles/Property_Table.css');margin-left: 0;margin-right: auto;" cellspacing="0">
            <col />
            <col />
            <thead>
                <tr>
                    <th class="TableStyle_Property_Table_Head_0_0_RowSep_ColSep">
                        <p>Bitmask</p>
                    </th>
                    <th class="TableStyle_Property_Table_Head_0_0_RowSep_ColEnd">
                        <p>Mouse Button</p>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_ColSep">
                        <p>1</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_ColEnd">
                        <p>Left</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColSep">
                        <p>2</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColEnd">
                        <p>Middle</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_1_0_RowEnd_ColSep">
                        <p>4</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_RowEnd_ColEnd">
                        <p>Right</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h3 class="Argument">Modifiers</h3>
        <p>A long integer containing a bitwise mask indicating which modifier keys are active at the time of the keyboard event. If a bit is zero, the key is up; if the bit is set, the key is pressed. The following table describes the bits in this bit mask:</p>
        <table class="TableStyle_Property_Table" style="mc-table-style: url('../../Resources/TableStyles/Property_Table.css');margin-left: 0;margin-right: auto;" cellspacing="0">
            <thead>
                <tr>
                    <th class="TableStyle_Property_Table_Head_0_0_RowSep_ColSep">
                        <p>Bit</p>
                    </th>
                    <th class="TableStyle_Property_Table_Head_0_0_RowSep_ColSep">
                        <p>Value</p>
                    </th>
                    <th class="TableStyle_Property_Table_Head_0_0_RowSep_ColEnd">
                        <p>Modifier Key</p>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_ColSep">
                        <p>0</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_ColSep">
                        <p>1</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_ColEnd">
                        <p>Shift</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColSep">
                        <p>1</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColSep">
                        <p>2</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColEnd">
                        <p>Control</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_1_0_ColSep">
                        <p>2</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_ColSep">
                        <p>4</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_ColEnd">
                        <p>Caps Lock</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_1_0_RowEnd_ColSep">
                        <p>3</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_RowEnd_ColSep">
                        <p>8</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_RowEnd_ColEnd">
                        <p>Alt</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h3 class="Argument">NumClicks</h3>
        <p>An integer indicating the number of times the mouse button was clicked.</p>
        <h2 class="API">Keywords</h2>
        <p>None</p>
        <h3><a name="Implemen2"></a>Implementing the OnMouseDown Interface</h3>
        <p>When defining a window event observer that handles mouse down events, you must implement an OnMouseDown procedure method with the following signature:</p>
        <p class="Code">PRO OnMouseDown, Window, X, Y, ButtonMask, Modifiers, NumClicks</p>
        <p>where the <i>Window</i> argument is an object reference to the IDLitWindow object in which the event was generated, and all of the other arguments are described above.</p>
        <p>In addition, you must implement OnKeyboard, OnMouseMotion, and OnMouseUp procedure methods, as discussed in <a href="#IDLitWindow::AddWindowEventObserver" class="selected">IDLitWindow::AddWindowEventObserver.</a></p>
        <h1 class="ObjMethod">IDLitWindow::OnMouseMotion<a name="IDLitWindow::OnMouseMotion"></a></h1>
        <p>The IDLitWindow::OnMouseMotion procedure method handles notification (from the native window device) that a mouse motion event has occurred, and passes along that notification to all observers in the list of window event observers (as specified by calls to the <a href="#IDLitWindow::AddWindowEventObserver" class="selected">IDLitWindow::AddWindowEventObserver</a> method). You can also simulate a mouse motion event by calling this method directly.</p>
        <p>Window event observers that handle mouse motion events must implement the OnMouseMotion method, as described in <a href="#Implemen3" class="selected">Implementing the OnMouseMotion Interface</a>. In addition, window event observers must implement the OnKeyboard, OnMouseDown, and OnMouseUp methods. See <a href="#IDLitWindow::AddWindowEventObserver" class="selected">IDLitWindow::AddWindowEventObserver</a> for details.</p>
        <h2 class="API">Syntax</h2>
        <p><i>Obj</i>-&gt;[<a href="#top" class="selected">IDLitWindow</a>::]OnMouseMotion, <i>X</i>, <i>Y</i>, <i>Modifiers</i></p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">X</h3>
        <p>A long integer representing the x-location (in device coordinates) of the mouse event.</p>
        <h3 class="Argument">Y</h3>
        <p>A long integer representing the y-location (in device coordinates) of the mouse event.</p>
        <h3 class="Argument">Modifiers</h3>
        <p>A long integer containing a bitwise mask indicating which modifier keys are active at the time the mouse button is pressed. If a bit is zero, the key is up; if the bit is set, the key is pressed. The following table describes the bits in this bitmask:</p>
        <table class="TableStyle_Property_Table" style="mc-table-style: url('../../Resources/TableStyles/Property_Table.css');margin-left: 0;margin-right: auto;" cellspacing="0">
            <thead>
                <tr>
                    <th class="TableStyle_Property_Table_Head_0_0_RowSep_ColSep">
                        <p>Bit</p>
                    </th>
                    <th class="TableStyle_Property_Table_Head_0_0_RowSep_ColSep">
                        <p>Value</p>
                    </th>
                    <th class="TableStyle_Property_Table_Head_0_0_RowSep_ColEnd">
                        <p>Modifier Key</p>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_ColSep">
                        <p>0</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_ColSep">
                        <p>1</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_ColEnd">
                        <p>Shift</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColSep">
                        <p>1</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColSep">
                        <p>2</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColEnd">
                        <p>Control</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_1_0_ColSep">
                        <p>2</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_ColSep">
                        <p>4</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_ColEnd">
                        <p>Caps Lock</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_1_0_RowEnd_ColSep">
                        <p>3</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_RowEnd_ColSep">
                        <p>8</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_RowEnd_ColEnd">
                        <p>Alt</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2 class="API">Keywords</h2>
        <p>None</p>
        <h3><a name="Implemen3"></a>Implementing the OnMouseMotion Interface</h3>
        <p>When defining a window event observer that handles mouse motion events, you must implement an OnMouseMotion procedure method with the following signature:</p>
        <p class="Code">PRO OnMouseMotion, Window, X, Y, Modifiers</p>
        <p>where the <i>Window</i> argument is an object reference to the IDLitWindow object in which the event was generated, and all of the other arguments are described above.</p>
        <p>In addition, you must implement OnKeyboard, OnMouseDown, and OnMouseUp procedure methods, as discussed in <a href="#IDLitWindow::AddWindowEventObserver" class="selected">IDLitWindow::AddWindowEventObserver</a>.</p>
        <h1 class="ObjMethod">IDLitWindow::OnMouseUp<a name="IDLitWindow::OnMouseUp"></a></h1>
        <p>The IDLitWindow::OnMouseUp procedure method handles notification (from the native window device) that a mouse up event has occurred, and passes along that notification to all observers in the list of window event observers (as specified by calls to the <a href="#IDLitWindow::AddWindowEventObserver" class="selected">IDLitWindow::AddWindowEventObserver</a> method). You can also simulate a mouse up event by calling this method directly.</p>
        <p>Window event observers that handle mouse up events must implement the OnMouseUp method, as described in <a href="#Implemen4" class="selected">Implementing the OnMouseUp Interface</a>. In addition, window event observers must implement the OnKeyboard, OnMouseDown, and OnMouseMotion methods. See <a href="#IDLitWindow::AddWindowEventObserver" class="selected">IDLitWindow::AddWindowEventObserver</a> for details.</p>
        <h2 class="API">Syntax</h2>
        <p><i>Obj</i>-&gt;[<a href="#top" class="selected">IDLitWindow</a>::]OnMouseUp, <i>X</i>, <i>Y</i>, <i>ButtonMask</i></p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">X</h3>
        <p>A long integer representing the x-location (in device coordinates) of the mouse event.</p>
        <h3 class="Argument">Y</h3>
        <p>A long integer representing the y-location (in device coordinates) of the mouse event.</p>
        <h3 class="Argument">ButtonMask</h3>
        <p>An integer containing a bitwise mask indicating which of the left, center, or right mouse button was released:</p>
        <table class="TableStyle_Property_Table" style="mc-table-style: url('../../Resources/TableStyles/Property_Table.css');margin-left: 0;margin-right: auto;" cellspacing="0">
            <col />
            <col />
            <thead>
                <tr>
                    <th class="TableStyle_Property_Table_Head_0_0_RowSep_ColSep">
                        <p>Bitmask</p>
                    </th>
                    <th class="TableStyle_Property_Table_Head_0_0_RowSep_ColEnd">
                        <p>Mouse Button</p>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_ColSep">
                        <p>1</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_ColEnd">
                        <p>Left</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColSep">
                        <p>2</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColEnd">
                        <p>Middle</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_1_0_RowEnd_ColSep">
                        <p>4</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_RowEnd_ColEnd">
                        <p>Right</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2 class="API">Keywords</h2>
        <p>None</p>
        <h3><a name="Implemen4"></a>Implementing the OnMouseUp Interface</h3>
        <p>When defining a window event observer that handles mouse up events, you must implement an OnMouseUp procedure method with the following signature:</p>
        <p class="Code">PRO OnMouseUp, Window, X, Y, ButtonMask</p>
        <p>where the Window argument is an object reference to the IDLitWindow object in which the event was generated, and all of the other arguments are described above.</p>
        <p>In addition, you must implement OnKeyboard, OnMouseMotion, and OnMouseMotion procedure methods, as discussed in <a href="#IDLitWindow::AddWindowEventObserver" class="selected">IDLitWindow::AddWindowEventObserver</a>.</p>
        <h1 class="ObjMethod">IDLitWindow::OnResize<a name="IDLitWindow::OnResize"></a></h1>
        <p>The IDLitWindow::OnResize procedure method handles notification from the window that a resize event has occurred.</p>
        <p>By default, the OnResize method will automatically resize the window and then call the OnResize method for the contained scene. If you are using a subclass of IDLitWindow and require additional functionality, you should override this method. Your method will be automatically called when a resize event occurs.</p>
        <h2 class="API">Syntax</h2>
        <p><i>Obj</i>-&gt;[<a href="#top" class="selected">IDLitWindow</a>::]OnResize, <i>Width</i>, <i>Height</i></p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">Width</h3>
        <p>A floating-point value representing the new width of the canvas (in device coordinates).</p>
        <h3 class="Argument">Height</h3>
        <p>A floating-point value representing the new height of the canvas (in device coordinates).</p>
        <h2 class="API">Keywords</h2>
        <p>None</p>
        <h1 class="ObjMethod">IDLitWindow::OnScroll<a name="IDLitWindow::OnScroll"></a></h1>
        <p>The IDLitWindow::OnScroll procedure method handles notification (from the native window device) that a scrolling event has occurred. This notification is passed on to the window’s scene, which handles the cropping of each of its contained views. A scene represents a container for all of the views (and their corresponding visualization hierarchies) that appear within a window.</p>
        <h2 class="API">Syntax</h2>
        <p><i>Obj</i>-&gt;[<a href="#top" class="selected">IDLitWindow</a>::]OnScroll, <i>X</i>, <i>Y</i></p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">X</h3>
        <p>A long integer representing the x-coordinate of the lower left corner of the visible portion of the canvas (in device coordinates) after the scroll.</p>
        <h3 class="Argument">Y</h3>
        <p>A long integer representing the y-coordinate of the lower left corner of the visible portion of the canvas (in device coordinates) after the scroll.</p>
        <h2 class="API">Keywords</h2>
        <p>None</p>
        <h1 class="ObjMethod">IDLitWindow::OnTimer<a name="IDLitWindow::OnTimer"></a></h1>
        <p>The IDLitWindow::OnTimer procedure method handles notification (from the native window device) that a timer event has occurred, and passes that notification to all observers in the list of window event observers (as specified by calls to the <a href="#IDLitWindow::AddWindowEventObserver" class="selected">IDLitWindow::AddWindowEventObserver</a> method). You can also simulate a timer event by calling this method directly.</p>
        <p>Window event observers that handle timer events must implement the OnTimer method, as described in <a href="#Implemen5" class="selected">Implementing the OnTimer Interface</a>. See <a href="#IDLitWindow::AddWindowEventObserver" class="selected">IDLitWindow::AddWindowEventObserver</a> for details.</p>
        <h2 class="API">Syntax</h2>
        <p><i>Obj</i>-&gt;[<a href="#top" class="selected">IDLitWindow</a>::]OnTimer</p>
        <h2 class="API">Arguments</h2>
        <p>None</p>
        <h3>Keywords</h3>
        <p>None</p>
        <h3><a name="Implemen5"></a>Implementing the OnTimer Interface</h3>
        <p>When defining a window event observer that handles timer events, you must implement an OnTimer procedure method with the following signature:</p>
        <p class="Code">PRO OnTimer, Window</p>
        <p>where the <i>Window</i> argument is an object reference to the IDLitWindow object in which the event was generated.</p>
        <h1 class="ObjMethod">IDLitWindow::OnWheel<a name="IDLitWindow::OnWheel"></a></h1>
        <p>The IDLitWindow::OnWheel procedure method handles notification (from the native window device) that a mouse wheel event has occurred, and passes along that notification to all observers in the list of window event observers (as specified by calls to the <a href="#IDLitWindow::AddWindowEventObserver" class="selected">IDLitWindow::AddWindowEventObserver</a> method). You can also simulate a mouse wheel event by calling this method directly.</p>
        <p>Window event observers that handle mouse wheel events must implement the OnWheel method, as described in <a href="#Implemen6" class="selected">Implementing the OnWheel Interface</a>.</p>
        <h2 class="API">Syntax</h2>
        <p><i>Obj</i>-&gt;[<a href="#top" class="selected">IDLitWindow</a>::]OnWheel, <i>X</i>, <i>Y</i>, <i>Delta</i>, <i>Modifiers</i></p>
        <h2 class="API">Arguments</h2>
        <h3 class="Keyword">X</h3>
        <p>A long integer representing the x-location (in device coordinates) of the mouse event.</p>
        <h3 class="Keyword">Y</h3>
        <p>A long integer representing the y-location (in device coordinates) of the mouse event.</p>
        <h3 class="Keyword">Delta</h3>
        <p>A long integer giving the direction and distance that the wheel was rolled. Pushing the wheel generates positive values, pulling the wheel generates negative values. The magnitude of the value depends on the device setting for the individual mouse, but is usually limited to small integer values such as +1, -1, +2, -2, etc.</p>
        <h3 class="Keyword">Modifiers</h3>
        <p>A long integer containing a bitwise mask indicating which modifier keys are active at the time of the wheel event. If a bit is zero, the key is up; if the bit is set, the key is pressed. The following table describes the bits in this bit mask:</p>
        <table class="TableStyle_Property_Table" style="mc-table-style: url('../../Resources/TableStyles/Property_Table.css');margin-left: 0;margin-right: auto;" cellspacing="0">
            <thead>
                <tr>
                    <th class="TableStyle_Property_Table_Head_0_0_RowSep_ColSep">
                        <p>Bit</p>
                    </th>
                    <th class="TableStyle_Property_Table_Head_0_0_RowSep_ColSep">
                        <p>Value</p>
                    </th>
                    <th class="TableStyle_Property_Table_Head_0_0_RowSep_ColEnd">
                        <p>Modifier Key</p>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_ColSep">
                        <p>0</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_ColSep">
                        <p>1</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_ColEnd">
                        <p>Shift</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColSep">
                        <p>1</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColSep">
                        <p>2</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColEnd">
                        <p>Control</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_1_0_ColSep">
                        <p>2</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_ColSep">
                        <p>4</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_ColEnd">
                        <p>Caps Lock</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_1_0_RowEnd_ColSep">
                        <p>3</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_RowEnd_ColSep">
                        <p>8</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_RowEnd_ColEnd">
                        <p>Alt</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2 class="API">Keywords</h2>
        <p>None</p>
        <h3><a name="Implemen6"></a>Implementing the OnWheel Interface</h3>
        <p>When defining a window event observer that handles mouse wheel events, you must implement an OnWheel procedure method with the following signature:</p>
        <p class="Code">PRO MyObject::OnWheel, Window, X, Y, Delta, Modifiers</p>
        <p>where the <i>Window</i> argument is an object reference to the IDLitWindow object in which the event was generated, and all of the other arguments are described above.</p>
        <h1 class="ObjMethod">IDLitWindow::Remove<a name="IDLitWindow::Remove"></a></h1>
        <p>The IDLitWindow::Remove procedure method removes the given object(s) from the window.</p>
        <h2 class="API">Syntax</h2>
        <p><i>Obj</i>-&gt;[<a href="#top" class="selected">IDLitWindow</a>::]Remove, <i>Object</i> [, /<a href="#ALL" class="selected">ALL</a>] [, <a href="#POSITION" class="selected">POSITION</a>=<i>index</i>]</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">Object</h3>
        <p>A reference (or vector of references) to the object(s) to be removed from this window.</p>
        <h2 class="API">Keywords</h2>
        <h3 class="Keyword"><a name="ALL"></a>ALL</h3>
        <p>Set this keyword to remove all objects from the container. If this keyword is set, the <i>Object</i> argument is not required.</p>
        <h3 class="Keyword"><a name="POSITION"></a>POSITION</h3>
        <p>Set this keyword equal to the zero-based index of the object to be removed. If the <i>Object</i> argument is supplied, this keyword is ignored.</p>
        <h1 class="ObjMethod">IDLitWindow::RemoveWindowEventObserver<a name="IDLitWindow::RemoveWindowEventObserver"></a></h1>
        <p>The IDLitWindow::RemoveWindowEventObserver procedure method removes the given object(s) from the list of observers that are notified of events that occur within this window.</p>
        <h2 class="API">Syntax</h2>
        <p><i>Obj</i>-&gt;[<a href="#top" class="selected">IDLitWindow</a>::]RemoveWindowEventObserver, <i>Objects</i></p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">Objects</h3>
        <p>A reference (or vector of references) to the object(s) to be removed from the list of window event observers.</p>
        <h2 class="API">Keywords</h2>
        <p>None</p>
        <h1 class="ObjMethod">IDLitWindow::Resize<a name="IDLitWindow::Resize"></a></h1>
        <p>The IDLitWindow::RemoveWindowEventObserver procedure method removes the given object(s) from the list of observers that are notified of events that occur within this window.</p>
        <h2 class="API">Syntax</h2>
        <p><i>Obj</i>-&gt;[<a href="#top" class="selected">IDLitWindow</a>::]Resize, <i>Objects</i></p>
        <h2 class="API">Arguments</h2>
        <h3>Objects</h3>
        <p>A reference (or vector of references) to the object(s) to be removed from the list of window event observers.</p>
        <h2 class="API">Keywords</h2>
        <p>None</p>
        <h1 class="ObjMethod">IDLitWindow::SetCurrentZoom<a name="IDLitWindow::SetCurrentZoom"></a></h1>
        <p>The IDLitWindow::SetCurrentZoom procedure method sets the current zoom factor for this window by changing its virtual dimensions. Setting the zoom factor on this window overrides any zoom factor inherited from the IDLgrWindow. The contents of the window are updated to reflect the new zoom factor.</p>
        <h2 class="API">Syntax</h2>
        <p><i>Obj</i>-&gt;[<a href="#top" class="selected">IDLitWindow</a>::]SetCurrentZoom, <i>ZoomFactor</i> [, /<a href="#RESET" class="selected">RESET</a>]</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">ZoomFactor</h3>
        <p>A positive floating point value indicating the zoom factor to be applied to the window. Values less than 1.0 result in a zooming out; values greater than 1.0 result in a zooming in on the contents of the window.</p>
        <h2 class="API">Keywords</h2>
        <h3 class="Keyword"><a name="RESET"></a>RESET</h3>
        <p>Set this keyword to indicate that the zoom factor should be reset to 1.0. If this keyword is present, the <i>ZoomFactor</i> argument is ignored.</p>
        <h1 class="ObjMethod">IDLitWindow::SetEventMask<a name="IDLitWindow::SetEventMask"></a></h1>
        <p>The IDLitWindow::SetEventMask procedure method enables the given events within this window.</p>
        <p>When an event occurs within this window, if the corresponding event type is enabled, then the list of its window event observers will be notified of the event. See <a href="#IDLitWindow::AddWindowEventObserver" class="selected">IDLitWindow::AddWindowEventObserver</a> for more details.</p>
        <h2 class="API">Syntax</h2>
        <p><i>Obj</i>-&gt;[<a href="#top" class="selected">IDLitWindow</a>::]SetEventMask, [<i>EventMask</i>] [, /<a href="#BUTTON_EVENTS" class="selected">BUTTON_EVENTS</a>] [, /<a href="#KEYBOARD_EVENTS" class="selected">KEYBOARD_EVENTS</a>] [, /<a href="#MOTION_EVENTS" class="selected">MOTION_EVENTS</a>] [, /<a href="#TIMER_EVENTS" class="selected">TIMER_EVENTS</a>] [, /<a href="#TRACKING_EVENTS" class="selected">TRACKING_EVENTS</a>] [, /<a href="#WHEEL_EVENTS" class="selected">WHEEL_EVENTS</a>]</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Keyword">EventMask</h3>
        <p>An unsigned long integer representing the bitwise mask for the events that are to be enabled for this window. The bits in the mask are as follows:</p>
        <table class="TableStyle_Property_Table" style="mc-table-style: url('../../Resources/TableStyles/Property_Table.css');margin-left: 0;margin-right: auto;" cellspacing="0">
            <col />
            <col />
            <col />
            <thead>
                <tr>
                    <th class="TableStyle_Property_Table_Head_0_0_RowSep_ColSep">
                        <p>Bit</p>
                    </th>
                    <th class="TableStyle_Property_Table_Head_0_0_RowSep_ColSep">
                        <p>Value</p>
                    </th>
                    <th class="TableStyle_Property_Table_Head_0_0_RowSep_ColEnd">
                        <p>Event</p>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_ColSep">
                        <p>0</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_ColSep">
                        <p>1</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_ColEnd">
                        <p>Button Events</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColSep">
                        <p>1</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColSep">
                        <p>2</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColEnd">
                        <p>Motion Events</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_1_0_ColSep">
                        <p>2</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_ColSep">
                        <p>4</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_ColEnd">
                        <p>Keyboard Events</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_1_0_RowSep_ColSep">
                        <p>3</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_RowSep_ColSep">
                        <p>8</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_RowSep_ColEnd">
                        <p>Tracking Events</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_ColSep">
                        <p>4</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_ColSep">
                        <p>16</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_ColEnd">
                        <p>Timer Events</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_RowEnd_ColSep">
                        <p>5</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_RowEnd_ColSep">
                        <p>32</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_0_0_RowEnd_ColEnd">
                        <p>Wheel Events</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p>This argument is optional; the keywords described below may be used instead.</p>
        <h2 class="API">Keywords</h2>
        <h3 class="Keyword">BUTTON_EVENTS<a name="BUTTON_EVENTS"></a></h3>
        <p>Set this keyword to indicate that mouse button events are to be enabled for this window.</p>
        <h3 class="Keyword">KEYBOARD_EVENTS<a name="KEYBOARD_EVENTS"></a></h3>
        <p>Set this keyword to indicate the keyboard events are to be enabled for this window.</p>
        <h3 class="Keyword">MOTION_EVENTS<a name="MOTION_EVENTS"></a></h3>
        <p>Set this keyword to indicate that mouse motion events are to be enabled for this window.</p>
        <h3 class="Keyword">TIMER_EVENTS<a name="TIMER_EVENTS"></a></h3>
        <p>Set this keyword to indicate that timer events are to be enabled for this window.</p>
        <h3 class="Keyword">TRACKING_EVENTS<a name="TRACKING_EVENTS"></a></h3>
        <p>Set this keyword to indicate that tracking events are to be enabled for this window.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>In order to receive tracking events, you must implement the <a href="#IDLitWindow::OnEnter" class="selected">IDLitWindow::OnEnter</a> and <a href="#IDLitWindow::OnExit" class="selected">IDLitWindow::OnExit</a> methods in your own subclass of the IDLitWindow class.</p>
        <h3 class="Keyword">WHEEL_EVENTS<a name="WHEEL_EVENTS"></a></h3>
        <p>Set this keyword to indicate that mouse wheel events are to be enabled for this window.</p>
        <h1 class="ObjMethod">IDLitWindow::SetManipulatorManager<a name="IDLitWindow::SetManipulatorManager"></a></h1>
        <p>The IDLitWindow::SetManipulatorManager procedure method sets the given IDLitManipulatorManager object as the current manager of this window’s manipulators.</p>
        <h2 class="API">Syntax</h2>
        <p><i>Obj</i>-&gt;[<a href="#top" class="selected">IDLitWindow</a>::]SetManipulatorManager, <i>Manager</i></p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">Manager</h3>
        <p>A reference to the IDLitManipulatorManager object that is to serve as the manager for this window’s manipulators.</p>
        <h2 class="API">Keywords</h2>
        <p>None</p>
        <h1 class="ObjMethod">IDLitWindow::SetProperty<a name="IDLitWindow::SetProperty"></a></h1>
        <p>The IDLitWindow::SetProperty procedure method sets the value of an IDLitWindow property, and should be called by the subclass’s SetProperty method. This method also calls the superclass’s SetProperty method.</p>
        <h2 class="API">Syntax</h2>
        <p><i>Obj</i>-&gt;[<a href="#top" class="selected">IDLitWindow</a>::]SetProperty[, <i>PROPERTY=value</i>]</p>
        <h2 class="API">Arguments</h2>
        <p>None</p>
        <h2 class="API">Keywords</h2>
        <p>Any property listed under <a href="../Graphics/IDLgrWindow_Properties.htm">IDLitWindow Properties</a> that contains the word “Yes” in the “Set” column of the properties table can be set using this method. To set the value of a property, specify the property name as a keyword set equal to the appropriate property value.</p>
        <h1 class="ObjMethod">IDLitWindow::SetTimerInterval<a name="IDLitWindow::SetTimerInterval"></a></h1>
        <p>The IDLitWindow::SetTimerInterval procedure method specifies the floating-point number of seconds between timer events. When a timer event occurs, the window calls the OnTimer method of all window event observers. The generation of timer events is controlled by the window event mask.</p>
        <h2 class="API">Syntax</h2>
        <p><i>Obj</i>-&gt;[<a href="#top" class="selected">IDLitWindow</a>::]SetTimerInterval, <i>Interval</i></p>
        <h2 class="API">Arguments</h2>
        <h3>Interval</h3>
        <p>The default interval value is 0, which indicates that the timer event interval is the smallest amount of time allowed by the system.</p>
        <h2 class="API">Keywords</h2>
        <p>None</p>
        <h1 class="ObjMethod">IDLitWindow::ZoomIn<a name="IDLitWindow::ZoomIn"></a></h1>
        <p>The IDLitWindow::ZoomIn procedure method causes the current zoom factor for this window to be increased (that is, multiplied by the factor given by the inherited IDLgrWindow <a href="../Graphics/IDLgrWindow_Properties.htm#objects_gr_2157407275_1342797">ZOOM_BASE</a> property). The contents of the window are updated to reflect the new zoom factor. See <a href="#IDLitWindow::SetCurrentZoom" class="selected">IDLitWindow::SetCurrentZoom</a> for additional details.</p>
        <h2 class="API">Syntax</h2>
        <p><i>Obj</i>-&gt;[<a href="#top" class="selected">IDLitWindow</a>::]ZoomIn</p>
        <h2 class="API">Arguments</h2>
        <p>None</p>
        <h2 class="API">Keywords</h2>
        <p>None</p>
        <h1 class="ObjMethod">IDLitWindow::ZoomOut<a name="IDLitWindow::ZoomOut"></a></h1>
        <p>The IDLitWindow::ZoomOut procedure method causes the current zoom factor for this window to be decreased (that is, divided by the factor given by the inherited IDLgrWindow <a href="../Graphics/IDLgrWindow_Properties.htm#objects_gr_2157407275_1342797">ZOOM_BASE</a> property). The current contents of the window are updated to reflect the new zoom factor. See <a href="#IDLitWindow::SetCurrentZoom" class="selected">IDLitWindow::SetCurrentZoom</a> for additional details.</p>
        <h2 class="API">Syntax</h2>
        <p><i>Obj</i>-&gt;[<a href="#top" class="selected">IDLitWindow</a>::]ZoomOut</p>
        <h2 class="API">Arguments</h2>
        <p>None</p>
        <h2 class="API">Keywords</h2>
        <p>None</p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>