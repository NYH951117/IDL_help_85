<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Language|Objects|Using IDL Objects">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Modifying Object Properties</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/TableStyles/Property_Table.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../../IDL Programming.htm">Language</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="../ref_part2.htm">Objects</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbsSelf">Using IDL Objects</span><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Object Properties</span>
        </div>
        <h1><a name="objects_3041994433_1016190"></a><a name="kanchor4834"></a><a name="objects_3041994433_92054"></a>Modifying Object Properties</h1>
        <p>Some IDL objects have <a name="kanchor4835"></a><i>properties</i> <a name="kanchor4836"></a>associated with them — things like color, line style, size, and so on.<a name="kanchor4837"></a></p>
        <p>You can set properties at object initialization by providing property-value pairs in a call to the object's Init method:</p>
        <p class="Code">Obj = OBJ_NEW('ObjectClass', <i>PROPERTY</i>&#160;=&#160;<i>value</i>, ... )</p>
        <p>If your object inherits from the IDL_Object class, you can set or change the object's properties after object initialization by calling the property directly using the dot operator:</p>
        <p class="Code">Obj.PROPERTY =&#160;<i>value</i>, ...</p>
        <p><i>or</i>
        </p>
        <p>By calling the object's SetProperty method with a property-value pair:</p>
        <p class="Code">&#160;Obj.SetProperty, <i>PROPERTY</i>&#160;=&#160;<i>value</i>, ...</p>
        <p>where <i>PROPERTY</i> is the name of an object property and <i>value</i> is the associated property value.</p>
        <p>If your object inherits from the IDL_Object class, you can retrieve property values by calling the property directly with the dot operator:</p>
        <p class="Code"><i>variable </i>= Obj.PROPERTY</p>
        <p><i>or</i>
        </p>
        <p>By calling the object's GetProperty method with a property-value pair:</p>
        <p class="Code">Obj.GetProperty, <i>PROPERTY</i>&#160;=&#160;<i>variable</i>, ...</p>
        <p>where <i>PROPERTY</i> is the name of a property and <i>variable</i> is the name of an IDL variable that will hold the associated property value.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Property-value pairs behave in exactly the same way as Keyword-value pairs. This means that you can set the value of a boolean property to 1 by preceding the name of the property with a “/” character. Assuming that Obj inherits from IDL_Object, then the following are equivalent:<br /></p>
        <p class="Code">Obj.MYPROPERTY = 1</p>
        <p class="Code">Obj.SetProperty, MYPROPERTY&#160;=&#160;1</p>
        <p class="Code">Obj.SetProperty, /MYPROPERTY</p>
        <p>If you are familiar with Direct Graphics, you will note that many of the properties of IDL objects correspond to keywords in Direct Graphics routines. Unlike Direct Graphics, the Object Graphics system allows you to change the value of an object’s properties without re-creating the entire object. Objects must be redrawn, however, with a call to the destination object’s Draw method, for the changes to become visible.</p>
        <h2 class="API">Properties and the Property Sheet Interface</h2>
        <p>In addition to being able to set and change object property values programmatically, IDL provides a way for users to change property values via a graphical user interface. The <a href="../../Reference Material/W/WIDGET_PROPERTYSHEET.htm#W_811389549_1020327">WIDGET_PROPERTYSHEET</a> function creates a user interface that allows users to select and change property values using the mouse and keyboard.</p>
        <p>For an object property to be displayed in a property sheet, the property must be registered. </p>
        <p>See <a href="Registered_Properties.htm#objects_intro_4100679965_1525007">Registered Properties</a> for additional discussion.</p>
        <h2 class="API">Setting Properties at Initialization</h2>
        <p>Often, you will set an object’s properties when creating the object for the <a name="kanchor4838"></a>first time, which is done on object creation by calling the object name and specifying keywords to the object’s Init method as function parameters. For example, suppose you are creating a plot and wish to use a red line to draw the plot line. You could specify the COLOR keyword when calling the PLOT function:</p>
        <p class="Code">myPlot&#160;=&#160;PLOT(xdata, ydata, COLOR&#160;=&#160;[255, 0, 0])</p>
        <p>In most cases, an object’s Init method cannot be called directly. Arguments to object creation are passed directly to the Init method when the object is created.</p>
        <p>For some graphics objects, you can specify a keyword that has the same meaning as an argument. In Object Graphics, the value of the keyword overrides the value set by the argument. For example,</p>
        <p class="Code">myPlot&#160;=&#160;PLOT(xdata, ydata, DATAX&#160;=&#160;newXData)</p>
        <p>The Plot object uses the data in <code>newXData</code> for the plot’s X data.</p>
        <p>If a property is Boolean (valid values of 0 or 1 only), it can be set during initialization using the alternate "/" syntax as in the "HIDE" property in the following example:</p>
        <p class="Code">&#160;</p>
        <p class="Code">;Create the data "theory"</p>
        <p class="Code">theory = SIN(2.0*FINDGEN(200)*!PI/25.0)*EXP(-0.02*FINDGEN(200))</p>
        <p class="Code">&#160;</p>
        <p class="Code">;The following two lines produce the same plot result:</p>
        <p class="Code">plot = PLOT(theory, "r4D-", TITLE="Sine Wave", /HIDE)</p>
        <p class="Code">plot = PLOT(theory, "r4D-", TITLE="Sine Wave", HIDE=1)</p>
        <p class="Code">&#160;</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>After initialization the alternate "/" syntax does not work to modify a Boolean property; you will need to use the dot operator or call the object's SetProperty method.</p>
        <h2 class="API"><a name="Setting"></a>Setting Properties of Existing Objects</h2>
        <p>After you have created an object, you can set or change its <a name="kanchor4839"></a>properties by calling the property directly with the dot operator (if the object inherits from IDL_Object) or by calling the object’s SetProperty method.</p>
        <p>The following code duplicates the single call to PLOT shown previously:</p>
        <p class="Code">myPlot&#160;=&#160;PLOT(xdata, ydata)</p>
        <p class="Code">myPlot.COLOR&#160;=&#160;"red"</p>
        <p>You can achieve the same results by calling the object's SetProperty method:</p>
        <p class="Code">myPlot&#160;=&#160;PLOT(xdata, ydata)</p>
        <p class="Code">myPlot.SetProperty, COLOR&#160;=&#160;"red"</p>
        <h2 class="API">Retrieving Property Settings</h2>
        <p>You can retrieve the value of a particular <a name="kanchor4840"></a>property using an object’s dot operator (if the object inherits from IDL_Object) or by calling the object's GetProperty method.</p>
        <p>To retrieve a property value with the dot operator, simply assign the result to a variable:</p>
        <p class="Code">plotcolor = myPlot.COLOR</p>
        <p>The GetProperty method accepts a list of keyword-variable pairs and returns the value of the specified properties in the variables specified. </p>
        <p class="Code">myPlot.GetProperty, COLOR&#160;=&#160;plotcolor</p>
        <p>The value of the COLOR property is returned in the IDL variable <code>plotcolor</code>.</p>
        <h2 class="API">Getting/Setting Properties and Method Scope</h2>
        <p>Under most circumstances, if you get or set an object property using the dot operator, IDL will call the object's GetProperty or SetProperty method. However, if inside of a method you get or set a property of the <i>self </i>object, IDL will access the property directly.</p>
        <h2 class="API">Accessing Properties with Nested Object References</h2>
        <p>The following examples illustrate how to use nested object references:</p>
        <p class="Code">p = PLOT(/TEST, TITLE="My Plot")</p>
        <p class="Code">ax = p.AXES</p>
        <p class="Code">ax[3].COLOR= 'red'</p>
        <p>In the        <code>ax</code> object array, the fourth object is retrieved, and SetProperty, COLOR='red' is called for the object.</p>
        <p class="Code">p["Title"].COLOR = "green"</p>
        <p>For the scalar object <code>p</code> that inherits from IDL_Object, the object's _overloadBracketRightSide method is called to retrieve the value (presumably an object), and SetProperty, COLOR="green" is called for the retrieved object.</p>
        <p class="Code">PRINT, p.TITLE.STRING</p>
        <p>For the object <code>p</code>, GetProperty is called to retrieve the TITLE object, and then GetProperty is called on the title object to retrieve the title's string value.</p>
        <h2 class="API"><a name="objects_3041994433_52552"></a>About Object Property Descriptions</h2>
        <p>In the documentation for the IDL object class library, the description of each class is followed by a section describing the properties of the class. Each property description is followed by a table that looks like this:</p>
        <table class="TableStyle_Property_Table" style="mc-table-style: url('../../Resources/TableStyles/Property_Table.css');margin-left: 0;margin-right: auto;caption-side: top;" cellspacing="0">
            <col />
            <col />
            <col />
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_ColSep">
                        <p><b>Property Type</b>
                        </p>
                    </td>
                    <td colspan="3" class="TableStyle_Property_Table_Body_0_0_ColEnd">
                        <p>Boolean</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_0_0_RowSep_ColSep">
                        <p><b>Name String</b>
                        </p>
                    </td>
                    <td colspan="3" class="TableStyle_Property_Table_Body_0_0_RowSep_ColEnd">
                        <p>Hide</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Property_Table_Body_1_0_RowEnd_ColSep">
                        <p><b>Get:</b> Yes</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_RowEnd_ColSep">
                        <p><b>Set:</b> No</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_RowEnd_ColSep">
                        <p><b>Init:</b> Yes</p>
                    </td>
                    <td class="TableStyle_Property_Table_Body_1_0_RowEnd_ColEnd">
                        <p><b>Registered:</b> Yes</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p>where</p>
        <ul>
            <li value="1"><b>Property Type</b> describes the property type associated with the property. If the property is <i>registered</i>, the property type will be one of a number of registered property data types. If the property is not registered, this field will describe the generic IDL data type of the property value.</li>
            <li value="2"><b>Name String</b> is the default value of the Name property attribute. If the property is registered, this is the value that appears in the left-hand column when the property is displayed in a property sheet widget. If the property is not registered, this field will contain the words <i>not displayed</i>.</li>
            <li value="3"><b>Get</b>, <b>Set</b>, and <b>Init</b> describe whether the property can be specified as a keyword to the GetProperty, SetProperty, and Init methods, respectively.</li>
            <li value="4"><b>Registered</b> describes whether the property is registered for display in a property sheet widget. </li>
        </ul>
        <p>See <a href="Registered_Properties.htm#objects_intro_4100679965_1525893">Registered Property Data Types</a> and <a href="Registered_Properties.htm#objects_intro_4100679965_1525007">Registered Properties</a> for additional information.</p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>