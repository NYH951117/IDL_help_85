<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Bridges|Java and COM - Export Bridge Assistant">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Wrapper Generation Example</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/TableStyles/Description.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../Bridges.htm">Bridges</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbsSelf">Java and COM - Export Bridge Assistant</span><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Wrapper Generation Example</span>
        </div>
        <h1><a name="Wrapper_Generation_Example"></a><a name="kanchor5291"></a>Wrapper Generation Example</h1>
        <p>The following example exports a simple IDL object that has no properties or methods and demonstrates the configuration necessary to initialize a COM or Java client application to use the exported object. First, create the IDL source object.</p>
        <ol>
            <li value="1">Create a file named helloworld__define.pro (within your IDL path) containing the following code:</li>
            <p class="Code">FUNCTION helloworld::INIT</p>
            <p class="Code">&#160;</p>
            <p class="Code_Indented">RETURN, 1</p>
            <p class="Code">&#160;</p>
            <p class="Code">END</p>
            <p class="Code">&#160;</p>
            <p class="Code">PRO helloworld__define</p>
            <p class="Code">&#160;</p>
            <p class="Code_Indented">struct = {helloworld, $</p>
            <p class="Code_Indented" style="text-indent: 20px;">dummy:0b $ ; dummy structure field, not a property</p>
            <p class="Code_Indented">}</p>
            <p class="Code_Indented">&#160;</p>
            <p class="Code">END</p>
            <p>This is the source object definition file that you will export using the Export Bridge Assistant.</p>
            <li value="2">Open the Assistant by entering IDLEXBR_ASSISTANT at the command line. See one of the following:</li>
            <ul>
                <li value="1"><a href="#COM_Wrapper_Object_Generation_and_Use" class="selected">COM Wrapper Object Generation and Use</a>
                </li>
                <li value="2"><a href="#Java_Wrapper_Object_Generation_and_Use" class="selected">Java Wrapper Object Generation and Use</a>
                </li>
            </ul>
        </ol>
        <h2><a name="COM_Wrapper_Object_Generation_and_Use"></a>COM Wrapper Object Generation and Use</h2>
        <p>The following example exports and uses the <code>helloworld</code> object in a simple Visual Basic .NET console application. After creating the object definition file and launching the Assistant as described in <a href="#Wrapper_Generation_Example" class="selected">Wrapper Generation Example</a>, complete the following steps.</p>
        <ol>
            <li value="1">Select to create a COM export object by selecting <b>File &gt; New Project &gt; COM</b> and browse to select the <code>helloworld__define.pro</code> file. Click <b>Open</b> to load the file into the Export Assistant.</li>
            <p>
                <img src="../Resources/Images/BridgesFigure7-16.png" />
            </p>
            <li value="2">The top-level project entry in the left-hand tree panel is selected by default.</li>
            <p>There is no need to modify the default properties shown in the right-hand property panel, but you can enter different values if desired. Select the tree view item listed in the left column to configure the related properties in the right column.</p>
            <table style="margin-left: 0;margin-right: auto;mc-table-style: url('../../Resources/TableStyles/Description.css');" class="TableStyle_Description" cellspacing="0">
                <col />
                <col />
                <thead>
                    <tr>
                        <th class="TableStyle_Description_Head_0_0_RowSep_ColSep">
                            <p>Tree View Item</p>
                        </th>
                        <th class="TableStyle_Description_Head_0_0_RowSep_ColEnd">
                            <p>Parameter Configuration</p>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                            <p>IDL Export Bridge Project</p>
                        </td>
                        <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                            <p>Accept the default value or make changes as desired:</p>
                            <ul>
                                <li value="1"> Output classname</li>
                                <li value="2"> Process name</li>
                                <li value="3"> Output directory</li>
                            </ul>
                        </td>
                    </tr>
                    <tr>
                        <td class="TableStyle_Description_Body_1_0_RowEnd_ColSep">
                            <p>helloworld</p>
                        </td>
                        <td class="TableStyle_Description_Body_1_0_RowEnd_ColEnd">
                            <p>Drawable object equals False</p>
                        </td>
                    </tr>
                </tbody>
            </table>
            <p>For this simple example, the source object has no properties or methods, so none are exported.</p>
            <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>See <a href="SpecifyingInformationForExporting.htm#Specifying_Information_For_Exporting">Specifying Information for Exporting</a> for details on configuring export values.</p>
            <li value="3">Save the project by selecting <b>File &gt; Save project</b>. Accept the default name and location or make changes as desired.</li>
            <li value="4">Build the export object by selecting <b>Build &gt; Build object</b>. The <b>Build log</b> panel shows the results of the build process. For a nondrawable object, <code>.tlb</code> and <code>.dll</code> files (named based on the object name) are created in the <b>Output directory</b>.</li>
            <li value="5">Register the <code>.dll</code> using <code>regsvr32 helloworld.dll</code>. See <a href="../ExportFromIDL - IDL Objects/ConfiguringBuildAndClientMachines.htm#COM_Registration_Requirements">COM Registration Requirements</a> for details if needed.</li>
            <li value="6">Create a new Visual Basic .NET console application and add a reference to the COM library named <code>helloworldLib 1.0 Type Library</code>. Select <b>Project &gt; Add Reference</b>, and click on the <b>COM</b> tab. Select the <code>helloworld.dll</code> and click <b>OK</b>.</li>
            <li value="7">Replace the default module code with the following text:</li>
            <p class="Code">Imports helloworldLib</p>
            <p class="Code">Module Module1</p>
            <p class="Code">&#160;</p>
            <p class="Code_Indented">Dim oHello As New helloworldLib.helloworldClass</p>
            <p class="Code_Indented">&#160;</p>
            <p class="Code_Indented">Sub Main()</p>
            <p class="Code_Indented" style="text-indent: 20px;">Try</p>
            <p class="Code_Indented" style="text-indent: 40px;">oHello.CreateObject(0, 0, 0)</p>
            <p class="Code_Indented" style="text-indent: 40px;">Catch ex As Exception</p>
            <p class="Code_Indented" style="text-indent: 40px;">Console.WriteLine(oHello.GetLastError())</p>
            <p class="Code_Indented" style="text-indent: 40px;">Return</p>
            <p class="Code_Indented" style="text-indent: 20px;">End Try</p>
            <p class="Code_Indented" style="text-indent: 20px;">AddHandler oHello.OnIDLOutput, AddressOf evOutput</p>
            <p class="Code_Indented" style="text-indent: 20px;">oHello.ExecuteString("Print, 'Hello World'")</p>
            <p class="Code_Indented">End Sub</p>
            <p class="Code_Indented">&#160;</p>
            <p class="Code_Indented">Sub evOutput(ByVal ss As String)</p>
            <p class="Code_Indented" style="text-indent: 20px;">Console.WriteLine(ss)</p>
            <p class="Code_Indented">End Sub</p>
            <p class="Code_Indented">&#160;</p>
            <p class="Code">End Module</p>
            <p>In this example, the stock ExecuteString method is used to print the hello world message. By adding a handler for the OnIDLOutput method, the console application is able to capture and output the information that would typically be printed to the Output window of IDL. After building the solution and starting without debugging, the console window appears with the output messages.</p>
        </ol>
        <h2><a name="Java_Wrapper_Object_Generation_and_Use"></a>Java Wrapper Object Generation and Use</h2>
        <p>The following example exports and uses the helloworld object in a simple Java application. After creating the object definition file and launching the Assistant as described in <a href="#Wrapper_Generation_Example" class="selected">Wrapper Generation Example</a>, complete the following steps.</p>
        <ol>
            <li value="1">Select to create a Java export object by selecting <b>File &gt; New Project &gt; Java</b> and browse to select the <code>helloworld__define.pro</code> file. Click <b>Open</b> to load the file into the Export Assistant.</li>
            <p>
                <img src="../Resources/Images/BridgesFigure7-17.png" />
            </p>
            <li value="2">The top-level project entry in the left-hand tree panel is selected by default.</li>
            <p>There is no need to modify the default properties shown in the right-hand property panel, but you can enter different values if desired. Select the tree view item listed in the left column to configure the related properties in the right column.</p>
            <table style="margin-left: 0;margin-right: auto;mc-table-style: url('../../Resources/TableStyles/Description.css');" class="TableStyle_Description" cellspacing="0">
                <col />
                <col />
                <thead>
                    <tr>
                        <th class="TableStyle_Description_Head_0_0_RowSep_ColSep">
                            <p>Tree View Item</p>
                        </th>
                        <th class="TableStyle_Description_Head_0_0_RowSep_ColEnd">
                            <p>Parameter Configuration</p>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                            <p>IDL Export Bridge Project</p>
                        </td>
                        <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                            <p>Accept the default value or make changes:</p>
                            <ul>
                                <li value="1"> Output classname</li>
                                <li value="2"> Process name</li>
                                <li value="3"> Output directory (paths in later parts of this example assume this field equals the main IDL installation directory, which is typically <i>C:\ITT\IDLxx</i> on Windows)</li>
                            </ul>
                        </td>
                    </tr>
                    <tr>
                        <td class="TableStyle_Description_Body_1_0_RowEnd_ColSep">
                            <p>helloworld</p>
                        </td>
                        <td class="TableStyle_Description_Body_1_0_RowEnd_ColEnd">
                            <p>Drawable object equals False</p>
                        </td>
                    </tr>
                </tbody>
            </table>
            <p>For this simple example, the source object has no properties or methods, so none are exported.</p>
            <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>See <a href="SpecifyingInformationForExporting.htm#Specifying_Information_For_Exporting">Specifying Information for Exporting</a> for details on configuring export values.</p>
            <li value="3">Save the project by selecting <b>File &gt; Save project</b>. Accept the default name and location or make changes as desired.</li>
            <li value="4">Build the export object by selecting <b>Build &gt; Build object</b>. The <b>Build log</b> panel shows the results of the build process. A subdirectory, named helloworld (based on the object name), contains the <code>.java</code> and <code>.class</code> files, and is located in the <b>Output directory</b>.</li>
            <li value="5">Create a file named <code>helloworld_example.java</code> that contains the following code and save the file in the <code>helloworld</code> directory.</li>
            <p class="Code">package helloworld;</p>
            <p class="Code">import com.idl.javaidl.*;</p>
            <p class="Code">public class helloworld_example extends helloworld implements JIDLOutputListener</p>
            <p class="Code">{</p>
            <p class="Code_Indented">private helloworld hwObj;</p>
            <p class="Code_Indented">&#160;</p>
            <p class="Code_Indented">// Constructor</p>
            <p class="Code_Indented">public helloworld_example()</p>
            <p class="Code_Indented">{</p>
            <p class="Code_Indented" style="text-indent: 20px;">hwObj = new helloworld();</p>
            <p class="Code_Indented" style="text-indent: 20px;">hwObj.createObject();</p>
            <p class="Code_Indented" style="text-indent: 20px;">hwObj.addIDLOutputListener(this);</p>
            <p class="Code_Indented" style="text-indent: 20px;">hwObj.executeString("print, 'Hello World'");</p>
            <p class="Code_Indented">}</p>
            <p class="Code_Indented">&#160;</p>
            <p class="Code_Indented">// implement JIDLOutputListener</p>
            <p class="Code_Indented">public void IDLoutput(JIDLObjectI obj, String sMessage)</p>
            <p class="Code_Indented">{</p>
            <p class="Code_Indented" style="text-indent: 20px;">System.out.println("IDL: "+sMessage);</p>
            <p class="Code_Indented">}</p>
            <p class="Code_Indented">&#160;</p>
            <p class="Code_Indented">public static void main(String[] argv)</p>
            <p class="Code_Indented">{</p>
            <p class="Code_Indented" style="text-indent: 20px;">helloworld_example example = new helloworld_example();</p>
            <p class="Code_Indented">}</p>
            <p class="Code">}</p>
            <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>By default, the Assistant generates a package so any Java routine using an exported wrapper object must include the package name. The second statement, <code>import com.idl.javaidl.*;</code> is also required.</p>
            <li value="6">  Select to create a Java export object by selecting <b>File &gt; New Project &gt; Java</b> listener is registered to retrieve the IDL output.</li>
        </ol>
        <p>The wrapper is compiled and run using the commands below:</p>
        <ul>
            <li value="1"><a href="#Windows_Commands_to_Build_and_Run_the_Client" class="selected">Windows Commands to Build and Run the Client</a>
            </li>
            <li value="2"><a href="#UNIX_Commands_to_Build_and_Run_the_Client" class="selected">UNIX Commands to Build and Run the Client</a>
            </li>
        </ul>
        <h3><a name="Windows_Commands_to_Build_and_Run_the_Client"></a>Windows Commands to Build and Run the Client</h3>
        <p>The following commands build and run this Java wrapper example on Windows.</p>
        <ol>
            <li value="1">  To compile and run the Java routine, open the Windows Command window by selecting <b>Start &gt; Run</b> and enter <code>cmd</code> in the textbox.</li>
            <li value="2">Use the <code>cd</code> command to change to the directory containing the <code>helloworld</code> directory. For a default Windows installation, the command would be similar to the following:</li>
            <p class="Code">cd C:\ITT\IDL63</p>
            <li value="3">Reference the classpath of <code>javaidlb.jar</code> in the compile statement. Enter the following commands (each as a single line), replacing IDL_DIR with the IDL installation directory, for example <code>ITT\IDL63</code>:</li>
            <p class="Code">javac -classpath ".;IDL_DIR\resource\bridges\export\java\javaidlb.jar" helloworld\helloworld_example.java</p>
            <p class="Code">java -classpath ".;IDL_DIR\resource\bridges\export\java\javaidlb.jar" helloworld.helloworld_example</p>
            <p>In both commands, the . (period) character includes the current directory in the classpath.</p>
            <p>The first command uses <code>javac</code> to compile the example client. The path to the <code>helloworld_example.java</code> file is specified using a backslash character as a directory separator.</p>
            <p>The second command uses <i>java</i> to run the example client. The final argument specifies the package path to the <code>helloworld_example</code> class file. Note that a . (period) character is used as a separator in the package path. The final argument to the second command intentionally omits the suffix.</p>
            <p>After compiling and running the project, the output message will appear in the command window.</p>
            <h3><a name="UNIX_Commands_to_Build_and_Run_the_Client"></a>UNIX Commands to Build and Run the Client</h3>
            <p>The following commands build and run this Java wrapper example on UNIX:</p>
            <p class="Code">source IDL_DIR/bin/bridge_setup</p>
            <p class="Code">javac helloworld/helloworld_example.java</p>
            <p class="Code">java helloworld.helloworld_example</p>
            <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>See <a href="../ExportFromIDL - IDL Objects/ConfiguringBuildAndClientMachines.htm#Java_Requirements">Java Requirements</a> for more information on the <code>bridge_setup</code> file.</p>
            <p>The source command adds the necessary directories to the dynamic library path and the classpath.</p>
            <p>The second command uses <code>javac</code> to compile the example client. The third command uses java to run the example client. The final argument specifies the package path to the <code>helloworld_example.</code> class file. Note that a . (period) character is used as a separator in the package path. The final argument to the second command intentionally omits the suffix.</p>
        </ol>
        <p>After compiling and running the project, the output message will appear.</p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>