<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Bridges|Java and COM - IDL Objects">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Wrapper Objects</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../Bridges.htm">Bridges</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbsSelf">Java and COM - IDL Objects</span><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Wrapper Objects</span>
        </div>
        <h1><a name="Wrapper_Objects"></a><a name="kanchor5327"></a>Wrapper <a name="kanchor5328"></a>Objects</h1>
        <p>The main concept used when exporting IDL objects for use in a client application is that of a wrapper object. A wrapper object is a native-language object (COM or Java) that exposes an IDL object’s behavior to a client. The client interacts with an instance of the wrapper object using native-language constructs and native-language data types.</p>
        <p>A wrapper object is built using the Export Bridge Assistant, in which you can choose which methods and properties of the IDL object to expose to the client. During the wrapper creation, you must specify the language-dependent variable types for all the parameters of the methods and properties to be exported. This is required since IDL has dynamically typed variables, whereas Java and COM do not. You can leave some properties or methods unimplemented in the wrapper object. For more information, see <a href="../ExportFromIDL - Export Bridge Assistant/UsingTheAssistant.htm#Using_The_Export_Bridge_Assistant">Using the Export Bridge Assistant</a>.</p>
        <p>When the Assistant exports an IDL object, it creates a language-specific wrapper object for the IDL object. The wrapper exposes methods and properties of the underlying IDL object it wraps, and the client interacts with the wrapper. When the client calls a method or modifies a property on a wrapper object, it is translated through a series of abstraction layers, and the underlying IDL object’s method is called or property modified.</p>
        <p>Every wrapper object has a collection of stock methods that are common to all wrapper objects as described in this document. Additionally, the underlying abstraction layers also handle creating the IDL object in another process. This use of multiple processes provides for IDL object pooling and isolation. For more information on these processes, see <a href="IDLAccess.htm#IDL_Access">IDL Access</a>.</p>
        <p>For COM object wrappers, a <i>.dll</i> file is created for nondrawable objects; an <i>.ocx</i> file is created for drawable objects. In addition, a <i>.tlb</i> file is generated. The user registers the component and references the COM type library and property accessors (put/get) on the objects using native language constructs. A COM wrapper provides an IDispatch-based interface for client use.</p>
        <p>For Java object wrappers, java files (<i>.java</i>) and class files (<i>.class</i>) are created. The user references the Java class definition in their code projects and calls methods and property accessors (set/get) on the objects using native language constructs. The Java wrapper is exposed as a standard Java object.</p>
        <p>The actual use of the generated wrapper objects depends on the structure and patterns used for the client environment. For more information, see <a href="../ExportFromIDL - COM Objects/OverviewOfCOMExportObjects.htm#Overview_of_COM_Export_Objects">Using Exported COM Objects</a> and <a href="../ExportFromIDL - Java Objects/OverviewOfJavaExportObjects.htm#Overview_Of_Java_Export_Objects">Using Exported Java Objects</a>.</p>
        <h2>IDL Connector Objects and Custom Wrapper Objects</h2>
        <p>Access to IDL functionality from an external programming environment is available through connector and custom wrapper objects. The prebuilt connector wrapper object provides the ability to communicate with the IDL process from and external application. A custom wrapper object incorporates the functionality of your own IDL object.</p>
        <h3><a name="kanchor5329"></a>Connector Objects</h3>
        <p>The connector object (distributed with IDL) provides access to IDL’s processing capabilities through a number of methods that let you communicate with the IDL process. Using these methods, you can:</p>
        <ul>
            <li value="1">Create and destroy instances of the connector object in your application</li>
            <li value="2">Pass data to and retrieve data from IDL</li>
            <li value="3">Get and set the IDL process name (see <a href="IDLAccess.htm#IDL_Access">IDL Access</a> for more information)</li>
            <li value="4">Execute IDL commands</li>
        </ul>
        <p>Although the connector object does not provide support for graphics, it provides an easy way to access the processing power of IDL in an external environment. See <a href="../ExportFromIDL - COM Objects/StockCOMWrapperMethods.htm#Stock_COM_Wrapper_Methods">Stock COM Wrapper Methods</a> and <a href="../ExportFromIDL - Java Objects/StockJavaWrapperMethods.htm#Stock_Java_Wrapper_Methods">Stock Java Wrapper Methods</a> for complete language-specific method reference information. For examples using the connector object, see  <a href="../ExportFromIDL - Connector Objects/UsingTheConnectorObject.htm#Using_The_Connector_Object">Using the Connector Object</a>.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>There are no stock properties.</p>
        <h3><a name="kanchor5330"></a>Custom Wrapper Objects</h3>
        <p>A custom wrapper object is an IDL object that is exported using the Export Bridge Assistant. A custom wrapper object contains the stock methods (referenced above) in addition to the specific methods and properties of the IDL object being wrapped. For information about how to create an IDL object that can be successfully exported, see <a href="OverviewOfWritingIDLObjectsForExporting.htm#Overview_Of_Writing_IDL_Objects_For_Exporting">Writing IDL Objects for Exporting</a>. Examples of creating and using custom objects are available in:</p>
        <ul>
            <li value="1"><a href="../ExportFromIDL - COM Objects/AboutCOMExportObjectExamples.htm#About_COM_Export_Object_Examples">Creating Custom COM Export Objects</a>
            </li>
            <li value="2"><a href="../ExportFromIDL - Java Objects/AboutJavaExportObjectExamples.htm#About_Java_Export_Object_Examples">Creating Custom Java Export Objects</a>
            </li>
        </ul>
        <p>For more information on the language-specific wrapper objects, see <a href="../ExportFromIDL - COM Objects/COMWrapperObjects.htm#COM_Wrapper_Objects">COM Wrapper Objects</a> and <a href="../ExportFromIDL - Java Objects/JavaWrapperObjects.htm#Java_Wrapper_Objects">Java Wrapper Objects</a>. </p>
        <h2><a name="kanchor5331"></a>Drawable and <a name="kanchor5332"></a>Nondrawable Objects</h2>
        <p>Custom wrapper objects can encapsulate either <a name="kanchor5333"></a>drawable or <a name="kanchor5334"></a>nondrawable IDL objects. To create a custom drawable wrapper object, the IDL source object must subclass from an IDLitWindow, IDLgrWindow, or IDLitDirectWindow visualization class and implement a set of callback routines for event handling. When events are detected for that window object, the callback methods are called with the information specific to the event detected. By subclassing from one of the drawable objects, a visualization written for use in an iTool visualization, Object Graphics display, or Direct Graphics display will seamlessly operate in an external environment via an export bridge. See <a href="ExportingDrawableObjects.htm#Exporting_Drawable_Objects">Exporting Drawable Objects</a> for important information about creating and using drawable objects.</p>
        <p>Nondrawable IDL objects are not derived from the IDLitWindow, IDLgrWindow, or IDLitDirectWindow classes and do not render to the screen. Nondrawable IDL objects do not have to inherit from any superclass, though derivation from IDLitComponent is necessary to fire IDL notifications.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Java drawable objects are not supported on the Macintosh OS X platform.</p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>