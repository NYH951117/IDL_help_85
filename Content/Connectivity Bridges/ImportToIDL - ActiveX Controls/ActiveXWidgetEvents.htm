<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Bridges|COM Import Bridge and ActiveX|ActiveX Controls">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>ActiveX Widget Events</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../Bridges.htm">Bridges</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbsSelf">COM Import Bridge and ActiveX</span><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbsSelf">ActiveX Controls</span><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">ActiveX Widget Events</span>
        </div>
        <h1><a name="ActiveX_Widget_Events"></a><a name="kanchor5225"></a>ActiveX Widget Events</h1>
        <p>Events generated by an ActiveX control are dispatched using the standard IDL widget methodology. When an ActiveX event is passed into IDL, it is packaged in an anonymous IDL structure that contains the ActiveX event parameters.</p>
        <p>While the actual structure of an event generated by an ActiveX control will depend on the control itself, the following gives an idea of the structure’s format:</p>
        <p class="Code">{ID	: 0L, TOP	: 0L, HANDLER       : 0L,</p>
        <p class="Code">DISPID	: 0L, ; The DISPID of the callback method</p>
        <p class="Code">EVENT_NAME	: "", ; The name of the callback method</p>
        <p class="Code">&lt;Param1 name&gt;	: &lt;Param1 value&gt;,</p>
        <p class="Code">&lt;Param2 name&gt;	: &lt;Param2 value&gt;,</p>
        <p class="Code">&lt;ParamN name&gt;	: &lt;ParamN value&gt;</p>
        <p class="Code">}</p>
        <p>As with other IDL Widget event structures, the first three fields are standard. ID is the widget id of the widget generating the event, TOP is the widget ID of the top level widget containing ID, and HANDLER contains the widget ID of the widget associated with the handler routine.</p>
        <p>The DISPID field contains the decimal representation of the dispatch ID (or DISPID) of the method that was called. Note that in the OLE/COM Object Viewer, this ID number is presented as a hexadecimal number. Other applications (Microsoft Visual Studio among them) may display the decimal representation.</p>
        <p>The EVENT_NAME field contains the name of the method that was called. The Param name fields contain the values of parameters returned by the called method. The actual parameter name or names displayed, if any, depend on the method being called by the ActiveX control.</p>
        <h2>Using the ActiveX <a name="kanchor5226"></a>Widget Event Structure</h2>
        <p>Since the widget event structure generated by an ActiveX control depends on the method that generated the event, it is important to check the type of event before processing values in IDL. Successfully parsing the event structure requires a detailed understanding of the dispatch interface of the ActiveX control; you must know either the DISPID or the method name of the method, and you must know the names and data types of the values returned.</p>
        <p>For example, suppose the ActiveX control you are incorporating into your IDL application includes two methods named Method1 and Method2 in a dispatch interface that looks like this:</p>
        <p class="Code">dispinterface MyDispInterface</p>
        <p class="Code">{</p>
        <p class="Code_Indented">properties:</p>
        <p class="Code_Indented">methods:</p>
        <p class="Code_Indented" style="text-indent: 20px;">[id(0x00000270)]</p>
        <p class="Code_Indented" style="text-indent: 20px;">void Method1([in] EventInfo* EventInfo);</p>
        <p class="Code_Indented" style="text-indent: 20px;">[id(0x00000272)]</p>
        <p class="Code_Indented" style="text-indent: 20px;">HRESULT Method2([out, retval] BSTR* EditData);</p>
        <p class="Code">};</p>
        <p>A widget event generated by a call to Method1, which has no return values, would look something like:</p>
        <p class="Code">** Structure &lt;3fb7288&gt;, 5 tags, length=32, data length=32: ID	LONG	13</p>
        <p class="Code">TOP	LONG	12</p>
        <p class="Code">HANDLER	LONG	12</p>
        <p class="Code">DISPID	LONG	624</p>
        <p class="Code">EVENT_NAME	STRING	'Method1'</p>
        <p>Note that the DISPID is 624, the decimal equivalent of 270 hexadecimal.</p>
        <p>A widget event generated by a call to Method2, which has one return value, would look something like:</p>
        <p class="Code">** Structure &lt;3fb7288&gt;, 6 tags, length=32, data length=32: ID	LONG	13</p>
        <p class="Code">TOP	LONG	12</p>
        <p class="Code">HANDLER	LONG	12</p>
        <p class="Code">DISPID	LONG	626</p>
        <p class="Code">EVENT_NAME	STRING	'Method2'</p>
        <p class="Code">EDITDATA	STRING	'some text value'</p>
        <p>An IDL event-handler routine could use the value of the DISPID field to check which of these two ActiveX control methods generated the event before attempting to use the value of the EDITDATA field:</p>
        <p class="Code">PRO myRoutine_event, event</p>
        <p class="Code_Indented">IF(event.DISPID eq 626) THEN BEGIN</p>
        <p class="Code_Indented" style="text-indent: 20px;">PRINT, event.EDITDATA</p>
        <p class="Code_Indented">ENDIF ELSE BEGIN</p>
        <p class="Code_Indented" style="text-indent: 20px;">&lt;do something else&gt; ENDELSE</p>
        <p class="Code">END</p>
        <h2><a name="Dynamic_Elements_in_the_ActiveX_Event_Structure"></a>Dynamic Elements in the ActiveX Event Structure</h2>
        <p>Parameter data included in an event structure generated by an ActiveX control can take the form of an array. If this happens, the array is placed in an IDL pointer, and the pointer, rather than the array itself, is included in the IDL event structure. Similarly, an ActiveX control may return a reference to another COM object, as described in <a href="../ImportToIDL - COM Objects/ReferencesToOtherCOMObjects.htm#References_To_Other_COM_Objects">References to Other COM Objects</a>, in its event structure.</p>
        <p>IDL pointers and objects created in this way are not automatically removed; it is the IDL programmer’s responsibility free them using a routine such as PTR_FREE, HEAP_FREE, or OBJ_DESTROY.</p>
        <p>If it is unclear whether the event structure will contain dynamic elements (objects or pointers) it is best to pass the ActiveX event structure to the HEAP_FREE routine when your event-handler routine has finished with the event. This will ensure that all dynamic portions of the structure are released.</p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>