<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Bridges|Java Export Bridge|Appendix - Java Object Creation">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Java Object Initiation With Parameters</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../Bridges.htm">Bridges</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbsSelf">Java Export Bridge</span><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbsSelf">Appendix - Java Object Creation</span><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Java Object Initiation With Parameters</span>
        </div>
        <h1><a name="Java_Object_Initiation_With_Parameters"></a><a name="kanchor5374"></a>Java Object Initiation With Parameters</h1>
        <p>Use the following code to initialize the newly created Java wrapper object (based on the IDL object described in <a href="SampleIDLObject.htm#Sample_IDL_Object">Sample IDL Object</a>) with its three parameters:</p>
        <ul>
            <li value="1">A string</li>
            <li value="2">A 32-bit long value</li>
            <li value="3">An array that has two rows and three columns, containing 32-bit long values</li>
        </ul>
        <p>See <a href="../ExportFromIDL - Java Objects/StockJavaWrapperMethods.htm#createObject">createObject</a> for more information about object parameters. See <a href="../Appendices - IDL Java Object API/PackageSummary.htm#Package_Summary">IDL Java Object API</a> for information on JIDL* objects.</p>
        <ol>
            <li value="1">Create a Java file named <i>idlexfoo_example.java</i> and save it in the <b>Export directory</b> created by the Assistant. Include the following lines of code in the file:</li>
        </ol>
        <p class="Code" style="text-indent: 20px;">// Reference the default package generated by the Assistant.</p>
        <p class="Code" style="text-indent: 20px;">package idlexfoo;</p>
        <p class="Code" style="text-indent: 20px;">&#160;</p>
        <p class="Code" style="text-indent: 20px;">// Reference the javaidl export bridge classes.</p>
        <p class="Code" style="text-indent: 20px;">import com.idl.javaidl.*;</p>
        <p class="Code" style="text-indent: 20px;">&#160;</p>
        <p class="Code" style="text-indent: 20px;">//Create main class, subclassing from object created by</p>
        <p class="Code" style="text-indent: 20px;">//Bridge Assistant. You can either subclass or create a</p>
        <p class="Code" style="text-indent: 20px;">//member variable of the object.</p>
        <p class="Code" style="text-indent: 20px;">public class idlexfoo_example extends idlexfoo implements JIDLOutputListener</p>
        <p class="Code" style="text-indent: 20px;">{</p>
        <p class="Code_Indented" style="text-indent: 20px;">//Create a variable referencing the exported object</p>
        <p class="Code_Indented" style="text-indent: 20px;">private idlexfoo fooObj;</p>
        <p class="Code_Indented" style="text-indent: 20px;">&#160;</p>
        <p class="Code_Indented" style="text-indent: 20px;">// Constructor.</p>
        <p class="Code_Indented" style="text-indent: 20px;">public idlexfoo_example()</p>
        <p class="Code_Indented" style="text-indent: 20px;">{</p>
        <p class="Code_Indented" style="text-indent: 40px;">// These are the parameters we want to pass to</p>
        <p class="Code_Indented" style="text-indent: 40px;">// the ::Init method</p>
        <p class="Code_Indented" style="text-indent: 40px;">String str = "I am a string parameter";</p>
        <p class="Code_Indented" style="text-indent: 40px;">int var = 24;</p>
        <p class="Code_Indented" style="text-indent: 40px;">int[][] array = {{10, 11, 12}, {20, 21, 22}};</p>
        <p class="Code_Indented" style="text-indent: 40px;">&#160;</p>
        <p class="Code_Indented" style="text-indent: 40px;">// Wrap the Java types using Export Bridge data types</p>
        <p class="Code_Indented" style="text-indent: 40px;">JIDLString parmStr = new JIDLString(str);</p>
        <p class="Code_Indented" style="text-indent: 40px;">JIDLInteger parmVar = new JIDLInteger(var);</p>
        <p class="Code_Indented" style="text-indent: 40px;">JIDLArray parmArray = new JIDLArray(array);</p>
        <p class="Code_Indented" style="text-indent: 40px;">&#160;</p>
        <p class="Code_Indented" style="text-indent: 40px;">// Create the wrapper object</p>
        <p class="Code_Indented" style="text-indent: 40px;">fooObj = new idlexfoo();</p>
        <p class="Code_Indented" style="text-indent: 40px;">&#160;</p>
        <p class="Code_Indented" style="text-indent: 40px;">// Set up parameters to pass to createObject</p>
        <p class="Code_Indented" style="text-indent: 40px;">final int ARGC = 3;</p>
        <p class="Code_Indented" style="text-indent: 40px;">Object[] argv = new Object[ARGC];</p>
        <p class="Code_Indented" style="text-indent: 40px;">int[] argp = new int[ARGC];</p>
        <p class="Code_Indented" style="text-indent: 40px;">&#160;</p>
        <p class="Code_Indented" style="text-indent: 40px;">// NOTE: JIDLConst.PARMFLAG_CONST indicates</p>
        <p class="Code_Indented" style="text-indent: 40px;">// "in-only" parameter argv[0] = parmStr;</p>
        <p class="Code_Indented" style="text-indent: 40px;">argp[0] = JIDLConst.PARMFLAG_CONST;</p>
        <p class="Code_Indented" style="text-indent: 40px;">argv[1] = parmVar;</p>
        <p class="Code_Indented" style="text-indent: 40px;">argp[1] = JIDLConst.PARMFLAG_CONST;</p>
        <p class="Code_Indented" style="text-indent: 40px;">argv[2] = parmArray;</p>
        <p class="Code_Indented" style="text-indent: 40px;">argp[2] = JIDLConst.PARMFLAG_CONST;</p>
        <p class="Code_Indented" style="text-indent: 40px;">&#160;</p>
        <p class="Code_Indented" style="text-indent: 40px;">// Add output listener to access IDL output.</p>
        <p class="Code_Indented" style="text-indent: 40px;">fooObj.addIDLOutputListener(this);</p>
        <p class="Code_Indented" style="text-indent: 40px;">&#160;</p>
        <p class="Code_Indented" style="text-indent: 40px;">// Create the underlying IDL object and call</p>
        <p class="Code_Indented" style="text-indent: 40px;">// its ::Init method with parameters</p>
        <p class="Code_Indented" style="text-indent: 40px;">fooObj.createObject(ARGC, argv, argp);</p>
        <p class="Code_Indented" style="text-indent: 40px;">fooObj.executeString("PRINT, 'Created object'");</p>
        <p class="Code_Indented" style="text-indent: 20px;">}</p>
        <p class="Code_Indented" style="text-indent: 20px;">&#160;</p>
        <p class="Code_Indented" style="text-indent: 20px;">// implement JIDLOutputListener</p>
        <p class="Code_Indented" style="text-indent: 20px;">public void IDLoutput(JIDLObjectI obj, String sMessage)</p>
        <p class="Code_Indented" style="text-indent: 20px;">{</p>
        <p class="Code_Indented" style="text-indent: 40px;">System.out.println("IDL: "+sMessage);</p>
        <p class="Code_Indented" style="text-indent: 20px;">}</p>
        <p class="Code_Indented" style="text-indent: 20px;">&#160;</p>
        <p class="Code_Indented" style="text-indent: 20px;">//Instantiate a member of the class.</p>
        <p class="Code_Indented" style="text-indent: 20px;">public static void main(String[] argv)</p>
        <p class="Code_Indented" style="text-indent: 20px;">{</p>
        <p class="Code_Indented" style="text-indent: 40px;">idlexfoo_example exampleObj = new idlexfoo_example();</p>
        <p class="Code_Indented" style="text-indent: 20px;">}</p>
        <p class="Code" style="text-indent: 20px;">}</p>
        <ol data-mc-continue="true">
            <li value="2">Open the Windows Command window by selecting <b>Start &gt; Run</b> and enter<br /><i>cmd</i> in the textbox.</li>
            <li value="3">  Use the <i>cd</i> command to change to the directory containing the <i>idlexfoo</i> directory.</li>
            <li value="4">Reference the classpath of <i>javaidlb.jar</i> in the compile statement. Enter the following two commands (as single lines) to compile and execute the program, replacing IDL_DIR with the IDL installation directory:<br /><p class="Code">javac -classpath ".;IDL_DIR\resource\bridges\export\java\javaidlb.jar" idlexfoo\idlexfoo_example.java</p><p class="Code">java -classpath ".;IDL_DIR\resource\bridges\export\java\javaidlb.jar" idlexfoo.idlexfoo_example</p></li>
        </ol>
        <p class="Tip" data-mc-autonum="&lt;b&gt;Tip: &lt;/b&gt;"><span class="autonumber"><span><b>Tip: </b></span></span>See <a href="SampleIDLObject.htm#Note_on_Running_the_Java_Examples">Note on Running the Java Examples</a> for information on non-Windows-style compile and execution commands.</p>
        <p>After compiling and running the project, the output message will appear in the command window.</p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>