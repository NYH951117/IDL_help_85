<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Bridges|COM Export Bridge|Examples">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Stock COM Wrapper Methods</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/TableStyles/NoLines.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../Bridges.htm">Bridges</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbsSelf">COM Export Bridge</span><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbsSelf">Examples</span><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Stock COM Wrapper Methods</span>
        </div>
        <h1><a name="Stock_COM_Wrapper_Methods"></a><a name="kanchor5164"></a>Stock <a name="kanchor5165"></a>COM <a name="kanchor5166"></a>Wrapper Methods</h1>
        <p>This section describes the stock methods in the COM wrapper objects created by the Export Bridge Assistant:</p>
        <ul>
            <li value="1"><a href="#Abort" class="selected">Abort</a>
            </li>
            <li value="2"><a href="#CreateObject" class="selected">CreateObject</a>
            </li>
            <li value="3"><a href="#CreateObjectEx" class="selected">CreateObjectEx</a>
            </li>
            <li value="4"><a href="#DestroyObject" class="selected">DestroyObject</a>
            </li>
            <li value="5"><a href="#ExecuteString" class="selected">ExecuteString</a>
            </li>
            <li value="6"><a href="#GetIDLObjectClassName" class="selected">GetIDLObjectClassName</a>
            </li>
            <li value="7"><a href="#GetIDLObjectVariableName" class="selected">GetIDLObjectVariableName</a>
            </li>
            <li value="8"><a href="#GetIDLVariable" class="selected">GetIDLVariable</a>
            </li>
            <li value="9"><a href="#GetLastError" class="selected">GetLastError</a>
            </li>
            <li value="10"><a href="#GetProcessName" class="selected">GetProcessName</a>
            </li>
            <li value="11"><a href="#SetIDLVariable" class="selected">SetIDLVariable</a>
            </li>
            <li value="12"><a href="#SetProcessName" class="selected">SetProcessName</a>
            </li>
        </ul>
        <p>Every connector object and custom COM wrapper object has these methods in addition to those defined by the wrapped IDL object.</p>
        <h2><a name="Abort"></a><a name="kanchor5167"></a>Abort</h2>
        <p>The Abort method requests that the IDL process containing the underlying IDL object abort its current activity. This method is useful if a given IDL method call is busy for a very long time (e.g., a very long image processing command).</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>The request is only that, a request, and IDL might take a long time before it actually stops or might completely finish its current activity. Such a wait is an effect of the IDL interpreter.</p>
        <p>The client can only abort the current IDL activity if that wrapper object is the current owner of the underlying IDL process.</p>
        <h3>Syntax</h3>
        <p class="indent">HRESULT Abort(void)</p>
        <h3>Parameters</h3>
        <p class="indent">None</p>
        <h2><a name="CreateObject"></a><a name="kanchor5168"></a>CreateObject</h2>
        <p>The CreateObject method creates the actual underlying IDL object. The argc, argv, and argpal parameters are used to supply parameters to the underlying IDL objectâ€™s Init method. If the Init method does not have any parameters, the caller sets argc, argv, and argpal to 0, NULL, and NULL, respectively.</p>
        <p>This method creates IDL objects that use a default licensing algorithm (see <a href="../ExportFromIDL - IDL Objects/IDLAccess.htm#IDL_Licensing_Modes">IDL Licensing Modes</a> for details). To use a specific IDL licensing mode, use the <a href="#CreateObjectEx" class="selected">CreateObjectEx</a> method.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>By default, ActiveX controls call the CreateObject method implicitly. In an ActiveX control, calls to the CreateObject method in client code will be ignored if the <b>Explicit CreateObject</b> property in the Export Bridge Assistant project was set to False when the ActiveX control was built.</p>
        <h3>Syntax</h3>
        <p class="Code">HRESULT CreateObject ([in] int argc, [in] VARIANT argv, [in] VARIANT argpal)</p>
        <h3>Parameters</h3>
        <h4>argc</h4>
        <p class="indent">An integer that specifies the number of elements in the argv and argpal arrays.</p>
        <h4>argv</h4>
        <p class="indent">A VARIANT containing a COM SafeArray of VARIANT types, one for each parameter to Init. The elements in the array are given in order of the parameters listed in Init, ordered from left to right.</p>
        <h4>argpal</h4>
        <p class="indent">A VARIANT containing a COM SafeArray of 32-bit integer flag values, which can be a combination of the IDLBML_PARMFLAG_CONST and IDLBML_PARMFLAG_CONVMAJORITY values ORed together. The latter value is only used when an argv element is an array itself. For parameters that are not arrays, the argpal[n] value must be 0.</p>
        <p>The following constant values defined in the typlib information of a wrapped IDL object can be used:</p>
        <table style="margin-left: 0;margin-right: auto;mc-table-style: url('../../Resources/TableStyles/NoLines.css');" class="TableStyle_NoLines" cellspacing="0">
            <col />
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_NoLines_Body_0_0_RowSep_ColSep">
                        <p>IDLBML_PARMFLAG_CONST</p>
                    </td>
                    <td class="TableStyle_NoLines_Body_0_0_RowSep_ColEnd">
                        <p>Use for parameters that are constant (In-Only, meaning that their values cannot be changed).</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_NoLines_Body_0_0_RowEnd_ColSep">
                        <p>IDLBML_PARMFLAG_CONVMAJORITY</p>
                    </td>
                    <td class="TableStyle_NoLines_Body_0_0_RowEnd_ColEnd">
                        <p>	Include if the property value is an array.</p>
                        <p>For more information, see <a href="../ExportFromIDL - Export Bridge Assistant/SpecifyingInformationForExporting.htm#Converting_Array_Majority">Converting Array Majority</a>.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2>Example</h2>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>See <a href="../Appendices - COM Object Creation/COMObjectCreation.htm#COM_Object_Creation">COM Object Creation</a> for examples of creating objects from a variety of COM programming languages.</p>
        <p>The Init method of the IDL object being wrapped has the following signature:</p>
        <p class="Code">PRO IDLexFoo::INIT, rect, filename</p>
        <p>where <i>rect</i> is an array of 4 integers and <i>filename</i> is a string.</p>
        <p>The COM client code that creates an instance of the wrapper object, and calls the CreateObject() method with the <i>rect</i> and <i>filename</i> parameters, would look like the following:</p>
        <p class="Code">CComSafeArray&lt;int&gt; csa(4);</p>
        <p class="Code">csa[0] = 0; csa[1] = 0; csa[2] = 5; csa[3] = 10;</p>
        <p class="Code">&#160;</p>
        <p class="Code">CComVariant argv[2];</p>
        <p class="Code">int	argp[2];</p>
        <p class="Code">&#160;</p>
        <p class="Code">argv[0] = csa.Detach();</p>
        <p class="Code">argp[0] = IDLBML_PARMFLAG_CONST;</p>
        <p class="Code">argv[1] = "someFilename.txt";</p>
        <p class="Code">argp[1] = IDLBML_PARMFLAG_CONST;</p>
        <p class="Code">&#160;</p>
        <p class="Code">CComPtr&lt;IMyWrapper&gt; spWrapper;</p>
        <p class="Code">spWrapper.CoCreateInstance(  uuidof(MyWrapper));</p>
        <p class="Code">&#160;</p>
        <p class="Code">spWrapper-&gt;CreateObject(2, argv, argp);</p>
        <h2><a name="CreateObjectEx"></a><a name="kanchor5169"></a>CreateObjectEx</h2>
        <p>The CreateObjectEx method creates the actual underlying IDL object; it differs from the <a href="#CreateObject" class="selected">CreateObject</a> method in that it allows the specification of flag values that control the way the IDL process is initialized. The <i>argc</i>, <i>argv</i>, and <i>argpal</i> parameters are used to supply parameters to the underlying IDL objectâ€™s Init method. If the Init method does not have any parameters, the caller sets <i>argc</i>, <i>argv</i>, and <i>argpal</i> to 0, NULL, and NULL, respectively. The flags parameter specifies one or more initialization flags governing the way the IDL process is initialized; currently, the available flags control the method used to license the IDL session. (See <a href="../ExportFromIDL - IDL Objects/IDLAccess.htm#IDL_Licensing_Modes">IDL Licensing Modes</a> for details on the default licensing mechanism.)</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>By default, ActiveX controls call the CreateObject method implicitly. In an ActiveX control, calls to the CreateObject method in client code will be ignored if the <b>Explicit CreateObject</b> property in the Export Bridge Assistant project was set to False when the ActiveX control was built.</p>
        <h3>Syntax</h3>
        <p class="Code">HRESULT CreateObjectEx ([in] int argc, [in] VARIANT argv, [in] VARIANT argpal, [in] long flags))</p>
        <h3>Parameters</h3>
        <h4>argc</h4>
        <p class="indent">An integer that specifies the number of elements in the <i>argv</i> and <i>argpal</i> arrays.</p>
        <h4>argv</h4>
        <p class="indent">A VARIANT containing a COM SafeArray of VARIANT types, one for each parameter to Init. The elements in the array are given in order of the parameters listed in Init, ordered from left to right.</p>
        <h4>argpal</h4>
        <p class="indent">A VARIANT containing a COM SafeArray of 32-bit integer flag values, which can be a combination of the IDLBML_PARMFLAG_CONST and IDLBML_PARMFLAG_CONVMAJORITY values ORed together. The latter value is only used when an argv element is an array itself. For parameters that are not arrays, the argpal[n] value must be 0.</p>
        <p>The following constant values defined in the typlib information of a wrapped IDL object can be used:</p>
        <table style="margin-left: 0;margin-right: auto;mc-table-style: url('../../Resources/TableStyles/NoLines.css');" class="TableStyle_NoLines" cellspacing="0">
            <col />
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_NoLines_Body_0_0_RowSep_ColSep">
                        <p>IDLBML_PARMFLAG_CONST</p>
                    </td>
                    <td class="TableStyle_NoLines_Body_0_0_RowSep_ColEnd">
                        <p>	Use for parameters that are constant (In-Only, meaning that their values cannot be changed).</p>
                        <p>	Include if the property value is an array.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_NoLines_Body_0_0_RowEnd_ColSep">
                        <p>IDLBML_PARMFLAG_CONVMAJORITY</p>
                    </td>
                    <td class="TableStyle_NoLines_Body_0_0_RowEnd_ColEnd">
                        <p>For more information, see <a href="../ExportFromIDL - Export Bridge Assistant/SpecifyingInformationForExporting.htm#Converting_Array_Majority">Converting Array Majority</a>.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h4>flags</h4>
        <p class="indent">Flag values that control the way the IDL process is initialized. The following constant values defined in the typlib information of a wrapped IDL object can be used:</p>
        <table style="margin-left: 0;margin-right: auto;mc-table-style: url('../../Resources/TableStyles/NoLines.css');" class="TableStyle_NoLines" cellspacing="0">
            <col />
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_NoLines_Body_0_0_RowSep_ColSep">
                        <p>IDLBML_LIC_FULL</p>
                    </td>
                    <td class="TableStyle_NoLines_Body_0_0_RowSep_ColEnd">
                        <p>The application requires that a licensed copy of IDL be installed on the local machine. If IDL is installed but no license is available, the application will run in IDL Demo (7-minute) mode.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_NoLines_Body_0_0_RowSep_ColSep">
                        <p>IDLBML_LIC_LICENSED_SAV</p>
                    </td>
                    <td class="TableStyle_NoLines_Body_0_0_RowSep_ColEnd">
                        <p>The application looks for an embedded license in the save file being restored.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_NoLines_Body_0_0_RowSep_ColSep">
                        <p>IDLBML_LIC_RUNTIME</p>
                    </td>
                    <td class="TableStyle_NoLines_Body_0_0_RowSep_ColEnd">
                        <p>The application looks for a runtime IDL license. If no runtime license is available, the application will run in Virtual Machine mode.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_NoLines_Body_0_0_RowEnd_ColSep">
                        <p>IDLBML_LIC_VM</p>
                    </td>
                    <td class="TableStyle_NoLines_Body_0_0_RowEnd_ColEnd">
                        <p>The application will run in Virtual Machine mode.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2>Example</h2>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>See <a href="../Appendices - COM Object Creation/COMObjectCreation.htm#COM_Object_Creation">COM Object Creation</a> for examples of creating objects from a variety of COM programming languages.</p>
        <p>The Init method of the IDL object being wrapped has the following signature:</p>
        <p class="Code">PRO IDLexFoo::INIT, rect, filename</p>
        <p>where <i>rect</i> is an array of 4 integers and <i>filename</i> is a string.</p>
        <p>The COM client code that creates an instance of the wrapper object and calls the CreateObjectEx() method with the <i>rect</i> and <i>filename</i> parameters, and which explicitly specifies that it should run in IDL Virtual Machine mode, would look like the following:</p>
        <p class="Code">CComSafeArray&lt;int&gt; csa(4);</p>
        <p class="Code">csa[0] = 0;</p>
        <p class="Code">csa[1] = 0;</p>
        <p class="Code">csa[2] = 5;</p>
        <p class="Code">csa[3] = 10;</p>
        <p class="Code">&#160;</p>
        <p class="Code">CComVariant argv[2];</p>
        <p class="Code">&#160;</p>
        <p class="Code">int	argp[2];</p>
        <p class="Code">&#160;</p>
        <p class="Code">argv[0] = csa.Detach();</p>
        <p class="Code">argp[0] = IDLBML_PARMFLAG_CONST;</p>
        <p class="Code">argv[1] = "someFilename.txt";</p>
        <p class="Code">argp[1] = IDLBML_PARMFLAG_CONST;</p>
        <p class="Code">&#160;</p>
        <p class="Code">CComPtr&lt;IMyWrapper&gt; spWrapper;</p>
        <p class="Code">&#160;</p>
        <p class="Code">spWrapper.CoCreateInstance(  uuidof(MyWrapper));</p>
        <p class="Code">spWrapper.CreateObjectEx(2, argv, argp, IDLBML_LIC_VM);</p>
        <h2><a name="DestroyObject"></a><a name="kanchor5170"></a>DestroyObject</h2>
        <p>The DestroyObject method destroys the underlying IDL object. If the object being destroyed is the last object within an OPS process, the OPS process is also destroyed.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Trying to re-create an object after it has been destroyed is not supported. You must re-define the variable and then re-create the object.</p>
        <h3>Syntax</h3>
        <p class="indent">HRESULT DestroyObject(void)</p>
        <h3>Parameters</h3>
        <p class="indent">None</p>
        <h2><a name="ExecuteString"></a><a name="kanchor5171"></a>ExecuteString</h2>
        <p>The ExecuteString method executes the specified command in the IDL process containing the underlying IDL object.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>This method is disabled for applications running in the IDL Virtual Machine.</p>
        <h3>Syntax</h3>
        <p class="indent">HRESULT ExecuteString([in] BSTR bstrCmd)</p>
        <h3>Parameters</h3>
        <h4>bstrCmd</h4>
        <p class="indent">A string containing the IDL command to be executed.</p>
        <h3>Examples</h3>
        <p class="indent">See <a href="../ExportFromIDL - Connector Objects/IDLCommandLinewithaCOMConnectorObject.htm#IDL_Command_Line_with_a_COM_Connector_Object">IDL Command Line with a COM Connector Object</a> for an example that executes any IDL command entered into one textbox and writes IDL output or error information to a second textbox.</p>
        <h2><a name="GetIDLObjectClassName"></a><a name="kanchor5172"></a>GetIDLObjectClassName</h2>
        <p>The GetIDLObjectClassName method returns the IDL class name of the underlying IDL object.</p>
        <h3>Syntax</h3>
        <p class="indent">HRESULT GetIDLObjectClassName([out,retval] BSTR* Name)</p>
        <h3>Return Value</h3>
        <p class="indent">A string containing the class name of the IDL object.</p>
        <h2><a name="GetIDLObjectVariableName"></a><a name="kanchor5173"></a>GetIDLObjectVariableName</h2>
        <p>When the underlying IDL object was created in the IDL process, it was assigned a variable name. The GetIDLObjectVariableName method returns that name.</p>
        <h3>Syntax</h3>
        <p class="indent">HRESULT GetIDLObjectVariableName([out,retval] BSTR* Name)</p>
        <h3>Return Value</h3>
        <p class="indent">A string containing the variable name of the IDL object.</p>
        <h2><a name="GetIDLVariable"></a><a name="kanchor5174"></a>GetIDLVariable</h2>
        <p>The GetIDLVariable method retrieves a named variable from the IDL process containing the underlying IDL object.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>This method is disabled for applications running in the IDL Virtual Machine.</p>
        <h3>Syntax</h3>
        <p class="indent">HRESULT GetIDLVariable([in] BSTR bstrVar, [out,retval] VARIANT* Value)</p>
        <h3>Parameters</h3>
        <h4>bstrVar</h4>
        <p class="indent">A string containing the name of the variable to retrieve from the IDL process.</p>
        <h3>Return Value</h3>
        <p class="indent">The variableâ€™s values. If the variable is an array, the array is always converted from IDL majority to the standard COM SAFEARRAY majority ordering.</p>
        <h3>Examples</h3>
        <p class="indent">See <a href="../ExportFromIDL - Connector Objects/DataManipulationwithaCOMConnectorObject.htm#Data_Manipulation_with_a_COM_Connector_Object">Data Manipulation with a COM Connector Object</a> for an array manipulation example that uses the GetIDLVariable, SetIDLVariable and ExecuteString methods.</p>
        <h2><a name="GetLastError"></a><a name="kanchor5175"></a>GetLastError</h2>
        <p>The GetLastError method gets the error string for the last error that has occurred. It is called after a method call returns an error. The returned error string is usually the actual IDL error message, if IDL generated the error message.</p>
        <h3>Syntax</h3>
        <p class="indent">HRESULT GetLastError([out,retval] BSTR* LastError)</p>
        <h3>Return Value</h3>
        <p class="indent">The error string for the last error that occurred.</p>
        <h2><a name="GetProcessName"></a><a name="kanchor5176"></a>GetProcessName</h2>
        <p>The GetProcessName method returns the name of the process that contains the underlying IDL object.</p>
        <h3>Syntax</h3>
        <p class="indent">HRESULT GetProcessName([out,retval] BSTR* Name)</p>
        <h3>Return Value</h3>
        <p class="indent">A string containing the name of the process that contains the IDL object.</p>
        <h2><a name="SetIDLVariable"></a><a name="kanchor5177"></a>SetIDLVariable</h2>
        <p>The SetIDLVariable method sets the specified variable name to the specified value in the IDL process containing the underlying IDL object. If the value is a SAFEARRAY, it is always converted from the standard COM SAFEARRAY majority ordering to IDL majority.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>This method is disabled for applications running in the IDL Virtual Machine.</p>
        <h3>Syntax</h3>
        <p class="indent">HRESULT SetIDLVariable([in] BSTR bstrVar, [in] VARIANT Value)</p>
        <h3>Parameters</h3>
        <h4>bstrVar</h4>
        <p class="indent">A string identifying the variable in the IDL process to be set to Value.</p>
        <h4>Value</h4>
        <p class="indent">The value for the variable.</p>
        <h3>Examples</h3>
        <p class="indent">See <a href="../ExportFromIDL - Connector Objects/DataManipulationwithaCOMConnectorObject.htm#Data_Manipulation_with_a_COM_Connector_Object">Data Manipulation with a COM Connector Object</a> for an array manipulation example that uses the GetIDLVariable, SetIDLVariable and ExecuteString methods.</p>
        <h2><a name="SetProcessName"></a><a name="kanchor5178"></a>SetProcessName</h2>
        <p>The SetProcessName method sets the name of the process that will contain the IDL object. This can only be called before making the CreateObject call. Once the object is created, the process name cannot be reset and calling this method after CreateObject has no effect.</p>
        <h3>Syntax</h3>
        <p class="indent">HRESULT SetProcessName([in] BSTR Name)</p>
        <h3>Parameters</h3>
        <h4>Name</h4>
        <p class="indent">A string containing the name of the process that will contain the IDL object.</p>
        <div class="mp_footer">Â© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>