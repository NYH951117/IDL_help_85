<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Bridges|COM Export Bridge|Examples">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>COM Event Handling</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../Bridges.htm">Bridges</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbsSelf">COM Export Bridge</span><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbsSelf">Examples</span><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">COM Event Handling</span>
        </div>
        <h1><a name="Event_Handling"></a><a name="kanchor5156"></a>COM Event <a name="kanchor5157"></a>Handling</h1>
        <p>Clients subscribe to wrapper instance events through a process called advising. The wrapper object defines an outgoing source interface (event interface) containing the event methods, and the client implements that interface. During advising, the client passes a reference to its event interface to the wrapper. When an event occurs within the wrapper, it fires the event to the client by calling the appropriate event method on the client’s event interface.</p>
        <p>ActiveX controls fire events in the classical way via an outgoing source interface. The Export Bridge ActiveX wrapper controls define the outgoing source interface_DIDLWrapperEvents, as described below. Any client that wants to receive the events must subscribe to events by calling the wrapper object’s IConnectionPoint::Advise() method. Once advised, the client unsubscribes to events by calling IConnectionPoint::Unadvise().</p>
        <p class="Code">HRESULT Advise	([in] IUnknown* pUnk, [out,retval] DWORD* pdwCookie);</p>
        <p class="Code">HRESULT Unadvise	([in] DWORD dwCookie);</p>
        <p>The client implements the _DIDLWrapperEvents interface and calls the wrapper object’s Advise() method with its _DIDLWrapperEvents interface reference, and receives a cookie for that connection. When the clients wants to disconnect, the client calls Unadvise() with the connection cookie.</p>
        <p>In the classical sense, only ActiveX controls fire events, which are typically UI events. However, a client using an Export Bridge COM wrapper object may be interested in IDL output and notification. So, we carry the concept of firing events over onto COM objects. Clients of COM wrapper objects can receive events by advising to the same outgoing source interface in the same way that clients advise for events on the ActiveX wrapper controls.</p>
        <h2><a name="Mouse_and_Keyboard_Events_in_COM_Export_Objects"></a><a name="kanchor5158"></a>Mouse and <a name="kanchor5159"></a>Keyboard Events in COM Export Objects</h2>
        <p>For UI events generated by ActiveX wrapper object, the client receives the events first before IDL receives them. The client then has the option to “eat” the event and prevent IDL from ever seeing the event. Each UI event has a ForwardToIdl parameter, which is initially set to TRUE (1). If the event handler in the client code clears the value to FALSE (0), then the wrapper does not forward the event to IDL.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>For a COM example that passes keyboard events to IDL, see <a href="COMIDLitWindowSurfaceManipulation.htm#COM_IDLitWindow_Surface_Manipulation">COM IDLitWindow Surface Manipulation</a>.</p>
        <p>The event interface is defined below and uses the following values. The mouse</p>
        <p>Button parameter can have any of the following values ORed together:</p>
        <p class="Code">IDLBML_MBUTTON_LEFT 0x1,</p>
        <p class="Code">IDLBML_MBUTTON_RIGHT 0x2,</p>
        <p class="Code">IDLBML_MBUTTON_MIDDLE    0x4,</p>
        <p>The KeyState parameter can have any of the following values ORed together:</p>
        <p class="Code">IDLBML_KEYSTATE_SHIFT 0x1,</p>
        <p class="Code">IDLBML_KEYSTATE_CTRL 0x2,</p>
        <p class="Code">IDLBML_KEYSTATE_CAPSLOCK 0x4,</p>
        <p class="Code">IDLBML_KEYSTATE_ALT      0x8,</p>
        <p>For the KeyCode parameters, if the key pressed is an ASCII character, then KeyCode is the ASCII value; otherwise it is one of these values:</p>
        <p class="Code">IDLBML_KEYBOARD_EVENT_SHIFT       1</p>
        <p class="Code">IDLBML_KEYBOARD_EVENT_CONTROL     2</p>
        <p class="Code">IDLBML_KEYBOARD_EVENT_CAPSLOCK    3</p>
        <p class="Code">IDLBML_KEYBOARD_EVENT_ALT         4</p>
        <p class="Code">IDLBML_KEYBOARD_EVENT_LEFT        5</p>
        <p class="Code">IDLBML_KEYBOARD_EVENT_RIGHT       6</p>
        <p class="Code">IDLBML_KEYBOARD_EVENT_UP          7</p>
        <p class="Code">IDLBML_KEYBOARD_EVENT_DOWN        8</p>
        <p class="Code">IDLBML_KEYBOARD_EVENT_PAGE_UP     9</p>
        <p class="Code">IDLBML_KEYBOARD_EVENT_PAGE_DOWN   10</p>
        <p class="Code">IDLBML_KEYBOARD_EVENT_HOME        11</p>
        <p class="Code">IDLBML_KEYBOARD_EVENT_END         12</p>
        <p class="Code">IDLBML_KEYBOARD_EVENT_DEL         127 // isASCII is set to 1 when this code is given</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>The constants above are defined in the typelib information contained within each wrapper object and are used with the _DIDLWrapperEvents interface defined below.</p>
        <p class="Code">dispinterface _DIDLWrapperEvents</p>
        <p class="Code">{</p>
        <p class="Code_Indented">HRESULT OnMouseDown	(long Button, long KeyState, long x, long y, [in,out]long* ForwardToIdl);</p>
        <p class="Code_Indented">HRESULT OnMouseUp	(long Button, long KeyState, long x, long y, [in,out]long* ForwardToIdl);</p>
        <p class="Code_Indented">HRESULT OnMouseMove	(long Button, long KeyState, long x, long y, [in,out]long* ForwardToIdl);</p>
        <p class="Code_Indented">HRESULT OnMouseWheel	(long KeyState, long WheelDelta, long x, long y, [in,out]long* ForwardToIdl);</p>
        <p class="Code_Indented">HRESULT OnMouseDoubleClick	(long Button, long KeyState, long x, long y, [in,out]long* ForwardToIdl);</p>
        <p class="Code_Indented">HRESULT OnMouseEnter	(void); HRESULT OnMouseExit	(void);</p>
        <p class="Code_Indented">HRESULT OnKeyDown	(long KeyCode, long KeyState, [in,out]long* ForwardToIdl);</p>
        <p class="Code_Indented">HRESULT OnKeyUp	(long KeyCode, long KeyState, [in,out]long* ForwardToIdl);</p>
        <p class="Code_Indented">HRESULT OnSize	(long width, long height, [in,out]long* ForwardToIdl);</p>
        <p class="Code_Indented">HRESULT OnIDLNotify	(BSTR bstr1, BSTR bstr2);</p>
        <p class="Code_Indented">HRESULT OnIDLOutput	(BSTR bstrOutput);</p>
        <p class="Code">};</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>For the OnMouseWheel event, the value of WheelDelta is a positive or negative value that indicates the amount that the wheel was rotated forward or backward, e.g. +/- 1, +/- 2, etc.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Since the COM wrapper uses the same event interface, only the OnIDLNotify and OnIDLOutput events will be fired to subscribers of COM “events.” The UI events in the _DIDLWrapperEvents interface have no meaning in a nondrawable COM wrapper context, and therefore will not be fired to the client.</p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>