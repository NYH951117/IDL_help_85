<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Bridges|COM Import Bridge and ActiveX|COM Import Bridge">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>IDLcomIDispatch Object Naming Scheme</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../Bridges.htm">Bridges</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbsSelf">COM Import Bridge and ActiveX</span><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbsSelf">COM Import Bridge</span><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">IDLcomIDispatch Object Naming Scheme</span>
        </div>
        <h1><a name="IDLcomIDispatch_Object_Naming_Scheme"></a>IDLcomIDispatch Object <a name="kanchor5202"></a>Naming Scheme</h1>
        <p>When you create an IDLcomIDispatch object, IDL automatically creates a dynamic subclass of the IDLcomIDispatch class to contain the COM object. IDL determines which COM object to instantiate by parsing the class name you provide to the OBJ_NEW function. You specify the COM object to use by creating a class name that combines the name of the base class (IDLcomIDispatch) with either the COM class identifier or the COM program identifier for the object. The resulting class name looks like</p>
        <p class="Code">IDLcomIDispatch$ID_type$ID</p>
        <p>where <i>ID_type</i> is one of the following:</p>
        <ul>
            <li value="1"><i>CLSID</i> if the object is identified by its COM class ID</li>
            <li value="2"><i>PROGID</i> if the object is identified by its COM program ID</li>
        </ul>
        <p>and ID is the COM object’s actual class or program identifier string.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>While COM objects incorporated into IDL are instances of the dynamic subclass created when the COM object is instantiated, they still expose the functionality of the class IDLcomIDispatch, which is the direct superclass of the dynamic subclass. All IDLcomIDispatch methods are available to the dynamic subclass.</p>
        <h2><a name="Class_Identifiers"></a><a name="kanchor5203"></a>Class Identifiers</h2>
        <p>A COM object’s class identifier (generally referred to as the CLSID) is a 128-bit identifying string that is guaranteed to be unique for each object class. The strings used by COM as class IDs are also referred to as <i>Globally Unique Identifiers</i> (GUIDs) or <i>Universally Unique Identifiers</i> (UUIDs). It is beyond the scope of this chapter to discuss how class IDs are generated, but it is certain that every COM object has a unique CLSID.</p>
        <p>COM class IDs are 32-character strings of alphanumeric characters and numerals that look like this:</p>
        <p class="Code">{A77BC2B2-88EC-4D2A-B2B3-F556ACB52E52}</p>
        <p>The above class identifier identifies the RSIDemoComponent class included with IDL.</p>
        <p>When you create an IDLcomIDispatch object using a CLSID, you must modify the standard CLSID string in two ways:</p>
        <ol>
            <li value="1">You must omit the opening and closing braces ( { } ).</li>
            <li value="2">  You must replace the dash characters ( - ) in the CLSID string with underscores ( _ ).</li>
        </ol>
        <p>See <a href="CreatingIDLcomIDispatchObjects.htm#Creating_IDLcomIDispatch_Objects">Creating IDLcomIDispatch Objects</a> for example class names supplied to the OBJ_NEW function.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>If you do not know the class ID of the COM object you wish to expose as an IDL object, you may be able to determine it using an application provided by Microsoft. See <a href="#Finding_COM_Class_and_Program_IDs" class="selected">Finding COM Class and Program IDs</a> for details.</p>
        <h2><a name="Program_Identifiers"></a><a name="kanchor5204"></a>Program Identifiers</h2>
        <p>A COM object’s program identifier (generally referred to as the PROGID) is a mapping of the class identifier to a more human-friendly string. Unlike class IDs, program IDs are not guaranteed to be unique, so namespace conflicts are possible. Program IDs are, however, easier to work with; if you are not worried about name conflicts, use the identifier you are most comfortable with.</p>
        <p>Program IDs are alphanumeric strings that can take virtually any form, although by convention they look like this:</p>
        <p class="Code">PROGRAM.Component.version</p>
        <p>For example, the RSIDemoComponent class included with IDL has the following program ID:</p>
        <p class="Code">RSIDemoComponent.RSIDemoObj1.1</p>
        <p>When you create an IDLcomIDispatch object using a PROGID, you must modify the standard PROGID string by replacing the dot characters ( . ) with underscores ( _ ).</p>
        <p>See <a href="CreatingIDLcomIDispatchObjects.htm#Creating_IDLcomIDispatch_Objects">Creating IDLcomIDispatch Objects</a> for example class names supplied to the OBJ_NEW function.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>If you do not know the program ID of the COM object you wish to expose as an IDL object, you may be able to determine it using an application provided by Microsoft; see <a href="#Finding_COM_Class_and_Program_IDs" class="selected">Finding COM Class and Program IDs</a> for details.</p>
        <h2><a name="Finding_COM_Class_and_Program_IDs"></a><a name="kanchor5205"></a>Finding COM Class and Program IDs</h2>
        <p>In general, if you wish to incorporate a COM object into an IDL program, you will know the COM class or program ID — either because you created the COM object yourself, or because the developer of the object provided you with the information.</p>
        <p>If you do not know the class or program ID for the COM object you want to use, you may be able to determine them using the OLE/COM Object Viewer application provided by Microsoft. You can download the OLE/COM Object Viewer at no charge directly from Microsoft. As of this writing, you can locate the tool by pointing your Web browser to the following URL:</p>
        <p class="indent">http://www.microsoft.com/com</p>
        <p>and then selecting <b>Downloads</b> from the <b>Resources</b> menu.</p>
        <p>The OLE/COM Object Viewer displays all of the COM objects installed on a computer, and allows you to view information about the objects and their interfaces.</p>
        <p>
            <img src="../Resources/Images/BridgesFigure3-1.png" />
        </p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>You can copy an object’s class ID to the clipboard by selecting the object in the leftmost panel of the object viewer, clicking the right mouse button, and selecting “Copy CLSID to Clipboard” from the context menu.</p>
        <p>&#160;</p>
        <p>If you have an IDL program that instantiates a COM object running on your computer, you can determine either the class ID or the program ID by using the HELP command with the OBJECTS keyword. IDL displays the full dynamic subclass name, including the class ID or program ID that was used when the object was created.</p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>