<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Bridges|COM Import Bridge and ActiveX|COM Import Bridge">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>About Using COM Objects In IDL</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../Bridges.htm">Bridges</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbsSelf">COM Import Bridge and ActiveX</span><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbsSelf">COM Import Bridge</span><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">About Using COM Objects In IDL</span>
        </div>
        <h1><a name="About_Using_COM_Objects_In_IDL"></a>About Using COM Objects In IDL</h1>
        <p>If you want to incorporate a COM object that does not present its own user interface into your IDL application, use IDL’s IDLcomIDispatch object class.</p>
        <p>IDL’s <a name="kanchor5194"></a>IDLcomIDispatch object class creates an IDL object that uses the COM IDispatch interface to communicate with an underlying COM object. When you create an IDLcomIDispatch object, you provide information about the COM object you wish to use, and IDL handles instantiation of and communication with the object. You can call the COM object’s methods and get and set its properties using standard IDL object conventions and syntax.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>If the COM object you want to use in your IDL application is an ActiveX control, use the WIDGET_ACTIVEX routine, discussed in <a href="../ImportToIDL - ActiveX Controls/AboutUsingActiveXControls.htm#About_Using_Active_X_Controls">Using ActiveX Controls in IDL</a>.</p>
        <h2>Array Data Storage Format</h2>
        <p>COM, like C, stores array data in row-major format. IDL stores array data in column- major format. See <a href="../Appendices - Multidimensional Array Storage and Access/MASAOverview.htm#Multidimensional_Array_Storage_and_Access_Overview">Multidimensional Array Storage and Access</a> for a detailed discussion of this issue and its implications for IDL application design.</p>
        <h2>Object Creation</h2>
        <p>To create an IDL object that encapsulates a COM object, use the OBJ_NEW function as described in <a href="CreatingIDLcomIDispatchObjects.htm#Creating_IDLcomIDispatch_Objects">Creating IDLcomIDispatch Objects</a>. IDL creates a dynamic subclass of the IDLcomIDispatch object class, based on information you specify for the COM object.</p>
        <h2>Method Calls and Property Management</h2>
        <p>Once you have created your IDLcomIDispatch object within IDL, use normal IDL object method calls to interact with the object. (See Chapter 1, “The Basics of Using Objects in IDL” (Object Programming) for a discussion of IDL objects.) COM object properties can be set and retrieved using the GetProperty and SetProperty methods implemented for the IDLcomIDispatch class. See <a href="MethodCallsOnIDLcomIDispatchObjects.htm#Method_Calls_On_IDLcomIDispatch_Objects">Method Calls on IDLcomIDispatch Objects</a> and <a href="ManagingCOMObjectProperties.htm#Managing_COM_Object_Properties">Managing COM Object Properties</a> for details.</p>
        <h2>Object Destruction</h2>
        <p>Destroy IDLcomIDispatch objects using the OBJ_DESTROY procedure. See <a href="DestroyingIDLcomIDispatchObjects.htm#Destroying_IDLcomIDispatch_Objects">Destroying IDLcomIDispatch Objects</a> for details.</p>
        <h2><a name="Registering_COM_Components_on_a_Windows_Machine"></a><a name="kanchor5195"></a>Registering COM Components on a Windows Machine</h2>
        <p>Before a COM object or ActiveX control can be used by a client program, it must be registered on the Windows machine. In most cases, components are registered by the program that installs them on the machine. If you are using a component that is not installed by an installation program that handles the registration, you can register the component manually.</p>
        <p>To register a component (<i>.dll</i> or <i>.exe</i>) or a control (<i>.ocx</i>), use the Windows command line program <i>regsvr32</i>, supplying it with name of the component or control to register. For example, the IDL distribution includes a COM component named RSIDemoComponent, contained in a file named <i>RSIDemoComponent.dll</i> located in the <i>examples\doc\bridges\COM</i> subdirectory of the IDL distribution. To register this component, do the following:</p>
        <ol>
            <li value="1">  Open a Windows command prompt.</li>
            <li value="2">Change directories to the examples\doc\bridges\COM subdirectory of the IDL distribution.</li>
            <li value="3">  Enter the following command:</li>
            <p class="Code">regsvr32 RSIDemoComponent.dll</p>
        </ol>
        <p>Windows will display a pop-up dialog informing you that the component has been registered. (You can specify the “ /s “ parameter to <i>regsvr32</i> to prevent the dialog from being displayed.)</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>You only need to register a component once on a given machine. It is not necessary to register a component before each use.</p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>