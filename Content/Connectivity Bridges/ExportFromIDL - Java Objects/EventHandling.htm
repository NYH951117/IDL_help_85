<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Bridges|Java Export Bridge">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Java Event Handling</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/TableStyles/Description.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../Bridges.htm">Bridges</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbsSelf">Java Export Bridge</span><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Java Event Handling</span>
        </div>
        <h1><a name="Event_Handling"></a><a name="kanchor5341"></a>Java Event <a name="kanchor5342"></a>Handling</h1>
        <p>Events in Java are handled by registered listener objects (often referred to as the Observer design pattern). The object interested in listening to a given event must implement the proper Java interface and then register to receive the events.</p>
        <p>Any Java object can register to listen to any other objectâ€™s events, but it is often useful for a wrapper object to listen to its own GUI and notify events. It usually makes most sense for a client object to listen to IDL output events.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Registering or unregistering listeners for events should happen in the initListeners method or AFTER the <a href="StockJavaWrapperMethods.htm#createObject">createObject</a> method.</p>
        <h2><a name="kanchor5343"></a>Nondrawable Java Objects</h2>
        <p>Nondrawable objects, which inherit from <a href="../Appendices - IDL Java Object API/JIDLObject.htm#JIDLObject">JIDLObject</a>, can be notified of the following events:</p>
        <ul>
            <li value="1">IDL notify events (by implementing <a href="../Appendices - IDL Java Object API/JIDLNotifyListener.htm#JIDLNotifyListener">JIDLNotifyListener</a>)</li>
            <li value="2">IDL output events (by implementing <a href="../Appendices - IDL Java Object API/JIDLOutputListener.htm#JIDLOutputListener">JIDLOutputListener</a>)</li>
        </ul>
        <p>The default behavior as provided by the JIDLObject superclass is that they are not wired to listen to any events.</p>
        <h2><a name="kanchor5344"></a>Drawable Java Objects</h2>
        <p>Drawable objects, which inherit from <a href="../Appendices - IDL Java Object API/JIDLCanvas.htm#JIDLCanvas">JIDLCanvas</a>, are wired by default to listen to the following events:</p>
        <ul>
            <li value="1">Mouse events (by implementing <a href="../Appendices - IDL Java Object API/JIDLMouseListener.htm#JIDLMouseListener">JIDLMouseListener</a>)<ul><li value="1">Mouse enter canvas</li><li value="2">Mouse exit canvas</li><li value="3">Mouse pressed</li><li value="4">Mouse released</li></ul></li>
            <li value="2">Mouse motion events (by implementing <a href="../Appendices - IDL Java Object API/JIDLMouseMotionListener.htm#JIDLMouseMotionListener">JIDLMouseMotionListener</a>)<ul><li value="1">Mouse dragged</li><li value="2">Mouse moved</li></ul></li>
            <li value="3">Mouse wheel events (by implementing <a href="../Appendices - IDL Java Object API/JIDLMouseWheelListener.htm#JIDLMouseWheelListener">JIDLMouseWheelListener</a>)</li>
            <li value="4">Key events (by implementing <a href="../Appendices - IDL Java Object API/JIDLKeyListener.htm#JIDLKeyListener">JIDLKeyListener</a>)<ul><li value="1">Key pressed</li><li value="2">Key released</li></ul></li>
            <li value="5">Component events (by implementing <a href="../Appendices - IDL Java Object API/JIDLComponentListener.htm#JIDLComponentListener">JIDLComponentListener</a>)<ul><li value="1">Canvas exposed</li><li value="2">Canvas resized</li></ul></li>
        </ul>
        <p>In addition, drawable objects can also listen to the following events, but they do not listen to them by default:</p>
        <ul>
            <li value="1">IDL notify events (by implementing <a href="../Appendices - IDL Java Object API/JIDLNotifyListener.htm#JIDLNotifyListener">JIDLNotifyListener</a>)</li>
            <li value="2">IDL output events (by implementing <a href="../Appendices - IDL Java Object API/JIDLOutputListener.htm#JIDLOutputListener">JIDLOutputListener</a>)</li>
        </ul>
        <h2>IDL Notification</h2>
        <p>As mentioned above, IDL objects that subclass itComponent can trigger a notification from the IDL object level by calling IDLitComponent::NotifyBridge. Both drawable (<a href="../Appendices - IDL Java Object API/JIDLCanvas.htm#JIDLCanvas">JIDLCanvas</a>) and nondrawable (<a href="../Appendices - IDL Java Object API/JIDLObject.htm#JIDLObject">JIDLObject</a>) wrapper objects handle IDL notifications.</p>
        <p>To receive a notification, a class must implement the <a href="../Appendices - IDL Java Object API/JIDLNotifyListener.htm#JIDLNotifyListener">JIDLNotifyListener</a> interface and register with the wrapper object by calling its addIDLNotifyListener method to register itself as a listener. The listener class can unregister itself by calling the removeIDLNotifyListener method.</p>
        <p>The following is the definition of the JIDLNotifyListener interface:</p>
        <p class="Code">public interface JIDLNotifyListener</p>
        <p class="Code">{</p>
        <p class="Code_Indented">// obj: a reference to the wrapper object that triggered notify</p>
        <p class="Code_Indented">// s1 and s2 are strings sent from IDLitComponent::NotifyBridge</p>
        <p class="Code_Indented">void OnIDLNotify(JIDLObjectI obj, String s1, String s2);</p>
        <p class="Code">}</p>
        <p>These methods are available to JIDLCanvas and JIDLObject:</p>
        <p class="Code">public void addIDLNotifyListener(JIDLNotifyListener l);</p>
        <p class="Code">public void removeIDLNotifyListener(JIDLNotifyListener l);</p>
        <h2>IDL Output</h2>
        <p>In general, IDL output can be listened to by any class that implements the <a href="../Appendices - IDL Java Object API/JIDLOutputListener.htm#JIDLOutputListener">JIDLOutputListener</a> interface and registers itself as a listener by calling addIDLOutputListener. The listener class can unregister itself by calling removeIDLOutputListener. Both drawable (<a href="../Appendices - IDL Java Object API/JIDLCanvas.htm#JIDLCanvas">JIDLCanvas</a>) and non-drawable (<a href="../Appendices - IDL Java Object API/JIDLObject.htm#JIDLObject">JIDLObject</a>) wrapper objects handle IDL output.</p>
        <p>The following is the definition of the JIDLOutputListener interface:</p>
        <p class="Code">public interface JIDLOutputListener</p>
        <p class="Code">{</p>
        <p class="Code_Indented">// obj: a reference to the wrapper object that triggered notify</p>
        <p class="Code_Indented">// s is the IDL output string</p>
        <p class="Code_Indented">void IDLoutput(JIDLObjectI obj, String s);</p>
        <p class="Code">}</p>
        <p>These methods are available to JIDLCanvas and JIDLObject:</p>
        <p class="Code">public void addIDLOutputListener(JIDLOutputListener l);</p>
        <p class="Code">public void removeIDLOutputListener(JIDLOutputListener l);</p>
        <h2>Handling Specific Events</h2>
        <p>This section describes how client applications can listen to and handle the following events: mouse, mouse motion, keyboard, and component.</p>
        <h3><a name="kanchor5345"></a>Mouse Events</h3>
        <p>Mouse events include a mouse entering the canvas, the mouse exiting the canvas, a mouse press in the canvas, and a mouse release in the canvas. Drag and move events are handled as mouse motion events (see <a href="#Mouse_Motion_Events" class="selected">Mouse Motion Events</a>).</p>
        <p>In general, mouse events may be listened to by any class that implements the <a href="../Appendices - IDL Java Object API/JIDLMouseListener.htm#JIDLMouseListener">JIDLMouseListener</a> interface and registers itself as a listener by calling the addIDLMouseListener method. The listener class can unregister itself by calling the removeIDLMouseListener method. Only drawable (<a href="../Appendices - IDL Java Object API/JIDLCanvas.htm#JIDLCanvas">JIDLCanvas</a>) wrapper objects handle this event type.</p>
        <p>The following is the definition of the JIDLMouseListener interface:</p>
        <p class="Code">public interface JIDLMouseListener</p>
        <p class="Code">{</p>
        <p class="Code_Indented">// obj is a reference to the wrapper object</p>
        <p class="Code_Indented">// e is a java.awt.event.MouseEvent</p>
        <p class="Code_Indented">void IDLmouseEntered (JIDLObjectI obj, MouseEvent e);</p>
        <p class="Code_Indented">void IDLmouseExited (JIDLObjectI obj, MouseEvent e);</p>
        <p class="Code_Indented">void IDLmousePressed (JIDLObjectI obj, MouseEvent e);</p>
        <p class="Code_Indented">void IDLmouseReleased(JIDLObjectI obj, MouseEvent e);</p>
        <p class="Code">}</p>
        <p>These methods are available to JIDLCanvas:</p>
        <p class="Code">public void addIDLMouseListener(JIDLMouseListener l);</p>
        <p class="Code">public void removeIDLMouseListener(JIDLMouseListener l);</p>
        <p>The default behavior of drawable wrappers is that they automatically register to listen to themselves and provide default event handlers for each of these events. The following table describes the default behavior for each event type.</p>
        <table style="margin-left: 0;margin-right: auto;mc-table-style: url('../../Resources/TableStyles/Description.css');" class="TableStyle_Description" cellspacing="0">
            <col />
            <col />
            <thead>
                <tr>
                    <th class="TableStyle_Description_Head_0_0_RowSep_ColSep">
                        <p>Event	</p>
                    </th>
                    <th class="TableStyle_Description_Head_0_0_RowSep_ColEnd">
                        <p>Action</p>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>IDLmousePressed	</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Triggered when a mouse button is pressed inside the canvas. The default behavior passes the event to the IDL method OnMouseDown.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p>IDLmouseReleased	</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>Triggered when a mouse button is released inside the canvas. The default behavior passes the event to the IDL method OnMouseUp.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>IDLmouseEntered	</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Triggered when the mouse enters the canvas. Default implementation does nothing. The default behavior calls the IDL method OnEnter.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColSep">
                        <p>IDLmouseExited	</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColEnd">
                        <p>Triggered when the mouse exits the canvas. Default implementation does nothing. The default behavior calls the IDL method OnExit.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h3><a name="Mouse_Motion_Events"></a><a name="kanchor5346"></a>Mouse Motion Events</h3>
        <p>Mouse motion events include a mouse being moved or dragged inside the canvas. In general, mouse motion can be listened to by any class that implements the <a href="../Appendices - IDL Java Object API/JIDLMouseMotionListener.htm#JIDLMouseMotionListener">JIDLMouseMotionListener</a> interface and registers itself as a listener by calling the addIDLMouseMotionListener method. The listener class can unregister itself by calling the removeIDLMouseMotionListener method. Only drawable (<a href="../Appendices - IDL Java Object API/JIDLCanvas.htm#JIDLCanvas">JIDLCanvas</a>) wrapper objects handle this event type.</p>
        <p>The following is the definition of the JIDLMouseMotionListener interface:</p>
        <p class="Code">public interface JIDLMouseMotionListener</p>
        <p class="Code">{</p>
        <p class="Code_Indented">// obj is a reference to the wrapper object</p>
        <p class="Code_Indented">// e is a java.awt.event.MouseEvent</p>
        <p class="Code_Indented">void IDLmouseDragged(JIDLObjectI obj, MouseEvent e);</p>
        <p class="Code_Indented">void IDLmouseMoved(JIDLObjectI obj, MouseEvent e);</p>
        <p class="Code">}</p>
        <p>These methods are available to JIDLCanvas:</p>
        <p class="Code">public void addIDLMouseMotionListener(JIDLMouseMotionListener l);</p>
        <p class="Code">public void removeIDLMouseMotionListener(JIDLMouseMotionListener l);</p>
        <p>The default behavior of drawable wrappers is that they automatically register to listen to themselves and provide default event handlers for each of these events. The following table describes the default behavior for each event type.</p>
        <table style="margin-left: 0;margin-right: auto;mc-table-style: url('../../Resources/TableStyles/Description.css');" class="TableStyle_Description" cellspacing="0">
            <col />
            <col />
            <thead>
                <tr>
                    <th class="TableStyle_Description_Head_0_0_RowSep_ColSep">Event	</th>
                    <th class="TableStyle_Description_Head_0_0_RowSep_ColEnd">
                        <p>Action</p>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">IDLmouseDragged	</td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Triggered when the mouse is moved while its left button is pressed inside the canvas. The default behavior passes the event to the IDL method OnMouseMotion.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColSep">IDLmouseMoved	</td>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColEnd">
                        <p>Triggered when the mouse is moved (while no button is pressed) inside the canvas. The default behavior passes the event to the IDL method OnMouseMotion.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h3><a name="kanchor5347"></a>Mouse Wheel Events</h3>
        <p>Mouse wheel events include the scroll wheel of the mouse being rolled inside the canvas. In general, mouse wheel motion can be listened to by any class that implements the <a href="../Appendices - IDL Java Object API/JIDLMouseWheelListener.htm#JIDLMouseWheelListener">JIDLMouseWheelListener</a> interface and registers itself as a listener by calling the addIDLMouseWheelListener method. The listener class can unregister itself by calling the removeIDLMouseWheelListener method. Only drawable (<a href="../Appendices - IDL Java Object API/JIDLCanvas.htm#JIDLCanvas">JIDLCanvas</a>) wrapper objects handle this event type.</p>
        <p>The following is the definition of the JIDLMouseWheelListener interface:</p>
        <p class="Code">public interface JIDLMouseWheelListener</p>
        <p class="Code">{</p>
        <p class="Code_Indented">/**	A mouse wheel has moved inside the JIDLCanvas.</p>
        <p class="Code_Indented">* obj is a reference to the wrapper object</p>
        <p class="Code_Indented">* e is a java.awt.event.MouseWheelEvent</p>
        <p class="Code_Indented">*/</p>
        <p class="Code_Indented">void IDLmouseWheelMoved(JIDLObjectI obj, MouseWheelEvent e);</p>
        <p class="Code">}</p>
        <p>These methods are available to JIDLCanvas:</p>
        <p class="Code">public void addIDLMouseWheelListener(JIDLMouseWheelListener l);</p>
        <p class="Code">public void removeIDLMouseWheelListener(JIDLMouseWheelListener l);</p>
        <p>The default behavior of drawable wrappers is that they automatically register to listen to themselves and provide default event handlers for each of these events. The following table describes the default behavior for each event type.</p>
        <table style="margin-left: 0;margin-right: auto;mc-table-style: url('../../Resources/TableStyles/Description.css');" class="TableStyle_Description" cellspacing="0">
            <col />
            <col />
            <thead>
                <tr>
                    <th class="TableStyle_Description_Head_0_0_RowSep_ColSep">Event	</th>
                    <th class="TableStyle_Description_Head_0_0_RowSep_ColEnd">
                        <p>Action</p>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColSep">IDLmouseWheelMoved	</td>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColEnd">
                        <p>Triggered when the mouse wheel is rolled. The default behavior passes the event to the IDL method OnWheel.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h3><a name="kanchor5348"></a>Keyboard Events</h3>
        <p>Keyboard events include a key being pressed or released when the Canvas has focus. In general, keyboard events can be listened to by any class that implements the <a href="../Appendices - IDL Java Object API/JIDLKeyListener.htm#JIDLKeyListener">JIDLKeyListener</a> interface and registers itself as a listener by calling the addIDLKeyListener method. The listener class can unregister itself by calling the removeIDLKeyListener method. Only drawable (<a href="../Appendices - IDL Java Object API/JIDLCanvas.htm#JIDLCanvas">JIDLCanvas</a>) wrapper objects handle this event type.</p>
        <p>The following is the definition of the JIDLKeyListener interface:</p>
        <p class="Code">public interface JIDLKeyListener</p>
        <p class="Code">{</p>
        <p class="Code_Indented">// obj is a reference to the wrapper object</p>
        <p class="Code_Indented">// e is a java.awt.event.KeyEvent</p>
        <p class="Code_Indented">// (x,y) is the location of the mouse in the Canvas</p>
        <p class="Code_Indented">void IDLkeyPressed (JIDLObjectI obj, KeyEvent e, int x, int y);</p>
        <p class="Code_Indented">void IDLkeyReleased(JIDLObjectI obj, KeyEvent e, int x, int y);</p>
        <p class="Code">}</p>
        <p>These methods are available to JIDLCanvas:</p>
        <p class="Code">public void addIDLKeyListener(JIDLKeyListener l);</p>
        <p class="Code">public void removeIDLKeyListener(JIDLKeyListener l);</p>
        <p>The default behavior of drawable wrappers is that they automatically register to listen to themselves and provide default event handlers for each of these events. The following table describes the default behavior for each event type.</p>
        <table style="margin-left: 0;margin-right: auto;mc-table-style: url('../../Resources/TableStyles/Description.css');" class="TableStyle_Description" cellspacing="0">
            <col />
            <col />
            <thead>
                <tr>
                    <th class="TableStyle_Description_Head_0_0_RowSep_ColSep">Event	</th>
                    <th class="TableStyle_Description_Head_0_0_RowSep_ColEnd">
                        <p>Action</p>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">IDLkeyPressed	</td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Triggered when a key is pressed when the canvas has focus. The default behavior passes the event to the IDL method OnKeyboard.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColSep">IDLkeyReleased	</td>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColEnd">
                        <p>Triggered when a key is released when the canvas has focus. The default behavior passes the event to the IDL method OnKeyboard.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h3><a name="kanchor5349"></a>Component Events</h3>
        <p>Component events include the drawable canvas being resized and being exposed (uncovered or redrawn). Typically, these events are not handled by the client, but are handled behind the scenes by the Java Export Bridge, which resizes and repaints the canvas automatically. However, these events can be of interest to the client.</p>
        <p>In general, component events can be listened to by any class that implements the <a href="../Appendices - IDL Java Object API/JIDLComponentListener.htm#JIDLComponentListener">JIDLComponentListener</a> interface and registers itself as a listener by calling the addComponentListener method. The listener class can unregister itself by calling the removeComponentListener method. Only drawable (<a href="../Appendices - IDL Java Object API/JIDLCanvas.htm#JIDLCanvas">JIDLCanvas</a>) wrapper objects handle this event type, and these methods are available only to JIDLCanvas objects.</p>
        <p>The following is the definition of the JIDLComponentListener interface:</p>
        <p class="Code">public interface JIDLComponentListener</p>
        <p class="Code">{</p>
        <p class="Code_Indented">void IDLcomponentResized(JIDLObjectI obj, ComponentEvent e);</p>
        <p class="Code_Indented">void IDLcomponentExposed(JIDLObjectI obj);</p>
        <p class="Code">}</p>
        <p>These methods are available to JIDLCanvas:</p>
        <p class="Code">public void addIDLComponentListener(JIDLComponentListener l);</p>
        <p class="Code">public void removeIDLComponentListener(JIDLComponentListener l);</p>
        <p>Specifically, drawable wrapper objects (those that inherit from JIDLCanvas) automatically register to listen to their own component events and provide default handlers for each of these events. The following table describes the methods and default implementations for the events.</p>
        <table style="margin-left: 0;margin-right: auto;mc-table-style: url('../../Resources/TableStyles/Description.css');" class="TableStyle_Description" cellspacing="0">
            <col />
            <col />
            <thead>
                <tr>
                    <th class="TableStyle_Description_Head_0_0_RowSep_ColSep">Event	</th>
                    <th class="TableStyle_Description_Head_0_0_RowSep_ColEnd">
                        <p>Action</p>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">IDLcomponentResized	</td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Triggered when the canvas is resized. The default behavior calls the IDL method OnResize.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColSep">IDLcomponentExposed	</td>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColEnd">
                        <p>Triggered when the canvas is exposed. The default behavior calls the IDL OnExpose method, which is expected to call the IDL objectâ€™s draw method.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2>Subclassing to Change Behavior</h2>
        <p>There are two ways to change the event-handling behavior of listener objects: subclassing the wrapper object and handling the events in the subclass, or allowing a client object to handle events. Typically, GUI events and notifications are handled through subclassing and IDL output through client objects.</p>
        <p>When a client calls the (drawable or nondrawable) wrapper objectâ€™s createObject method, the wrapper object calls its initListeners method internally. This method, automatically generated by the Export Bridge Assistant, determines which events the wrapper object will listen to. As explained above, the wrapper object also has a set of methods generated to provide the default handling of these events.</p>
        <p>To change what the object is listening to, subclass the generated wrapper object and override the initListeners method. The subclassed initListeners method can now register for whatever listeners in which it is interested.</p>
        <p>For example, automatically generated drawable wrapper objects handle mouse, mouse motion, keyboard, and component events. Suppose you have a wrapper object called canvasWrapper, generated by the Assistant. You could subclass a wrapper object called myCanvasWrapper that would only handle mouse motion events. (The mouse motion events would still be handled in the default manner, but mouse, keyboard, and component listening would not be enabled.) This new wrapper object would look like this:</p>
        <p class="Code">class myCanvasWrapper extends canvasWrapper</p>
        <p class="Code">{</p>
        <p class="Code_Indented">public void initListeners()</p>
        <p class="Code_Indented">{</p>
        <p class="Code_Indented" style="text-indent: 20px;">addIDLMouseMotionListener(this);</p>
        <p class="Code_Indented">}</p>
        <p class="Code">}</p>
        <p>To change the behavior of the listener handlers, subclass the generated wrapper object and override the event handling method whose behavior you want change. To get the default behavior, simply pass the event to the superclass.</p>
        <p>Consider the following example. Given the same generated canvasWrapper class, you could ignore mouse drags and, on a mouse press, print information to a console object before passing up to the IDL object to handle. This class would look like this:</p>
        <p class="Code">class myCanvasWrapper2 extends canvasWrapper</p>
        <p class="Code">{</p>
        <p class="Code_Indented">public void IDLmousePressed(JIDLObjectI o, MouseEvent e)</p>
        <p class="Code_Indented">{</p>
        <p class="Code_Indented" style="text-indent: 20px;">console.printMouseEvent(e);</p>
        <p class="Code_Indented" style="text-indent: 20px;">super.IDLmousePressed(o, e); // pass to IDL</p>
        <p class="Code_Indented">}</p>
        <p class="Code_Indented">public void IDLmouseDragged(JIDLObjectI o, MouseEvent e)</p>
        <p class="Code_Indented">{</p>
        <p class="Code_Indented" style="text-indent: 20px;">// do nothing</p>
        <p class="Code_Indented">}</p>
        <p class="Code">}</p>
        <h2>Listening from Other Java Objects</h2>
        <p>Any Java object that implements the proper listener interface and registers itself with the wrapper object as a listener can also listen to events of interest. When more than one object is registered to listen to a given event, all listeners receive the event without a guarantee of order.</p>
        <p>The steps are as follows:</p>
        <ol>
            <li value="1">The class implements the proper listener interface.</li>
            <li value="2">The class registers to listen to events.</li>
            <li value="3">The class handles the event in the listener interface method (or methods).</li>
        </ol>
        <p>As an example, use the same canvasWrapper in a class called myClient that listens to IDL output. First, implement the JIDLOutputListener interface. Next, use the constructor to have the client register itself as a listener of the wrapperâ€™s IDL output. Finally, implement the IDLoutput to act on the output. The code is shown below:</p>
        <p class="Code">import com.itt.javaidl.*;</p>
        <p class="Code">class myClient implements JIDLOutputListener</p>
        <p class="Code">{</p>
        <p class="Code_Indented">canvasWrapper m_wrapper;</p>
        <p class="Code_Indented">public myClient()</p>
        <p class="Code_Indented">{</p>
        <p class="Code_Indented" style="text-indent: 20px;">m_wrapper = new canvasWrapper();</p>
        <p class="Code_Indented" style="text-indent: 20px;">m_wrapper.createObject();</p>
        <p class="Code_Indented" style="text-indent: 20px;">m_wrapper.addIDLOutputListener(this);</p>
        <p class="Code_Indented">}</p>
        <p class="Code_Indented">public void IDLoutput(JIDLObjectI obj, String s)</p>
        <p class="Code_Indented">{</p>
        <p class="Code_Indented" style="text-indent: 20px;">// do something with the IDL output</p>
        <p class="Code_Indented">}</p>
        <p class="Code_Indented">...</p>
        <p class="Code">}</p>
        <div class="mp_footer">Â© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>