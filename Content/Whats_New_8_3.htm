<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>What's New in IDL&#160;8.3</title>
        <link href="../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../Resources/Scripts/require.min.js">
        </script>
        <script src="../Resources/Scripts/require.config.js">
        </script>
        <script src="../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <h1>What's New in IDL&#160;8.3</h1>
        <p>IDL 8.3 adds new core language features, adds functionality to IDL Graphics, and simplifies building of custom tasks for the IDL and ENVI Services Engine. </p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>If you are new to IDL or upgrading from an older version, see also:<a href="WhatsNew_in_8_0.htm"> <![CDATA[ ]]></a></p>
        <ul>
            <li value="1"><a href="WhatsNew_in_8_0.htm">What's New in IDL 8.0 </a>
            </li>
            <li value="2"><a href="WhatsNew_in_8_1.htm">What's New in IDL 8.1</a>
            </li>
            <li value="3"><a href="Whats_New_in_82.htm">What's New in IDL 8.2</a>
            </li>
            <li value="4"><a href="Whats_New_in_821.htm">What's New in IDL 8.2.1</a>
            </li>
            <li value="5"><a href="Whats_New_8_2_2.htm">What's New in IDL 8.2.2</a>
            </li>
            <li value="6"><a href="Whats_New_8_2_3.htm">What's New in IDL 8.2.3</a>
            </li>
        </ul>
        <h2 class="API">New Features</h2>
        <h3>Dynamic Equation Visualization for Plot, Contour, and Surface</h3>
        <p>The <a href="Reference Material/P/PLOT.htm">PLOT</a>, <a href="Reference Material/C/CONTOUR.htm">CONTOUR</a>, and <a href="Reference Material/S/SURFACE.htm">SURFACE</a> functions have a new <i>Equation</i> argument (and EQUATION property) that lets you dynamically view your data. You can set the <i>Equation</i> argument to a string containing your equation (as a function of <i>X</i> and <i>Y</i>), or set the argument to a string giving the name of a function. IDL will then automatically generate data that spans your data range and execute your equation to compute the plot. As you pan and zoom within the graphics window, IDL will continue to update your data, allowing you to interactively explore your equation. For more details see <a href="GuideMe/LongExamples/DynamicVisualizations/DynamicVis_Splash.htm">Dynamic Visualizations</a>.</p>
        <p>
            <img src="GuideMe/images/ex_surface_equation.png" />
        </p>
        <h3>Implied Print</h3>
        <p>If you enter an expression or a variable name at the IDL command prompt, IDL will automatically print out the result instead of throwing a syntax error. For example:</p>
        <p class="Code">IDL&gt; 2+2</p>
        <p class="Code_Indented">4</p>
        <p class="Code">IDL&gt; a = [0:10:2]</p>
        <p class="Code">IDL&gt; a</p>
        <p class="Code_Indented">0       2       4       6       8      10</p>
        <p class="Code">IDL&gt; a[2:4]</p>
        <p class="Code_Indented">4       6       8</p>
        <p class="Code">IDL&gt; SIN(a)</p>
        <p class="Code_Indented">0.00000000      0.90929741     -0.75680250     -0.27941549      0.98935825     -0.54402113</p>
        <p class="Code">IDL&gt; IDLUnit('1 kg * c^2')</p>
        <p class="Code_Indented">8.98755E+016 joule</p>
        <p>In addition, for floating-point data types, unlike the PRINT procedure, Implied Print will automatically use the maximum number of digits of precision. For example:</p>
        <p class="Code">IDL&gt; PRINT, 1.2345678 ; <i>only prints out 6 digits</i></p>
        <p class="Code_Indented">1.23457</p>
        <p class="Code">IDL&gt; 1.2345678</p>
        <p class="Code_Indented">1.2345678 ← <i>prints out all the digits</i></p>
        <p class="Code">IDL&gt; PRINT, !dpi ; <i>only prints out 8 digits</i></p>
        <p class="Code_Indented">3.1415927</p>
        <p class="Code">IDL&gt; !dpi</p>
        <p class="Code_Indented">3.1415926535897931 ← <i>prints out all the digits</i></p>
        <p>For structures and Hashes, Implied Print will print out both the field names and the values:</p>
        <p class="Code">IDL&gt; {field1: "hello, world", field2: {sub1:[1,2,3],sub2:2}}</p>
        <p class="Code">{</p>
        <p class="Code_Indented">FIELD1: "hello, world",</p>
        <p class="Code_Indented">FIELD2:</p>
        <p class="Code_Indented">{</p>
        <p class="Code_Indented2">SUB1:                  [1, 2, 3],</p>
        <p class="Code_Indented2">SUB2:                  2</p>
        <p class="Code_Indented">}</p>
        <p class="Code">}</p>
        <p class="Code">IDL&gt; HASH("field1", "hello, world", "field2", HASH("sub1", [1,2,3], "sub2", 2))</p>
        <p class="Code">{</p>
        <p class="Code_Indented">"field1":       "hello, world",</p>
        <p class="Code_Indented">"field2":</p>
        <p class="Code_Indented">{</p>
        <p class="Code_Indented2">"sub1": [       1, 2, 3],</p>
        <p class="Code_Indented2">"sub2":         2</p>
        <p class="Code_Indented">}</p>
        <p class="Code">}</p>
        <p>This feature works when entering commands in both the IDL command line and in the IDL&#160;Workbench. It also works with the <a href="Reference Material/E/EXECUTE.htm">EXECUTE</a> function (when a special flag is set). However, this feature does not work within IDL routines. To print out expressions and variables within a program you should continue to use the <a href="Reference Material/P/PRINT.htm">PRINT</a> procedure or use <a href="Reference Material/E/EXECUTE.htm">EXECUTE</a>. You can also use a new IMPLIED_PRINT keyword to <a href="Reference Material/F/FIX.htm">FIX</a>, <a href="Reference Material/P/PRINT.htm">PRINT</a>, and <a href="Reference Material/S/STRING.htm">STRING</a> to format the output using the same rules. </p>
        <p>For details see <a href="Creating IDL Programs/Components of the IDL Language/ImpliedPrint.htm">Implied Print</a>.</p>
        <h3 data-mc-conditions="">Asynchronous Timers</h3>
        <p data-mc-conditions="">The new Asynchronous&#160;Timers provide IDL with non-blocking timers. They offer several advantages over the current widget-based asynchronous timers:</p>
        <ul>
            <li value="1">Simple and complete API</li>
            <li value="2">Work in headless environments (are independent of widgets)</li>
            <li value="3">Higher theoretical resolution<ul><li value="1">Unix: nanoseconds</li><li value="2">Windows: milliseconds</li></ul></li>
        </ul>
        <p>For information and examples on the new Asynchronous Timers, see <a href="Reference Material/T/TIMER.htm">TIMER</a>.</p>
        <h3>System Clipboard Access</h3>
        <p>You can use the new Clipboard.Get( ) method to retrieve text from your system clipboard, and the Clipboard.Set method to put text onto your system clipboard. For information and examples see <a href="Reference Material/C/CLIPBOARD.htm">CLIPBOARD</a>.</p>
        <h3 data-mc-conditions="">Static Methods and Properties</h3>
        <p data-mc-conditions="">You can now create static methods on IDL object classes and use the standard "dot" syntax to make static method calls. Static methods provide a useful way to organize code into "packages" based upon the class name.</p>
        <p data-mc-conditions="">For example, the <a href="Reference Material/I/IDLUNIT.htm">IDLUNIT</a> class has a static method called AddUnit that you can use to extend the list of available units. invoke this static method by using the class name and method name:</p>
        <p class="Code" data-mc-conditions="">IDLUnit.AddUnit, name, value, ...</p>
        <p>Static methods are also available on <a href="Object Classes/File Format/IDLffVideoRead.htm">IDLffVideoRead</a> and <a href="Object Classes/File Format/IDLffVideoWrite.htm">IDLffVideoWrite</a> for retrieving the list of available codecs and formats. As another example, the new <a href="Reference Material/C/CLIPBOARD.htm">Clipboard</a> Get and Set methods are static.</p>
        <p data-mc-conditions="">See <a href="Objects/Static_Methods.htm">Static Methods</a> and <a href="Objects/Creating_Static_Methods.htm">Creating Static Methods</a> for information on calling and creating static methods.</p>
        <h3 data-mc-conditions="">Colon Operator for Array Creation</h3>
        <p>You can use the new colon ":" operator to construct arrays with increasing or decreasing values. The colon operator provides a more readable, short-hand syntax for the *INDGEN family of functions. </p>
        <p>The operator has the syntax <i>Result</i> = [<i>start</i>: <i>finish</i>], or <i>Result</i> = [<i>start</i>: <i>finish</i>: <i>increment</i>].</p>
        <p>For example:</p>
        <p class="Code">arr = [0:1:0.1]</p>
        <p class="Code">PRINT, arr</p>
        <p>IDL prints:</p>
        <p class="Code">0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0</p>
        <p>See <a href="Creating IDL Programs/Components of the IDL Language/Creating_Arrays.htm">Creating Arrays</a> for more details.</p>
        <h3 data-mc-conditions="">IDLUNIT</h3>
        <p data-mc-conditions="">The <a href="Reference Material/I/IDLUNIT.htm">IDLUNIT</a> function allows you to perform basic dimensional analysis, conversions, and mathematical operations, all while factoring units. IDLUNIT is designed to be flexible, allowing you to evaluate simple mathematical expressions or convert units. Results can be used in other IDL functions and programs. For example:</p>
        <p class="Code">PRINT, IDLUnit('20 m/s -&gt; mph')</p>
        <p class="Code">PRINT, IDLUnit('1 kg * c^2')</p>
        <p>IDL prints:</p>
        <p class="Code">44.7387 mph</p>
        <p class="Code">8.98755E+016 joule</p>
        <p data-mc-conditions="">In addition, the IDL Workbench now ships with an IDL widget application called "IDL Converter" that provides simple conversions between units. You can find the application from the "Macros -&gt; IDL Converter" menu item.</p>
        <p>
            <img src="images/idl_converter.png" />
        </p>
        <h3 data-mc-conditions="">LambertW Function</h3>
        <p data-mc-conditions="">The <a href="Reference Material/L/LAMBERTW.htm">LAMBERTW</a> routine allows you to compute the value of the Lambert W function:</p>
        <p><i>z</i> = <i>W</i>(<i>z</i>) e<sup><i>W</i>(<i>z</i>)</sup></p>
        <p>The Lambert W function has many applications in mathematics, computer science, and the physical sciences. For example, it is used in the enumeration of trees, when solving equations with exponentials (such as the maxima of the Bose-Einstein or Fermi-Dirac distributions), or in the solution of linear constant-coefficient delay equations.</p>
        <p>
            <img src="Reference Material/images/ex_lambertw1.png" />
        </p>
        <h3 data-mc-conditions="">HDF5 Wrapper Routines</h3>
        <p data-mc-conditions="">IDL now has three new HDF5 wrapper routines to simplify the process of reading and writing data. These routines are:</p>
        <ul>
            <li value="1" data-mc-conditions=""><a href="Reference Material/H/HDF5 Routines/H5_GETDATA.htm">H5_GETDATA</a>
            </li>
            <li value="2" data-mc-conditions=""><a href="Reference Material/H/HDF5 Routines/H5_LIST.htm">H5_LIST</a>
            </li>
            <li value="3" data-mc-conditions=""><a href="Reference Material/H/HDF5 Routines/H5_PUTDATA.htm">H5_PUTDATA</a>
            </li>
        </ul>
        <p data-mc-conditions="">These new routines are high-level and provide basic functionality. If you need additional capabilities, continue to use the standard suite of <a href="Reference Material/H/HDF5_Routines.htm">IDL's H5* routines</a>.</p>
        <h3 data-mc-conditions="">Dictionary Data Type</h3>
        <p data-mc-conditions="">IDL&#160;now contains a <a href="Reference Material/D/DICTIONARY.htm">DICTIONARY</a> data type, based upon the HASH class. By default the HASH class allows keys that are either case-sensitive strings (with spaces and special characters) or numbers. The DICTIONARY class only allows string keys that are case insensitive and are valid IDL variable names. This makes dictionary variables behave like "dynamic" structures where you can access the key/value pairs using a "dot" notation, but also easily add or remove keys or change the data types of existing key/value pairs. For example:</p>
        <p class="Code">dict = DICTIONARY("one", 1.0, "blue", [255,0,0], "Pi", !DPI)</p>
        <p class="Code">PRINT, dict["one"]</p>
        <p class="Code">PRINT, dict.one</p>
        <p class="Code">PRINT, dict.ONE</p>
        <p>In all three cases IDL prints:</p>
        <p class="Code">      1.00000</p>
        <p data-mc-conditions="">Now try changing the data type and dynamically adding a new key:</p>
        <p class="Code" data-mc-conditions="">dict.one = 'my value'</p>
        <p class="Code" data-mc-conditions="">dict.newkey = [0,1,2]</p>
        <p class="Code" data-mc-conditions="">PRINT, dict.newkey</p>
        <p data-mc-conditions="">IDL prints:</p>
        <p class="Code">0       1       2</p>
        <p>For more details see the <a href="Reference Material/D/DICTIONARY.htm">DICTIONARY function</a>.</p>
        <h3 data-mc-conditions="">Ordered Hash Data Type</h3>
        <p data-mc-conditions="">IDL&#160;now contains an  <a href="Reference Material/O/ORDEREDHASH.htm">ORDEREDHASH</a> data type, based upon the HASH class. By default the HASH class stores its keys in an arbitrary order based upon the hash values. The ORDEREDHASH class always preserves the order of key/value pairs. For example:</p>
        <p class="Code">keys = ['A', 'B', 'C', 'D', 'E', 'F', 'G']</p>
        <p class="Code">values = LIST('one', 2.0, 3, 4l, PTR_NEW(5), {n:6}, COMPLEX(7,0))</p>
        <p class="Code">ohash = ORDEREDHASH(keys, values)</p>
        <p class="Code">PRINT, ohash.Keys()</p>
        <p class="Code">hash = HASH(keys, values)</p>
        <p class="Code">PRINT, hash.Keys()</p>
        <p>IDL prints:</p>
        <p class="Code">A B C D E F G</p>
        <p class="Code">A F C D G B E</p>
        <p>For more details see the <a href="Reference Material/O/ORDEREDHASH.htm">ORDEREDHASH function</a>.</p>
        <h3>IDLnetURL::Delete method</h3>
        <p>The IDLnetURL class now has a ::Delete method which allows you to delete a file on an HTTP server. See <a href="Object Classes/Network/IDLnetURL__Delete.htm">IDLnetURL::Delete</a> for details.</p>
        <h3>JPEG 2000 Interactive Protocol (JPIP) Support: IDLnetJPIP Class</h3>
        <p>IDL introduces support for the JPEG 2000 Interactive Protocol (JPIP) via the IDLnetJPIP Object Class. The  IDLnetJPIP class provides the ability to stream JPEG2000 imagery from a remote JPIP server over a network to an IDL client. See <a href="Object Classes/Network/IDLnetJPIP.htm">IDLnetJPIP</a> for more information.</p>
        <h3>SIGNUM function</h3>
        <p>The SIGNUM function returns the sign of each element of an array. The sign of a value <i>X</i> is defined as:</p>
        <ul>
            <li value="1">1 if <i>X</i> &gt; 0</li>
            <li value="2">0 if <i>X</i> = 0</li>
            <li value="3">-1 if <i>X</i> &lt; 0</li>
            <li value="4">If <i>X</i> is complex then the sign is defined as <code>X/abs(X)</code>.</li>
        </ul>
        <p>For more details see <a href="Reference Material/S/SIGNUM.htm">SIGNUM</a>.</p>
        <h2 class="API">Updates</h2>
        <h3>CDF_VARGET has a new TO_COLUMN_MAJOR keyword</h3>
        <p>The TO_COLUMN_MAJOR keyword will convert the returned value from row-major form to column-major form. See <a href="Reference Material/C/CDF Routines/CDF_VARGET.htm">CDF_VARGET</a> for details.</p>
        <h3>CW_FIELD sends focus events and has new data types</h3>
        <p>The CW_FIELD widget has four new keywords: DOUBLE, FOCUS_EVENTS, IGNORE_ACCELERATORS, ULONG. The DOUBLE keyword will create a CW_FIELD widget that accepts double-precision values, while the ULONG keyword will handle unsigned integer data. The IGNORE_ACCELERATORS lets you specify what WIDGET_BUTTON accelerators are to be ignored.</p>
        <p>Setting the FOCUS_EVENTS keyword will make CW_FIELD return an event when the keyboard focus on the text field is lost. The widget loses the keyboard focus when the user clicks onto a different widget or application or uses the <b>Tab</b> key to move to a different widget. The FOCUS_EVENTS keyword is useful if you have additional widgets within the same base that need to be updated when the user changes the CW_FIELD value and then clicks somewhere else.</p>
        <p>See <a href="Reference Material/C/CW_FIELD.htm">CW_FIELD</a> for details on these new features.</p>
        <h3>IDL Command Line will now ignore "<code>IDL&gt;</code>" within commands</h3>
        <p>Previously, if you pasted example code from documentation or the IDL&#160;console and the example code contained the "<code>IDL&gt;</code>" prompt at the beginning of lines, IDL would issue a syntax error. Now, the IDL command line will simply ignore the "<code>IDL&gt;</code>" characters and execute the rest of the command. This new behavior works in both the Unix shell and the IDL Workbench.</p>
        <h3>DLM_LOAD now accepts a full path</h3>
        <p>You can now give a full filepath to <a href="Reference Material/D/DLM_LOAD.htm">DLM_LOAD</a>, and IDL&#160;will automatically load that module, even if it is not on IDL's !DLM_PATH.</p>
        <h3>DLM path can now be modified</h3>
        <p>Before, IDL's DLM path (contained in <a href="Creating IDL Programs/Appendices/IDL_Environment_System_V.htm#!DLM_PATH">!DLM_PATH</a>) was a read-only system variable. IDL would only register DLM files on startup, and setting the IDL_DLM_PATH preference would have no effect until your next session.</p>
        <p>Now, you can set <a href="Creating IDL Programs/Appendices/IDL_Environment_System_V.htm#!DLM_PATH">!DLM_PATH</a> or the <a href="Creating IDL Programs/Appendices/prefs_directory.htm#preferences_2247882535_1025503">IDL_DLM_PATH</a> preference and IDL will immediately register any <code>.dlm</code> files that it finds within the new directories. This allows you to easily add new C-code routines to IDL without having to restart your IDL&#160;session.</p>
        <h3>Event handling while debugging</h3>
        <p>In the past, IDL would not sent widget events when you were stopped within a routine.  Now, by default, IDL sends widget events even when stopped within a routine. This allows you to use graphics and widget applications while debugging.</p>
        <p>There is a new system variable, <a href="Creating IDL Programs/Appendices/IDL_Environment_System_V.htm#DEBUG_PROCESS_EVENTS">!DEBUG_PROCESS_EVENTS</a>, that can be set to 0 to disable this behavior, or to 1 to enable this behavior. The default value is 1.</p>
        <h3>IDLgrContour: New LABEL_THRESHOLD property</h3>
        <p>The IDLgrContour object now has a new LABEL_THRESHOLD property that lets you control whether short contour line segments are labeled or not. Set this property to a floating-point value between 0 and 1. Contour line segments whose normalized length is greater than this threshold will be labeled (if C_LABEL_SHOW is set for that contour level), while those whose length is less than the threshold will not have a label. See <a href="Object Classes/Graphics/IDLgrContour_Properties.htm">IDLgrContour properties</a> for details.</p>
        <h3>IMAGE can now accept an array of color names</h3>
        <p>In the IMAGE function, you can now pass a string array of color names to the RGB_TABLE property. IDL will then automatically retrieve the RGB values using the <a href="Reference Material/C/COLORTABLE.htm">COLORTABLE</a> function. For example:</p>
        <p class="Code">img = READ_TIFF(FILEPATH('image.tif', $</p>
        <p class="Code">&#160;&#160;&#160;SUBDIR=['examples','data']))</p>
        <p class="Code">&#160;</p>
        <p class="Code">i = IMAGE(BYTSCL(img, TOP=3), $</p>
        <p class="Code">&#160;&#160;&#160;RGB_TABLE=['light blue', 'green', 'red', 'white'])</p>
        <h3>KRIG2D and GRIDDATA speed improvements</h3>
        <p>The  kriging algorithm in KRIG2D and GRIDDATA is now about 30 times faster, depending upon the size of your input and output grids. In addition, KRIG2D has new keywords that allow you to use a Gaussian or Linear model, to perform the computation using double-precision arithmetic, and to retrieve the X and Y coordinates of the output grid. See <a href="Reference Material/K/KRIG2D.htm">KRIG2D</a> and <a href="Reference Material/G/GRIDDATA.htm">GRIDDATA</a> for details.</p>
        <h3>POLY_2D can now handle sub-pixel shifts</h3>
        <p>POLY_2D has a new PIXEL_CENTER keyword, which lets you specify the center location of the input pixels. The default is 0.0, which is the lower-left corner. A typical value would be 0.5, which is the center of the pixel. See <a href="Reference Material/P/POLY_2D.htm">POLY_2D</a> for details.</p>
        <h3>TEXT enhancements</h3>
        <p>The graphics TEXT function now has a new ONGLASS property that lets you display the text either within the plane of the screen, or using the full three-dimensional transform. This property is especially useful when displaying text on top of a 3D SURFACE, CONTOUR, or VOLUME visualization. See the <a href="Reference Material/T/TEXT.htm">TEXT</a> function for details.</p>
        <p>The TEXT function also has two new symbols, <code>\|</code> to produce parallel lines, and <code>\perp</code> to produce a perpendicular symbol.</p>
        <h3>WIDGET_BASE new TLB_RESIZE_NODRAW keyword</h3>
        <p>Set the TLB_RESIZE_NODRAW keyword when creating a top-level base. If this keyword is set then the base widget (and all of its children) will not be redrawn while a user is resizing the widget. See <a href="Reference Material/W/WIDGET_BASE.htm">WIDGET_BASE</a> for details.</p>
        <h3>Graphics: Add option to not draw axes, but preserve the margins</h3>
        <p>Normally, when you use AXIS_STYLE=0 to avoid drawing axes on a plot or other graphic, IDL will decrease the plot margins so that the graphic almost fills the window. Now, you can specify AXIS_STYLE=4 to avoid drawing axes, but have IDL&#160;use the same margins as if the axes were present. This is useful if you then want to do a plot <i>with</i> axes (using the CURRENT keyword) and have the new plot margins align with the original plot margins. See the AXIS_STYLE keyword within <a href="Reference Material/P/PLOT.htm">PLOT</a> for details.</p>
        <h3>Graphics Windows: Zoom in a Single Axis Dimension</h3>
        <p>Normally, when you use the scroll wheel to zoom in or out, the zoom happens equally in both the <i>X</i> and <i>Y</i> dimensions. To zoom in or out in only one dimension, select the axis dimension around which you want to zoom by clicking on that axis. Once you have just a single axis selected, using the scroll wheel on your mouse will cause the zooming to occur only in the selected dimension. Note that the zoom will be centered about the mouse pointer's position along that axis.</p>
        <h3>TIC/TOC automatically updates the Profiler View</h3>
        <p>If you are using <a href="Reference Material/T/TIC.htm">TIC</a> and <a href="Reference Material/T/TOC.htm">TOC</a> to profile your code using the PROFILER keyword and you are using the IDL Workbench, IDL will now automatically refresh the <a href="DevelopmentEnvironment/QuickReference/ProfilerView.htm">Profiler View</a> when TOC is called.</p>
        <h3>Updated Workbench Support for ENVI Services Engine Task Development</h3>
        <p>The IDL Workbench now contains functionality to help you write and publish Tasks for use in ENVI&#160;Services Engine (ESE). This includes the ability to easily create JSON and PRO  code, edit and validate  JSON files, and  publish Tasks from IDL directly to an ESE Server. See the IDL&#160;Help topic <a href="DevelopmentEnvironment/QuickReference/ESETasks.htm">ESE Tasks</a> for more information on this new Workbench functionality.</p>
        <h3>Updated Workbench Support for Java JRE 1.7</h3>
        <p>With IDL 8.3, we have updated the IDL Workbench to support Java JRE 1.7. Additionally, the IDL-Java and Java-IDL bridges now support version 1.7+ of the Java runtime environment.</p>
        <h2 class="API">IDL 8.0 Functionality</h2>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>If you are new to IDL or upgrading from an older version, see also:<a href="WhatsNew_in_8_0.htm"> <![CDATA[ ]]></a></p>
        <ul>
            <li value="1"><a href="WhatsNew_in_8_0.htm">What's New in IDL 8.0 </a>
            </li>
            <li value="2"><a href="WhatsNew_in_8_1.htm">What's New in IDL 8.1</a>
            </li>
            <li value="3"><a href="Whats_New_in_82.htm">What's New in IDL 8.2</a>
            </li>
            <li value="4"><a href="Whats_New_in_821.htm">What's New in IDL 8.2.1</a>
            </li>
            <li value="5"><a href="Whats_New_8_2_2.htm">What's New in IDL 8.2.2</a>
            </li>
            <li value="6"><a href="Whats_New_8_2_3.htm">What's New in IDL 8.2.3</a>
            </li>
        </ul>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>