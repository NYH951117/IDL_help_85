<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>IDL_String</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/TableStyles/VersionTable.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <h1 class="Routine"><a name="kanchor5941"></a><a name="IDL_String"></a>IDL_String</h1>
        <p>The IDL_String class contains static methods that are available for all IDL strings. In addition, because IDL_String is a subclass of IDL_Variable, all of the <a href="IDL_Variable.htm">IDL_Variable</a> methods are also available.</p>
        <h2 class="API">Superclasses</h2>
        <p><a href="IDL_Variable.htm">IDL_Variable</a>
        </p>
        <h3>IDL_String</h3>
        <ul>
            <li value="1"><a href="#CapWords" class="selected">CapWords</a> - Capitalize any words contained within the string.</li>
            <li value="2"><a href="#CharAt" class="selected">CharAt</a> - Returns the character at the supplied index.</li>
            <li value="3"><a href="#Compress" class="selected">Compress</a> - Removes all white space.</li>
            <li value="4"><a href="#Contains" class="selected">Contains</a> - Returns true if the string contains a given substring.</li>
            <li value="5"><a href="#EndsWith" class="selected">EndsWith</a> - Returns true if the string ends with the given string.</li>
            <li value="6"><a href="#Extract" class="selected">Extract</a> - Returns part of the string using a regular expression.</li>
            <li value="7"><a href="#IndexOf" class="selected">IndexOf</a> - Returns the index of a character or substring.</li>
            <li value="8"><a href="#Insert" class="selected">Insert</a> - Inserts another string.</li>
            <li value="9"><a href="#Join" class="selected">Join</a> - Combines multiple strings into a single string.</li>
            <li value="10"><a href="#LastIndexOf" class="selected">LastIndexOf</a> - Returns the last index of a character or substring.</li>
            <li value="11"><a href="#Matches" class="selected">Matches</a> - Returns true if the string matches a regular expression.</li>
            <li value="12"><a href="#Remove" class="selected">Remove</a> - Remove part of a string.</li>
            <li value="13"><a href="#Replace" class="selected">Replace</a> - Replaces text within the string.</li>
            <li value="14"><a href="#Reverse" class="selected">Reverse</a> - Reverse a string.</li>
            <li value="15"><a href="#Split" class="selected">Split</a> - Split into substrings using a regular expression.</li>
            <li value="16"><a href="#StartsWith" class="selected">StartsWith</a> - Returns true if the string starts with the given string.</li>
            <li value="17"><a href="#StrLen" class="selected">Strlen</a> - Returns the string length.</li>
            <li value="18"><a href="#Substring" class="selected">Substring</a> - Returns part of a string.</li>
            <li value="19"><a href="#ToByte" class="selected">ToByte</a> - Converts to a byte array.</li>
            <li value="20"><a href="#ToLower" class="selected">ToLower</a> - Convert all characters to lowercase.</li>
            <li value="21"><a href="#ToUpper" class="selected">ToUpper</a> - Convert all characters to uppercase.</li>
            <li value="22"><a href="#Trim" class="selected">Trim</a> - Removes leading and trailing white space.</li>
        </ul>
        <h2 class="API">Examples</h2>
        <h1 class="ObjMethod"><a name="kanchor5942"></a><a name="CapWords"></a>IDL_String::CapWords</h1>
        <p>The IDL_String::CapWords method capitalizes the beginning letter of all words within the string.</p>
        <h2 class="API">Examples</h2>
        <p>Create a sentence and print the result of CapWords on that sentence:</p>
        <p class="Code">str = "hello fellow IDL&#160;user."</p>
        <p class="Code">PRINT, str.CapWords( )</p>
        <p>IDL prints:</p>
        <p class="Code">Hello Fellow IDL&#160;User.</p>
        <p>Pass in a character for the space argument, and include the optional keywords:</p>
        <p class="Code">str = "hello_fellow_IDL_user."</p>
        <p class="Code">PRINT, str.CapWords('_', /FOLD_CASE, /IGNORE_FIRST)</p>
        <p>IDL prints:</p>
        <p class="Code">hello_Fellow_IDL_User.</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = var.CapWords( [<i>Char</i>] [, /FOLD_CASE] [, /IGNORE_FIRST] )</p>
        <h2 class="API">Return Value</h2>
        <p>A string with a value containing capitalized characters as specified by the given argument or keywords. If <i>var</i> is an array then <i>Result</i> is a string array of the same dimensions.</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">Char</h3>
        <p>A character string designating the space character that will capitalize each character immediately following the space character. The default is a single space character.</p>
        <h2 class="API">Keywords</h2>
        <h3 class="Keyword">FOLD_CASE</h3>
        <p>Set this keyword to ignore case when searching for space characters.</p>
        <h3 class="Keyword">IGNORE_FIRST</h3>
        <p>Set this keyword to ignore the capitalization of the first character.</p>
        <h1 class="ObjMethod"><a name="kanchor5943"></a><a name="CharAt"></a>IDL_String::CharAt</h1>
        <p>The IDL_String::CharAt method returns a character from the string.</p>
        <h2 class="API">Examples</h2>
        <p>Create a string and print the result given an index:</p>
        <p class="Code">str = "IDL"</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Print the character at each index.</p>
        <p class="Code">FOR i=0, str.StrLen( )-1 DO PRINT, str.CharAt(i)</p>
        <p>IDL prints:</p>
        <p class="Code">I</p>
        <p class="Code">D</p>
        <p class="Code">L</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = var.CharAt( <i>Index</i> )</p>
        <h2 class="API">Return Value</h2>
        <p>A string containing the character found at the given index. If <i>var</i> is an array then <i>Result</i> is a string array of the same dimensions.</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">Index</h3>
        <p>The index of the character to return.</p>
        <h2 class="API">Keywords</h2>
        <p>None.</p>
        <p>None.</p>
        <h1 class="ObjMethod"><a name="kanchor5944"></a><a name="Compress"></a>IDL_String::Compress</h1>
        <p>The IDL_String::Compress method removes all spaces and tabs within a string. This is equivalent to calling <a href="../S/STRCOMPRESS.htm">STRCOMPRESS</a> with the REMOVE_ALL keyword.</p>
        <h2 class="API">Examples</h2>
        <p>Create a string with spaces:</p>
        <p class="Code">str = " I D L is C o o l ! "</p>
        <p class="Code">PRINT,  str.Strlen( )</p>
        <p class="Code">newstr = str.Compress()</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Print the new string and its length.</p>
        <p class="Code">PRINT, newstr, newstr.Strlen( )</p>
        <p>IDL prints:</p>
        <p class="Code">20</p>
        <p class="Code">IDLisCool!</p>
        <p class="Code">10</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = <i>var</i>.Compress( )</p>
        <h2 class="API">Return Value</h2>
        <p>The string with all white space removed. If <i>var</i> is an array then the result is a string array of the same dimensions.</p>
        <h2 class="API">Arguments</h2>
        <p>None.</p>
        <h2 class="API">Keywords</h2>
        <p>None.</p>
        <h1 class="ObjMethod"><a name="kanchor5945"></a><a name="Contains"></a>IDL_String::Contains</h1>
        <p>The IDL_String::Contains method determines whether the string contains a given substring.</p>
        <h2 class="API">Examples</h2>
        <p>Determine whether each element of a string array contains a specific substring:</p>
        <p class="Code">str = ['code.pro', 'image.jpg', 'file.txt']</p>
        <p class="Code">PRINT, str.Contains('.pro')</p>
        <p>IDL prints:</p>
        <p class="Code">1&#160;&#160;0&#160;&#160;0</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = <i>var</i>.Contains( <i>Substring</i>, /FOLD_CASE )</p>
        <h2 class="API">Return Value</h2>
        <p>The result is a boolean value 1 (true) if the string contains the substring, or 0 otherwise.  If <i>var</i> is an array then <i>Result</i> is a byte array of the same dimensions.</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">Substring</h3>
        <p>The string to compare against.</p>
        <h2 class="API">Keywords</h2>
        <h3 class="Keyword">FOLD_CASE</h3>
        <p>Set this keyword to ignore case when doing comparisons.</p>
        <h1 class="ObjMethod"><a name="kanchor5946"></a><a name="EndsWith"></a>IDL_String::EndsWith</h1>
        <p>The IDL_String::EndsWith method determines whether the string ends with a given string.</p>
        <h2 class="API">Examples</h2>
        <p>Create a sentence and print the result of EndsWith on that sentence:</p>
        <p class="Code">str = "hello fellow IDL&#160;user..."</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Check if the string ends with 3 periods.</p>
        <p class="Code">PRINT, str.EndsWith('...')</p>
        <p>IDL prints:</p>
        <p class="Code">1</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = <i>var</i>.EndsWith( <i>String</i> [, /FOLD_CASE] )</p>
        <h2 class="API">Return Value</h2>
        <p>A boolean value of 0 (false) or 1 (true). If <i>var</i> is an array then <i>Result</i> is a byte array of the same dimensions.</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">String</h3>
        <p>The string to compare against the end of the string variable.</p>
        <h2 class="API">Keywords</h2>
        <h3 class="Keyword">FOLD_CASE</h3>
        <p>Set this keyword to ignore case when doing comparisons.</p>
        <h1 class="ObjMethod"><a name="kanchor5947"></a><a name="Extract"></a>IDL_String::Extract</h1>
        <p>The IDL_String::Extract method extracts the first substring that matches a regular expression.</p>
        <h2 class="API">Examples</h2>
        <p>Create a sentence and extract text out of it:</p>
        <p class="Code">str = "Hello fellow IDL&#160;user."</p>
        <p class="Code">PRINT, str.Extract('f[a-z]{5}')</p>
        <p>IDL prints:</p>
        <p class="Code">fellow</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = <i>var</i>.Extract( <i>String</i> [, /FOLD_CASE] [, /SUBEXPR] )</p>
        <h2 class="API">Return Value</h2>
        <p>A string containing the extracted text. If <i>var</i> is an array then <i>Result</i> is a string array of the same dimensions.</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">String</h3>
        <p>The regular expression to match against <i>var</i>. See <a href="../../Creating IDL Programs/Components of the IDL Language/Learning_About_Regular_E.htm">Learning About Regular Expressions</a> for details.</p>
        <h2 class="API">Keywords</h2>
        <h3 class="Keyword">FOLD_CASE</h3>
        <p>Set this keyword to ignore case when doing comparisons.</p>
        <h3 class="Keyword">SUBEXPR</h3>
        <p>By default, IDL_STRING::Extract only returns a single string containing the overall match (or a string array if your variable was an array). Setting SUBEXPR causes it to return an array containing the overall match as well as any subexpression matches. A subexpression is any part of a regular expression written within parentheses. For example, the regular expression "abc+" has no sub-expressions while the regular expression "(a)(b)(c+)" has 3 subexpressions. For the regular expression "(a)(b)(c+)", the result will therefore be a 4-element vector - 1 for the overall match and 3 more for the subexpressions. If a subexpression participated in the match several times, the reported substring is the last one that matched.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>If your variable is an array then the result will be an array of one higher dimension, where the first dimension contains the sub expressions. For example, if <i>var</i> was a [10, 5] string array, and you use the regular expression "(a)(b)(c+)", then the result will be a [4, 10, 5] string array.</p>
        <h1 class="ObjMethod"><a name="kanchor5948"></a><a name="IndexOf"></a>IDL_String::IndexOf</h1>
        <p>The IDL_String::IndexOf method returns the index of a character or sub-string within the string.</p>
        <h2 class="API">Examples</h2>
        <p>Create a string array with some data:</p>
        <p class="Code">str = ["iaa", "aIa", "aai", "aaa"]</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Find the indexes for the letter i.</p>
        <p class="Code">PRINT, str.IndexOf('i', /FOLD_CASE)</p>
        <p>IDL prints:</p>
        <p class="Code">0           1           2          -1</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = <i>var</i>.IndexOf( <i>Substring</i> [, <i>Start</i>] [, /FOLD_CASE] )</p>
        <h2 class="API">Return Value</h2>
        <p>An integer giving the index of the first match of the substring. If the substring is not found then -1 is returned. If <i>var</i> is an array then the result is an integer array of the same dimensions.</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">Substring</h3>
        <p>A string giving the character or substring to search for.</p>
        <h3 class="Argument">Start</h3>
        <p>An optional index at which to start searching. If <i>Start</i> is beyond the string's length then -1 is returned.</p>
        <h2 class="API">Keywords</h2>
        <h3 class="Keyword">FOLD_CASE</h3>
        <p>Set this keyword to ignore case when doing comparisons.</p>
        <h1 class="ObjMethod"><a name="kanchor5949"></a><a name="Insert"></a>IDL_String::Insert</h1>
        <p>The IDL_String::Insert method inserts text at a specified index within the string.</p>
        <h2 class="API">Examples</h2>
        <p>Create a sentence and print the result after insert:</p>
        <p class="Code">str = "Hello IDL&#160;user."</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Insert at index 5.</p>
        <p class="Code">PRINT, str.Insert(" fellow", 5)</p>
        <p>IDL prints:</p>
        <p class="Code">Hello fellow IDL&#160;user.</p>
        <p>Extend the sentence and use the FILL keyword:</p>
        <p class="Code">; The FILL&#160;keyword will add the space for us.</p>
        <p class="Code">str = str.Insert("How are you?", 16, FILL=' ')</p>
        <p class="Code">PRINT, str</p>
        <p>IDL prints:</p>
        <p class="Code">Hello IDL&#160;user. How are you?</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = <i>var</i>.Insert( <i>String</i> [, <i>Index</i>] [, FILL_CHARACTER=character] )</p>
        <h2 class="API">Return Value</h2>
        <p>The new string.  If <i>var</i> is an array then <i>Result</i> is a string array of the same dimensions.</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">String</h3>
        <p>If only the string argument is given, the method will insert the string at the end.</p>
        <h3 class="Argument">Index</h3>
        <p>An integer giving the index at which to insert the string.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>By default, if the index is not a valid index within <i>var</i> then the string will not be inserted; however, you can use the FILL&#160;keyword to insert fill characters to allow the new string to be inserted.</p>
        <h2 class="API">Keywords</h2>
        <h3 class="Keyword">FILL_CHARACTER</h3>
        <p>Set this keyword to a single string character that is used to fill empty space if the supplied index is outside of the string's length.</p>
        <h1 class="ObjMethod"><a name="kanchor5950"></a><a name="Join"></a>IDL_String::Join</h1>
        <p>The IDL_String::Join method collapses a one-dimensional string array into a single merged string or a multi-dimensional string array into an array where the first dimension has been merged.</p>
        <h2 class="API">Examples</h2>
        <p>Create a sentence to split:</p>
        <p class="Code">str = ["Hello", "fellow", "IDL", "user."]</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Join the string array into a single string.</p>
        <p class="Code">PRINT, str.Join('-')</p>
        <p>IDL prints:</p>
        <p class="Code">Hello-fellow-IDL-user.</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = <i>var</i>.Join( [<i>Delimiter</i>] )</p>
        <h2 class="API">Return Value</h2>
        <p>The merged string. If <i>var</i> is a multi-dimensional string array then <i>Result</i> is a string array of one less dimension since the first dimension has been collapsed.</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">Delimiter</h3>
        <p>An optional separator string to use between the joined strings. If <i>Delimiter</i> is not specified, an empty string is used.</p>
        <h2 class="API">Keywords</h2>
        <p>None.</p>
        <h1 class="ObjMethod"><a name="kanchor5951"></a><a name="LastIndexOf"></a>IDL_String::LastIndexOf</h1>
        <p>The IDL_String::LastIndexOf method returns the last index of a given substring within the string.</p>
        <h2 class="API">Examples</h2>
        <p>Create a string array with some data:</p>
        <p class="Code">str = ["Apples", "Oranges", "Bananas", "Kiwis"]</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Find the last indexes for the letter a.</p>
        <p class="Code">PRINT, str.LastIndexOf('a', /FOLD_CASE)</p>
        <p>IDL prints:</p>
        <p class="Code">0           2           5          -1</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = <i>var</i>.LastIndexOf( <i>Substring</i> [, /FOLD_CASE] )</p>
        <h2 class="API">Return Value</h2>
        <p>An integer giving the index of the last match of the substring. If the substring is not found then -1 is returned. If <i>var</i> is an array then the result is an integer array of the same dimensions.</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">Substring</h3>
        <p>The character or string to search for.</p>
        <h2 class="API">Keywords</h2>
        <h3 class="Keyword">FOLD_CASE</h3>
        <p>Set this keyword to ignore case when doing comparisons.</p>
        <p>&#160;</p>
        <h1 class="ObjMethod"><a name="kanchor5952"></a><a name="Matches"></a>IDL_String::Matches</h1>
        <p>The IDL_String::Matches method determines whether the string matches a regular expression.</p>
        <h2 class="API">Example</h2>
        <p>Use a regular expression to determine if a string contains a valid integer number:</p>
        <p class="Code">str = ['123', '-123', ' 4 ', '123abc']</p>
        <p class="Code">; line begin + optional whitespace + optional negative sign</p>
        <p class="Code">; + some digits + optional whitespace + line end</p>
        <p class="Code">result = str.Matches('^ *-?[0-9]+ *$')</p>
        <p class="Code">PRINT, result</p>
        <p>IDL prints:</p>
        <p class="Code">1 1 1 0</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = <i>var</i>.Matches( <i>String</i>, /FOLD_CASE )</p>
        <h2 class="API">Return Value</h2>
        <p>A boolean value of 1 if the given string matches the string, or 0 otherwise. If <i>var</i> is an array then the result is a byte array of the same dimensions.</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">String</h3>
        <p>A regular expression to be used for matching. See <a href="../../Creating IDL Programs/Components of the IDL Language/Learning_About_Regular_E.htm">Learning About Regular Expressions</a> for details.</p>
        <h2 class="API">Keywords</h2>
        <h3 class="Keyword">FOLD_CASE</h3>
        <p>Set this keyword to ignore case when doing comparisons.</p>
        <h1 class="ObjMethod"><a name="kanchor5953"></a><a name="Remove"></a>IDL_String::Remove</h1>
        <p>The IDL_String::Remove method removes part of a string given the start and end index.</p>
        <h2 class="API">Examples</h2>
        <p>Create a string and remove a section from it:</p>
        <p class="Code">str = 'An example IDL string'</p>
        <p class="Code">PRINT, str.Remove(2, 9)</p>
        <p>IDL prints:</p>
        <p class="Code">An IDL string</p>
        <p>Create a string and remove the last 4 characters:</p>
        <p class="Code">str = 'myfilename.pro'</p>
        <p class="Code">PRINT, str.Remove(-4)</p>
        <p>IDL prints:</p>
        <p class="Code">myfilename</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = <i>var</i>.Remove( <i>StartIndex</i> [, <i>EndIndex</i>] )</p>
        <h2 class="API">Return Value</h2>
        <p>A new string containing the original string, minus the part that was removed. If <i>var</i> is an array then the result is a string array of the same dimensions.</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">StartIndex</h3>
        <p>An integer giving the starting position. If <i>StartIndex</i> is negative then it represents an index from the end. If <i>StartIndex</i> is beyond the end then nothing is removed.</p>
        <h3 class="Argument">EndIndex</h3>
        <p>An integer giving the ending position. This includes the character at that position.  If <i>EndIndex</i> is negative then it represents an index from the end. If not specified or beyond the end then <i>EndIndex</i> will be set to the string length – 1.</p>
        <h2 class="API">Keywords</h2>
        <p>None.</p>
        <h1 class="ObjMethod"><a name="kanchor5954"></a><a name="Replace"></a>IDL_String::Replace</h1>
        <p>The IDL_String::Replace method replaces text within the string with new text.</p>
        <h2 class="API">Examples</h2>
        <p>Create a string to perform a replace on:</p>
        <p class="Code">str = "Hello fellow IDL user."</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Print the sentence using replace</p>
        <p class="Code">PRINT, str.Replace('fellow', 'friendly')</p>
        <p>IDL prints:</p>
        <p class="Code">Hello friendly IDL&#160;user.</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = <i>var</i>.Replace( <i>StringFrom</i>, <i>StringTo</i> [, /FOLD_CASE] )</p>
        <h2 class="API">Return Value</h2>
        <p>A string variable containing the new string. If <i>var</i> is an array then the result is a string array of the same dimensions.</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">StringFrom</h3>
        <p>Set this argument to  the text you want to replace within the variable.</p>
        <h3 class="Argument">StringTo</h3>
        <p>Set this argument to the text you want to be inserted in place of <i>StringFrom</i>.</p>
        <h2 class="API">Keywords</h2>
        <h3 class="Keyword">FOLD_CASE</h3>
        <p>Set this keyword to ignore case when doing comparisons.</p>
        <h1 class="ObjMethod"><a name="kanchor5955"></a><a name="Reverse"></a>IDL_String::Reverse</h1>
        <p>The IDL_String::Reverse method reverses the string.</p>
        <h2 class="API">Examples</h2>
        <p>Create a string to perform a reverse on:</p>
        <p class="Code">str = "Racecar"</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Print  using reverse.</p>
        <p class="Code">PRINT, str.Reverse( )</p>
        <p>IDL prints:</p>
        <p class="Code">racecaR</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = <i>var</i>.Reverse( )</p>
        <h2 class="API">Return Value</h2>
        <p>The new string. If <i>var</i> is an array then the result is a string array of the same dimensions.</p>
        <h2 class="API">Arguments</h2>
        <p>None.</p>
        <h2 class="API">Keywords</h2>
        <p>None.</p>
        <h1 class="ObjMethod"><a name="kanchor5956"></a><a name="Split"></a>IDL_String::Split</h1>
        <p>The IDL_String::Split method splits the string into substrings according to a specified regular expression.</p>
        <h2 class="API">Examples</h2>
        <p>Create a sentence to split:</p>
        <p class="Code">str = "Hello fellow IDL&#160;user."</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Split using spaces and print the first element.</p>
        <p class="Code">var = str.Split(' ')</p>
        <p class="Code">PRINT, var[0]</p>
        <p>IDL prints:</p>
        <p class="Code">Hello</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = <i>var</i>.Split( <i>String</i> [, /FOLD_CASE] )</p>
        <h2 class="API">Return Value</h2>
        <p>A string array with values after the split.</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">String</h3>
        <p>A regular expression specifying where to perform the split. See <a href="../../Creating IDL Programs/Components of the IDL Language/Learning_About_Regular_E.htm">Learning About Regular Expressions</a> for details.</p>
        <h2 class="API">Keywords</h2>
        <h3 class="Keyword">FOLD_CASE</h3>
        <p>Set this keyword to ignore case when doing comparisons.</p>
        <h1 class="ObjMethod"><a name="kanchor5957"></a><a name="StartsWith"></a>IDL_String::StartsWith</h1>
        <p>The IDL_String::StartsWith method determines whether the string starts with the supplied string.</p>
        <h2 class="API">Examples</h2>
        <p>Create a sentence to use StartWith on:</p>
        <p class="Code">str = "Hello fellow IDL&#160;user."</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Print the result of StartsWith</p>
        <p class="Code">PRINT, str.StartsWith('h')</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Perform the same with /FOLD_CASE</p>
        <p class="Code">PRINT, str.StartsWith('h', /FOLD_CASE)</p>
        <p>IDL prints:</p>
        <p class="Code">0</p>
        <p class="Code">1</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = <i>var</i>.StartsWith( <i>String</i> [, /FOLD_CASE] )</p>
        <h2 class="API">Return Value</h2>
        <p>A boolean value of 1 (true) or 0 (false). If <i>var</i> is an array then the result is a byte array of the same dimensions.</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">String</h3>
        <p>The string to check against the beginning of the variable.</p>
        <h2 class="API">Keywords</h2>
        <h3 class="Keyword">FOLD_CASE</h3>
        <p>Set this keyword to ignore case when doing comparisons.</p>
        <h1 class="ObjMethod"><a name="kanchor5958"></a><a name="StrLen"></a>IDL_String::Strlen</h1>
        <p>The IDL_String::Strlen method determines the string length.</p>
        <h2 class="API">Examples</h2>
        <p>Create a sentence and check its length with Strlen:</p>
        <p class="Code">str = "Hello fellow IDL user."</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Print the length of the string</p>
        <p class="Code">PRINT, str.Strlen( )</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Now split the string and print the lengths</p>
        <p class="Code">PRINT, (str.Split(' ')).Strlen()</p>
        <p>IDL prints:</p>
        <p class="Code">22</p>
        <p class="Code">5&#160;&#160;&#160;6&#160;&#160;&#160;3&#160;&#160;&#160;5</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = <i>var</i>.StrLen(  )</p>
        <h2 class="API">Return Value</h2>
        <p>The length of the string. If <i>var</i> is an array then the result is an integer array of the same dimensions.</p>
        <h2 class="API">Arguments</h2>
        <p>None.</p>
        <h2 class="API">Keywords</h2>
        <p>None.</p>
        <h1><a name="kanchor5959"></a><a name="Substring"></a>IDL_String::Substring</h1>
        <p>The IDL_String::Substring method returns a portion of the string given the start and end index.</p>
        <h2 class="API">Examples</h2>
        <p>Create a string and return only a portion of it:</p>
        <p class="Code">str = 'An-IDL-string'</p>
        <p class="Code">PRINT, str.Substring(3, 5)</p>
        <p>IDL prints:</p>
        <p class="Code">IDL</p>
        <p>Now just supply the start index, and return the characters from that index to the end:</p>
        <p class="Code">str = 'An-IDL-string'</p>
        <p class="Code">PRINT, str.Substring(3)</p>
        <p>IDL prints:</p>
        <p class="Code">IDL-string</p>
        <p>Finally, use a negative index to return characters from the end:</p>
        <p class="Code">str = 'myfilename.pro'</p>
        <p class="Code">PRINT, str.Substring(-3)</p>
        <p>IDL prints:</p>
        <p class="Code">pro</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = <i>var</i>.Substring( <i>StartIndex</i> [, <i>EndIndex</i>] )</p>
        <h2 class="API">Return Value</h2>
        <p>A string containing the specified substring. If <i>var</i> is an array then the result is a string array of the same dimensions.</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">StartIndex</h3>
        <p>An integer giving the starting position. If <i>StartIndex</i> is negative then it represents an index from the end. If <i>StartIndex</i> is beyond the end then an empty string is returned.</p>
        <h3 class="Argument">EndIndex</h3>
        <p>An integer giving the ending position. This includes the character at that position.  If <i>EndIndex</i> is negative then it represents an index from the end. If not specified or beyond the end then <i>EndIndex</i> will be set to the string length – 1. If <i>EndIndex</i> is less than <i>StartIndex</i> then an empty string is returned.</p>
        <h2 class="API">Keywords</h2>
        <p>None</p>
        <h1 class="ObjMethod"><a name="kanchor5960"></a><a name="ToByte"></a>IDL_String::ToByte</h1>
        <p>The IDL_String::ToByte method converts the string to a byte array.</p>
        <h2 class="API">Examples</h2>
        <p>Create a string and convert it to a byte array:</p>
        <p class="Code">str = 'IDL'</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Print the byte values for each character</p>
        <p class="Code">PRINT, str.ToByte( )</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Same thing but for a multi-dimensional array</p>
        <p class="Code">PRINT, (['IDL', 'is', 'fun!']).ToByte()</p>
        <p>IDL prints:</p>
        <p class="Code">73&#160;&#160;&#160;68&#160;&#160;76</p>
        <p class="Code">&#160;</p>
        <p class="Code">73&#160;&#160;&#160;68&#160;&#160;76&#160;&#160;&#160;0</p>
        <p class="Code">105&#160;115&#160;&#160;&#160;0&#160;&#160;&#160;0</p>
        <p class="Code">102&#160;117&#160;110&#160;&#160;33</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = <i>var</i>.ToByte(  )</p>
        <h2 class="API">Return Value</h2>
        <p>An array of byte values representing the characters of the string. If <i>var</i> is an array then the result is a byte array of one-higher dimension. The first dimension will have a length equal to the longest string in the array.</p>
        <h2 class="API">Arguments</h2>
        <p>None.</p>
        <h2 class="API">Keywords</h2>
        <p>None.</p>
        <h1 class="ObjMethod"><a name="kanchor5961"></a><a name="ToLower"></a>IDL_String::ToLower</h1>
        <p>The IDL_String::ToLower method converts the string to all lowercase characters.</p>
        <h2 class="API">Example</h2>
        <p class="Code">str = "Hello Fellow IDL&#160;User."</p>
        <p class="Code">PRINT, str.ToLower( )</p>
        <p>IDL prints:</p>
        <p class="Code">hello fellow idl&#160;user.</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = <i>var</i>.ToLower( )</p>
        <h2 class="API">Return Value</h2>
        <p>A string with all characters converted to lowercase. If <i>var</i> is an array then the result is a string array of the same dimensions.</p>
        <h2 class="API">Arguments</h2>
        <p>None.</p>
        <h2 class="API">Keywords</h2>
        <p>None.</p>
        <h1 class="ObjMethod"><a name="kanchor5962"></a><a name="ToUpper"></a>IDL_String::ToUpper</h1>
        <p>The IDL_String::ToUpper method converts the string to all uppercase characters.</p>
        <h2 class="API">Examples</h2>
        <p class="Code">str = "Hello Fellow IDL&#160;User."</p>
        <p class="Code">PRINT, str.ToUpper( )</p>
        <p>IDL prints:</p>
        <p class="Code">HELLO FELLOW IDL&#160;USER.</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = <i>var</i>.ToUpper( )</p>
        <h2 class="API">Return Value</h2>
        <p>A string with all characters converted to uppercase. If <i>var</i> is an array then the result is a string array of the same dimensions.</p>
        <h2 class="API">Arguments</h2>
        <p>None.</p>
        <h2 class="API">Keywords</h2>
        <p>None.</p>
        <h1 class="ObjMethod"><a name="kanchor5963"></a><a name="Trim"></a>IDL_String::Trim</h1>
        <p>The IDL_String::Trim method removes any leading and trailing spaces or tabs from the string. This is equivalent to calling <a href="../S/STRTRIM.htm">STRTRIM</a> with <i>Flag</i> = 2.</p>
        <h2 class="API">Examples</h2>
        <p>Create a string with spaces before and after text:</p>
        <p class="Code">str = " IDL is Cool! "</p>
        <p class="Code">PRINT,  str.Strlen( )</p>
        <p class="Code">trim_str = str.Trim()</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Print the trimmed string and its length</p>
        <p class="Code">PRINT, trim_str, trim_str.Strlen( )</p>
        <p>IDL prints:</p>
        <p class="Code">14</p>
        <p class="Code">IDL is Cool!</p>
        <p class="Code">12</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = <i>var</i>.Trim( )</p>
        <h2 class="API">Return Value</h2>
        <p>The string with leading and trailing spaces and tabs removed. If <i>var</i> is an array then the result is a string array of the same dimensions.</p>
        <h2 class="API">Arguments</h2>
        <p>None.</p>
        <h2 class="API">Keywords</h2>
        <p>None.</p>
        <h2 class="API">Version History</h2>
        <table style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/VersionTable.css');" cellspacing="0" class="TableStyle_VersionTable">
            <col />
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColSep">
                        <p>8.4</p>
                    </td>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColEnd">
                        <p>Introduced</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2 class="API">See Also</h2>
        <p><a href="../Functional List of IDL Routines/Static_Methods.htm#Static_Methods_and_Attributes">Static Methods and Attributes</a>, <a href="Variable Attributes.htm#Variable_Attributes">Variable Attributes</a>, <a href="IDL_Integer.htm">IDL_Integer</a>, <a href="IDL_Number.htm">IDL_Number</a>, <a href="IDL_Pointer.htm">IDL_Pointer</a>, <a href="IDL_Variable.htm#IDL_Variable">IDL_Variable</a></p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>