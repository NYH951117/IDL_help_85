<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>IDL_Integer</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/TableStyles/VersionTable.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <h1 class="Routine"><a name="kanchor5916"></a><a name="IDL_Integer"></a>IDL_Integer</h1>
        <p>The IDL_Integer class contains static methods that are available for integers. In addition, because IDL_Integer is a subclass of IDL_Number, all of the <a href="IDL_Number.htm">IDL_Number</a> and <a href="IDL_Variable.htm">IDL_Variable</a> methods are also available.</p>
        <h2 class="API">Superclasses</h2>
        <p><a href="IDL_Number.htm">IDL_Number</a>
        </p>
        <h3>IDL_Integer</h3>
        <ul>
            <li value="1"><a href="#BitLength" class="selected">BitLength</a> - Returns the number of bits in the current value, ignoring leading zero bits.</li>
            <li value="2"><a href="#BitGet" class="selected">BitGet</a> - Returns the requested bit associated with the current value.</li>
            <li value="3"><a href="#BitSet" class="selected">BitSet</a> - Returns a scalar or array of values after setting the bits on the current value.</li>
            <li value="4"><a href="#BitShift" class="selected">BitShift</a> - Returns a scalar or array of values after shifting the bits on the current value.</li>
            <li value="5"><a href="#ToASCII" class="selected">ToASCII</a> - Converts the current number to an ASCII string.</li>
            <li value="6"><a href="#ToBinary" class="selected">ToBinary</a> - Converts the current number to a binary string.</li>
            <li value="7"><a href="#ToHex" class="selected">ToHex</a> - Converts the current number to a hex string.</li>
            <li value="8"><a href="#ToOctal" class="selected">ToOctal</a> - Converts the current number to an octal string.</li>
        </ul>
        <h1 class="ObjMethod"><a name="kanchor5917"></a><a name="BitLength"></a>IDL_Integer::BitLength</h1>
        <p>The IDL_Integer::BitLength method returns the number of bits in the scalar or array, ignoring any leading zero bits. </p>
        <h2 class="API">Examples</h2>
        <p class="Code">num = [0, 1, 2, 7, 16385]</p>
        <p class="Code">PRINT, num.BitLength( )</p>
        <p>IDL prints:</p>
        <p class="Code">0&#160; 1&#160; 2&#160; 3&#160; 15</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = var.BitLength(  )</p>
        <h2 class="API">Return Value</h2>
        <p>A scalar byte or a byte array of the same dimensions as the variable. Each element in the <i>Result</i> will contain the number of bits in the corresponding value.</p>
        <h2 class="API">Arguments</h2>
        <p>None.</p>
        <h2 class="API">Keywords</h2>
        <p>None.</p>
        <h1 class="ObjMethod"><a name="kanchor5918"></a><a name="BitGet"></a>IDL_Integer::BitGet</h1>
        <p>The IDL_Integer::BitGet method returns a byte array of the variable.</p>
        <h2 class="API">Examples</h2>
        <p>Print the 3rd bit value of each element of an array:</p>
        <p class="Code">num = INDGEN(8)</p>
        <p class="Code">PRINT, num.BitGet(&#160;3 )</p>
        <p>IDL prints:</p>
        <p class="Code">0 0 0 0 1 1 1 1</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = var.BitGet( <i>Location</i> )</p>
        <h2 class="API">Return Value</h2>
        <p>A byte array containing the bit value of each element of the variable.</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">Location</h3>
        <p>A scalar integer designating the location of the requested bit.</p>
        <h2 class="API">Keywords</h2>
        <p>None.</p>
        <h1 class="ObjMethod"><a name="kanchor5919"></a><a name="BitSet"></a>IDL_Integer::BitSet</h1>
        <p>The IDL_Integer::BitSet method returns the variable after setting the bit or bit values.</p>
        <h2 class="API">Examples</h2>
        <p>Print the value of a variable after setting the bits on each element:</p>
        <p class="Code">num = [0, 0, 0, 0]</p>
        <p class="Code">PRINT, num.BitSet([1, 2, 3, 4])</p>
        <p>IDL prints:</p>
        <p class="Code">1 2 4 8</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = var.BitSet(  <i>Location</i> [, /CLEAR] [, /FLIP])</p>
        <h2 class="API">Return Value</h2>
        <p>The scalar or array of values of the variable after their bits have been set.</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">Location</h3>
        <p>The location of which bit to set.</p>
        <h2 class="API">Keywords</h2>
        <h3 class="Keyword">CLEAR</h3>
        <p>Set this keyword to clear the bits specified by <i>Location</i>.</p>
        <h3 class="Keyword">FLIP</h3>
        <p>Set this keyword to flip the bits specified by <i>Location</i>.</p>
        <h1 class="ObjMethod"><a name="kanchor5920"></a><a name="BitShift"></a>IDL_Integer::BitShift</h1>
        <p>The IDL_Integer::BitShift method returns a scalar or array after a bit shift operation.</p>
        <h2 class="API">Examples</h2>
        <p>Print the value of a number after shifting the bit:</p>
        <p class="Code">num = [1, 10, 100]</p>
        <p class="Code">; [ShiftRightOnePosition, ShiftLeftFivePositions, NoShift]</p>
        <p class="Code">&#160;</p>
        <p class="Code">PRINT, num.BitShift( [-1, 5, 0] )</p>
        <p class="Code">PRINT, num.BitShift(&#160;[-1, 5, 0], /CIRCULAR )</p>
        <p>IDL prints:</p>
        <p class="Code">0     320     100</p>
        <p class="Code">-32768     320     100</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = var.BitShift( <i>Direction</i> [, /CIRCULAR] )</p>
        <h2 class="API">Return Value</h2>
        <p>The value of the scalar or array after the bit shift operation.</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">Direction</h3>
        <p>A scalar or array containing the number of bit positions and the direction of the shift.</p>
        <p>If the element of <i>Direction</i> is positive, the related element of the array is left-shifted that many bit positions, with 0 bits filling vacated positions.</p>
        <p>If the element of <i>Direction</i> is negative, the related element of the array is right-shifted that many bit positions, with 0 bits filling vacated positions.</p>
        <h2 class="API">Keywords</h2>
        <h3 class="Keyword">CIRCULAR</h3>
        <p>Set this keyword to  shift the number circularly (i.e., shifting right a value of 1 would return -32768).</p>
        <h1 class="ObjMethod"><a name="kanchor5921"></a><a name="ToASCII"></a>IDL_Integer::ToASCII</h1>
        <p>The IDL_Integer::ToASCII method returns a string containing the ASCII value of a number.</p>
        <h2 class="API">Examples</h2>
        <p>Print the ASCII value of a number:</p>
        <p class="Code">num = [72, 101, 108, 108, 111]</p>
        <p class="Code">PRINT, num.ToASCII(&#160;)</p>
        <p>IDL prints:</p>
        <p class="Code">Hello</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = var.ToASCII(  )</p>
        <h2 class="API">Return Value</h2>
        <p>A scalar string or string array containing the ASCII values.</p>
        <h2 class="API">Arguments</h2>
        <p>None.</p>
        <h2 class="API">Keywords</h2>
        <p>None.</p>
        <h1 class="ObjMethod"><a name="kanchor5922"></a><a name="ToBinary"></a>IDL_Integer::ToBinary</h1>
        <p>The IDL_Integer::ToBinary method returns a string containing the binary representation of the number.</p>
        <h2 class="API">Examples</h2>
        <p>Print the hex value of a number:</p>
        <p class="Code">num = [24601, 1728, 79]</p>
        <p class="Code">PRINT, num.ToBinary( )</p>
        <p>IDL prints:</p>
        <p class="Code">110000000011001 11011000000 1001111</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = var.ToBinary(  )</p>
        <h2 class="API">Return Value</h2>
        <p>A scalar string or string array containing the binary representation.</p>
        <h2 class="API">Arguments</h2>
        <p>None.</p>
        <h2 class="API">Keywords</h2>
        <p>None.</p>
        <h1 class="ObjMethod"><a name="kanchor5923"></a><a name="ToHex"></a>IDL_Integer::ToHex</h1>
        <p>The IDL_Integer::ToHex method returns a string containing the hex value of the number.</p>
        <h2 class="API">Examples</h2>
        <p>Print the hex value of a number:</p>
        <p class="Code">num = [24601, 1728, 79]</p>
        <p class="Code">PRINT, num.ToHex( )</p>
        <p>IDL prints:</p>
        <p class="Code">6019 6C0 4F</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = var.ToHex(  )</p>
        <h2 class="API">Return Value</h2>
        <p>A scalar string or string array containing the hex values.</p>
        <h2 class="API">Arguments</h2>
        <p>None.</p>
        <h2 class="API">Keywords</h2>
        <p>None.</p>
        <h1 class="ObjMethod"><a name="kanchor5924"></a><a name="ToOctal"></a>IDL_Integer::ToOctal</h1>
        <p>The IDL_Integer::ToOctal method returns a string containing the octal value of the number.</p>
        <h2 class="API">Examples</h2>
        <p>Print the octal value of a number:</p>
        <p class="Code">num = [24601, 1728, 79]</p>
        <p class="Code">PRINT, num.ToOctal( )</p>
        <p>IDL prints:</p>
        <p class="Code">60031 3300 117</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = var.ToOctal(  )</p>
        <h2 class="API">Return Value</h2>
        <p>A scalar string or string array containing the octal values.</p>
        <h2 class="API">Arguments</h2>
        <p>None.</p>
        <h2 class="API">Keywords</h2>
        <p>None.</p>
        <h2 class="API">Version History</h2>
        <table style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/VersionTable.css');" cellspacing="0" class="TableStyle_VersionTable">
            <col />
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColSep">
                        <p>8.4</p>
                    </td>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColEnd">
                        <p>Introduced</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2 class="API">See Also</h2>
        <p><a href="../Functional List of IDL Routines/Static_Methods.htm#Static_Methods_and_Attributes">Static Methods and Attributes</a>, <a href="Variable Attributes.htm#Variable_Attributes">Variable Attributes</a>, <a href="IDL_Number.htm">IDL_Number</a>, <a href="IDL_Pointer.htm">IDL_Pointer</a>, <a href="IDL_String.htm">IDL_String</a>, <a href="IDL_Variable.htm#IDL_Variable">IDL_Variable</a></p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>