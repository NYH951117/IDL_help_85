<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Routines (alphabetical)|Routines: M">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>MESH_DECIMATE </title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/TableStyles/VersionTable.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../../images/ref_part1.htm">Routines (alphabetical)</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="M_list.htm">Routines: M</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">MESH_DECIMATE</span>
        </div>
        <h1 class="Routine"><a name="M_824365677_953124"></a><a name="kanchor1841"></a><a name="M_824365677_77367"></a>MESH_DECIMATE </h1>
        <p>The MESH_DECIMATE simplifies a polygonal mesh by combining neighboring polygons in the mesh in such a way that the shape of the original mesh is maintained as closely as possible. The decimation process is accomplished by locating the two most coplanar polygons, combining them by removing the edge between them, and then retriangulating the combined area. The process is repeated until the mesh contains the requested number of vertices or polygons. The resulting mesh approximates the original mesh with fewer vertices and polygons. MESH_DECIMATE uses the algorithm described in the paper, “Surface Simplification Using Quadric Error Metrics” by Garland and Heckbert.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Decimation is a memory- and CPU-intensive process. Expect the decimation of large models to require large amounts of memory and time.</p>
        <p>MESH_DECIMATE converts the original mesh to a triangular mesh before performing decimation. The resulting mesh returned by MESH_DECIMATE is always a triangular mesh. For best results, all the polygons in the original mesh should be convex.</p>
        <p>If the original mesh is not a triangular mesh, the mesh returned by MESH_DECIMATE might contain more triangles than the number of polygons in the original mesh, due to the conversion of the polygonal mesh to a triangular mesh. MESH_DECIMATE applies the PERCENT_POLYGONS keyword value to the number of triangles in the mesh after it is converted to a triangular mesh in order to perform the same amount of decimation.</p>
        <p>MESH_DECIMATE uses fourth-order polynomials to locate the polygons it combines. Despite using double-precision in these calculations, mesh coordinate data that varies greatly in magnitude can cause MESH_DECIMATE to produce unacceptable results. For example, a 200x200 height field might have X and Y vertex coordinate data in the range [0-199] and Z data with a magnitude of about 10^20. In cases like these, the data should be offset or scaled so that all dimensions of the vertex data are of similar magnitude.</p>
        <h2 class="API"><a name="M_824365677_948418"></a><a name="M_824365677_948418_PageTOC_MESH_DECIMATE_"></a>Syntax</h2>
        <p class="Syntax"><i>Result</i> = MESH_DECIMATE (<i>Verts</i>, <i>Conn</i>, <i>Connout </i>[,&#160;<a href="#M_824365677_1020667" class="selected">VERTICES</a>=<i>variable</i>] [,&#160;<a href="#M_824365677_948431" class="selected">PERCENT_VERTICES</a>=<i>percent&#160;</i>|&#160;,&#160;<a href="#M_824365677_948433" class="selected">PERCENT_POLYGONS</a>=<i>percent</i>] [,&#160;<a href="#M_824365677_1051741" class="selected">PROGRESS_CALLBACK</a>=<i>string</i>] [,&#160;<a href="#M_824365677_1020618" class="selected">PROGRESS_METHOD</a>=<i>string</i>] [,&#160;<a href="#M_824365677_1020641" class="selected">PROGRESS_OBJECT</a>=<i>objref</i>] [,&#160;<a href="#M_824365677_1020654" class="selected">PROGRESS_PERCENT</a>=<i>percent</i>{0 to 100}] [,&#160;<a href="#M_824365677_1020660" class="selected">PROGRESS_USERDATA</a>=<i>value</i>] )</p>
        <h2 class="API"><a name="M_824365677_948420"></a><a name="M_824365677_948420_PageTOC_MESH_DECIMATE_"></a>Return Value</h2>
        <p>The return value is the number of triangles in the output connectivity array.</p>
        <h2 class="API"><a name="M_824365677_948422"></a><a name="M_824365677_948422_PageTOC_MESH_DECIMATE_"></a>Arguments</h2>
        <h3 class="Argument">Verts</h3>
        <p>Input array of polygonal vertices [3, <i>n</i>].</p>
        <h3 class="Argument">Conn</h3>
        <p>Input polygonal mesh connectivity array.</p>
        <h3 class="Argument">Connout</h3>
        <p>Output polygonal mesh connectivity array.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Some of the vertices in the Verts array may not be referenced by the Connout array.</p>
        <h2 class="API"><a name="M_824365677_948430"></a><a name="M_824365677_948430_PageTOC_MESH_DECIMATE_"></a>Keywords</h2>
        <h3 class="Keyword"><a name="M_824365677_948431"></a><a name="M_824365677_948431_Keywords_MESH_DECIMATE__"></a>PERCENT_VERTICES</h3>
        <p>Set this keyword to the percent of the original vertices to be returned in the Connout array. It specifies the amount of decimation to perform.</p>
        <h3 class="Keyword"><a name="M_824365677_948433"></a><a name="M_824365677_948433_Keywords_MESH_DECIMATE__"></a>PERCENT_POLYGONS</h3>
        <p>Set this keyword to the percent of the original polygons to be returned in the Connout array. It specifies the amount of decimation to perform.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>PERCENT_VERTICES and PERCENT_POLYGONS are mutually exclusive keywords. If neither keyword is supplied, MESH_DECIMATE performs no decimation and returns the original mesh after converting it to a triangular mesh.</p>
        <h3 class="Keyword"><a name="M_824365677_1051741"></a><a name="M_824365677_948436_Keywords_MESH_DECIMATE__"></a>PROGRESS_CALLBACK</h3>
        <p>Set this keyword to a scalar string containing the name of the IDL function that MESH_DECIMATE calls at PROGRESS_PERCENT intervals as it decimates the polygonal mesh.</p>
        <p>The PROGRESS_CALLBACK function returns a zero to signal MESH_DECIMATE to stop decimating, which causes MESH_DECIMATE to return the partially decimated mesh. If the callback function returns a non-zero, MESH_DECIMATE continues to decimate the mesh.</p>
        <p>The PROGRESS_CALLBACK function must specify a single argument, <i>Percent</i>, which MESH_DECIMATE sets to an integer between 0 and 100, inclusive.</p>
        <p>The PROGRESS_CALLBACK function may specify an optional USERDATA keyword, which MESH_DECIMATE sets to the variable provided in the PROGRESS_USERDATA keyword.</p>
        <p>The following code show an example of a progress callback function:</p>
        <p class="Code">FUNCTION myProgressCallback, percent,</p>
        <p class="Code">$ &#160;&#160;&#160;USERDATA = myStruct</p>
        <p class="Code">&#160;</p>
        <p class="Code">oProgressBar = myStruct.oProgressBar</p>
        <p class="Code">&#160;</p>
        <p class="Code">; This method updates the progress bar</p>
        <p class="Code">; graphic and returns TRUE if the user has</p>
        <p class="Code">; NOT pressed the cancel button.</p>
        <p class="Code">keepGoing = oProgressBar-&gt;$</p>
        <p class="Code">&#160;&#160;&#160;UpdateProgressValue(percent)</p>
        <p class="Code">&#160;</p>
        <p class="Code">RETURN, keepGoing</p>
        <p class="Code">&#160;</p>
        <p class="Code">END</p>
        <h3 class="Keyword"><a name="M_824365677_1020618"></a><a name="M_824365677_1020618_Keywords_MESH_DECIMATE__"></a>PROGRESS_METHOD</h3>
        <p>Set this keyword to a scalar string containing the name of a function method that MESH_DECIMATE calls at PROGRESS_PERCENT intervals as it decimates the mesh. If this keyword is set, then the PROGRESS_OBJECT keyword must be set to an object reference that is an instance of a class that defines the specified method.</p>
        <p>The PROGRESS_METHOD function method callback has the same specification as the callback described in the PROGRESS_CALLBACK keyword, except that it is defined as an object class method:</p>
        <p class="Code">FUNCTION myClass::myProgressCallback, $</p>
        <p class="Code">&#160;&#160;&#160;percent, USERDATA = myStruct</p>
        <h3 class="Keyword"><a name="M_824365677_1020641"></a><a name="M_824365677_1020641_Keywords_MESH_DECIMATE__"></a>PROGRESS_OBJECT</h3>
        <p>Set this keyword to an object reference that is an instance of a class that defines the method specified with the PROGRESS_METHOD keyword. If this keyword is set, then the PROGRESS_METHOD keyword must also be set.</p>
        <h3 class="Keyword"><a name="M_824365677_1020654"></a><a name="M_824365677_1020654_Keywords_MESH_DECIMATE__"></a>PROGRESS_PERCENT</h3>
        <p>Set this keyword to a scalar in the range [1, 100] to specify the interval between invocations of the callback function. The default value is 5 and IDL silently clamps other values to the range [1, 100].</p>
        <p>For example, a value of 5 (the default) specifies MESH_DECIMATE will call the callback function when the decimation is 0% complete, 5% complete, 10% complete, ..., 95% complete, and 100% complete.</p>
        <h3 class="Keyword"><a name="M_824365677_1020660"></a><a name="M_824365677_1020660_Keywords_MESH_DECIMATE__"></a>PROGRESS_USERDATA</h3>
        <p>Set this property to any IDL variable that MESH_DECIMATE passes to the callback function in the callback function’s USERDATA keyword parameter. If this keyword is specified, then the callback function must be able to accept keyword parameters.</p>
        <h3 class="Keyword"><a name="M_824365677_1020667"></a><a name="M_824365677_1020667_Keywords_MESH_DECIMATE__"></a>VERTICES</h3>
        <p>Set this keyword to a named variable that will contain an output array of the vertices generated by the MESH_DECIMATE function. If this keyword is specified, the function is not restricted to using the original set of vertices specified in the <i>Verts</i> parameter when generating the decimated mesh, allowing it to generate a more optimal mesh by determining its own placement of vertices. If this keyword is specified, the <i>Connout</i> argument will consist of a polygon connectivity list whose indices refer to the vertex list stored in the named variable specified with this keyword. Otherwise, the <i>Connout</i> argument will consist of a polygon connectivity list that refers to the original vertex list <i>Verts</i>.</p>
        <h2 class="API"><a name="M_824365677_953136"></a><a name="M_824365677_953136_PageTOC_MESH_DECIMATE_"></a>Examples</h2>
        <p><a name="kanchor1842"></a><a name="kanchor1843"></a>This example decimates a DEM (digital elevation model) mesh. The DEM in this example comes from the <code>elevbin.dat</code> file found in the <code>examples/data</code> directory. The DEM is converted into a mesh with the MESH_OBJ procedure. The results of this routine are placed in a polygon object, which is added to a model. The models are displayed in the XOBJVIEW utility. The XOBJVEW utility allows you to click-and-drag the polygon object to rotate and translate it. See<a href="../X/XOBJVIEW.htm#X_800576109_956910">XOBJVIEW</a> for more information on this utility.</p>
        <p>The first display contains a wire outline of the DEM as a mesh. When you quit out of the first XOBJVIEW display, the second XOBJVIEW display will appear showing a filled mesh. The colors correspond to the change in elevation. The third display is the result of decimating the mesh down to 20 percent of the original number of vertices. The final display is the resulting mesh filled with the elevation colors.</p>
        <p>The example is split into three sections; copy and paste the code to the IDL command line to run it.</p>
        <p class="Code">; Determine path to data file.<br />elevbinFile = FILEPATH('elevbin.dat', $<br />&#160;&#160;&#160;SUBDIRECTORY = ['examples', 'data'])<br /><br />; Initialize data parameters.<br />elevbinSize = [64, 64]<br />elevbinData = BYTARR(elevbinSize[0], elevbinSize[1], /NOZERO)<br /><br />; Open file, read in data, and close file.<br />OPENR, unit, elevbinFile, /GET_LUN<br />READU, unit, elevbinData<br />FREE_LUN, unit<br /><br />; Convert data into a mesh, which is defined by<br />; vertice locations and their connectivity.<br />MESH_OBJ, 1, vertices, connectivity, elevbinData<br /><br />; Initialize a model for display.<br />oModel = OBJ_NEW('IDLgrModel')<br /><br />; Form a polygon from the mesh.<br />oPolygon = OBJ_NEW('IDLgrPolygon', vertices, $<br />&#160;&#160;&#160;POLYGONS = connectivity, SHADING = 1.5, $<br />&#160;&#160;&#160;COLOR = [0, 255, 0], STYLE = 1)</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Add polygon to model.<br />oModel-&gt;Add, oPolygon<br /><br />; Rotate model for better initial perspective.<br />oModel-&gt;Scale, 1, 1, 0.25<br />oModel-&gt;Rotate, [-1, 0, 1], 45.<br /><br />; Display model in the XOBJVIEW utility.<br />XOBJVIEW, oModel, /BLOCK, SCALE = 1., $<br />&#160;&#160;&#160;TITLE = 'Original Mesh from Elevation Data'<br /><br />; Derive a color table for the filled polygon.<br />oPalette = OBJ_NEW('IDLgrPalette')<br />oPalette-&gt;LOADCT, 29<br /><br />; Fill in the polygon mesh with the colors of the table<br />; (the colors correspond to the z-values of the polygon).<br />oPolygon-&gt;SetProperty, STYLE = 2, $<br />&#160;&#160;&#160;VERT_COLORS = BYTSCL(vertices[2, *]), $<br />&#160;&#160;&#160;PALETTE = oPalette<br /><br />; Display model in the XOBJVIEW utility.<br />XOBJVIEW, oModel, /BLOCK, SCALE = 1., $<br />&#160;&#160;&#160;TITLE = 'Filled Original Mesh'</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Decimate the mesh down to 20 percent of the original<br />; number of vertices.<br />numberVertices = MESH_DECIMATE(vertices, connectivity, $<br />&#160;&#160;&#160;decimatedConnectivity, VERTICES = decimatedVertices, $<br />&#160;&#160;&#160;PERCENT_VERTICES = 20)<br /><br />; Update the polygon with the resulting decimated mesh.<br />oPolygon-&gt;SetProperty, DATA = decimatedVertices, $<br />&#160;&#160;&#160;POLYGONS = decimatedConnectivity, STYLE = 1, $<br />&#160;&#160;&#160;VERT_COLORS = 0, COLOR = [0, 255, 0]<br /><br />; Display updated model in the XOBJVIEW utility.<br />XOBJVIEW, oModel, /BLOCK, SCALE = 1., $<br />&#160;&#160;&#160;TITLE = 'Decimation Results (by 80%)'<br /><br />; Fill in the updated polygon mesh with the colors of<br />; the table (the colors correspond to the z-values of<br />; the updated polygon).<br />oPolygon-&gt;SetProperty, STYLE = 2, $<br />&#160;&#160;&#160;VERT_COLORS = BYTSCL(decimatedVertices[2, *]), $<br />&#160;&#160;&#160;PALETTE = oPalette<br /><br />; Display model in the XOBJVIEW utility.<br />XOBJVIEW, oModel, /BLOCK, SCALE = 1., $<br />&#160;&#160;&#160;TITLE = 'Filled Decimation Results'<br /><br />; Cleanup all the objects by destroying the model.<br />OBJ_DESTROY, [oModel, oPalette]</p>
        <p>The results of the decimation are shown in the bottom row of the following figure.</p>
        <p>
            <img src="../../images/mesh_decimate.gif" style="margin-left: 4.12488px;margin-top: 4.12488px;margin-right: 6.396482px;margin-bottom: 4.004667px;" />
        </p>
        <h2 class="API"><a name="M_824365677_967894"></a><a name="M_824365677_967894_PageTOC_MESH_DECIMATE_"></a>Version History</h2>
        <table style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/VersionTable.css');" cellspacing="0" class="TableStyle_VersionTable">
            <col />
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_ColSep">
                        <p>5.5</p>
                    </td>
                    <td class="TableStyle_VersionTable_Body_0_0_ColEnd">
                        <p>Introduced</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColSep">
                        <p>6.0</p>
                    </td>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColEnd">
                        <p>Added PROGRESS_CALLBACK, PROGRESS_METHOD, PROGRESS_OBJECT, PROGRESS_PERCENT, and PROGRESS_USERDATA keywords</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2 class="API"><a name="M_824365677_972953"></a><a name="M_824365677_972953_PageTOC_MESH_DECIMATE_"></a>See Also</h2>
        <p><a href="MESH_CLIP.htm#M_824365677_888450">MESH_CLIP</a>, <a href="MESH_ISSOLID.htm#M_824365677_929914">MESH_ISSOLID</a>, <a href="MESH_MERGE.htm" class="Heading">MESH_MERGE</a>, <a href="MESH_NUMTRIANGLES.htm#M_824365677_929942">MESH_NUMTRIANGLES</a>, <a href="MESH_OBJ.htm#M_824365677_929903">MESH_OBJ</a>, <a href="MESH_SMOOTH.htm#M_824365677_929954">MESH_SMOOTH</a>, <a href="MESH_SURFACEAREA.htm#M_824365677_929966">MESH_SURFACEAREA</a>, <a href="MESH_VALIDATE.htm#M_824365677_929978">MESH_VALIDATE</a>, <a href="MESH_VOLUME.htm#M_824365677_929990">MESH_VOLUME</a></p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>