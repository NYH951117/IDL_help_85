<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Routines (alphabetical)|Routines: T">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>TVLCT Procedure</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/TableStyles/VersionTable.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../../images/ref_part1.htm">Routines (alphabetical)</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="T_list.htm">Routines: T</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">TVLCT Procedure</span>
        </div>
        <h1 class="Routine"><a name="dg_routines_3604229493_888627"></a><a name="kanchor2629"></a><a name="dg_routines_3604229493_77837"></a>TVLCT Procedure</h1>
        <p><a name="kanchor2630"></a><a name="kanchor2631"></a><a name="kanchor2632"></a>The TVLCT procedure loads the display color translation tables from the specified variables. Although IDL uses the RGB color system internally, color tables can be specified to TVLCT using any of the following color systems: RGB (Red, Green, Blue), HLS (Hue, Lightness, Saturation), and HSV (Hue, Saturation, Value). Alpha values may also be used when using the second form of the command. The type and meaning of each argument is dependent upon the color system selected, as described below. Color arguments can be either scalar or vector expressions. If no color-system keywords are present, the RGB color system is used.</p>
        <h2 class="API"><a name="dg_routines_3604229493_888657"></a><a name="dg_routines_3604229493_679743_PageTOC_TVLCT_"></a>Syntax</h2>
        <p class="Syntax">TVLCT, <i>V</i><sub>1</sub>, <i>V</i><sub>2</sub>, <i>V</i><sub>3</sub> [, <i>Start</i>] [,&#160;/<a href="#dg_routines_3604229493_888699" class="selected">GET</a>] [,&#160;/<a href="#dg_routines_3604229493_888707" class="selected">HLS</a> | , /<a href="#dg_routines_3604229493_888711" class="selected">HSV</a>]</p>
        <p>or</p>
        <p class="Syntax">TVLCT, <i>V </i>[, <i>Start</i>] [,&#160;/<a href="#dg_routines_3604229493_888699" class="selected">GET</a>] [,&#160;/<a href="#dg_routines_3604229493_888707" class="selected">HLS</a> | , /<a href="#dg_routines_3604229493_888711" class="selected">HSV</a>]</p>
        <h2 class="API"><a name="dg_routines_3604229493_888680"></a><a name="dg_routines_3604229493_679745_PageTOC_TVLCT_"></a>Arguments</h2>
        <p>TVLCT will accept either three <i>n</i>-element vectors (<i>V</i><sub>1</sub>, <i>V</i><sub>2</sub>, and <i>V</i><sub>3</sub>) or a single <i>n</i>-by-3 array (<i>V</i>) as an argument. The vectors (or rows of the array) have different meanings depending on the color system chosen. If an array <i>V</i> is specified, <i>V</i>[*,0] is the same as <i>V</i><sub>1</sub>, <i>V</i>[*,1] is the same as <i>V</i><sub>2</sub>, <i>V</i>[*,2] is the same as <i>V</i><sub>3</sub>. In the description below, we assume that three vectors, <i>V</i><sub>1</sub>, <i>V</i><sub>2</sub>, and <i>V</i><sub>3</sub> are specified. </p>
        <h3><a name="dg_routines_3604229493_888682"></a>V<sub>1</sub>, V<sub>2</sub>, and V<sub>3</sub></h3>
        <p>The <i>V</i><sub>1</sub>, <i>V</i><sub>2</sub>, and <i>V</i><sub>3</sub> arguments have different meanings depending upon which color system they represent. </p>
        <p>If the <a href="#dg_routines_3604229493_888699" class="selected">GET</a> keyword is specified, <i>V</i><i><sub>1</sub></i>, <i>V</i><i><sub>2</sub></i>, and <i>V</i><i><sub>3</sub></i> should be set to named variables.</p>
        <h4>R, G, B Color System</h4>
        <p>The parameters <i>V</i><sub>1</sub>, <i>V</i><sub>2</sub>, and <i>V</i><sub>3 </sub>contain the red, green, and blue values, respectively. Values are interpreted as integers in the range 0 (lowest intensity) to 255 (highest intensity). The parameters can be scalars or vectors of up to 256 elements. By default, the three arguments are assumed to be R, G, and B values.</p>
        <h4>H, L, S Color System</h4>
        <p>Parameters <i>V</i><sub>1</sub>, <i>V</i><sub>2</sub>, and <i>V</i><sub>3</sub> contain the Hue, Lightness, and Saturation values respectively. All parameters are floating-point. Hue is expressed in degrees and is reduced modulo 360. <i>V</i><sub>2</sub> (lightness) and <i>V</i><sub>3</sub> (saturation) and can range from 0 to 1.0. Set the HLS keyword to have the arguments interpreted this way.</p>
        <h4>H, S, V Color System</h4>
        <p>Parameters <i>V</i><sub>1</sub>, <i>V</i><sub>2</sub>, and <i>V</i><sub>3 </sub>contain values for Hue, Saturation, and Value (similar to intensity). All parameters are floating-point. Hue is in degrees. The Saturation and Value can range from 0 to 1.0. Set the HSV keyword to have the arguments interpreted this way.</p>
        <h3 class="Argument">Start</h3>
        <p>An integer value that specifies the starting point in the color translation table into which the color intensities (<i>V</i><sub>1</sub>, <i>V</i><sub>2</sub>, and <i>V</i><sub>3</sub>) are loaded. If this argument is not specified, a value of zero is used, causing the tables to be loaded starting at the first element of the translation tables. The <i>Start</i> argument can be used to change only part of the color table.</p>
        <h2 class="API"><a name="dg_routines_3604229493_888697"></a><a name="dg_routines_3604229493_679755_PageTOC_TVLCT_"></a>Keywords</h2>
        <h3 class="Keyword"><a name="dg_routines_3604229493_888699"></a><a name="dg_routines_3604229493_844142_Keywords_TVLCT__"></a>GET</h3>
        <p>Set this keyword to return the RGB values from the internal color tables into the <i>V</i><sub>1</sub>, <i>V</i><sub>2</sub>, and <i>V</i><sub>3</sub> parameters. For example, the statements:</p>
        <p class="Code">TVLCT, H, S, V, /HSV</p>
        <p class="Code">TVLCT, R, G, B, /GET</p>
        <p>load a color table based in the HSV system, and then read the equivalent RGB values into the variables R, G, and B.</p>
        <p>If GET is specified, either <i>V</i> (for the single argument form), or <i>V</i><sub>1</sub>, <i>V</i><sub>2</sub>, and <i>V</i><sub>3</sub> (for the three argument form) must be set to named variables.</p>
        <h3 class="Keyword"><a name="dg_routines_3604229493_888707"></a><a name="dg_routines_3604229493_679761_Keywords_TVLCT__"></a><a name="kanchor2633"></a>HLS</h3>
        <p>Set this keyword to indicate that the parameters specify color using the HLS color system. The plain argument parameters are in the order H-L-S. Hue is expressed in degrees, and the lightness and saturation range from 0 to 1.</p>
        <h3 class="Keyword"><a name="dg_routines_3604229493_888711"></a><a name="dg_routines_3604229493_679763_Keywords_TVLCT__"></a><a name="kanchor2634"></a>HSV</h3>
        <p>Set this keyword to indicate that the parameters specify color using the HSV color system. The plain argument parameters are in the order H-S-V. As above, hue is in degrees, and the saturation and value range from 0 to 1.</p>
        <h2 class="API"><a name="dg_routines_3604229493_888715"></a><a name="dg_routines_3604229493_679765_PageTOC_TVLCT_"></a>Examples</h2>
        <p>This section includes the following simple example as well as the following, more extensive examples:</p>
        <ul>
            <li value="1"><a href="#dg_routines_3604229493_888729" class="selected">Highlighting Features with Color in Direct Graphics</a>
            </li>
            <li value="2"><a href="#dg_routines_3604229493_888818" class="selected">Converting Indexed Images to RGB Images</a>
            </li>
        </ul>
        <p class="Code">; Initialize display.<br />DEVICE, DECOMPOSED = 0<br /><br />; Create a set of R, G, and B colormap vectors:<br />R = BYTSCL(SIN(FINDGEN(256)))<br />G = BYTSCL(COS(FINDGEN(256)))<br />B = BINDGEN(256)<br /><br />; Load these vectors into the color table:<br />TVLCT, R, G, B<br /><br />; Display an image to see the effect of the new color table:<br />TVSCL, DIST(400)</p>
        <h3><a name="dg_routines_3604229493_888729"></a><a name="dg_routines_3604229493_76248"></a><a name="kanchor2635"></a><a name="kanchor2636"></a>Highlighting Features with Color in Direct Graphics</h3>
        <p>The data in the <code>mineral.png</code> file in the <code>examples/data</code> directory comes with its own color table. The following example will apply this related color table, then a pre-defined color table, and finally derive a new color table to highlight specific features. Complete the following steps for a detailed description of the process. </p>
        <p class="ExampleCode">See <code>highlightfeatures_direct.<a name="kanchor2637"></a>pro </code>in the <code>examples/doc/image</code> subdirectory of the IDL installation directory for code that duplicates this example. Run the example procedure by entering <code>highlightfeatures_direct</code> at the IDL command prompt or view the file in an IDL Editor window by entering <code>.EDIT highlightfeatures_direct.pro</code>. </p>
        <ol>
            <li value="1">
                <p>Determine the path to the <code>mineral.png </code>file:</p>
                <p class="Code">mineralFile = FILEPATH('mineral.png', $</p>
                <p class="Code">&#160;&#160;&#160;SUBDIRECTORY = ['examples', 'data'])</p>
            </li>
        </ol>
        <ol>
            <li value="1">
                <p>Import the image from the <code>mineral.png </code>file into IDL:</p>
                <p class="Code">mineralImage = READ_PNG(mineralFile, red, green, blue)</p>
                <p>The image's associated color table is contained within the resulting red, green, and blue vectors.</p>
            </li>
        </ol>
        <ol>
            <li value="1">
                <p>Determine the size of the imported image:</p>
                <p class="Code">mineralSize = SIZE(mineralImage, /DIMENSIONS)</p>
            </li>
        </ol>
        <ol>
            <li value="1">
                <p>If you are running IDL on a TrueColor display, set the DECOMPOSED keyword to the DEVICE command to zero before your first color table related routine is used within an IDL session or program. </p>
            </li>
        </ol>
        <p class="Code">DEVICE, DECOMPOSED = 0</p>
        <ol>
            <li value="1">
                <p>Load the image’s associated color table with the TVLCT routine:</p>
                <p class="Code">TVLCT, red, green, blue</p>
            </li>
            <li value="2">
                <p>Initialize the display:</p>
                <p class="Code">WINDOW, 0, XSIZE = mineralSize[0], YSIZE = mineralSize[1], $</p>
                <p class="Code">&#160;&#160;&#160;TITLE = 'mineral.png'</p>
            </li>
            <li value="3">
                <p>Display the imported image:</p>
                <p class="Code">TV, mineralImage</p>
                <p>This scanning electron microscope image shows mineral deposits in a sample of polished granite and gneiss. The associated color table is a reverse grayscale.</p>
                <p>The following figure shows that the associated color table highlights the gneiss very well, but the other features are not very clear. The other features can be defined with IDL’s pre-defined color table, RAINBOW. </p>
                <p>
                    <img src="../../Resources/Images/imgcolor18.gif" style="margin-left: 5.99976px;margin-top: 5.99976px;margin-right: 5.999767px;margin-bottom: 5.999752px;" />
                </p>
            </li>
            <li value="4">
                <p>Load the RAINBOW color table and redisplay the image in another window:</p>
                <p class="Code">LOADCT, 13</p>
                <p class="Code">WINDOW, 1, XSIZE = mineralSize[0], YSIZE = mineralSize[1], $</p>
                <p class="Code">&#160;&#160;&#160;TITLE = 'RAINBOW Color'</p>
                <p class="Code">TV, mineralImage</p>
                <p>The following figure shows that the yellow, cyan, and red sections are now apparent, but the cracks are no longer visible. Details within the yellow areas and the green background are also difficult to distinguish. These features can be highlighted by designing your own color table.</p>
                <p>
                    <img src="../../Resources/Images/imgcolor19.gif" style="margin-left: 5.99976px;margin-top: 5.99976px;margin-right: 5.999767px;margin-bottom: 5.999752px;" />
                </p>
                <p>The features within the image are at specific ranges in between 0 and 255. Instead of a progressive color table, specific colors can be defined to be constant over these ranges. Any contrasting colors can be used, but it is easiest to derive the additive and subtractive primary colors used in the previous section.</p>
            </li>
            <li value="5">
                <p>Define the colors for a new color table:</p>
                <p class="Code">colorLevel = [[0, 0, 0], $ ; black</p>
                <p class="Code">&#160;&#160;&#160;[255, 0, 0], $ ; red</p>
                <p class="Code">&#160;&#160;&#160;[255, 255, 0], $ ; yellow</p>
                <p class="Code">&#160;&#160;&#160;[0, 255, 0], $ ; green</p>
                <p class="Code">&#160;&#160;&#160;[0, 255, 255], $ ; cyan</p>
                <p class="Code">&#160;&#160;&#160;[0, 0, 255], $ ; blue</p>
                <p class="Code">&#160;&#160;&#160;[255, 0, 255], $ ; magenta</p>
                <p class="Code">&#160;&#160;&#160;[255, 255, 255]] ; white</p>
            </li>
            <li value="6">
                <p>Create a new color table that contains eight levels, including the highest end boundary by first deriving levels for each color in the new color table:</p>
                <p class="Code">numberOfLevels = CEIL(!D.TABLE_SIZE/8.)</p>
                <p class="Code">level = INDGEN(!D.TABLE_SIZE)/numberOfLevels</p>
            </li>
            <li value="7">
                <p>Place each color level into its appropriate range.</p>
                <p class="Code">newRed = colorLevel[0, level]</p>
                <p class="Code">newGreen = colorLevel[1, level]</p>
                <p class="Code">newBlue = colorLevel[2, level]</p>
            </li>
            <li value="8">
                <p>Include the last color in the last level:</p>
                <p class="Code">newRed[!D.TABLE_SIZE - 1] = 255</p>
                <p class="Code">newGreen[!D.TABLE_SIZE - 1] = 255</p>
                <p class="Code">newBlue[!D.TABLE_SIZE - 1] = 255</p>
            </li>
            <li value="9">
                <p>Make the new color table current:</p>
                <p class="Code">TVLCT, newRed, newGreen, newBlue</p>
            </li>
            <li value="10">
                <p>Display the image with this new color table in another window:</p>
                <p class="Code">WINDOW, 2, XSIZE = mineralSize[0], $</p>
                <p class="Code">&#160;&#160;&#160;YSIZE = mineralSize[1], TITLE = 'Cube Corner Colors'</p>
                <p class="Code">TV, mineralImage</p>
                <p>The following figure shows that each feature is now highlighted including the cracks. The color table also highlights at least three different types of cracks. </p>
                <p>
                    <img src="../../Resources/Images/imgcolor20.gif" style="margin-left: 5.99976px;margin-top: 5.99976px;margin-right: 5.999767px;margin-bottom: 5.999752px;" />
                </p>
            </li>
        </ol>
        <h3><a name="dg_routines_3604229493_888818"></a><a name="dg_routines_3604229493_48836"></a><a name="kanchor2638"></a><a name="kanchor2639"></a>Converting Indexed Images to RGB Images</h3>
        <p>The <code>convec.dat</code> file is a binary file that contains an indexed image (a two-dimensional image and its associated color table) of the convection of the earth’s mantle. This file does not contain a related color table. The following example applies a color table to this image and then converts the image and table to an RGB image (which contains its own color information) and writes it to a JPEG file. Complete the following steps for a detailed description of the process. </p>
        <p class="ExampleCode">See <code>indexedtorgb_example.<a name="kanchor2640"></a>pro </code>in the <code>examples/doc/image</code> subdirectory of the IDL installation directory for code that duplicates this example. Run the example procedure by entering <code>indexedtorgb</code> at the IDL command prompt or view the file in an IDL Editor window by entering <code>.EDIT indexedtorgb_example.pro</code>. </p>
        <ol>
            <li value="1">
                <p>Determine the path to the <code>convec.dat</code> binary file:</p>
                <p class="Code">convecFile = FILEPATH('convec.dat', $</p>
                <p class="Code">&#160;&#160;&#160;SUBDIRECTORY = ['examples', 'data'])</p>
            </li>
            <li value="2">
                <p>Initialize the image size parameter:</p>
                <p class="Code">convecSize = [248, 248]</p>
            </li>
            <li value="3">
                <p>Import the image from the file:</p>
                <p class="Code">convecImage = READ_BINARY(convecFile, $</p>
                <p class="Code">&#160;&#160;&#160;DATA_DIMS = convecSize)</p>
            </li>
            <li value="4">
                <p>If you are running IDL on a TrueColor display, set the DECOMPOSED keyword to the DEVICE command to zero before your first color table related routine is used within an IDL session or program. </p>
                <p class="Code">DEVICE, DECOMPOSED = 0</p>
            </li>
            <li value="5">
                <p>Load the EOS B color table (index number 27) to highlight the image’s features and initialize the display:</p>
                <p class="Code">LOADCT, 27</p>
                <p class="Code">WINDOW, 0, TITLE = 'convec.dat', $</p>
                <p class="Code">&#160;&#160;&#160;XSIZE = convecSize[0], YSIZE = convecSize[1]</p>
            </li>
            <li value="6">
                <p>Now display the image with this color table. </p>
                <p class="Code">TV, convecImage</p>
                <p>
                    <img src="../../Resources/Images/imgcolor16.gif" style="margin-left: 5.99976px;margin-top: 2.25px;margin-right: 6.000469px;margin-bottom: 1.499763px;" />
                </p>
                <p>A color table is formed from three vectors (the red vector, the green vector, and the blue vector). The same element of each vector together form an RGB triplet to create a color. For example, the <i>i-th</i> element of the red vector may be 255, the <i>ith</i> element of the green vector may be 255, and the <i>ith</i> element of the blue vector maybe 0. The RGB triplet of the <i>ith</i> element would then be (255, 255, 0), which is the color yellow. Since a color table contains 256 indices, its three vectors have 256 elements each. You can access these vectors with the TVLCT routine using the GET keyword.</p>
                <p class="NoteIndented">On some PseudoColor displays, fewer than 256 entries will be available.</p>
            </li>
            <li value="7">
                <p>Access the values of the color table by setting the GET keyword to the TVLCT routine.</p>
                <p class="Code">TVLCT, red, green, blue, /GET</p>
                <p>This color table (color information) can be stored within the image by converting it to an RGB image. For this example, the RGB image will be pixel interleaved in order to be exported to a JPEG file.</p>
                <p class="Tip" data-mc-autonum="&lt;b&gt;Tip: &lt;/b&gt;"><span class="autonumber"><span><b>Tip: </b></span></span>If the original indexed image contains values of a data type other than byte, you should byte-scale the image (with the BYTSCL routine) before using the following method.</p>
            </li>
            <li value="8">
                <p>Before converting the indexed image into an RGB image, the resulting three-dimensional array must be initialized. Initialize the data type and the dimensions of the resulting RGB image:</p>
                <p class="Code">imageRGB = BYTARR(3, convecSize[0], convecSize[1], /NOZERO)</p>
            </li>
            <li value="9">
                <p>Use the red, green, and blue vectors of the color table and the original indexed image to form a single image composed of these channels:</p>
                <p class="Code">imageRGB[0, *, *] = red[convecImage]</p>
                <p class="Code">imageRGB[1, *, *] = green[convecImage]</p>
                <p class="Code">imageRGB[2, *, *] = blue[convecImage]</p>
            </li>
            <li value="10">
                <p>Export the resulting RGB image to a JPEG file:</p>
                <p class="Code">WRITE_JPEG, 'convecImage.jpg', imageRGB, TRUE = 1, $</p>
                <p class="Code">&#160;&#160;&#160;QUALITY = 100.</p>
                <p>The TRUE keyword is set to 1 because the resulting RGB image is pixel interleaved. See <a href="../W/WRITE_JPEG.htm">WRITE_JPEG</a>for more information.</p>
            </li>
        </ol>
        <h2 class="API"><a name="dg_routines_3604229493_888869"></a><a name="dg_routines_3604229493_795988_PageTOC_TVLCT_"></a>Version History</h2>
        <table style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/VersionTable.css');" cellspacing="0" class="TableStyle_VersionTable">
            <col />
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColSep">
                        <p>Original</p>
                    </td>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColEnd">
                        <p>Introduced</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2><a name="dg_routines_3604229493_888877"></a><a name="dg_routines_3604229493_1086573_PageTOC_TVLCT_"></a>See Also</h2>
        <p><a href="../L/LOADCT_Procedure.htm">LOADCT</a>, <a href="../X/XLOADCT_Procedure.htm">XLOADCT</a>, <a href="../X/XPALETTE_Procedure.htm">XPALETTE</a></p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>