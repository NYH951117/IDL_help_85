<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Routines (alphabetical)|Routines: T">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>TV Procedure</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/TableStyles/NoLines.css" rel="stylesheet" />
        <link href="../../Resources/TableStyles/VersionTable.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../../images/ref_part1.htm">Routines (alphabetical)</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="T_list.htm">Routines: T</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">TV Procedure</span>
        </div>
        <h1 class="Routine"><a name="dg_routines_3604229493_887862"></a><a name="kanchor2611"></a><a name="dg_routines_3604229493_65425"></a>TV Procedure</h1>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Please see the <a href="../I/IMAGE.htm" class="Heading">IMAGE</a> function, which replicates the functionality of this routine and offers an interactive interface.</p>
        <p>The TV procedure displays images in a Direct Graphics window without scaling the intensity. To display an image with scaling, use the TVSCL procedure.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>The TV procedure displays an image in its original form. The TVSCL procedure displays an image scaled to range from 0 up to 255 depending on the colors available to IDL. <br />RGB images are displayed with the TV procedure. To display a TrueColor image (an image with 16, 24, or 32 bits per pixel) you must use the TRUE keyword.</p>
        <p>While the TV procedure does not <i>scale</i> the intensity of an image, it does convert the input image data to byte type. Values outside the range [0,255] are “wrapped” during the conversion. In addition, for displays with less than 256 colors, elements of the input image with values between !D.TABLE_SIZE and 255 will be displayed using the color index !D.TABLE_SIZE-1.</p>
        <p>If no optional parameters are present, IMAGE is output to the display with its lower-left corner at coordinate (0, 0). The optional parameters can be used to specify the screen position of the image in a variety of ways.</p>
        <h2 class="API"><a name="dg_routines_3604229493_887888"></a><a name="dg_routines_3604229493_679668_PageTOC_TV_"></a>Syntax</h2>
        <p class="Syntax">TV, <i>Image</i> [,&#160;<i>Position</i>] [,&#160;/<a href="#dg_routines_3604229493_888009" class="selected">CENTIMETERS</a> | , /<a href="#dg_routines_3604229493_888012" class="selected">INCHES</a>] [,&#160;/<a href="#dg_routines_3604229493_888015" class="selected">ORDER</a>] [,&#160;<a href="#dg_routines_3604229493_888018" class="selected">TRUE</a>={1&#160;|&#160;2&#160;|&#160;3}] [,&#160;/<a href="#dg_routines_3604229493_888030" class="selected">WORDS</a>] [,&#160;<a href="#dg_routines_3604229493_888033" class="selected">XSIZE</a>=<i>value</i>] [,&#160;<a href="#dg_routines_3604229493_888036" class="selected">YSIZE</a>=<i>value</i>]</p>
        <p>or</p>
        <p class="Syntax">TV, <i>Image</i> [,&#160;<i>X</i>, <i>Y</i> [,&#160;<i>Channel</i>]] [,&#160;/<a href="#dg_routines_3604229493_888009" class="selected">CENTIMETERS</a> | , /<a href="#dg_routines_3604229493_888012" class="selected">INCHES</a>] [,&#160;/<a href="#dg_routines_3604229493_888015" class="selected">ORDER</a>] [,&#160;<a href="#dg_routines_3604229493_888018" class="selected">TRUE</a>={1 | 2 | 3}] [,&#160;/<a href="#dg_routines_3604229493_888030" class="selected">WORDS</a>] [,&#160;<a href="#dg_routines_3604229493_888033" class="selected">XSIZE</a>=<i>value</i>] [,&#160;<a href="#dg_routines_3604229493_888036" class="selected">YSIZE</a>=<i>value</i>]</p>
        <p><b>Graphics Keywords:</b> [,&#160;<a href="../../Direct Graphics/graphkeyw.htm#graphkeyw_3288778166_315931">../../Resources/CHANNEL</a>=<i>value</i>] [,&#160;/<a href="../../Direct Graphics/graphkeyw.htm#graphkeyw_3288778166_315961">DATA</a> | , /<a href="../../Direct Graphics/graphkeyw.htm#graphkeyw_3288778166_369990">DEVICE</a> | , /<a href="../../Direct Graphics/graphkeyw.htm#graphkeyw_3288778166_315963">NORMAL</a>] [,&#160;/<a href="../../Direct Graphics/graphkeyw.htm#graphkeyw_3288778166_315956">T3D</a>] [,&#160;<a href="../../Direct Graphics/graphkeyw.htm#graphkeyw_3288778166_332658">Z</a>=<i>value</i>]</p>
        <h2 class="API"><a name="dg_routines_3604229493_887954"></a><a name="dg_routines_3604229493_679672_PageTOC_TV_"></a>Arguments</h2>
        <h3 class="Argument">Image </h3>
        <p>A vector or two-dimensional, or three-dimensional array to be displayed as an image. If this argument is not already of byte type, it is converted prior to use.</p>
        <h3 class="Argument">X, Y</h3>
        <p>If <i>X</i> and <i>Y</i> are present, they specify the lower-left coordinate of the displayed image, relative to the lower-left corner of the screen.</p>
        <h3 class="Argument"><a name="dg_routines_3604229493_887960"></a><a name="dg_routines_3604229493_81249"></a>Position</h3>
        <p>An integer specifying the position for <i>Image</i> within the graphics window. Image positions run from the top left of the screen to the bottom right. If a position number is used instead of <i>X</i> and <i>Y</i>, the position of the image is calculated from the dimensions of the image as follows (integer arithmetic is used).</p>
        <p>
            <img src="../../Direct Graphics/3_56.jpg" />
        </p>
        <p>For example, when displaying 128 by 128 images on a 512 by 512 display, the position numbers run from 0 to 15 as follows:</p>
        <p>&#160;</p>
        <table style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/NoLines.css');" cellspacing="0" class="TableStyle_NoLines">
            <col />
            <col />
            <col />
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_NoLines_Body_0_0_RowSep_ColSep">
                        <p>0</p>
                    </td>
                    <td class="TableStyle_NoLines_Body_0_0_RowSep_ColSep">
                        <p>1</p>
                    </td>
                    <td class="TableStyle_NoLines_Body_0_0_RowSep_ColSep">
                        <p>2</p>
                    </td>
                    <td class="TableStyle_NoLines_Body_0_0_RowSep_ColEnd">
                        <p>3</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_NoLines_Body_0_0_RowSep_ColSep">
                        <p>4</p>
                    </td>
                    <td class="TableStyle_NoLines_Body_0_0_RowSep_ColSep">
                        <p>5</p>
                    </td>
                    <td class="TableStyle_NoLines_Body_0_0_RowSep_ColSep">
                        <p>6</p>
                    </td>
                    <td class="TableStyle_NoLines_Body_0_0_RowSep_ColEnd">
                        <p>7</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_NoLines_Body_0_0_RowSep_ColSep">
                        <p>8</p>
                    </td>
                    <td class="TableStyle_NoLines_Body_0_0_RowSep_ColSep">
                        <p>9</p>
                    </td>
                    <td class="TableStyle_NoLines_Body_0_0_RowSep_ColSep">
                        <p>10</p>
                    </td>
                    <td class="TableStyle_NoLines_Body_0_0_RowSep_ColEnd">
                        <p>11</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_NoLines_Body_0_0_RowEnd_ColSep">
                        <p>12</p>
                    </td>
                    <td class="TableStyle_NoLines_Body_0_0_RowEnd_ColSep">
                        <p>13</p>
                    </td>
                    <td class="TableStyle_NoLines_Body_0_0_RowEnd_ColSep">
                        <p>14</p>
                    </td>
                    <td class="TableStyle_NoLines_Body_0_0_RowEnd_ColEnd">
                        <p>15</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>When using a device with scalable pixels (e.g., PostScript), the XSIZE and YSIZE keywords should also be used.</p>
        <h3 class="Argument">Channel</h3>
        <p>Some image display devices are capable of storing more than a single image or can combine three single color images to form a TrueColor image. CHANNEL specifies the memory channel to be written. It is assumed to be zero if not specified. This parameter is ignored on display systems that have only one memory channel. The <i>Channel</i> argument is identical to the CHANNEL graphics keyword.</p>
        <h2 class="API"><a name="dg_routines_3604229493_888007"></a><a name="dg_routines_3604229493_679681_PageTOC_TV_"></a>Keywords</h2>
        <h3 class="Keyword"><a name="dg_routines_3604229493_888009"></a><a name="dg_routines_3604229493_679682_Keywords_TV__"></a>CENTIMETERS</h3>
        <p>Set this keyword to indicate that the <i>X</i>, <i>Y</i>, <i>Xsize</i>, <i>Ysize</i>, and <i>Z</i> arguments are given in centimeters from the origin. This system is useful when dealing with devices, such as PostScript printers, that do not provide a direct relationship between image pixels and the size of the resulting image.</p>
        <h3 class="Keyword"><a name="dg_routines_3604229493_888012"></a><a name="dg_routines_3604229493_679690_Keywords_TV__"></a>INCHES</h3>
        <p>Set this keyword to indicate that all position and size values are given in inches from the origin. This system is useful when dealing with devices, such as PostScript printers, that do not provide a direct relationship between image pixels and the size of the resulting image.</p>
        <h3 class="Keyword"><a name="dg_routines_3604229493_888015"></a><a name="dg_routines_3604229493_679694_Keywords_TV__"></a>ORDER</h3>
        <p>If specified, ORDER overrides the current setting of the !ORDER system variable for the current image only. If set, the image is drawn from the top down instead of the normal bottom up.</p>
        <h3 class="Keyword"><a name="dg_routines_3604229493_888018"></a><a name="dg_routines_3604229493_679698_Keywords_TV__"></a>TRUE</h3>
        <p><a name="kanchor2612"></a>Set this keyword to a nonzero value to indicate that a TrueColor (16-, 24-, or 32-bit) image is to be displayed. The value assigned to TRUE specifies the index of the dimension over which color is interleaved. The image parameter must have three dimensions, one of which must be equal to three. For example, set TRUE to 1 to display an image that is pixel interleaved and has dimensions of (3, <i>m, n</i>). Specify 2 for row-interleaved images, of size (<i>m</i>, 3, <i>n</i>), and 3 for band-interleaved images of the form (<i>m</i>, <i>n</i>, 3).</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>When a TrueColor image is specified, the image is displayed using decomposed color, regardless of the setting of the DECOMPOSED keyword for the current graphics device.</p>
        <h3 class="Keyword"><a name="dg_routines_3604229493_888030"></a><a name="dg_routines_3604229493_679701_Keywords_TV__"></a>WORDS</h3>
        <p>Set this keyword to indicate that words (short integers) instead of 8-bit bytes are to be transferred to the device. This keyword is valid only when using devices that can transfer 16-bit pixels. The normal transfer uses 8-bit pixels. If this keyword is set, the <i>Image</i> parameter is converted to short integer type, if necessary, and then written to the display.</p>
        <h3 class="Keyword"><a name="dg_routines_3604229493_888033"></a><a name="dg_routines_3604229493_679703_Keywords_TV__"></a>XSIZE</h3>
        <p>The width of the resulting image. On devices with scalable pixel size (such as PostScript), if XSIZE is specified the image will be scaled to fit the specified width. If neither XSIZE nor YSIZE is specified, the image will be scaled to fill the plotting area, while preserving the image’s aspect ratio. This keyword is ignored by pixel-based devices that are unable to change the size of their pixels.</p>
        <h3 class="Keyword"><a name="dg_routines_3604229493_888036"></a><a name="dg_routines_3604229493_679705_Keywords_TV__"></a>YSIZE</h3>
        <p>The height of the resulting image. On devices with scalable pixel size (such as PostScript), if YSIZE is specified the image will be scaled to fit the specified height. If neither XSIZE nor YSIZE is specified, the image will be scaled to fill the plotting area, while preserving the image’s aspect ratio. This keyword is ignored by pixel-based devices that are unable to change the size of their pixels.</p>
        <h3><a name="dg_routines_3604229493_888040"></a><a name="dg_routines_3604229493_219013_Keywords_TV__"></a><a name="dg_routines_3604229493_219013_PageTOC_TV_"></a>Graphics Keywords Accepted</h3>
        <p>See <a href="../../Direct Graphics/graphkeyw.htm#graphkeyw_3288778166_317209">Direct Graphics Keywords</a> for the description of the following graphics and plotting keywords:</p>
        <p><a href="../../Direct Graphics/graphkeyw.htm#graphkeyw_3288778166_315931">CHANNEL</a>, <a href="../../Direct Graphics/graphkeyw.htm#graphkeyw_3288778166_315961">DATA</a>, <a href="../../Direct Graphics/graphkeyw.htm#graphkeyw_3288778166_369990">DEVICE</a>, <a href="../../Direct Graphics/graphkeyw.htm#graphkeyw_3288778166_315963">NORMAL</a>, <a href="../../Direct Graphics/graphkeyw.htm#graphkeyw_3288778166_315956">T3D</a>, <a href="../../Direct Graphics/graphkeyw.htm#graphkeyw_3288778166_332658">Z</a></p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>The T3D and Z keywords are only honored when the DATA keyword is also set. Note also that when the T3D keyword is set, the X and Y arguments and the Z keyword position the lower left corner of the image displayed by TV, but do not change its orientation. Use the <a href="../P/POLY_2D.htm">POLY_2D</a>routine to warp the image into 3D space.</p>
        <h2 class="API"><a name="dg_routines_3604229493_888069"></a><a name="dg_routines_3604229493_679709_PageTOC_TV_"></a>Examples</h2>
        <p>In addition to the following basic example, this section also includes :</p>
        <ul>
            <li value="1"><a href="#dg_routines_3604229493_888095" class="selected">Positioning Multiple Images in Direct Graphics</a>
            </li>
            <li value="2"><a href="#dg_routines_3604229493_888183" class="selected">DisplayingRGB Images with Direct Graphics</a>
            </li>
            <li value="3"><a href="#dg_routines_3604229493_888254" class="selected">Displaying RGB Images and Converting to Grayscale</a>
            </li>
        </ul>
        <p class="Code">; Create and display a simple image:<br />D = BYTSCL(DIST(256)) &amp; TV, D</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Erase the screen:<br />ERASE</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Use the position parameter to display a number of images in the<br />; same window.<br />; Display the image in the upper left corner.<br />TV, D, 0</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Display another copy of the image in the next position:<br />TV, D, 1</p>
        <h3><a name="dg_routines_3604229493_888095"></a><a name="dg_routines_3604229493_58802"></a>Positioning <a name="kanchor2613"></a>Multiple<a name="kanchor2614"></a> Images in <a name="kanchor2615"></a>Direct Graphics</h3>
        <p>The following example imports an RGB image from the <code>rose.jpg</code> image file. This RGB image is a close-up photograph of a red rose and is pixel interleaved. This example extracts the three color channels of this image, and displays them as grayscale images in various locations within the same window. Complete the following steps for a detailed description of the process. </p>
        <p class="ExampleCode">See <code>displaymultiples_direct.<a name="kanchor2616"></a>pro</code> in the <code>examples/doc/image</code> subdirectory of the IDL installation directory for code that duplicates this example. Run the example procedure by entering <code>displaymultiples_direct</code> at the IDL command prompt or view the file in an IDL Editor window by entering <code>.EDIT displaymultiples_direct.pro</code>. </p>
        <ol>
            <li value="1">
                <p>Determine the path to the <code>rose.jpg</code> file:</p>
                <p class="Code">file = FILEPATH('rose.jpg', $</p>
                <p class="Code">&#160;&#160;&#160;SUBDIRECTORY = ['examples', 'data'])</p>
            </li>
            <li value="2">
                <p>Use QUERY_IMAGE to query the file to determine image parameters:</p>
                <p class="Code">queryStatus = QUERY_IMAGE(file, imageInfo)</p>
            </li>
            <li value="3">
                <p>Set the image size parameter from the query information:</p>
                <p class="Code">imageSize = imageInfo.dimensions</p>
            </li>
            <li value="4">
                <p>Use READ_IMAGE to import the image from the file:</p>
                <p class="Code">image = READ_IMAGE(file)</p>
            </li>
            <li value="5">
                <p>Extract the channels (as images) from the pixel interleaved RGB image:</p>
                <p class="Code">redChannel = REFORM(image[0, *, *])</p>
                <p class="Code">greenChannel = REFORM(image[1, *, *])</p>
                <p class="Code">blueChannel = REFORM(image[2, *, *])</p>
            </li>
            <li value="6">
                <p>If you are running IDL on a TrueColor display, set the DECOMPOSED keyword to the DEVICE command to zero before your first color table related routine is used within an IDL session or program.</p>
                <p class="Code">DEVICE, DECOMPOSED = 0</p>
            </li>
            <li value="7">
                <p>Since the channels are grayscale images, load a grayscale color table:</p>
                <p class="Code">LOADCT, 0</p>
                <p>The TV procedure can be used to display the channels (grayscale images). The TV procedure has two different location input arguments. One argument is <i>position</i>. This argument arranges the image in a calculated location based on the size of the display and the dimension sizes of the image. </p>
            </li>
            <li value="8">
                <p>Create a window and horizontally display the three channels with the <i>position</i> argument:</p>
                <p class="Code">WINDOW, 0, XSIZE = 3*imageSize[0], YSIZE = imageSize[1], $</p>
                <p class="Code">&#160;&#160;&#160;TITLE = 'The Channels of an RGB Image'</p>
                <p class="Code">TV, redChannel, 0</p>
                <p class="Code">TV, greenChannel, 1</p>
                <p class="Code">TV, blueChannel, 2</p>
                <p>The following figure shows the resulting grayscale images.</p>
                <p>
                    <img src="../../Resources/Images/imgdisp11.gif" style="margin-left: 5.99976px;margin-top: 5.99976px;margin-right: 6.000484px;margin-bottom: 6.000477px;" />
                </p>
                <p>The TV procedure can also be used with its <i>x</i> and <i>y</i> input arguments. These arguments define the location of the lower left corner of the image. The values of these arguments are in device coordinates by default. However, you can provide data or normalized coordinates when the DATA or NORMAL keyword is set. </p>
            </li>
            <li value="9">
                <p>Create a window and vertically display the three channels with the <i>x </i>and<i> y </i>arguments:</p>
                <p class="Code">WINDOW, 0, XSIZE = imageSize[0], YSIZE = 3*imageSize[1], $</p>
                <p class="Code">&#160;&#160;&#160;TITLE = 'The Channels of an RGB Image'</p>
                <p class="Code">TV, redChannel, 0, 0</p>
                <p class="Code">TV, greenChannel, 0, imageSize[1]</p>
                <p class="Code">TV, blueChannel, 0, 2*imageSize[1]</p>
                <p>The following figure shows the resulting grayscale images.</p>
                <p>
                    <img src="../../Resources/Images/imgdisp12.gif" style="margin-left: 5.99976px;margin-top: 5.99976px;margin-right: 6.000477px;margin-bottom: 5.999767px;" />
                </p>
                <p>The <i>x</i> and <i>y</i> arguments can also be used to create a display of overlapping images. When overlapping images in Direct Graphics, you must remember the last image placed in the window will be in front of the previous images. So if you want to bring a display from the back of the window to the front, you must redisplay it after all the other displays.</p>
            </li>
            <li value="10">
                <p>Create another window:</p>
                <p class="Code">WINDOW, 2, XSIZE = 2*imageSize[0], YSIZE = 2*imageSize[1], $</p>
                <p class="Code">   TITLE = 'The Channels of an RGB Image'</p>
            </li>
            <li value="11">
                <p>Make a white background to distinguish the edges of the images:</p>
                <p class="Code">ERASE, !P.COLOR</p>
            </li>
            <li value="12">
                <p>Diagonally display the three channels with the <i>x </i>and<i> y </i>arguments:</p>
                <p class="Code">TV, redChannel, 0, 0</p>
                <p class="Code">TV, greenChannel, imageSize[0]/2, imageSize[1]/2</p>
                <p class="Code">TV, blueChannel, imageSize[0], imageSize[1]</p>
                <p>The following figure shows the resulting grayscale images.</p>
                <p>
                    <img src="../../Resources/Images/imgdisp13.gif" style="margin-left: 5.99976px;margin-top: 5.99976px;margin-right: 5.999752px;margin-bottom: 6.000484px;" />
                </p>
            </li>
        </ol>
        <h3><a name="dg_routines_3604229493_888183"></a><a name="dg_routines_3604229493_81405"></a>Displaying<a name="kanchor2617"></a><a name="kanchor2618"></a>RGB Images with <a name="kanchor2619"></a>Direct Graphics</h3>
        <p>RGB images are three-dimensional arrays made up of width, height, and three channels of color information. In Direct Graphics, these images are displayed with the TV procedure. The TRUE keyword to TV is set according to the interleaving of the RGB image. With RGB images, the interleaving, or arrangement of the channels within the image file, dictates the setting of the TRUE keyword. If the image is:</p>
        <ul>
            <li value="1">pixel interleaved (3, w, h), TRUE is set to 1.</li>
            <li value="2">line interleaved (w, 3, h), TRUE is set to 2. </li>
            <li value="3">planar interleaved (w, h, 3), TRUE is set to 3.</li>
        </ul>
        <p>You can determine if an image file contains an RGB image by querying the file. The CHANNELS tag of the resulting query structure will equal 3 if the file’s image is RGB. The query does not determine which interleaving is used in the image, but the array returned in DIMENSIONS tag of the query structure can be used to determine the type of interleaving.</p>
        <p>If you are using a PseudoColor display, your RGB images must be converted to indexed images to be displayed within IDL. </p>
        <p>The following example queries and imports a pixel-interleaved RGB image from the <code>rose.jpg</code> image file. This pixel interleaved RGB image is a close-up photograph of a red rose. Complete the following steps for a detailed description of the process. </p>
        <p class="ExampleCode">See <code>displayrgbimage_direct.<a name="kanchor2620"></a>pro</code> in the <code>examples/doc/image</code> subdirectory of the IDL installation directory for code that duplicates this example. Run the example procedure by entering <code>displayrgbimage_direct</code> at the IDL command prompt or view the file in an IDL Editor window by entering <code>.EDIT displayrgbimage_direct.pro</code>. </p>
        <ol>
            <li value="1">
                <p>Determine the path to the <code>rose.jpg</code> file:</p>
                <p class="Code">file = FILEPATH('rose.jpg', $</p>
                <p class="Code">&#160;&#160;&#160;SUBDIRECTORY = ['examples', 'data'])</p>
            </li>
            <li value="2">
                <p>Use QUERY_IMAGE to query the file to determine image parameters:</p>
                <p class="Code">queryStatus = QUERY_IMAGE(file, imageInfo)</p>
            </li>
            <li value="3">
                <p>Output the results of the file query:</p>
                <p class="Code">PRINT, 'Query Status = ', queryStatus</p>
                <p class="Code">HELP, imageInfo, /STRUCTURE</p>
                <p>The following text appears in the Output Log:</p>
                <p class="Code">Query Status =            1</p>
                <p class="Code">** Structure &lt;14055f0&gt;, 7 tags, length=36, refs=1:</p>
                <p class="Code">   CHANNELS &#160;&#160;&#160;&#160;&#160;LONG &#160;&#160;&#160;&#160;3</p>
                <p class="Code">   DIMENSIONS &#160;&#160;&#160;LONG &#160;&#160;&#160;&#160;Array[2]</p>
                <p class="Code">   HAS_PALETTE &#160;&#160;INT &#160;&#160;&#160;&#160;&#160;0</p>
                <p class="Code">   IMAGE_INDEX &#160;&#160;LONG &#160;&#160;&#160;&#160;0</p>
                <p class="Code">   NUM_IMAGES &#160;&#160;&#160;LONG &#160;&#160;&#160;&#160;1</p>
                <p class="Code">   PIXEL_TYPE &#160;&#160;&#160;INT &#160;&#160;&#160;&#160;&#160;1</p>
                <p class="Code">   TYPE &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;STRING &#160;&#160;'JPEG'</p>
                <p>The CHANNELS tag has a value of 3. Thus, the image is an RGB image. </p>
            </li>
            <li value="4">
                <p>Set the image size parameter from the query information:</p>
                <p class="Code">imageSize = imageInfo.dimensions</p>
                <p>The type of interleaving can be determined from the image size parameter and actual size of each dimension of the image. To determine the size of each dimension, you must first import the image.</p>
            </li>
            <li value="5">
                <p>Use READ_IMAGE to import the image from the file:</p>
                <p class="Code">image = READ_IMAGE(file)</p>
            </li>
            <li value="6">
                <p>Determine the size of each dimension within the image:</p>
                <p class="Code">imageDims = SIZE(image, /DIMENSIONS)</p>
            </li>
            <li value="7">
                <p>Determine the type of interleaving by comparing the dimension sizes to the image size parameter from the file query:</p>
                <p class="Code">interleaving = WHERE((imageDims NE imageSize[0]) AND $</p>
                <p class="Code">&#160;&#160;&#160;(imageDims NE imageSize[1])) + 1</p>
            </li>
            <li value="8">
                <p>Output the results of the interleaving computation:</p>
                <p class="Code">PRINT, 'Type of Interleaving = ', interleaving</p>
                <p>The following text appears in the Output Log:</p>
                <p class="Code">Type of Interleaving = 1</p>
                <p>The image is pixel interleaved. If the resulting value was 2, the image would have been line interleaved. If the resulting value was 3, the image would have been planar interleaved.</p>
            </li>
            <li value="9">
                <p>If you are running IDL on a TrueColor display, set the DECOMPOSED keyword to the DEVICE command to one before your first RGB image is displayed within an IDL session or program.</p>
                <p class="Code">DEVICE, DECOMPOSED = 1</p>
            </li>
            <li value="10">
                <p>Create a window and display the image with the TV procedure:</p>
                <p class="Code">WINDOW, 0, XSIZE = imageSize[0], YSIZE = imageSize[1], $</p>
                <p class="Code">&#160;&#160;&#160;TITLE = 'An RGB Image'</p>
                <p class="Code">TV, image, TRUE = interleaving[0]</p>
                <p>The following figure shows the resulting RGB image display.</p>
                <p>
                    <img src="../../Resources/Images/imgdisp05.gif" style="margin-left: 5.99976px;margin-top: 5.99976px;margin-right: 6.000477px;margin-bottom: 6.000477px;" />
                </p>
            </li>
        </ol>
        <h3><a name="dg_routines_3604229493_888254"></a><a name="dg_routines_3604229493_11096"></a>Displaying <a name="kanchor2621"></a>RGB<a name="kanchor2622"></a> Images and Converting to Grayscale</h3>
        <p>The following example displays an RGB image, extracts the three channels contained in the <code>glowing_gas.jpg</code> file, which is in the <code>examples/data</code> directory. This file is provided by the Hubble Heritage Team, which is made of AURA, STScI, and NASA.</p>
        <p>This example uses REFORM t o extract individual channels as grayscale (intensity) images from the original RGB image. These images are converted to floating-point data and then added together to form a single image, which is a grayscale version of the original RGB image. Complete the following steps for a detailed description of the process. </p>
        <p class="ExampleCode">See <code>rgbtograyscale_example.<a name="kanchor2623"></a>pro </code>in the <code>examples/doc/image</code> subdirectory of the IDL installation directory for code that duplicates this example. Run the example procedure by entering <code>rgbtograyscale</code> at the IDL command prompt or view the file in an IDL Editor window by entering <code>.EDIT rgbtograyscale_example.pro</code>. </p>
        <ol>
            <li value="1">
                <p>Determine the path to the file:</p>
                <p class="Code">file = FILEPATH('glowing_gas.jpg', $</p>
                <p class="Code">&#160;&#160;&#160;SUBDIRECTORY = ['examples', 'data'])</p>
            </li>
            <li value="2">
                <p>Query the file to determine the image parameters:</p>
                <p class="Code">queryStatus = QUERY_JPEG(file, imageInfo)</p>
            </li>
            <li value="3">
                <p>Set the image size parameter from the query information:</p>
                <p class="Code">imageSize = imageInfo.dimensions</p>
            </li>
            <li value="4">
                <p>Import the image from the file:</p>
                <p class="Code">READ_JPEG, file, image</p>
            </li>
            <li value="5">
                <p>If you are running IDL on a TrueColor display, set the DECOMPOSED keyword to the DEVICE command to one before your first RGB image is displayed within an IDL session or program. </p>
                <p class="Code">DEVICE, DECOMPOSED = 1</p>
            </li>
            <li value="6">
                <p>Create a window and display the image:</p>
                <p class="Code">WINDOW, 0, XSIZE = imageSize[0], YSIZE = imageSize[1], $</p>
                <p class="Code">&#160;&#160;&#160;TITLE = 'Glowing Gas RGB Image'</p>
                <p class="Code">TV, image, TRUE = 1</p>
                <p>The following figure shows the original RGB image.</p>
                <p>
                    <img src="../../Resources/Images/imgmath13.gif" style="margin-left: 5.99976px;margin-top: 5.99976px;margin-right: 5.999767px;margin-bottom: 5.999767px;" />
                </p>
            </li>
            <li value="7">
                <p>Extract the channels (as images) from the RGB image:</p>
                <p class="Code">redChannel = REFORM(image[0, *, *])</p>
                <p class="Code">greenChannel = REFORM(image[1, *, *])</p>
                <p class="Code">blueChannel = REFORM(image[2, *, *])</p>
            </li>
            <li value="8">
                <p>Initialize the grayscale display:</p>
                <p class="Code">DEVICE, DECOMPOSED = 0</p>
                <p class="Code">LOADCT, 0</p>
            </li>
            <li value="9">
                <p>Create another window and display each channel of the RGB image:</p>
                <p class="Code">WINDOW, 1, XSIZE = 3*imageSize[0], YSIZE = imageSize[1], $</p>
                <p class="Code">&#160;&#160;&#160;TITLE = 'Red (left), Green (middle), ' + $</p>
                <p class="Code">&#160;&#160;&#160;'and Blue (right) Channels of the RGB Image'</p>
                <p class="Code">TV, redChannel, 0</p>
                <p class="Code">TV, greenChannel, 1</p>
                <p class="Code">TV, blueChannel, 2</p>
                <p>The following figure shows the RGB channels. The red channel is on the left, the green channel is in the middle, and the blue channel is on the right.</p>
                <p>
                    <img src="../../Resources/Images/imgmath14.gif" style="margin-left: 5.99976px;margin-top: 5.99976px;margin-right: 6.000484px;margin-bottom: 5.999767px;" />
                </p>
            </li>
            <li value="10">
                <p>Convert the channels into a single grayscale image.</p>
                <p class="Code">grayscaleImage = BYTE(0.299*FLOAT(redChannel) + $</p>
                <p class="Code">   0.587*FLOAT(redChannel) + 0.114*FLOAT(blueChannel))</p>
                <p>The pixel values of the channels are converted from byte values to floating-point values because byte values cannot exceed 255. The adjustment factors (0.299, 0.587, and 0.114) are used to enhance visual perception and to scale the results to a range from 0 to 255. The BYTE function is used to restore the pixel values back to their original data type.</p>
            </li>
            <li value="11">
                <p>Create another window and display the grayscale image:</p>
                <p class="Code">WINDOW, 2, XSIZE = 2*imageSize[0], YSIZE = imageSize[1], $</p>
                <p class="Code">&#160;&#160;&#160;TITLE = 'Resulting Grayscale Image' + $</p>
                <p class="Code">TV, grayscaleImage</p>
                <p>The following figure shows the result of creating a grayscale image from the individual channels of an RGB image.</p>
                <p>
                    <img src="../../Resources/Images/imgmath15.gif" style="margin-left: 5.99976px;margin-top: 5.99976px;margin-right: 5.999767px;margin-bottom: 5.999767px;" />
                </p>
            </li>
        </ol>
        <h2 class="API"><a name="dg_routines_3604229493_888333"></a><a name="dg_routines_3604229493_795984_PageTOC_TV_"></a>Version History</h2>
        <table style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/VersionTable.css');" cellspacing="0" class="TableStyle_VersionTable">
            <col />
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColSep">
                        <p>Original</p>
                    </td>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColEnd">
                        <p>Introduced</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2><a name="dg_routines_3604229493_888341"></a><a name="dg_routines_3604229493_1086565_PageTOC_TV_"></a>See Also</h2>
        <p><a href="../E/ERASE_Procedure.htm#dg_routines_3604229493_882907">ERASE Procedure</a>, <a href="../I/IIMAGE.htm">IIMAGE</a>, <a href="../S/SLIDE_IMAGE_Procedure.htm#dg_routines_3604229493_886555">SLIDE_IMAGE Procedure</a>, <a href="TVRD.htm#dg_routines_3604229493_888889">TVRD</a>, <a href="TVSCL_Procedure.htm#dg_routines_3604229493_889027">TVSCL Procedure</a>, <a href="../W/WIDGET_DRAW.htm">WIDGET_DRAW</a>, <a href="../W/WRITE_BMP.htm">WRITE_BMP</a>, and the DECOMPOSED keyword to the <a href="../D/DEVICE_Procedure.htm#dg_routines_3604229493_882302">DEVICE Procedure</a> routine</p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>