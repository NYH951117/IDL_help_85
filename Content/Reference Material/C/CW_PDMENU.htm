<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Routines (alphabetical)|Routines: C">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>CW_PDMENU  </title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/TableStyles/Description.css" rel="stylesheet" />
        <link href="../../Resources/TableStyles/VersionTable.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../../images/ref_part1.htm">Routines (alphabetical)</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="C_list.htm">Routines: C</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">CW_PDMENU</span>
        </div>
        <h1 class="Routine"><a name="C_854643309_998412"></a><a name="C_854643309_62114"></a>CW_PDMENU<a name="kanchor446"></a> <a name="kanchor447"></a><a name="kanchor448"></a> <![CDATA[ ]]></h1>
        <p>The CW_PDMENU function creates widget pulldown menus, which can include sub-menus, from a set of buttons. It has a simpler interface than the XPDMENU procedure, which it replaces. Events for the individual buttons are handled transparently, and a CW_PDMENU event returned. This event can return any one of the following:</p>
        <ul>
            <li value="1">Index of the button within the base.</li>
            <li value="2">Widget ID of the button.</li>
            <li value="3">Name of the button.</li>
            <li value="4">Fully qualified name of the button. This allows different sub-menus to contain buttons with the same name in an unambiguous way.</li>
        </ul>
        <p>Only buttons with textual names are handled by this widget. Bitmaps are not understood.</p>
        <p>This routine is written in the IDL language. Its source code can be found in the file <code>cw_pdmenu.pro</code> in the <code>lib</code> subdirectory of the IDL distribution.</p>
        <h2 class="API"><a name="C_854643309_755672"></a><a name="C_854643309_755672_PageTOC_CW_PDMENU_"></a>Syntax</h2>
        <p class="Syntax"><i>Result</i> = CW_PDMENU( <i>Parent</i>, <i>Desc</i> [,&#160;/<a href="#C_854643309_755708" class="selected">COLUMN</a>] [,&#160;/<a href="#C_854643309_1025506" class="selected">CONTEXT_MENU</a>] [,&#160;<a href="#C_854643309_1042113" class="selected">DELIMITER</a>=<i>string</i>] [,&#160;<a href="#C_854643309_67046" class="selected">FONT</a>=<i>value</i>] [,&#160;/<a href="#C_854643309_1188103" class="selected">MBAR</a> [,&#160;/<a href="#C_854643309_855550" class="selected">HELP</a>]] [,&#160;<a href="#C_854643309_860166" class="selected">IDS</a>=<i>variable</i>] [,&#160;/<a href="#C_854643309_1188112" class="selected">RETURN_ID</a> | , /<a href="#C_854643309_755720" class="selected">RETURN_INDEX</a> | , /<a href="#C_854643309_755723" class="selected">RETURN_NAME</a> | , /<a href="#C_854643309_755726" class="selected">RETURN_FULL_NAME</a>] [,&#160;<a href="#C_854643309_1190329" class="selected">TAB_MODE</a>=<i>value</i>] [,&#160;<a href="#C_854643309_996678" class="selected">UNAME</a>=<i>string</i>] [,&#160;<a href="#C_854643309_755731" class="selected">UVALUE</a>=<i>value</i>] [,&#160;<a href="#C_854643309_755734" class="selected">XOFFSET</a>=<i>value</i>] [,&#160;<a href="#C_854643309_755737" class="selected">YOFFSET</a>=<i>value</i>] )</p>
        <h2 class="API"><a name="C_854643309_755674"></a><a name="C_854643309_755674_PageTOC_CW_PDMENU_"></a>Return Value</h2>
        <p>This function returns the widget ID of the newly-created pulldown menu widget.</p>
        <h2 class="API"><a name="C_854643309_1027096"></a><a name="C_854643309_1027096_PageTOC_CW_PDMENU_"></a>Arguments</h2>
        <h3 class="Argument">Parent</h3>
        <p>The widget ID of the parent widget.</p>
        <h3 class="Argument">Desc</h3>
        <p>An array of strings or structures. If <i>Desc</i> is an array of strings, each element contains the flag field, followed by a backslash character, followed by the name of the menu item, optionally followed by another backslash character and the name of an event-processing procedure for that element. A string element of the <i>Desc</i> array would look like:</p>
        <p class="Code">'n\<i>item_name</i>'</p>
        <p>or</p>
        <p class="Code">'n\<i>item_name</i>\<i>event_proc</i>'</p>
        <p>where <code>n</code> is the flag field and <i>item_name</i> is the name of the menu item. The flag field is a bitmask that controls how the button is interpreted; appropriate values for the flag field are shown in the following table. If the <i>event_proc</i> field is present, it is the name of an event-handling procedure for the menu element and all of its children.</p>
        <p>If <i>Desc</i> is an array of structures, each structure must have the following definition:</p>
        <p class="Code">{CW_PDMENU_S, flags:0, name:''}</p>
        <p>The name tag is a string field with the following components:</p>
        <p class="Code">'<i>item_name</i>'</p>
        <p>or</p>
        <p class="Code">'<i>item_name</i>\<i>event_proc</i>'</p>
        <p>where <i>item_name</i> is the name of the menu item. If the <i>event_proc</i> field is present, it is the name of an event-handling procedure for the menu element and all of its children</p>
        <p>The flags field is a bitmask that controls how the button is interpreted; appropriate values for the flag field are shown in the following table. Note that if <i>Desc</i> is an array of structures, you cannot specify individual event-handling procedures for each element. </p>
        <table style="caption-side: bottom;mc-table-style: url('../../Resources/TableStyles/Description.css');" cellspacing="0" class="TableStyle_Description">
            <col />
            <col />
            <thead>
                <tr>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColSep">
                        <p>Value</p>
                    </td>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColEnd">
                        <p>Meaning</p>
                    </td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>0</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>This button is neither the beginning nor the end of a pulldown level.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p>1</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>This button is the root of a sub-pulldown menu. The sub-buttons start with the next button.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>2</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>This button is the last button at the current pulldown level. The next button belongs to the same level as the current parent button. If the name field is not specified (or is an empty string), no button is created, and the next button is created one level up in the hierarchy.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColSep">
                        <p>3</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColEnd">
                        <p>This button is the root of a sub-pulldown menu, but it is also the last entry of the current level.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2 class="API"><a name="C_854643309_755706"></a><a name="C_854643309_755706_PageTOC_CW_PDMENU_"></a>Keywords</h2>
        <h3 class="Keyword"><a name="C_854643309_755708"></a><a name="C_854643309_755708_Keywords_CW_PDMENU__"></a>COLUMN</h3>
        <p>Set this keyword to create a vertical column of menu buttons. The default is to create a horizontal row of buttons.</p>
        <h3 class="Keyword"><a name="C_854643309_1025506"></a><a name="C_854643309_1025506_Keywords_CW_PDMENU__"></a>CONTEXT_MENU</h3>
        <p>Set this keyword to create the pulldown menu within a context-sensitive menu. If CONTEXT_MENU is set, <i>Parent</i> must be the widget ID of a base widget, which also has the CONTEXT_MENU keyword set. The return value of CW_PDMENU is the <i>Parent’s</i> widget ID. If CONTEXT_MENU is set, setting the UNAME or UVALUE on the same call to CW_PDMENU will override the UNAME or UVALUE values of the parent base.</p>
        <p>For more on creating context menus, see <a href="../../Creating IDL Programs/Creating Applications in IDL/Creating_Menus.htm#widget_techniques_4218446668_95574">Context-Sensitive&gt;Menus</a> and the CONTEXT_MENU keyword to <a href="../W/WIDGET_BASE.htm#W_811389549_974349">WIDGET_BASE</a>.</p>
        <h3 class="Keyword"><a name="C_854643309_1042113"></a><a name="C_854643309_1042113_Keywords_CW_PDMENU__"></a>DELIMITER</h3>
        <p>The character used to separate the parts of a fully qualified name in returned events. The default is to use the “.” character.</p>
        <h3 class="Keyword"><a name="C_854643309_67046"></a><a name="C_854643309_67046_Keywords_CW_PDMENU__"></a>FONT</h3>
        <p>The name of the font to be used for the button titles. The font specified is a “device font” (an X Windows font on Motif systems; a TrueType or PostScript font on Windows systems). See <a href="../../Creating IDL Programs/Appendices/Using_Device_Fonts.htm#fonts_2203613354_1049926">About Device Fonts</a> for details on specifying names for device fonts. If this keyword is omitted, the default font is used.</p>
        <h3 class="Keyword"><a name="C_854643309_855550"></a><a name="C_854643309_855550_Keywords_CW_PDMENU__"></a>HELP</h3>
        <p>If the MBAR keyword is set, and one of the buttons on the menubar has the label “help” (case insensitive) then that button is created with the /HELP keyword to give it any special appearance it is supposed to have on a menubar. For example, Motif expects help buttons to be on the right.</p>
        <h3 class="Keyword"><a name="C_854643309_860166"></a><a name="C_854643309_860166_Keywords_CW_PDMENU__"></a>IDS</h3>
        <p>A named variable in which the button IDs will be stored as a longword vector.</p>
        <h3 class="Keyword"><a name="C_854643309_1188103"></a><a name="C_854643309_855454_Keywords_CW_PDMENU__"></a>MBAR</h3>
        <p>Set this keyword to create a menubar pulldown. If MBAR is set, <i>Parent</i> must be the widget ID of a menubar belonging to a top-level base, and the return value of CW_PDMENU is the <i>Parent</i> widget ID. For an example demonstrating the use of the MBAR keyword, see <a href="#C_854643309_1025251" class="selected">Example 2</a> below. Also see the <a href="../W/WIDGET_BASE.htm#W_811389549_934563">MBAR</a> keyword to WIDGET_BASE. If MBAR is set, setting the UNAME or UVALUE on the same call to CW_PDMENU will override the UNAME or UVALUE values of the parent base. </p>
        <h3 class="Keyword"><a name="C_854643309_1188112"></a><a name="C_854643309_755717_Keywords_CW_PDMENU__"></a>RETURN_ID</h3>
        <p>If this keyword is set, the VALUE field of returned events will contain the widget ID of the button.</p>
        <h3 class="Keyword"><a name="C_854643309_755720"></a><a name="C_854643309_755720_Keywords_CW_PDMENU__"></a>RETURN_INDEX</h3>
        <p>If this keyword is set, the VALUE field of returned events will contain the zero-based index of the button within the base. THIS IS THE DEFAULT.</p>
        <h3 class="Keyword"><a name="C_854643309_755723"></a><a name="C_854643309_755723_Keywords_CW_PDMENU__"></a>RETURN_NAME</h3>
        <p>If this keyword is set, the VALUE field of returned events will be the name of the selected button.</p>
        <h3 class="Keyword"><a name="C_854643309_755726"></a><a name="C_854643309_755726_Keywords_CW_PDMENU__"></a>RETURN_FULL_NAME</h3>
        <p>Set this keyword and the VALUE field of returned events will be the fully qualified name of the selected button. This means that the names of all the buttons from the topmost button of the pulldown menu to the selected one are concatenated with the delimiter specified by the DELIMITER keyword. For example, if the top button was named COLORS, the second level button was named BLUE, and the selected button was named LIGHT, the returned value would be</p>
        <p class="Code">COLORS.BLUE.LIGHT</p>
        <p>This allows different submenus to have buttons with the same name (e.g., COLORS.RED.LIGHT).</p>
        <h3 class="Keyword"><a name="C_854643309_1190329"></a><a name="C_854643309_80408"></a>TAB_MODE</h3>
        <p>Set this keyword to one of the values shown in the table below to determine how the widget hierarchy can be navigated using the <b>Tab</b> key. The TAB_MODE setting is inherited by lower-level bases and child widgets unless it is explicitly set on an individual widget.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>It is not possible to tab to disabled (SENSITIVE=0) or hidden (MAP=0) widgets.</p>
        <p>Valid settings are:</p>
        <table style="caption-side: bottom;mc-table-style: url('../../Resources/TableStyles/Description.css');" cellspacing="0" class="TableStyle_Description">
            <col />
            <col />
            <thead>
                <tr>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColSep">
                        <p>Value</p>
                    </td>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColEnd">
                        <p>Description</p>
                    </td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>0</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Disable navigation onto or off of the widget. This is the default. Child widgets automatically inherit the tab mode of the parent base as described in <a href="../../Creating IDL Programs/Creating Applications in IDL/Enhancing_Widget_Applica.htm#widget_techniques_4218446668_142828">Inheriting the TAB_MODE Value</a>.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p>1</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>Enable navigation onto and off of the widget.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>2</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Navigate only onto the widget.</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColSep">
                        <p>3</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColEnd">
                        <p>Navigate only off of the widget.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>In widget applications on the UNIX platform, the Motif library controls what widgets are brought into and released from focus using tabbing. The TAB_MODE keyword value is always zero, and any attempt to change it is ignored when running a widget application on the UNIX platform. Tabbing behavior may vary significantly between UNIX platforms; do not rely on a particular behavior being duplicated on all UNIX systems.</p>
        <h3 class="Keyword"><a name="C_854643309_996678"></a><a name="C_854643309_996678_Keywords_CW_PDMENU__"></a>UNAME </h3>
        <p>Set this keyword to a string that can be used to identify the widget in your code. You can associate a name with each widget in a specific hierarchy, and then use that name to query the widget hierarchy and get the correct widget ID.</p>
        <p>To query the widget hierarchy, use the <a href="../W/WIDGET_INFO.htm#W_811389549_680333">WIDGET_INFO</a> function with the FIND_BY_UNAME keyword. The UNAME should be unique to the widget hierarchy because the FIND_BY_UNAME keyword returns the ID of the first widget with the specified name.</p>
        <h3 class="Keyword"><a name="C_854643309_755731"></a><a name="C_854643309_755731_Keywords_CW_PDMENU__"></a>UVALUE</h3>
        <p>The “user value” to be assigned to the widget. If the MBAR keyword is set, the value specified for UVALUE is also assigned as the UVALUE of the parent menu (i.e., the widget specified by the <i>Parent</i> argument in the call to CW_PDMENU).</p>
        <h3 class="Keyword"><a name="C_854643309_755734"></a><a name="C_854643309_755734_Keywords_CW_PDMENU__"></a>XOFFSET</h3>
        <p>The X offset of the widget relative to its parent.</p>
        <h3 class="Keyword"><a name="C_854643309_755737"></a><a name="C_854643309_755737_Keywords_CW_PDMENU__"></a>YOFFSET</h3>
        <p>The Y offset of the widget relative to its parent.</p>
        <h3><a name="C_854643309_837857_Keywords_CW_PDMENU__"></a>Keywords to WIDGET_CONTROL and WIDGET_INFO</h3>
        <p>The widget ID returned by most compound widgets is actually the ID of the compound widget’s base widget. This means that many keywords to the WIDGET_CONTROL and WIDGET_INFO routines that affect or return information on base widgets can be used with compound widgets.</p>
        <p>See <a href="../../Creating IDL Programs/Creating Applications in IDL/Creating_a_Compound_Widg.htm#widget_apps_4063420628_1042476">Creating a Compound Widget</a> for a more complete discussion of controlling compound widgets using WIDGET_CONTROL and WIDGET_INFO.</p>
        <h2 class="API"><a name="C_854643309_1083327"></a><a name="C_854643309_62082"></a>Widget Events Returned by the CW_PDMENU Widget</h2>
        <p>CW_PDMENU generates an event structure that specifies the index, widget ID, or name of the menu item selected with the following definition:</p>
        <p class="Code">event = { ID:0L, TOP:0L, HANDLER:0L, VALUE:0 }</p>
        <p>VALUE is either the INDEX, ID, NAME, or FULL_NAME of the button, depending on how the widget was created.</p>
        <h2 class="API"><a name="C_854643309_755743"></a><a name="C_854643309_755743_PageTOC_CW_PDMENU_"></a>Examples</h2>
        <h3><a name="C_854643309_1025247_Keywords_CW_PDMENU__"></a>Example 1</h3>
        <p>The following is the description of a menu bar with two buttons: “Colors” and “Quit”. Colors is a pulldown containing the colors “Red”, “Green”, Blue”, “Cyan”, and “Magenta”. Blue is a sub-pulldown containing “Light”, “Medium”, “Dark”, “Navy”, and “Royal.”</p>
        <p>The following small program can be used with the above description to create the specified menu:</p>
        <p class="Code">PRO PD_EXAMPLE</p>
        <p class="Code">&#160;&#160;&#160;desc&#160;=&#160;[&#160;'1\Colors' , $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'0\Red' , $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'0\Green' , $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'1\Blue' , $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'0\Light' , $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'0\Medium' , $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'0\Dark' , $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'0\Navy' , $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'2\Royal' , $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'0\Cyan' , $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'2\Magenta' , $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'2\Quit' ]</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;; Create the widget:</p>
        <p class="Code">&#160;&#160;&#160;base = WIDGET_BASE()</p>
        <p class="Code">&#160;&#160;&#160;menu = CW_PDMENU(base, desc, /RETURN_FULL_NAME)</p>
        <p class="Code">&#160;&#160;&#160;WIDGET_CONTROL, /REALIZE, base</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;;Provide a simple event handler:</p>
        <p class="Code">&#160;&#160;&#160;REPEAT BEGIN</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;ev = WIDGET_EVENT(base)</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;PRINT, ev.value</p>
        <p class="Code">&#160;&#160;&#160;END UNTIL ev.value EQ 'Quit'</p>
        <p class="Code">&#160;&#160;&#160;WIDGET_CONTROL, /DESTROY, base</p>
        <p class="Code">&#160;</p>
        <p class="Code">END</p>
        <p>The <i>Desc</i> array could also have been defined using a structure for each element. The following array of structures creates the same menu as the array of strings shown above. Note, however, that if the <i>Desc</i> array is composed of structures, you cannot specify individual event-handling routines. </p>
        <p>First, make sure CW_PDMENU_S structure is defined:</p>
        <p class="Code">junk = {CW_PDMENU_S, flags:0, name:'' }</p>
        <p>Define the menu:</p>
        <p class="Code">desc = [ { CW_PDMENU_S, 1, 'Colors' }, $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{ CW_PDMENU_S, 0, 'Red' }, $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{ CW_PDMENU_S, 0, 'Green' }, $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{ CW_PDMENU_S, 1, 'Blue' }, $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{ CW_PDMENU_S, 0, 'Light' }, $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{ CW_PDMENU_S, 0, 'Medium' }, $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{ CW_PDMENU_S, 0, 'Dark' }, $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{ CW_PDMENU_S, 0, 'Navy' }, $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{ CW_PDMENU_S, 2, 'Royal' }, $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{ CW_PDMENU_S, 0, 'Cyan' }, $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{ CW_PDMENU_S, 2, 'Magenta' }, $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{ CW_PDMENU_S, 2, 'Quit' } ]</p>
        <h3><a name="C_854643309_1025251"></a><a name="C_854643309_1025251_Keywords_CW_PDMENU__"></a><a name="C_854643309_39234"></a>Example 2</h3>
        <p>This example demonstrates the use of the MBAR keyword to CW_PDMENU to populate the “Colors” menu item on a menu bar created using WIDGET_BASE.</p>
        <p class="Code">PRO mbar_event, event</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;WIDGET_CONTROL, event.id, GET_UVALUE=uval</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;CASE uval OF</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;'Quit': WIDGET_CONTROL, /DESTROY, event.top</p>
        <p class="Code">&#160;&#160;&#160;ELSE: PRINT, event.value</p>
        <p class="Code">&#160;&#160;&#160;ENDCASE</p>
        <p class="Code">&#160;</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">PRO mbar</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;; Create the base widget:</p>
        <p class="Code">&#160;&#160;&#160;base = WIDGET_BASE(TITLE = 'Example', MBAR=bar, XSIZE=200, $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;UVALUE='base')</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;file_menu = WIDGET_BUTTON(bar, VALUE='File', /MENU)</p>
        <p class="Code">&#160;&#160;&#160;file_bttn1=WIDGET_BUTTON(file_menu, VALUE='Quit', $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;UVALUE='Quit')</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;colors_menu = WIDGET_BUTTON(bar, VALUE='Colors', /MENU)</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;; Define array for colors menu items:</p>
        <p class="Code">&#160;&#160;&#160;desc = [ '0\Red' , $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'0\Green' , $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'1\Blue' , $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'0\Light' , $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'0\Medium' , $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'0\Dark' , $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'0\Navy' , $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'2\Royal' , $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'0\Cyan' , $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;'2\Magenta' ]</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;; Create colors menu items. Note that the Parent argument is</p>
        <p class="Code">&#160;&#160;&#160;; set to the widget ID of the parent menu:</p>
        <p class="Code">&#160;&#160;&#160;colors = CW_PDMENU(colors_menu, desc, /MBAR, $</p>
        <p class="Code">&#160;&#160;&#160;&#160;&#160;&#160;/RETURN_FULL_NAME, UVALUE='menu')</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;WIDGET_CONTROL, /REALIZE, base</p>
        <p class="Code">&#160;</p>
        <p class="Code">&#160;&#160;&#160;XMANAGER, 'mbar', base, /NO_BLOCK</p>
        <p class="Code">&#160;</p>
        <p class="Code">END</p>
        <h2 class="API"><a name="C_854643309_755774"></a><a name="C_854643309_755774_PageTOC_CW_PDMENU_"></a>Version History</h2>
        <table style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/VersionTable.css');" cellspacing="0" class="TableStyle_VersionTable">
            <col />
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_ColSep">
                        <p>Pre 4.0</p>
                    </td>
                    <td class="TableStyle_VersionTable_Body_0_0_ColEnd">
                        <p>Introduced</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColSep">
                        <p>6.1</p>
                    </td>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColEnd">
                        <p>Added TAB_MODE keyword</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2 class="API"><a name="C_854643309_1052381"></a><a name="C_854643309_1052381_PageTOC_CW_PDMENU_"></a>See Also</h2>
        <p><a href="CW_BGROUP.htm#C_854643309_755132">CW_BGROUP</a>, <a href="../W/WIDGET_DROPLIST.htm#W_811389549_58310">WIDGET_DROPLIST</a>, <a href="../../Creating IDL Programs/Creating Applications in IDL/Creating_Menus.htm#widget_techniques_4218446668_95521">Pulldown Menus</a></p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>