<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Routines (alphabetical)|Routines: C">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>COLOR_QUAN </title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/TableStyles/VersionTable.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../../images/ref_part1.htm">Routines (alphabetical)</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="C_list.htm">Routines: C</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">COLOR_QUAN</span>
        </div>
        <h1 class="Routine"><a name="C_854643309_676152"></a><a name="C_854643309_70836"></a><a name="kanchor282"></a><a name="kanchor283"></a><a name="kanchor284"></a><a name="kanchor285"></a><a name="C_854643309_28741"></a>COLOR_QUAN </h1>
        <p>The COLOR_QUAN function quantizes a TrueColor image and returns a pseudo-color image and palette to display the image on standard pseudo-color displays. The output image and palette can have from 2 to 256 colors.</p>
        <p>COLOR_QUAN solves the general problem of accurately converting a decomposed color (TrueColor) image, which can contain a palette of up to 2<sup>24</sup> colors, into an 8-bit image along with red, green, and blue color vectors. This conversion may be useful if you need to:</p>
        <ul>
            <li value="1">display the image on a pseudo-color display where the number of available colors is limited to 256 or fewer</li>
            <li value="2">create an 8-bit image format file, such as GIF image.</li>
        </ul>
        <h3>Using COLOR_QUAN</h3>
        <p>One of two color quantization methods can be used:</p>
        <ul>
            <li value="1">Method 1 is a statistical method that attempts to find the N colors that most accurately represent the original color distribution. This algorithm uses a variation of the Median Cut Algorithm, described in “Color Image Quantization for Frame Buffer Display”, from <i>Computer Graphics</i>, Volume 16, Number 3 (July, 1982), Page 297. It repeatedly subdivides the color space into smaller and smaller rectangular boxes, until the requested number of colors are obtained.</li>
        </ul>
        <p class="indent">The original colors are then mapped to the nearest output color, and the original image is resampled to the new palette with optional Floyd-Steinberg color dithering. The resulting pseudo-color image and palette are usually a good approximation of the original image.</p>
        <p class="indent">The number of colors in the output palette defaults to the number of colors supported by the currently-selected graphics output device. The number of colors can also be specified by the COLOR keyword parameter.</p>
        <ul>
            <li value="1">Method 2, selected by setting the keyword parameter CUBE, divides the three-dimensional color space into equal-volume cubes. Each color axis is divided into CUBE segments, resulting in CUBE<sup>3</sup> volumes. The original input image is sampled to this color space using Floyd-Steinberg dithering, which distributes the quantization error to adjacent pixels.</li>
        </ul>
        <p class="indent">The CUBE method has the advantage that the color tables it produces are independent of the input image, so that multiple quantized images can be viewed simultaneously. The statistical method usually provides a better-looking result and a smaller global error.</p>
        <p>COLOR_QUAN can use the same color mapping for a series of images. See the descriptions of the GET_TRANSLATION, MAP_ALL, and TRANSLATION keywords, below.</p>
        <h2 class="API"><a name="C_854643309_676191"></a><a name="C_854643309_676191_PageTOC_COLOR_QUAN_"></a>Examples</h2>
        <p>The following code segment reads a TrueColor, pixel interleaved image from a disk file and displays it on the current graphics display, using a palette of 128 colors:</p>
        <p class="Code">; Read in a TrueColor image.<br />file = FILEPATH('glowing_gas.jpg', $<br />&#160;&#160;&#160;SUBDIRECTORY=['examples', 'data'])<br />READ_JPEG, file, image<br /><br />; Tell IDL to use a maximum of 256 colors and load<br />; a greyscale color map.<br />DEVICE, GET_DECOMPOSED=orig_decomposed, DECOMPOSED=0<br />LOADCT, 0<br /><br />; Create a quantized version of the image, using a<br />; maximum of 128 colors. Load the resulting color arrays<br />; into the current color table.<br />quantized_image=COLOR_QUAN(image, 1, r, g, b, COLORS=128)<br />TVLCT, r, g, b<br /><br />; Display information about the original and<br />; quantized image arrays.<br />HELP, image, quantized_image<br /><br />; Display the original TrueColor alongside the<br />; quantized image.<br />WINDOW, XSIZE=700, YSIZE=371<br />TV, image, 0, /TRUE<br />TV, quantized_image, 1<br /><br />; Reset IDL to the original device setting<br />DEVICE, DECOMPOSED=orig_decomposed</p>
        <p>To quantize the image into 216 equal-volume color cubes, replace the call to COLOR_QUAN with the following:</p>
        <p class="Code">quantized_image=COLOR_QUAN(image, 1, r, g, b, CUBE=6)</p>
        <p>To export the quantized image to a GIF file:</p>
        <p class="Code">WRITE_GIF, 'path/to/file', quantized_image, r, g, b</p>
        <h2 class="API"><a name="C_854643309_997039"></a><a name="C_854643309_997039_PageTOC_COLOR_QUAN_"></a>Syntax</h2>
        <p class="Syntax"><i>Result</i> = COLOR_QUAN(<i> Image_R</i>, <i>Image_G</i>, <i>Image_B</i>, <i>R</i>, <i>G</i>, <i>B</i>)</p>
        <p>or</p>
        <p class="Syntax"><i>Result</i> = COLOR_QUAN( <i>Image</i>, <i>Dim</i>, <i>R</i>, <i>G</i>, <i>B </i>) </p>
        <p><b>Keywords:</b> [,&#160;<a href="#C_854643309_676177" class="selected">COLORS</a>=<i>integer</i>{2 to 256}] [,&#160;<a href="#C_854643309_676179" class="selected">CUBE</a>={2 | 3 | 4 | 5 | 6} | , <a href="#C_854643309_676185" class="selected">GET_TRANSLATION</a>=<i>variable</i> [,&#160;/MAP_ALL]] [,&#160;/<a href="#C_854643309_676181" class="selected">DITHER</a>] [,&#160;<a href="#C_854643309_676183" class="selected">ERROR</a>=<i>variable</i>] [,&#160;<a href="#C_854643309_676189" class="selected">TRANSLATION</a>=<i>vector</i>]</p>
        <p>The input image parameter can be passed as either three, separate color-component arrays (<i>Image_R</i>, <i>Image_G</i>, <i>Image_B</i>) or as a three-dimensional array containing all three components, <i>Image</i>, and a scalar, <i>Dim</i>, indicating the dimension over which the colors are interleaved.</p>
        <h2 class="API"><a name="C_854643309_1074908"></a><a name="C_854643309_37962"></a>Return Value</h2>
        <p>Returns a pseudo-color image composed of 2 to 256 colors.</p>
        <h2 class="API"><a name="C_854643309_676167"></a><a name="C_854643309_676167_PageTOC_COLOR_QUAN_"></a>Arguments</h2>
        <h3 class="Argument">Image_R, Image_G, Image_B</h3>
        <p>Arrays containing the red, green, and blue components of the decomposed TrueColor image. For best results, the input image(s) should be scaled to the range of 0 to 255.</p>
        <h3 class="Argument">Image</h3>
        <p>A three-dimensional array containing all three components of the TrueColor image.</p>
        <h3 class="Argument">Dim</h3>
        <p>A scalar that indicates the method of color interleaving in the <i>Image</i> parameter. A value of 1 indicates interleaving by pixel: (3, <i>n</i>,<i> m</i>). A value of 2 indicates interleaving by row: (<i>n</i>, 3, <i>m</i>). A value of 3 indicates interleaving by image: (<i>n</i>, <i>m</i>, 3).</p>
        <h3 class="Argument">R, G, B</h3>
        <p>Three output byte arrays containing the red, green, and blue components of the output palette.</p>
        <h2 class="API"><a name="C_854643309_676176"></a><a name="C_854643309_676176_PageTOC_COLOR_QUAN_"></a>Keywords</h2>
        <h3 class="Keyword"><a name="C_854643309_676177"></a><a name="C_854643309_676177_Keywords_COLOR_QUAN__"></a>COLORS</h3>
        <p>The number of colors in the output palette. This value must be at least 2 and not greater than 256. The default is the number of colors supported by the current graphics output device.</p>
        <h3 class="Keyword"><a name="C_854643309_676179"></a><a name="C_854643309_676179_Keywords_COLOR_QUAN__"></a>CUBE</h3>
        <p>If this keyword is set, the color space is divided into CUBE<sup>3</sup> volumes, to which the input image is quantized. This result is always Floyd-Steinberg dithered. The value of CUBE can range from 2 to 6; providing from 2<sup>3 </sup>= 8, to 6<sup>3 </sup>= 216 output colors. If this keyword is set, the COLORS, DITHER, and ERROR keywords are ignored.</p>
        <h3 class="Keyword"><a name="C_854643309_676181"></a><a name="C_854643309_676181_Keywords_COLOR_QUAN__"></a>DITHER</h3>
        <p>Set this keyword to dither the output image. Dithering can improve the appearance of the output image, especially when using relatively few colors.</p>
        <h3 class="Keyword"><a name="C_854643309_676183"></a><a name="C_854643309_676183_Keywords_COLOR_QUAN__"></a>ERROR</h3>
        <p>Set this optional keyword to a named variable. A measure of the quantization error is returned. This error is proportional to the square of the Euclidean distance, in RGB space, between corresponding colors in the original and output images.</p>
        <h3 class="Keyword"><a name="C_854643309_676185"></a><a name="C_854643309_676185_Keywords_COLOR_QUAN__"></a>GET_TRANSLATION</h3>
        <p>Set this keyword to a named variable in which the mapping between the original RGB triples (in the TrueColor image) and the resulting pseudo-color indices is returned as a vector. Do not use this keyword if CUBE is set.</p>
        <h3 class="Keyword"><a name="C_854643309_676187_Keywords_COLOR_QUAN__"></a>MAP_ALL</h3>
        <p>Set this keyword to establish a mapping for all possible RGB triples into pseudo-color indices. Set this keyword only if GET_TRANSLATION is also present. Note that mapping all possible colors requires more compute time and slightly degrades the quality of the resultant color matching.</p>
        <h3 class="Keyword"><a name="C_854643309_676189"></a><a name="C_854643309_676189_Keywords_COLOR_QUAN__"></a>TRANSLATION</h3>
        <p>Set this keyword to a vector of translation indices obtained by a previous call to COLOR_QUAN using the GET_TRANSLATION keyword. The resulting image is quantized using this vector.</p>
        <h2 class="API"><a name="C_854643309_35993"></a><a name="C_854643309_35993_PageTOC_COLOR_QUAN_"></a>Version History</h2>
        <table style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/VersionTable.css');" cellspacing="0" class="TableStyle_VersionTable">
            <col />
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColSep">
                        <p>Pre 4.0</p>
                    </td>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColEnd">
                        <p>Introduced</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2 class="API"><a name="C_854643309_1052126"></a><a name="C_854643309_1052126_PageTOC_COLOR_QUAN_"></a>See Also</h2>
        <p><a href="../P/PSEUDO.htm#P_817877613_759413">PSEUDO</a>
        </p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>