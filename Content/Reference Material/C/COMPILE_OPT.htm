<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Routines (alphabetical)|Routines: C">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>COMPILE_OPT </title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/TableStyles/Description.css" rel="stylesheet" />
        <link href="../../Resources/TableStyles/VersionTable.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../../images/ref_part1.htm">Routines (alphabetical)</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="C_list.htm">Routines: C</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">COMPILE_OPT</span>
        </div>
        <h1 class="Routine"><a name="C_854643309_998462"></a><a name="kanchor299"></a><a name="C_854643309_82933"></a>COMPILE_OPT </h1>
        <p>The COMPILE_OPT statement allows you to give the IDL compiler information that changes some of the default rules for compiling the function or procedure within which the COMPILE_OPT statement appears.</p>
        <p>We recommend the use of</p>
        <p class="Code">COMPILE_OPT IDL2</p>
        <p>in all new code intended for use in a reusable library. We further recommend the use of</p>
        <p class="Code">COMPILE_OPT idl2, HIDDEN</p>
        <p>in all such routines that are not intended to be called directly by regular users (e.g. helper routines that are part of a larger package).</p>
        <h2 class="API"><a name="C_854643309_999586"></a><a name="C_854643309_999586_PageTOC_COMPILE_OPT_"></a>Syntax</h2>
        <p class="Syntax">COMPILE_OPT <i>opt</i><sub class="italic">1</sub> [, <i>opt</i><sub class="italic">2</sub>, ..., <i>opt</i><sub class="italic">n</sub>]</p>
        <h2 class="API"><a name="C_854643309_999588"></a><a name="C_854643309_999588_PageTOC_COMPILE_OPT_"></a>Arguments</h2>
        <h3 class="Argument">opt<sub class="italic">n</sub></h3>
        <p>This argument can be any of the following:</p>
        <ul>
            <li value="1"><b>IDL2</b> — A shorthand way of saying:</li>
        </ul>
        <p class="Code">&#160;&#160;&#160;COMPILE_OPT DEFINT32, STRICTARR</p>
        <ul>
            <li value="1">
                <p><b>DEFINT32</b> — IDL should assume that lexical integer constants default to the 32-bit type rather than the usual default of 16-bit integers. This takes effect from the point where the COMPILE_OPT statement appears in the routine being compiled and remains in effect until the end of the routine. The following table illustrates how the DEFINT32 argument changes the interpretation of integer constants.</p>
                <table style="mc-table-style: url('../../Resources/TableStyles/Description.css');margin-left: 0;margin-right: auto;caption-side: bottom;" cellspacing="0" class="TableStyle_Description">
                    <col />
                    <col />
                    <col />
                    <thead>
                        <tr>
                            <td class="TableStyle_Description_Head_0_0_RowSep_ColSep">
                                <p>Constant</p>
                            </td>
                            <td class="TableStyle_Description_Head_0_0_RowSep_ColSep">
                                <p>Normal Type</p>
                            </td>
                            <td class="TableStyle_Description_Head_0_0_RowSep_ColEnd">
                                <p>DEFINT32 Type</p>
                            </td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                                <p><b>Without type specifier:</b>
                                </p>
                            </td>
                            <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                                <p>&#160;</p>
                            </td>
                            <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                                <p>&#160;</p>
                            </td>
                        </tr>
                        <tr>
                            <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                                <p><code>42</code>
                                </p>
                            </td>
                            <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                                <p>INT</p>
                            </td>
                            <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                                <p>LONG</p>
                            </td>
                        </tr>
                        <tr>
                            <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                                <p><code>'2a'x</code>
                                </p>
                            </td>
                            <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                                <p>INT</p>
                            </td>
                            <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                                <p>LONG</p>
                            </td>
                        </tr>
                        <tr>
                            <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                                <p><code>42u</code>
                                </p>
                            </td>
                            <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                                <p>UINT</p>
                            </td>
                            <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                                <p>ULONG</p>
                            </td>
                        </tr>
                        <tr>
                            <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                                <p><code>'2a'xu</code>
                                </p>
                            </td>
                            <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                                <p>UINT</p>
                            </td>
                            <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                                <p>ULONG</p>
                            </td>
                        </tr>
                        <tr>
                            <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                                <p><b>With type specifier:</b>
                                </p>
                            </td>
                            <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                                <p>&#160;</p>
                            </td>
                            <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                                <p>&#160;</p>
                            </td>
                        </tr>
                        <tr>
                            <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                                <p><code>0b</code>
                                </p>
                            </td>
                            <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                                <p>BYTE</p>
                            </td>
                            <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                                <p>BYTE</p>
                            </td>
                        </tr>
                        <tr>
                            <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                                <p><code>0s</code>
                                </p>
                            </td>
                            <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                                <p>INT</p>
                            </td>
                            <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                                <p>INT</p>
                            </td>
                        </tr>
                        <tr>
                            <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                                <p><code>0l</code>
                                </p>
                            </td>
                            <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                                <p>LONG</p>
                            </td>
                            <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                                <p>LONG</p>
                            </td>
                        </tr>
                        <tr>
                            <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                                <p><code>42.0</code>
                                </p>
                            </td>
                            <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                                <p>FLOAT</p>
                            </td>
                            <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                                <p>FLOAT</p>
                            </td>
                        </tr>
                        <tr>
                            <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                                <p><code>42d</code>
                                </p>
                            </td>
                            <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                                <p>DOUBLE</p>
                            </td>
                            <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                                <p>DOUBLE</p>
                            </td>
                        </tr>
                        <tr>
                            <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                                <p><code>42us</code>
                                </p>
                            </td>
                            <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                                <p>UINT</p>
                            </td>
                            <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                                <p>UINT</p>
                            </td>
                        </tr>
                        <tr>
                            <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                                <p><code>42ul</code>
                                </p>
                            </td>
                            <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                                <p>ULONG</p>
                            </td>
                            <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                                <p>ULONG</p>
                            </td>
                        </tr>
                        <tr>
                            <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                                <p><code>42ll</code>
                                </p>
                            </td>
                            <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                                <p>LONG64</p>
                            </td>
                            <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                                <p>LONG64</p>
                            </td>
                        </tr>
                        <tr>
                            <td class="TableStyle_Description_Body_0_0_RowEnd_ColSep">
                                <p><code>42ull</code>
                                </p>
                            </td>
                            <td class="TableStyle_Description_Body_0_0_RowEnd_ColSep">
                                <p>ULONG64</p>
                            </td>
                            <td class="TableStyle_Description_Body_0_0_RowEnd_ColEnd">
                                <p>ULONG64</p>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </li>
        </ul>
        <ul>
            <li value="1"><b>HIDDEN</b> — This routine should not be displayed by HELP, unless the FULL keyword to HELP is used. This directive can be used to hide helper routines that regular IDL users are not interested in seeing.</li>
        </ul>
        <p class="indent">A side-effect of making a routine hidden is that IDL will not print a “Compile module” message for it when it is compiled from the library to satisfy a call to it. This makes hidden routines appear built-in to the user.</p>
        <ul>
            <li value="1"><b>LOGICAL_PREDICATE</b> — When running this routine, from the point where the COMPILE_OPT statement appears until the end of the routine, treat any non-zero or non-NULL predicate value as “true,” and any zero or NULL predicate value as “false.” </li>
        </ul>
        <p class="indent"><b>Background</b>
        </p>
        <p class="indent">A predicate expression is an expression that is evaluated as being “true” or “false” as part of a statement that controls program execution. IDL evaluates such expressions in the following contexts:</p>
        <ul>
            <li class="Indent" value="1"><code>IF...THEN...ELSE</code> statements</li>
            <li class="Indent" value="2"><code>?&#160;:</code> inline conditional expressions</li>
            <li class="Indent" value="3"><code>WHILE...DO</code> statements</li>
            <li class="Indent" value="4"><code>REPEAT...UNTIL</code> statements</li>
            <li class="Indent" value="5">when evaluating the result from an INIT function method to determine if a call to OBJ_NEW successfully created a new object</li>
        </ul>
        <p class="indent">By default, IDL uses the following rules to determine whether an expression is true or false:</p>
        <ul>
            <li class="Indent" value="1"><b>Integer</b> — An integer is considered true if its least significant bit is 1, and false otherwise. Hence, odd integers are true and even integers (including zero) are false. This interpretation of integer truth values is sometimes referred to as “bitwise,” reflecting the fact that the value of the least significant bit determines the result.</li>
            <li class="Indent" value="2"><b>Other</b> — Non-integer numeric types are true if they are non-zero, and false otherwise. String and heap variables (pointers and object references) are true if they are non-NULL, and false otherwise.</li>
        </ul>
        <p class="indent">The LOGICAL_PREDICATE option alters the way IDL evaluates predicate expressions. When LOGICAL_PREDICATE is set for a routine, IDL uses the following rules to determine whether an expression is true or false:</p>
        <ul>
            <li class="Indent" value="1"><b>Numeric Types </b>— A number is considered true if its value is non-zero, and false otherwise.</li>
            <li class="Indent" value="2"><b>Other Types</b> — Strings and heap variables (pointers and object references) are considered true if they are non-NULL, or false otherwise.</li>
        </ul>
        <p class="indent"><b>Note on the NOT Operator</b>
        </p>
        <p class="indent">When using the LOGICAL_PREDICATE compile option, you must be aware of the fact that applying the IDL NOT operator to integer data computes a <i>bitwise</i> negation (1’s complement), and is generally not applicable for use in logical computations. Consider the common construction:</p>
        <p class="Code_Indented">WHILE (NOT EOF(lun)) DO BEGIN</p>
        <p class="Code_Indented">...</p>
        <p class="Code_Indented">ENDWHILE </p>
        <p class="indent">The EOF function returns 0 while the file specified by LUN has data left, and returns 1 when hits the end of file. However, the expression “NOT 1” has the numeric value &#8209;2. When the LOGICAL_PREDICATE option is not in use, the WHILE statement sees -2 as false; if the LOGICAL_PREDICATE is in use, &#8209;2 is a true value and the above loop will not terminate as desired. </p>
        <p class="indent">The proper way to write the above loop uses the ~ logical negation operator:</p>
        <p class="Code_Indented">WHILE (~ EOF(lun)) DO BEGIN</p>
        <p class="Code_Indented">...</p>
        <p class="Code_Indented">ENDWHILE </p>
        <p class="indent">Note that this version will work properly whether or not the LOGICAL_PREDICATE compile option is in use. Logical negation operations should always use the ~ operator in preference to the NOT operator, reserving NOT exclusively for bitwise computations. </p>
        <ul>
            <li value="1"><b>NOSAVE</b> — If this directive is set, then by default the routine will not be saved into IDL code save files. You can override this behavior by specifying the routine name as one of the input arguments to <a href="../S/SAVE.htm">SAVE</a>. In that case the NOSAVE compile option will be ignored.</li>
            <li value="2"><b>OBSOLETE</b> — If the user has !WARN.OBS_ROUTINES set to True, attempts to compile a call to this routine will generate warning messages that this routine is obsolete. This directive can be used to warn people that there may be better ways to perform the desired task.</li>
            <li value="3"><b>STATIC</b> — The STATIC compile option indicates that the user is allowed to call this method as a static class method. This compile option is only useful for methods and is ignored for regular functions and procedures. Note that methods marked as STATIC can also be called on an object instance as a "normal" instance method. However, if you attempt to make a static call to a method that is not marked as STATIC, you will receive a runtime error. See <a href="../../Objects/Creating_Static_Methods.htm">Creating Static Methods</a> and <a href="../../Objects/Static_Methods.htm">Static Methods</a> for details.</li>
            <li value="4"><b>STRICTARR</b> — While compiling this routine, IDL will not allow the use of parentheses to index arrays, reserving their use only for functions. Square brackets are then the only way to index arrays. Use of this directive will prevent the addition of a new function in future versions of IDL, or new libraries of IDL code from any source, from changing the meaning of your code, and is an especially good idea for library functions.</li>
        </ul>
        <p class="indent">Use of STRICTARR can eliminate many uses of the FORWARD_FUNCTION definition.</p>
        <p class="NoteIndent" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>STRICTARR has no effect on the use of parentheses to reference structure tags using the tag index, which is not an array indexing operation. For example, no syntax error will occur when compiling the following code:<br /></p>
        <p class="Code_Indented"><code>COMPILE_OPT STRICTARR</code>
        </p>
        <p class="Code_Indented"><code>mystruct = {a:0, b:1}</code>
        </p>
        <p class="Code_Indented"><code>byindex_0 = mystruct.(0)</code>
        </p>
        <ul>
            <li value="1"><b>STRICTARRSUBS</b> — When IDL subscripts one array using another array as the source of array indices, the default behavior is to clip any out-of-range indices into range and then quietly use the resulting data without error. This behavior is described in <a href="../../Creating IDL Programs/Components of the IDL Language/Understanding_Array_Subs.htm#arrays_3727706888_515270">Understanding Array Subscripts</a>. Specifying STRICTARRSUBS will instead cause IDL to treat such out-of-range array subscripts within the body of the routine containing the COMPILE_OPT statement as an error. The position of the STRICTARRSUBS option within the module is not important: All subscripting operations within the entire body of the specified routine will be treated this way.</li>
        </ul>
        <h2 class="API"><a name="C_854643309_1052152"></a><a name="C_854643309_1052152_PageTOC_COMPILE_OPT_"></a>Version History</h2>
        <table style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/VersionTable.css');" cellspacing="0" class="TableStyle_VersionTable">
            <col />
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_ColSep">
                        <p>5.3</p>
                    </td>
                    <td class="TableStyle_VersionTable_Body_0_0_ColEnd">
                        <p>Introduced</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_RowSep_ColSep">
                        <p>5.6</p>
                    </td>
                    <td class="TableStyle_VersionTable_Body_0_0_RowSep_ColEnd">
                        <p>Added STRICTARRSUBS option</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_ColSep">
                        <p>6.0</p>
                    </td>
                    <td class="TableStyle_VersionTable_Body_0_0_ColEnd">
                        <p>Added LOGICAL_PREDICATE option</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_RowSep_ColSep">8.3</td>
                    <td class="TableStyle_VersionTable_Body_0_0_RowSep_ColEnd">Added STATIC option</td>
                </tr>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColSep">
                        <p>8.4</p>
                    </td>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColEnd">Added NOSAVE option</td>
                </tr>
            </tbody>
        </table>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>