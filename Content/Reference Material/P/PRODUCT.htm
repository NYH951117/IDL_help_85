<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Routines (alphabetical)|Routines: P">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>PRODUCT</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/TableStyles/VersionTable.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../../images/ref_part1.htm">Routines (alphabetical)</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="P_list.htm">Routines: P</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">PRODUCT</span>
        </div>
        <h1 class="Routine"><a name="P_817877613_1079789"></a><a name="P_817877613_39214"></a>PRODUCT</h1>
        <p><a name="kanchor2093"></a>The PRODUCT function returns the product of elements within an array. The product of the array elements over a given dimension is returned if the <i>Dimension</i> argument is present. Because the product can easily overflow, the product is computed using double-precision arithmetic and the <i>Result</i> is double precision.</p>
        <p class="Tip" data-mc-autonum="&lt;b&gt;Tip: &lt;/b&gt;"><span class="autonumber"><span><b>Tip: </b></span></span>If your array has a mix of very large and very small values, the product may underflow or overflow during the computation, even though the final result would be within double-precision limits. In this case, you should not use PRODUCT, but instead compute the product by taking the logarithm, using the TOTAL function, and then taking the exponential: <i>Result</i> = EXP(TOTAL(ALOG(<i>Array</i>))).</p>
        <h2 class="API"><a name="P_817877613_1079810"></a><a name="P_817877613_1079810_PageTOC_PRODUCT_"></a>Examples</h2>
        <p>To find the product of all elements in a one-dimensional array:</p>
        <p class="Code">; Define a one-dimensional array:<br />array = [20, 10, 5, 5, 3]<br /><br />; Find the product of the array elements:<br />prod = PRODUCT(array)<br /><br />; Print the results:<br />PRINT, 'Product of Array = ', prod</p>
        <p>IDL prints:</p>
        <p class="Code">Product of Array =        15000.000</p>
        <p>Now find the product of elements in a two-dimensional array:</p>
        <p class="Code">; Define a two-dimensional array:<br />array = FINDGEN(4,4) + 1<br /><br />; Find the product of all array elements:<br />prodAll = PRODUCT(array)<br /><br />; Find the product along the first dimension:<br />prod1 = PRODUCT(array, 1)<br /><br />; Find the product along the second dimension:<br />prod2 = PRODUCT(array, 2)<br /><br />; Print the results:<br />PRINT, 'Product of all elements = ', prodAll<br />PRINT, 'Product along first dimension: '<br />PRINT, prod1<br />PRINT, 'Product along second dimension: '<br />PRINT, prod2</p>
        <p>IDL prints:</p>
        <p class="Code">Product of all elements   2.0922790e+013</p>
        <p class="Code">Product along first dimension: </p>
        <p class="Code"> 24.000000       1680.0000       11880.000       43680.000</p>
        <p class="Code">Product along second dimension: </p>
        <p class="Code"> 585.00000       1680.0000       3465.0000       6144.0000</p>
        <h2 class="API"><a name="P_817877613_1079792"></a><a name="P_817877613_1079792_PageTOC_PRODUCT_"></a>Syntax</h2>
        <p class="Syntax"><i>Result</i> = PRODUCT(<i>Array</i> [,&#160;<i>Dimension</i>] [,&#160;/<a href="#P_817877613_1088999" class="selected">CUMULATIVE</a>] [,&#160;/<a href="#P_817877613_1111663" class="selected">INTEGER</a>] [,&#160;/<a href="#P_817877613_1089001" class="selected">NAN</a>] [,&#160;/<a href="#P_817877613_1112722" class="selected">PRESERVE_TYPE</a>] )</p>
        <h2 class="API"><a name="P_817877613_1085430"></a><a name="P_817877613_86129"></a>Return Value</h2>
        <p>Returns the product of the elements of <i>Array</i>.</p>
        <h2 class="API"><a name="P_817877613_1079794"></a><a name="P_817877613_1079794_PageTOC_PRODUCT_"></a>Arguments</h2>
        <h3 class="Argument">Array</h3>
        <p>The array for which to compute the product. This array can be of any basic type except string.</p>
        <h3 class="Argument">Dimension</h3>
        <p>An optional argument specifying the dimension over which to compute the product, starting at one. If this argument is not present or zero, the product of all the array elements is returned. If this argument is present, the result is an array with one less dimension than <i>Array</i>. </p>
        <p>For example, if the dimensions of <i>Array</i> are N1, N2, N3, and <i>Dimension</i> is 2, the dimensions of the result are (N1, N3), and element (<i>i</i>,<i>j</i>) of the result contains the product:</p>
        <p>
            <img src="../../images/22_1.jpg" />
        </p>
        <h2 class="API"><a name="P_817877613_1079803"></a><a name="P_817877613_1079803_PageTOC_PRODUCT_"></a>Keywords</h2>
        <h3 class="Keyword"><a name="P_817877613_1088999"></a><a name="P_817877613_1088999_Keywords_PRODUCT_"></a>CUMULATIVE</h3>
        <p>If this keyword is set, the result is an array of the same size as the input, with each element, <i>i</i>, containing the product of the input array elements 0 to <i>i</i>. This keyword also works with the <i>Dimension</i> parameter, in which case the cumulative product is performed over the given dimension. Note that if the input only has a single element, then a scalar is returned.</p>
        <p class="Tip" data-mc-autonum="&lt;b&gt;Tip: &lt;/b&gt;"><span class="autonumber"><span><b>Tip: </b></span></span>If the input array is a temporary variable or an expression, and the result type matches the input type (for example by using the PRESERVE_TYPE keyword), then PRODUCT will perform the cumulative product in place and no additional memory will be used.</p>
        <h3 class="Keyword"><a name="P_817877613_1111663"></a><a name="P_817877613_75474"></a>INTEGER</h3>
        <p>Set this keyword to perform the PRODUCT using integer arithmetic, and to return an integer result. If <i>Array</i> is of type ULONG64 then unsigned 64-bit integers are used for the computation and the Result is of type ULONG64, otherwise signed 64-bit integers are used and the Result is of type LONG64. If <i>Array</i> is complex and INTEGER is set, then only the real part of each value is used for the computation.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>If <i>Array</i> has a large number of values or the values themselves are large, then the PRODUCT with the INTEGER keyword may easily overflow the largest 64-bit integer and return an incorrect result. In this case you may want to avoid using the INTEGER keyword.</p>
        <h3 class="Keyword"><a name="P_817877613_1089001"></a><a name="P_817877613_1089001_Keywords_PRODUCT_"></a>NAN</h3>
        <p>Set this keyword to cause the routine to check for occurrences of the IEEE floating-point values <i>NaN</i> or <i>Infinity</i> in the input data. Elements with the value <i>NaN</i> or <i>Infinity</i> are treated as missing data with the value 1.</p>
        <h3 class="Keyword"><a name="P_817877613_1112722"></a><a name="P_817877613_90683"></a>PRESERVE_TYPE</h3>
        <p>Set this keyword to perform the PRODUCT using the input type, and to return a result of the same type. The INTEGER keyword is ignored if PRESERVE_TYPE is set.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>For byte or integer data the PRODUCT with PRESERVE_TYPE may easily overflow the largest value for that type. In these cases you may want to use the INTEGER keyword instead.</p>
        <h3>Thread Pool Keywords</h3>
        <p>This routine is written to make use of IDL's thread pool, which can increase execution speed on systems with multiple CPUs. The values stored in the !CPU system variable control whether IDL uses the thread pool for a given computation. In addition, you can use the thread pool keywords TPOOL_MAX_ELTS, TPOOL_MIN_ELTS, and TPOOL_NOTHREAD to override the defaults established by !CPU for a single invocation of this routine. See <a href="../../Creating IDL Programs/Appendices/tpoolkeyw.htm#tpoolkeyw_2501860834_317209">Thread Pool Keywords</a>.</p>
        <h2 class="API"><a name="P_817877613_1079845"></a><a name="P_817877613_1079845_PageTOC_PRODUCT_"></a>Version History</h2>
        <table style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/VersionTable.css');" cellspacing="0" class="TableStyle_VersionTable">
            <col />
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_ColSep">
                        <p>5.6</p>
                    </td>
                    <td class="TableStyle_VersionTable_Body_0_0_ColEnd">
                        <p>Introduced</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColSep">
                        <p>6.1</p>
                    </td>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColEnd">
                        <p>Added INTEGER and PRESERVE_TYPE keywords</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2 class="API"><a name="P_817877613_1079847"></a><a name="P_817877613_1079847_PageTOC_PRODUCT_"></a>See Also</h2>
        <p><a href="../F/FACTORIAL.htm#F_848155245_54485">FACTORIAL</a>, <a href="../T/TOTAL.htm#T_809226861_1069724">TOTAL</a></p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>