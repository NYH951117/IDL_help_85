<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Routines (alphabetical)|Routines: W">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>WIDGET_WINDOW</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/TableStyles/VersionTable.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../../images/ref_part1.htm">Routines (alphabetical)</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="W_list.htm">Routines: W</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">WIDGET_WINDOW</span>
        </div>
        <h1 class="Routine">WIDGET_WINDOW<a name="kanchor2906"></a></h1>
        <p>The WIDGET_WINDOW function creates a graphics widget.</p>
        <h2 class="API">Example
		</h2>
        <p>The following lines create a simple widget application. For a more complete example, see the end of this topic.</p>
        <p class="Code">; Create the widgets.</p>
        <p class="Code">wBase = WIDGET_BASE(/COLUMN)</p>
        <p class="Code">wDraw = WIDGET_WINDOW(wBase,  X_SCROLL_SIZE=400, Y_SCROLL_SIZE=400)</p>
        <p class="Code">WIDGET_CONTROL, wBase, /REALIZE</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Retrieve the newly-created Window object.</p>
        <p class="Code">WIDGET_CONTROL, wDraw, GET_VALUE=oWin</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Make sure this is the current window</p>
        <p class="Code">oWin.Select</p>
        <p class="Code">&#160;</p>
        <p class="Code">p = PLOT(/TEST, /CURRENT, /FILL_BACKGROUND)</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = WIDGET_WINDOW(<i>Parent </i>[, <a href="#DRAG_NOT" class="selected">DRAG_NOTIFY</a>=<i>string</i>] [, /<a href="#DROP_EVE" class="selected">DROP_EVENTS</a>] [, <a href="#EVENT_FU" class="selected">EVENT_FUNC</a>=<i>string</i>] [, <a href="#EVENT_HANDLER" class="selected">EVENT_HANDLER</a>=<i>objref</i>] [, <a href="#FRAME" class="selected">FRAME</a>=<i>integer</i>] [, <a href="#GROUP_LE" class="selected">GROUP_LEADER</a>=<i>widget ID</i>] [, <a href="#IGNORE_A" class="selected">IGNORE_ACCELERATORS</a>=<i>value</i>] [, <a href="#KEYBOARD_HANDLER" class="selected">KEYBOARD_HANDLER</a>=<i>function</i>] [, <a href="#KILL_NOT" class="selected">KILL_NOTIFY</a>=<i>string</i>] [, <a href="#MOUSE_DOWN" class="selected">MOUSE_DOWN_HANDLER</a>=<i>function</i>] [, <a href="#MOUSE_DOWN" class="selected">MOUSE_MOTION_HANDLER</a>=<i>function</i>] [, <a href="#MOUSE_DOWN" class="selected">MOUSE_UP_HANDLER</a>=<i>function</i>] [, <a href="#MOUSE_DOWN" class="selected">MOUSE_WHEEL_HANDLER</a>=<i>function</i>] [, /<a href="#NO_COPY" class="selected">NO_COPY</a>] [, <a href="#NOTIFY_R" class="selected">NOTIFY_REALIZE</a>=<i>string</i>] [, <a href="#RENDERER" class="selected">RENDERER</a>={0|1}] [, <a href="#RESOURCE" class="selected">RESOURCE_NAME</a>=<i>string</i>] [, <a href="#SELECTION_CHANGE_HANDLER" class="selected">SELECTION_CHANGE_HANDLER</a>=<i>function</i>] [, <a href="#SENSITIV" class="selected">SENSITIVE</a>=0] [, <a href="#TOOLTIP" class="selected">TOOLTIP</a>=<i>string</i>] [, /<a href="#TRACKING" class="selected">TRACKING_EVENTS</a>] [, <a href="#UNAME" class="selected">UNAME</a>=<i>string</i>] [, <a href="#UNITS" class="selected">UNITS</a>={0|1|2}] [, <a href="#UVALUE" class="selected">UVALUE</a>=<i>variable</i>] [, <a href="#X_SCROLL" class="selected">X_SCROLL_SIZE</a>=<i>value</i>] [, <a href="#Y_SCROLL" class="selected">Y_SCROLL_SIZE</a>=<i>value</i>] [, <a href="#XSIZE" class="selected">XSIZE</a>=<i>value</i>] [, <a href="#YSIZE" class="selected">YSIZE</a>=<i>value</i>] [, <a href="#XOFFSET" class="selected">XOFFSET</a>=<i>value</i>] [, <a href="#YOFFSET" class="selected">YOFFSET</a>=<i>value</i>]) </p>
        <h2 class="API">Return Value </h2>
        <p>The returned value of this function is the widget ID of the newly-created widget.</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">Parent </h3>
        <p>The widget ID of the parent widget.</p>
        <h2 class="API">Keywords</h2>
        <p>Keywords are applied <i>only</i> during the initial creation of the graphic.</p>
        <h3 class="Keyword"><a name="DRAG_NOT"></a>DRAG_NOTIFY</h3>
        <p>Set this keyword equal to a string containing the name of a function that will be automatically called as the end-user drags over the widget. Alternatively, set this keyword equal to the string <code>&lt;default&gt;</code> (including the &lt; and &gt; characters) to use the system default callback. See the <a href="WIDGET_DRAW.htm">WIDGET_DRAW</a> routine for details on using this keyword.</p>
        <h3 class="Keyword"><a name="DROP_EVE"></a>DROP_EVENTS</h3>
        <p>Use this keyword to specify whether or not the widget will generate drop events when the user drags an item onto the draw area with the mouse cursor and releases the mouse button. A value of 1 (one) causes the widget to generate drop events and a value of 0 (zero) causes the widget to not generate drop events. The default is to not generate drop events. Specifying a DRAG_NOTIFY callback does not affect a widget’s ability to generate drop events.  See the <a href="WIDGET_DRAW.htm">WIDGET_DRAW</a> routine for details on using this keyword.</p>
        <h3 class="Keyword"><a name="EVENT_FU"></a>EVENT_FUNC</h3>
        <p>A string containing the name of a function to be called by the WIDGET_EVENT function when an event arrives from a widget in the widget hierarchy rooted at the newly-created widget.</p>
        <p><a name="EVENT_HANDLER"></a>
        </p>
        <h3 class="Property">EVENT_HANDLER</h3>
        <p>Set this property to an object reference to be used when events are received by the window. The object must be a subclass of GraphicsEventAdapter. See&#160;<a href="../../GuideMe/GraphicsEventHandler.htm">Creating an Event Handler Class to Control Events</a> for details on how to write this object class.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>The EVENT_HANDLER class is intended to be a convenient alternative to the procedural event handlers. If you specify both the EVENT_HANDLER property and an event handler function (MOUSE_DOWN_HANDLER for example), then the object method will be called first. If the object method returns a value of 1, then execution will continue and the handler function will then be called. If the object method returns 0, then the handler function will not be called and the default event handling will also be skipped.</p>
        <h3 class="Keyword"><a name="FRAME"></a>FRAME</h3>
        <p>The value of this keyword specifies the width of a frame in units specified by the UNITS keyword (pixels are the default) to be drawn around the borders of the widget. Note that this keyword is only a hint to the toolkit, and may be ignored in some instances.</p>
        <h3 class="Keyword"><a name="GROUP_LE"></a>GROUP_LEADER</h3>
        <p>The widget ID of an existing widget that serves as “group leader” for the newly-created widget. When a group leader is killed, for any reason, all widgets in the group are also destroyed. </p>
        <p>A given widget can be in more than one group. The WIDGET_CONTROL procedure can be used to add additional group associations to a widget. It is not possible to remove a widget from an existing group.</p>
        <h3 class="Keyword"><a name="IGNORE_A"></a>IGNORE_ACCELERATORS<a name="kanchor2907"></a></h3>
        <p>Set this keyword to specify what WIDGET_BUTTON accelerators are to be ignored when this graphics widget has keyboard focus. Setting IGNORE_ACCELERATORS allows a defined list of accelerators to be processed by the graphics widget instead of by the conflicting accelerated button. Valid values are:</p>
        <ul>
            <li value="1">A string or string array containing any value that is legal for WIDGET_BUTTON’s <a href="WIDGET_BUTTON.htm#W_811389549_1069174">ACCELERATOR</a> keyword </li>
            <li value="2">The number 1, indicating all accelerators should be ignored</li>
        </ul>
        <p>Ordinarily, accelerators are processed before keyboard events reach the widget that has the keyboard focus. Setting IGNORE_ACCELERATORS allows a defined list of accelerators to be processed by the graphics widget instead of by associated buttons or menu items. Once the graphics widget loses focus, all specified accelerators are automatically re-enabled. </p>
        <p>See  <a href="../../Creating IDL Programs/Creating Applications in IDL/Enhancing_Widget_Applica.htm#widget_techniques_4218446668_150796">Disabling Button Widget Accelerators</a> for usage details and examples.</p>
        <p><a name="KEYBOARD_HANDLER"></a>
        </p>
        <h3 class="Property">KEYBOARD_HANDLER</h3>
        <p>Set this property to the name of a function that will be called when a key is pressed or released. See <a href="../../GuideMe/KeyboardEventFunctions.htm">Creating Keyboard Event Functions</a> for details on how to write these functions.</p>
        <p class="Tip" data-mc-autonum="&lt;b&gt;Tip: &lt;/b&gt;"><span class="autonumber"><span><b>Tip: </b></span></span>Instead of writing separate functions for each of the event handlers, you may find it convenient to create a single object class and use the EVENT_HANDLER property instead.</p>
        <h3 class="Keyword"><a name="KILL_NOT"></a>KILL_NOTIFY</h3>
        <p>Set this keyword to a string that contains the name of a procedure to be called automatically when the specified widget dies. Each widget is allowed a single such “callback” procedure. It can be removed by setting the routine to an empty string (<code>''</code>).</p>
        <p>The callback routine is called with the widget identifier as its only argument. At that point, the widget identifier can only be used with the WIDGET_CONTROL procedure to get or set the user value. All other requests that require a widget ID are disallowed for the target widget. The callback is not issued until the WIDGET_EVENT function is called.</p>
        <p><a name="MOUSE_DOWN"></a>
        </p>
        <h3 class="Property">MOUSE_DOWN_HANDLER</h3>
        <p>Set this property to the name of a user-defined function that is called when the mouse button is pressed.</p>
        <h3 class="Property">MOUSE_MOTION_HANDLER</h3>
        <p>Set this property to the name of a user-defined function that is called when the mouse is moved.</p>
        <h3 class="Property">MOUSE_UP_HANDLER</h3>
        <p>Set this property to the name of a user-defined function that is called when the mouse button is released.</p>
        <h3 class="Property">MOUSE_WHEEL_HANDLER</h3>
        <p>Set this property to the name of a user-defined function that is called when the mouse wheel is moved.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>See&#160;<a href="../../GuideMe/MouseEventFunctions.htm">Creating Functions to Control Mouse Events</a> for details on how to write the mouse event functions.</p>
        <p class="Tip" data-mc-autonum="&lt;b&gt;Tip: &lt;/b&gt;"><span class="autonumber"><span><b>Tip: </b></span></span>Instead of writing separate functions for each of the mouse event handlers, you may find it convenient to create a single object class and use the EVENT_HANDLER property instead.</p>
        <h3 class="Keyword"><a name="NO_COPY"></a>NO_COPY</h3>
        <p>Set this keyword to 1 to take the data away from the UVALUE variable and attach it directly to the widget. After the WIDGET_WINDOW function returns, the UVALUE variable will then be undefined. This keyword is ignored if UVALUE is not present.</p>
        <h3 class="Keyword"><a name="NOTIFY_R"></a>NOTIFY_REALIZE</h3>
        <p>Set this keyword to a string that contains the name of a procedure to be called automatically when the specified widget is realized. This callback occurs just once (because widgets are realized only once). Each widget is allowed a single such “callback” procedure. The callback routine is called with the widget ID as its only argument.</p>
        <h3 class="Keyword"><a name="RENDERER"></a>RENDERER</h3>
        <p>Set this keyword to an integer value indicating which graphics renderer to use when drawing objects within the window. Valid values are:</p>
        <ul>
            <li value="1">0 = Platform native OpenGL</li>
            <li value="2">1 = IDL’s software implementation</li>
        </ul>
        <p>By default, your platform’s native OpenGL implementation is used. If your platform does not have a native OpenGL implementation, IDL’s software implementation is used regardless of the value of this property.</p>
        <h3 class="Keyword"><a name="RESOURCE"></a>RESOURCE_NAME</h3>
        <p>A string containing an X Window System resource name to be applied to the widget. See RESOURCE_NAME for a complete discussion of this keyword.</p>
        <p><a name="SELECTION_CHANGE_HANDLER"></a>
        </p>
        <h3 class="Property">SELECTION_CHANGE_HANDLER</h3>
        <p>Set this property to the name of a function  that is called when a graphic is selected or deselected. See&#160; <a href="../../GuideMe/Selection Change Event Handler.htm">Creating Selection Change Event Handlers</a> for details on how to write these functions.</p>
        <p class="Tip" data-mc-autonum="&lt;b&gt;Tip: &lt;/b&gt;"><span class="autonumber"><span><b>Tip: </b></span></span>Instead of writing separate functions for each of the event handlers, you may find it convenient to create a single object class and use the EVENT_HANDLER property instead.</p>
        <h3 class="Keyword"><a name="SENSITIV"></a>SENSITIVE</h3>
        <p>Set this keyword to 0 to turn off all event processing for the widget. The default is 1, which enables all event processing. After creating the widget hierarchy, you can change the sensitivity state using the SENSITIVE keyword with the <a href="WIDGET_CONTROL.htm#W_811389549_1232714">WIDGET_CONTROL</a> procedure.</p>
        <h3 class="Keyword"><a name="TOOLTIP"></a>TOOLTIP</h3>
        <p>Set this keyword to a string that will be displayed when the cursor hovers over the widget. For UNIX platforms, this string must be non-zero in length.</p>
        <h3 class="Keyword"><a name="TRACKING"></a>TRACKING_EVENTS</h3>
        <p>Set this keyword to cause widget tracking events to be issued for the widget whenever the mouse pointer enters or leaves the region covered by that widget. For the structure of tracking events, see TRACKING_EVENTS in the documentation for WIDGET_BASE.</p>
        <h3 class="Keyword"><a name="UNAME"></a>UNAME </h3>
        <p>Set this keyword to a string that can be used to identify the widget in your code. You can associate a name with each widget in a specific hierarchy, and then use that name to query the widget hierarchy and get the correct widget ID.</p>
        <p>To query the widget hierarchy, use the <a href="WIDGET_INFO.htm#W_811389549_680333">WIDGET_INFO</a> function with the FIND_BY_UNAME keyword. The UNAME should be unique to the widget hierarchy because the FIND_BY_UNAME keyword returns the ID of the first widget with the specified name.</p>
        <h3 class="Keyword"><a name="UNITS"></a>UNITS</h3>
        <p>Set this keyword to specify the units used when <i>supplying</i> measurements or position values. Set UNITS equal to 0 to specify that all measurements are in pixels (this is the default), to 1 to specify that all measurements are in inches, or to 2 to specify that all measurements are in centimeters. This keyword does not change the units used in a widget event structure or in most of the fields of the geometry structure returned by WIDGET_INFO.</p>
        <h3 class="Keyword"><a name="UVALUE"></a>UVALUE</h3>
        <p>The “user value” to be assigned to the widget. Each widget can contain a user-specified value of any data type and organization. If UVALUE is not present, the widget’s initial user value is undefined.</p>
        <h3 class="Keyword"><a name="X_SCROLL"></a>X_SCROLL_SIZE</h3>
        <p>The width of the widget in units specified by the UNITS keyword (pixels are the default). By default X_SCROLL_SIZE is set equal to XSIZE.</p>
        <h3 class="Keyword"><a name="Y_SCROLL"></a>Y_SCROLL_SIZE</h3>
        <p>The height of the widget in units specified by the UNITS keyword (pixels are the default). By default Y_SCROLL_SIZE is set equal to YSIZE.</p>
        <h3 class="Keyword"><a name="XSIZE"></a>XSIZE</h3>
        <p>The width of the graphics window (the drawing area) in units specified by the UNITS keyword (pixels are the default).  If XSIZE is larger than X_SCROLL_SIZE then scroll bars will be automatically added. By default, XSIZE is set equal to X_SCROLL_SIZE. If neither XSIZE nor X_SCROLL_SIZE is passed in, then the width is set to 640 pixels.</p>
        <h3 class="Keyword"><a name="YSIZE"></a>YSIZE</h3>
        <p>The height of the graphics window (the drawing area) in units specified by the UNITS keyword (pixels are the default).   If YSIZE is larger than Y_SCROLL_SIZE then scroll bars will be automatically added. By default, YSIZE is set equal to Y_SCROLL_SIZE. If neither YSIZE nor Y_SCROLL_SIZE is passed in, then the height is set to 512 pixels.</p>
        <h3 class="Keyword"><a name="XOFFSET"></a>XOFFSET</h3>
        <p>The horizontal offset of the widget in units specified by the UNITS keyword (pixels are the default) relative to its parent.</p>
        <p>Specifying an offset relative to a row or column major base widget does not work because those widgets enforce their own layout policies. This keyword is primarily of use relative to a plain base widget. Note that it is best to avoid using this style of widget layout.</p>
        <h3 class="Keyword"><a name="YOFFSET"></a>YOFFSET</h3>
        <p>The vertical offset of the widget in units specified by the UNITS keyword (pixels are the default) relative to its parent. This offset is specified relative to the <i>upper left</i> corner of the parent widget.</p>
        <p>Specifying an offset relative to a row or column major base widget does not work because those widgets enforce their own layout policies. This keyword is primarily of use relative to a plain base widget. Note that it is best to avoid using this style of widget layout.</p>
        <h3 class="Keyword">Keywords to WIDGET_CONTROL</h3>
        <p>A number of keywords to the <a href="WIDGET_CONTROL.htm#W_811389549_1232714">WIDGET_CONTROL</a> procedure affect the behavior of graphics widgets. In addition to those keywords that affect all widgets, the following are particularly useful:             <a href="WIDGET_CONTROL.htm#W_811389549_58243">DRAW_XSIZE</a>, <a href="WIDGET_CONTROL.htm#W_811389549_58244">DRAW_YSIZE</a>, <a href="WIDGET_CONTROL.htm#W_811389549_680115">GET_DRAW_VIEW</a>, <a href="WIDGET_CONTROL.htm#W_811389549_680122">GET_VALUE</a>, <a href="WIDGET_CONTROL.htm#W_811389549_1183394">IGNORE_ACCELERATORS</a>, <a href="WIDGET_CONTROL.htm#W_811389549_680138">INPUT_FOCUS</a>, <a href="WIDGET_CONTROL.htm#W_811389549_680169">SET_DRAW_VIEW</a>, <a href="WIDGET_CONTROL.htm#W_811389549_982093">TOOLTIP</a>.</p>
        <h2 class="API">Keywords to WIDGET_INFO</h2>
        <p>A number of keywords to the <a href="WIDGET_INFO.htm#W_811389549_680333">WIDGET_INFO</a> function return information that applies specifically to graphics widgets. In addition to those keywords that apply to all widgets, the following are particularly useful: <a href="WIDGET_INFO.htm#W_811389549_980339">GEOMETRY</a>, <a href="WIDGET_INFO.htm#W_811389549_982130">TOOLTIP</a>.</p>
        <h2 class="API">Example</h2>
        <p>The following example creates an IDL widget application with a main graphics window, and a status bar at the bottom. When you move the mouse around the window, the X and Y locations are displayed in the status bar. </p>
        <p>Save all of the following code into a file named "widget_window_ex.pro". Then, from within IDL, compile and run the code.</p>
        <p class="Code">;+</p>
        <p class="Code">; The event handler called when any mouse button is pressed.</p>
        <p class="Code">;-</p>
        <p class="Code">FUNCTION WIDGET_WINDOW_EX_MOUSE_DOWN_EVENT, $</p>
        <p class="Code_Indented">win, x, y, button, keymods, clicks</p>
        <p class="Code_Indented">COMPILE_OPT idl2</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">state = win.uvalue</p>
        <p class="Code_Indented">IF(button eq 1 &amp;&amp; keymods eq 2) then begin</p>
        <p class="Code_Indented">state['drag'] = 1</p>
        <p class="Code_Indented">state['start'] = [x,y]</p>
        <p class="Code_Indented">; Do not do the default handling.</p>
        <p class="Code_Indented">RETURN, 0</p>
        <p class="Code_Indented">ENDIF</p>
        <p class="Code_Indented">; Continue with the default handling.</p>
        <p class="Code_Indented">return, 1</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">;+</p>
        <p class="Code">; The event handler called when any mouse button is released.</p>
        <p class="Code">;-</p>
        <p class="Code">FUNCTION WIDGET_WINDOW_EX_MOUSE_UP_EVENT, win, x, y, button</p>
        <p class="Code_Indented">COMPILE_OPT idl2</p>
        <p class="Code_Indented">state = win.uvalue</p>
        <p class="Code_Indented">state['drag'] = 0</p>
        <p class="Code_Indented">RETURN, 1</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">;+</p>
        <p class="Code">; The event handler called when the mouse is moved.</p>
        <p class="Code">;-</p>
        <p class="Code">FUNCTION WIDGET_WINDOW_EX_MOUSE_MOTION_EVENT, win, x, y, keymods</p>
        <p class="Code_Indented">COMPILE_OPT idl2</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">state = win.uvalue</p>
        <p class="Code_Indented">IF(state['drag']) then begin</p>
        <p class="Code_Indented">difference = [x,y] - state['start']</p>
        <p class="Code_Indented">new_center = state['center'] + difference[0]</p>
        <p class="Code_Indented">new_width = state['width'] + difference[1]</p>
        <p class="Code_Indented">new_brain = SET_WINDOW(state['image'], new_center, new_width)</p>
        <p class="Code_Indented">win['display'].setdata, new_brain</p>
        <p class="Code_Indented">return, 0</p>
        <p class="Code_Indented">ENDIF</p>
        <p class="Code_Indented">RETURN, 1</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">;+</p>
        <p class="Code">; Helper routine. Sets window center and width for an image.</p>
        <p class="Code">;-</p>
        <p class="Code">FUNCTION&#160;SET_WINDOW, image, center, width</p>
        <p class="Code_Indented">COMPILE_OPT idl2</p>
        <p class="Code_Indented">lo = center - 0.5*width</p>
        <p class="Code_Indented">hi = center + 0.5*width</p>
        <p class="Code_Indented">RETURN, BYTSCL((image &gt; lo) &lt; hi)</p>
        <p class="Code">END</p>
        <p class="Code">&#160;</p>
        <p class="Code">;+</p>
        <p class="Code">; The launch routine. Sets up UI &amp; state variable, loads data.</p>
        <p class="Code">;-</p>
        <p class="Code">PRO WIDGET_WINDOW_EX</p>
        <p class="Code_Indented">COMPILE_OPT idl2</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">; An MR image with center and width.</p>
        <p class="Code_Indented">brain = READ_IMAGE(FILE_WHICH('mr_brain.dcm'))</p>
        <p class="Code_Indented">center = 1011 ; from file</p>
        <p class="Code_Indented">width = 2021  ; from file</p>
        <p class="Code_Indented">brain_scaled = SET_WINDOW(brain, center, width)</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">wtop = WIDGET_BASE(/COLUMN, $</p>
        <p class="Code_Indented">TITLE='Graphics event handling with IDL widgets')</p>
        <p class="Code_Indented">wdraw = WIDGET_WINDOW(wtop, $</p>
        <p class="Code_Indented">MOUSE_DOWN_HANDLER='widget_window_ex_mouse_down_event', $</p>
        <p class="Code_Indented">MOUSE_UP_HANDLER='widget_window_ex_mouse_up_event', $</p>
        <p class="Code_Indented">MOUSE_MOTION_HANDLER='widget_window_ex_mouse_motion_event')</p>
        <p class="Code_Indented">WIDGET_CONTROL, wtop, /REALIZE</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">; Extract the window reference from the draw widget,</p>
        <p class="Code_Indented">; and display the first image resampled to 150% original size.</p>
        <p class="Code_Indented">WIDGET_CONTROL, wdraw, GET_VALUE=w</p>
        <p class="Code_Indented">g = IMAGE(brain_scaled, /CURRENT, TITLE='MR: Brain', NAME='display')</p>
        <p class="Code_Indented">g.SCALE, 1.5, 1.5, 1.0</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">t = TEXT(0.5,0.02, $</p>
        <p class="Code_Indented">['Hold &lt;Ctrl&gt; and drag horizontally to change brightness,', $</p>
        <p class="Code_Indented">'drag vertically to change contrast'], $</p>
        <p class="Code_Indented">ALIGNMENT='center')</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">; Make a state variable.</p>
        <p class="Code_Indented">state = HASH()</p>
        <p class="Code_Indented">state['image'] = brain_scaled</p>
        <p class="Code_Indented">state['drag'] = 0</p>
        <p class="Code_Indented">state['start'] = [0,0]</p>
        <p class="Code_Indented">state['center'] = center</p>
        <p class="Code_Indented">state['width'] = width</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">; Attach the state variable to the window's user value. Attach the</p>
        <p class="Code_Indented">; window to the top-level base's user value. This ensures that state</p>
        <p class="Code_Indented">; information can be communicated to both the widget and event handlers.</p>
        <p class="Code_Indented">w.uvalue = state</p>
        <p class="Code_Indented">WIDGET_CONTROL, wtop, SET_UVALUE=w</p>
        <p class="Code_Indented">&#160;</p>
        <p class="Code_Indented">XMANAGER, 'widget_window_ex', wtop, /NO_BLOCK</p>
        <p class="Code">END</p>
        <h2 class="API">Version History</h2>
        <table style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/VersionTable.css');" cellspacing="0" class="TableStyle_VersionTable">
            <tbody>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_ColSep">
                        <p>8.0</p>
                    </td>
                    <td class="TableStyle_VersionTable_Body_0_0_ColEnd">
                        <p>Introduced</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_RowSep_ColSep">8.1</td>
                    <td class="TableStyle_VersionTable_Body_0_0_RowSep_ColEnd">Added the following properties: KEYBOARD_HANDLER, MOUSE_DOWN_HANDLER, MOUSE_MOTION_HANDLER, MOUSE_UP_HANDLER, MOUSE_WHEEL_HANDLER, SELECTION_CHANGE_HANDLER</td>
                </tr>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_ColSep">8.2</td>
                    <td class="TableStyle_VersionTable_Body_0_0_ColEnd">Remove the following properties: BUTTON_EVENTS, EXPOSE_EVENTS, KEYBOARD_EVENTS, MOTION_EVENTS, VIEWPORT_EVENTS, WHEEL_EVENTS.</td>
                </tr>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColSep">8.2.1</td>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColEnd">
                        <p>Properties added: EVENT_HANDLER</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2 class="API">See Also</h2>
        <p><a href="../../Creating IDL Programs/Appendices/Constant_System_Variable.htm">!COLOR</a>,  <a href="WIDGET_DRAW.htm">WIDGET_DRAW</a>,
			<a href="WINDOW.htm">WINDOW</a></p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>