<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Routines (alphabetical)|Routines: W">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>WIDGET_TABLE </title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/TableStyles/NoLines.css" rel="stylesheet" />
        <link href="../../Resources/TableStyles/Description.css" rel="stylesheet" />
        <link href="../../Resources/TableStyles/VersionTable.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../../images/ref_part1.htm">Routines (alphabetical)</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="W_list.htm">Routines: W</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">WIDGET_TABLE</span>
        </div>
        <h1 class="Routine"><a name="W_811389549_976479"></a><a name="kanchor2885"></a><a name="W_811389549_28963"></a><a name="kanchor2886"></a>WIDGET_TABLE </h1>
        <p>The WIDGET_TABLE function creates table widgets. Table widgets are used to display two-dimensional data in tabular format. Individual table cells (or ranges of cells) can be selected for editing by the user. They can have one or more rows and columns, and automatically create scroll bars when viewing more data than can otherwise be displayed on the screen.</p>
        <p>
            <img src="../../images/wid_table.gif" />
        </p>
        <p>For a more detailed discussion of the table widget, along with examples, see <a href="../../Creating IDL Programs/Creating Applications in IDL/About_Table_Widgets.htm#widget_table_1174167527_121945">About Table Widgets</a>.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>By default, tables created by WIDGET_TABLE are static - they are not dynamic like tables in a spreadsheet application. Additional coding is necessary in order to make these tables dynamic.</p>
        <h3><a name="W_811389549_923538"></a><a name="W_811389549_41367"></a>Note on Table Sizing</h3>
        <p>Table widgets are sized according to the value of the following pairs of keywords to WIDGET_TABLE, in order of precedence: <a href="#W_811389549_896187" class="selected">SCR_XSIZE</a>, <a href="#W_811389549_896190" class="selected">SCR_YSIZE</a>, <a href="#W_811389549_896219" class="selected">XSIZE</a>, <a href="#W_811389549_896231" class="selected">YSIZE</a>, <a href="#W_811389549_896223" class="selected">X_SCROLL_SIZE</a>, <a href="#W_811389549_896235" class="selected">Y_SCROLL_SIZE</a>, and <a href="#W_811389549_896212" class="selected">VALUE</a>. If either dimension remains unspecified by one of the above keywords, the default value of six (columns or rows) is used when the table is created. If the width or height specified is less than the size of the table, scroll bars are added automatically.</p>
        <h2 class="API"><a name="W_811389549_896035"></a><a name="W_811389549_896035_PageTOC_WIDGET_TABLE_"></a>Syntax</h2>
        <p class="Syntax"><i>Result</i> = WIDGET_TABLE( <i>Parent</i> [,&#160;<a href="#W_811389549_896042" class="selected">ALIGNMENT</a>={0 | 1 | 2}] 
		[,&#160;/<a href="#W_811389549_941688" class="selected">ALL_EVENTS</a>] 
			[,&#160;<a href="#W_811389549_1076926" class="selected">AM_PM</a>=<i>[string</i>, <i>string]</i>] 
			[,&#160;<a href="#W_811389549_1184088" class="selected">BACKGROUND_COLOR</a>=<i>array</i>] [,&#160;<a href="#W_811389549_1076933" class="selected">COLUMN_LABELS</a>=<i>string_array</i>] 
[,&#160;/<a href="#W_811389549_909845" class="selected">COLUMN_MAJOR</a>&#160;|&#160;,&#160;/<a href="#W_811389549_909886" class="selected">ROW_MAJOR</a>] 
[,&#160;<a href="#W_811389549_896114" class="selected">COLUMN_WIDTHS</a>=<i>array</i>] [,&#160;/<a href="#W_811389549_1074773" class="selected">CONTEXT_EVENTS</a>] 
[,&#160;<a href="#W_811389549_949838" class="selected">DAYS_OF_WEEK</a>=<i>string_array</i>{7 names}] 
			[,&#160;/<a href="#W_811389549_987345" class="selected">DISJOINT_SELECTION</a>] 
			[,&#160;/<a href="#W_811389549_987346" class="selected">EDITABLE</a>] 
			[,&#160;<a href="#W_811389549_896120" class="selected">EVENT_FUNC</a>=<i>string</i>] 
			[,&#160;<a href="#W_811389549_896123" class="selected">EVENT_PRO</a>=<i>string</i>] 
			[,&#160;<a href="#W_811389549_896126" class="selected">FONT</a>=<i>string</i>] 
			[,&#160;<a href="#W_811389549_1184014" class="selected">FOREGROUND_COLOR</a>=<i>array</i>] 
			[,&#160;<a href="#W_811389549_896130" class="selected">FORMAT</a>=<i>value</i>] 
			[,&#160;<a href="#W_811389549_896133" class="selected">FRAME</a>=<i>width</i>] 
			[,&#160;<a href="#W_811389549_896136" class="selected">FUNC_GET_VALUE</a>=<i>string</i>] 
			[,&#160;<a href="#W_811389549_896151" class="selected">GROUP_LEADER</a>=<i>widget_id</i>] 
			[,&#160;<a href="#W_811389549_1097865" class="selected">IGNORE_ACCELERATORS</a>=<i>value</i>] 
			[,&#160;/<a href="#W_811389549_911525" class="selected">KBRD_FOCUS_EVENTS</a>] 
			[,&#160;<a href="#W_811389549_896155" class="selected">KILL_NOTIFY</a>=<i>string</i>] 
			[,&#160;<a href="#W_811389549_949844" class="selected">MONTHS</a>=<i>string_array</i>{12 names}] 
			[,&#160;/<a href="#W_811389549_1074713" class="selected">NO_COLUMN_HEADERS</a>] 
			[,&#160;/<a href="#W_811389549_896163" class="selected">NO_COPY</a>] 
			[,&#160;/<a href="#W_811389549_909873" class="selected">NO_HEADERS</a>] 
			[,&#160;/<a href="#W_811389549_1074723" class="selected">NO_ROW_HEADERS</a>] 
			[,&#160;<a href="#W_811389549_896166" class="selected">NOTIFY_REALIZE</a>=<i>string</i>] 
			[,&#160;<a href="#W_811389549_896169" class="selected">PRO_SET_VALUE</a>=<i>string</i>] 
			[,&#160;/<a href="#W_811389549_896172" class="selected">RESIZEABLE_COLUMNS</a>] 
			[,&#160;/<a href="#W_811389549_901244" class="selected">RESIZEABLE_ROWS</a>{not supported in Windows}] 
			[,&#160;<a href="#W_811389549_896175" class="selected">RESOURCE_NAME</a>=<i>string</i>] 
			[,&#160;<a href="#W_811389549_909879" class="selected">ROW_HEIGHTS</a>=<i>array</i>] 
			[,&#160;<a href="#W_811389549_896181" class="selected">ROW_LABELS</a>=<i>string_array</i>] 
			[,&#160;<a href="#W_811389549_896187" class="selected">SCR_XSIZE</a>=<i>width</i>] 
			[,&#160;<a href="#W_811389549_896190" class="selected">SCR_YSIZE</a>=<i>height</i>] 
			[,&#160;/<a href="#W_811389549_896193" class="selected">SCROLL</a>] [,&#160;/<a href="#W_811389549_948291" class="selected">SENSITIVE</a>] 
			[,&#160;<a href="#W_811389549_1072083" class="selected">TAB_MODE</a>=<i>value</i>] 
			[,&#160;/<a href="#W_811389549_896200" class="selected">TRACKING_EVENTS</a>] 
			[,&#160;<a href="#W_811389549_949524" class="selected">UNAME</a>=<i>string</i>] 
			[,&#160;<a href="#W_811389549_896203" class="selected">UNITS</a>={0&#160;|&#160;1&#160;|&#160;2}] 
			[,&#160;<a href="#W_811389549_896207" class="selected">UVALUE</a>=<i>value</i>] 
			[,&#160;<a href="#W_811389549_896212" class="selected">VALUE</a>=<i>value</i>] 
			[,&#160;<a href="#W_811389549_896215" class="selected">XOFFSET</a>=<i>value</i>] 
			[,&#160;<a href="#W_811389549_896219" class="selected">XSIZE</a>=<i>value</i>] 
			[,&#160;<a href="#W_811389549_896223" class="selected">X_SCROLL_SIZE</a>=<i>width</i>] 
			[,&#160;<a href="#W_811389549_896227" class="selected">YOFFSET</a>=<i>value</i>] 
			[,&#160;<a href="#W_811389549_896231" class="selected">YSIZE</a>=<i>value</i>] 
			[,&#160;<a href="#W_811389549_896235" class="selected">Y_SCROLL_SIZE</a>=<i>height</i>] )</p>
        <h2 class="API"><a name="W_811389549_1002389"></a><a name="W_811389549_14217"></a>Return Value</h2>
        <p>The returned value of this function is the widget ID of the newly-created table widget.</p>
        <h2 class="API"><a name="W_811389549_896037"></a><a name="W_811389549_896037_PageTOC_WIDGET_TABLE_"></a>Arguments</h2>
        <h3 class="Argument">Parent</h3>
        <p>The widget ID of the parent widget for the new table widget.</p>
        <h2 class="API"><a name="W_811389549_896040"></a><a name="W_811389549_896040_PageTOC_WIDGET_TABLE_"></a>Keywords</h2>
        <h3 class="Keyword"><a name="W_811389549_896042"></a><a name="W_811389549_896042_Keywords_WIDGET_TABLE__"></a>ALIGNMENT</h3>
        <p>Set this keyword equal to a scalar or 2-D array specifying the alignment of the text within each cell. An alignment of 0 (the default) aligns the left edge of the text with the left edge of the cell. An alignment of 2 right-justifies the text, while 1 results in text centered within the cell. If ALIGNMENT is set equal to a scalar, all table cells are aligned as specified. If ALIGNMENT is set equal to a 2-D array, the alignment of each table cell is governed by the corresponding element of the array.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>ALIGNMENT cannot be applied to the column or row headers of a table widget.</p>
        <h3 class="Keyword"><a name="W_811389549_941688"></a><a name="W_811389549_941688_Keywords_WIDGET_TABLE__"></a><a name="W_811389549_40042"></a>ALL_EVENTS</h3>
        <p>Set this keyword to cause the table widget to generate events whenever the user changes the contents of a table cell.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>If the <a href="#W_811389549_987346" class="selected">EDITABLE</a> keyword is set, an insert character event (TYPE=0) is generated when you press the <b>Return</b> or <b>Enter</b> key in the table widget, even if the ALL_EVENTS keyword is not set. You could use such end-of-line events as an indication to check the cell value or to set the currently selected cell to the next cell. See the table below for details on the interaction between ALL_EVENTS and <a href="#W_811389549_987346" class="selected">EDITABLE</a>. </p>
        <table style="mc-table-style: url('../../Resources/TableStyles/Description.css');margin-left: 0;margin-right: auto;caption-side: bottom;" cellspacing="0" class="TableStyle_Description">
            <col />
            <col />
            <col />
            <col />
            <thead>
                <tr>
                    <td colspan="2" class="TableStyle_Description_Head_0_0_RowSep_ColSep">
                        <p>Keywords</p>
                    </td>
                    <td colspan="2" class="TableStyle_Description_Head_0_0_RowSep_ColEnd">
                        <p>Effects</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColSep">
                        <p>ALL_EVENTS</p>
                    </td>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColSep">
                        <p>EDITABLE</p>
                    </td>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColSep">
                        <p>Input changes widget contents?</p>
                    </td>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColEnd">
                        <p>Type of events generated.</p>
                    </td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>Not set</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>Not set</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>No</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>None</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p>Not set</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p>Set</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p>Yes</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>End-of-line insertion</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>Set</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>Not set</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>No</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>All events</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColSep">
                        <p>Set</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColSep">
                        <p>Set</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColSep">
                        <p>Yes</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowEnd_ColEnd">
                        <p>All events</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h3 class="Keyword"><a name="W_811389549_1076926"></a><a name="W_811389549_949832_Keywords_WIDGET_TABLE__"></a>AM_PM</h3>
        <p>Supplies a string array of two names to be used for the names of the AM and PM string when processing explicitly formatted dates (CAPA, CApA, and CapA format codes) with the FORMAT keyword.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>You can use language catalogs to internationalize this value with strings in particular languages.</p>
        <h3 class="Keyword"><a name="W_811389549_1184088"></a><a name="W_811389549_17935"></a>BACKGROUND_COLOR</h3>
        <p>Set this keyword to one or more RGB triplets to specify cell background colors. For an RGB triplet, each red, green, and blue byte must be in the range [0,255].</p>
        <p>If a single color is provided, it is applied to all cells and is used as the default whenever new cells are created. If more than one color is provided, IDL applies the colors row by row, left to right, working from the top row to the bottom row. When there are fewer colors than cells, IDL cycles through the colors repeatedly.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>A computer’s graphics system might not express an arbitrary RGB triplet accurately or be capable of displaying a large number of distinct colors. The actually applied may be different from the color you specify.</p>
        <p>For more information, see <a href="../../Creating IDL Programs/Creating Applications in IDL/Table_Widget_Cell_Attrib.htm#widget_table_1174167527_193378">Table Widget Cell Attributes</a>.</p>
        <h3 class="Keyword"><a name="W_811389549_1076933"></a><a name="W_811389549_911360_Keywords_WIDGET_TABLE__"></a>COLUMN_LABELS</h3>
        <p>Set this keyword equal to an array of strings used as labels for the columns of the table widget. The default labels are of the form “<i>n</i>”, where <i>n</i> is the column number. If this keyword is set to the empty string (<code>''</code>), all column labels are set to be empty.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>You can use language catalogs to internationalize this value with strings in particular languages. </p>
        <h3 class="Keyword"><a name="W_811389549_909845"></a><a name="W_811389549_909845_Keywords_WIDGET_TABLE__"></a><a name="W_811389549_24459"></a>COLUMN_MAJOR</h3>
        <p>This keyword is only valid if the table data is organized as a vector of structures rather than a two-dimensional array. See the <a href="#W_811389549_896212" class="selected">VALUE</a> keyword for details.</p>
        <p>Set this keyword to specify that the data should be read into the table as if each element of the vector is a structure containing one column’s data. Note that the structures must all be of the same type, and must have one field for each row in the table. If this keyword is not set, the table widget behaves as if the ROW_MAJOR keyword were set.</p>
        <h3 class="Keyword"><a name="W_811389549_896114"></a><a name="W_811389549_896114_Keywords_WIDGET_TABLE__"></a>COLUMN_WIDTHS</h3>
        <p>Set this keyword equal to an array of widths for the columns of the table widget. The widths are given in any of the units as specified with the UNITS keyword. If no width is specified for a column, that column is set to the default size, which varies by platform. If COLUMN_WIDTHS is set to a scalar value, all columns are set to that width.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Column widths are limited to 0.</p>
        <h3 class="Keyword"><a name="W_811389549_1074773"></a><a name="W_811389549_55499"></a>CONTEXT_EVENTS</h3>
        <p>Set this keyword to cause context menu events (or simply context events) to be issued when you click the right mouse button over the widget. Set the keyword to 0 (zero) to disable such events. This is the default. Context events are intended for use with context-sensitive menus (also known as pop-up or shortcut menus). Pass the context event ID to the <a href="WIDGET_DISPLAYCONTEXTMEN.htm#W_811389549_970597">WIDGET_DISPLAYCONTEXTMENU</a> procedure within your widget program’s event handler to display the context menu.</p>
        <p>For more on detecting and handling context menu events, see <a href="../../Creating IDL Programs/Creating Applications in IDL/Creating_Menus.htm#widget_techniques_4218446668_95574">Context-Sensitive&gt;Menus</a>.</p>
        <h3 class="Keyword"><a name="W_811389549_949838"></a><a name="W_811389549_949838_Keywords_WIDGET_TABLE__"></a>DAYS_OF_WEEK</h3>
        <p>Supplies a string array of seven names to be used for the names of the days of the week when processing explicitly formatted dates (CDWA, CDwA, and CdwA format codes) with the FORMAT keyword.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>You can use language catalogs to internationalize this value with strings in particular languages. </p>
        <h3 class="Keyword"><a name="W_811389549_987345"></a><a name="W_811389549_987345_Keywords_WIDGET_TABLE__"></a><a name="W_811389549_65357"></a>DISJOINT_SELECTION</h3>
        <p>Set this keyword to enable the ability to select multiple rectangular regions of cells. The regions can be overlapping, touching, or entirely distinct. </p>
        <p>Setting this keyword changes the data structures returned by the <a href="WIDGET_INFO.htm#W_811389549_895983">TABLE_SELECT</a> keyword to WIDGET_INFO and the <a href="WIDGET_CONTROL.htm#W_811389549_680122">GET_VALUE</a> keyword to WIDGET_CONTROL. Similarly, the data structures you supply via the <a href="WIDGET_CONTROL.htm#W_811389549_895216">SET_TABLE_SELECT</a> and <a href="WIDGET_CONTROL.htm#W_811389549_680190">SET_VALUE</a> keywords to WIDGET_CONTROL are different in disjoint mode.</p>
        <p>See <a href="../../Creating IDL Programs/Creating Applications in IDL/Table_Widget_Selection_M.htm#widget_table_1174167527_97620">Table Widget Selection Modes</a> for additional details.</p>
        <h3 class="Keyword"><a name="W_811389549_987346"></a><a name="W_811389549_987346_Keywords_WIDGET_TABLE__"></a>EDITABLE</h3>
        <p>Set this keyword to allow or deny direct user editing of table cells. The default value is zero, which prevents user editing. Non-zero values permit user editing. Scalar values are applied to all cells and used as the default for new cells. When you supply an array, the values are applied row by row, left to right, working from the top row to the bottom row. When there are fewer values than cells, IDL cycles through the values repeatedly. Each value should be a single byte.</p>
        <p>See <a href="#W_811389549_941688" class="selected">ALL_EVENTS</a> for a description of how EDITABLE interacts with the ALL_EVENTS keyword.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>The method by which table widgets are placed into edit mode is dependent upon the windowing system. See <a href="../../Creating IDL Programs/Creating Applications in IDL/Table_Widget_Edit_Mode.htm#widget_table_1174167527_102722">Table Widget Edit Mode</a>.</p>
        <h3 class="Keyword"><a name="W_811389549_896120"></a><a name="W_811389549_896120_Keywords_WIDGET_TABLE__"></a>EVENT_FUNC</h3>
        <p>Set this keyword to a string containing the name of a function to be called by the WIDGET_EVENT function when an event arrives from a widget in the widget hierarchy rooted at the newly-created widget.</p>
        <h3 class="Keyword"><a name="W_811389549_896123"></a><a name="W_811389549_896123_Keywords_WIDGET_TABLE__"></a>EVENT_PRO</h3>
        <p>Set this keyword to a string containing the name of a procedure to be called by the WIDGET_EVENT function when an event arrives from a widget in the widget hierarchy rooted at the newly-created widget.</p>
        <h3 class="Keyword"><a name="W_811389549_896126"></a><a name="W_811389549_896126_Keywords_WIDGET_TABLE__"></a>FONT</h3>
        <p>Set this keyword to the names of the fonts used by the widget. Specified fonts are “device fonts” (an X Windows font on Motif systems, a TrueType or PostScript font on Windows systems). See <a href="../../Creating IDL Programs/Appendices/Using_Device_Fonts.htm#fonts_2203613354_1049926">About Device Fonts</a> for details on specifying names for device fonts. If this keyword is omitted, the default font is used.</p>
        <p>When you supply a scalar value, IDL uses the font for all cells and as the default table font. It uses the default font in headers and new cells. If you supply more than one font, IDL applies these fonts row by row, left to right, working from the top row to the bottom row, repeatedly if necessary (if there are fewer fonts than cells).</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>On Microsoft Windows platforms, if FONT is not specified, IDL uses the system default font. Different versions of Windows use different system default fonts; in general, the system default font is the font appropriate for the version of Windows in question.</p>
        <h3 class="Keyword"><a name="W_811389549_1184014"></a><a name="W_811389549_28645"></a>FOREGROUND_COLOR</h3>
        <p>Set this keyword to one or more RGB triplets to specify cell text colors. For an RGB triplet, each red, green, and blue byte must be in the range [0,255].</p>
        <p>If a single color is provided, it is applied to all cells and is used as the default whenever new cells are created. If more than one color is provided, IDL applies the colors row by row, left to right, working from the top row to the bottom row. When there are fewer colors than cells, IDL cycles through the colors repeatedly.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>A computer’s graphics system might not express an arbitrary RGB triplet accurately or be capable of displaying a large number of distinct colors. The actually applied may be different from the color you specify.</p>
        <p>For more information, see <a href="../../Creating IDL Programs/Creating Applications in IDL/Table_Widget_Cell_Attrib.htm#widget_table_1174167527_193378">Table Widget Cell Attributes</a>.</p>
        <h3 class="Keyword"><a name="W_811389549_896130"></a><a name="W_811389549_896130_Keywords_WIDGET_TABLE__"></a>FORMAT</h3>
        <p>Set this keyword equal to a single string or array of strings that specify the format of data displayed within table cells. The string(s) are of the same form as used by the FORMAT keyword to the PRINT procedure, and the default format is the same as that used by the PRINT procedure.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>If the format specified is incompatible with the data displayed in a table cell, an error message is generated. Since the error is generated <i>for each cell displayed</i>, the number of messages printed is potentially large, and can slow execution significantly. Note also that each time a new cell is displayed (when scroll bars are repositioned, for example), a new error is generated <i>for each cell displayed</i>.</p>
        <h3 class="Keyword"><a name="W_811389549_896133"></a><a name="W_811389549_896133_Keywords_WIDGET_TABLE__"></a>FRAME</h3>
        <p>The value of this keyword specifies the width of a frame in units specified by the UNITS keyword (pixels are the default) to be drawn around the borders of the widget. Note that this keyword is only a “hint” to the toolkit, and may be ignored in some instances.</p>
        <h3 class="Keyword"><a name="W_811389549_896136"></a><a name="W_811389549_896136_Keywords_WIDGET_TABLE__"></a>FUNC_GET_VALUE</h3>
        <p>A string containing the name of a function to be called when the GET_VALUE keyword to the WIDGET_CONTROL procedure is called for this widget. Using this technique allows you to change the value that should be returned for a widget. Compound widgets use this ability to define their values transparently to the user.</p>
        <h3 class="Keyword"><a name="W_811389549_896151"></a><a name="W_811389549_896151_Keywords_WIDGET_TABLE__"></a>GROUP_LEADER</h3>
        <p>The widget ID of an existing widget that serves as “group leader” for the newly-created widget. When a group leader is killed, for any reason, all widgets in the group are also destroyed.</p>
        <p>A given widget can be in more than one group. The WIDGET_CONTROL procedure can be used to add additional group associations to a widget. It is not possible to remove a widget from an existing group.</p>
        <h3 class="Keyword"><a name="W_811389549_1097865"></a><a name="W_811389549_78826"></a>IGNORE_ACCELERATORS</h3>
        <p><a name="kanchor2887"></a>Set this keyword to specify what WIDGET_BUTTON accelerators are to be ignored when this table widget has keyboard focus. Valid values are:</p>
        <ul>
            <li value="1">A string or string array containing any value that is legal for WIDGET_BUTTON’s <a href="WIDGET_BUTTON.htm#W_811389549_1069174">ACCELERATOR</a> keyword </li>
            <li value="2">The number 1, indicating all accelerators should be ignored</li>
        </ul>
        <p>Ordinarily, accelerators are processed before keyboard events reach the widget that has the keyboard focus. Consider a case where the accelerator “Ctrl+V” has been mapped to a button that allows the user to paste objects copied from one drawing area into another. In an application that also has a table, attempting to use <b>Ctrl</b>+<b>V</b> to paste text into the table cell would fail as this event would be stolen by the accelerator. Setting IGNORE_ACCELERATORS to “Ctrl+V” allows a table widget with an editable text area to receive keyboard events instead of the button with a conflicting accelerator. Once a table loses focus, all specified accelerators are automatically re-enabled.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Accelerators are suspended only when a table cell is in edit mode. </p>
        <p>See <a href="../../Creating IDL Programs/Creating Applications in IDL/Enhancing_Widget_Applica.htm#widget_techniques_4218446668_150796">Disabling Button Widget Accelerators</a> for usage details and examples. </p>
        <h3 class="Keyword"><a name="W_811389549_911525"></a><a name="W_811389549_911525_Keywords_WIDGET_TABLE__"></a>KBRD_FOCUS_EVENTS</h3>
        <p><a name="kanchor2888"></a>Set this keyword to make the base return keyboard focus events whenever the keyboard focus of the base changes. See <a href="#W_811389549_896242" class="selected">Widget Events Returned by Table Widgets</a> for more information.</p>
        <h3 class="Keyword"><a name="W_811389549_896155"></a><a name="W_811389549_896155_Keywords_WIDGET_TABLE__"></a>KILL_NOTIFY</h3>
        <p>Set this keyword to a string that contains the name of a procedure to be called automatically when the specified widget dies. Each widget is allowed a single such “callback” procedure. It can be removed by setting the routine to an empty string (<code>''</code>). </p>
        <p>The callback routine is called with the widget identifier as its only argument. At that point, the widget identifier can only be used with the WIDGET_CONTROL procedure to get or set the user value. All other requests that require a widget ID are disallowed for the target widget. The callback is not issued until the WIDGET_EVENT function is called.</p>
        <h3 class="Keyword"><a name="W_811389549_949844"></a><a name="W_811389549_949844_Keywords_WIDGET_TABLE__"></a>MONTHS</h3>
        <p>Supplies a string array of 12 names to be used for the names of the months when processing explicitly formatted dates (CMOA, CMoA, and CmoA format codes) with the FORMAT keyword.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>You can use language catalogs to internationalize this value with strings in particular languages. </p>
        <h3 class="Keyword"><a name="W_811389549_1074713"></a><a name="W_811389549_63420"></a>NO_COLUMN_HEADERS</h3>
        <p>Set this keyword to disable the display of the table widget’s column header area. The setting for the NO_HEADERS keyword supersedes any setting for this keyword.</p>
        <h3 class="Keyword"><a name="W_811389549_896163"></a><a name="W_811389549_896163_Keywords_WIDGET_TABLE__"></a>NO_COPY</h3>
        <p>Usually, when setting or getting widget user values, either at widget creation or using the SET_UVALUE and GET_UVALUE keywords to WIDGET_CONTROL, IDL makes a second copy of the data being transferred. Although this technique is fine for small data, it can have a significant memory cost when the data being copied is large.</p>
        <p>If the NO_COPY keyword is set, IDL handles these operations differently. Rather than copy the source data, it takes the data away from the source and attaches it directly to the destination. This feature can be used by compound widgets to obtain state information from a UVALUE without all the memory copying that would otherwise occur. However, it has the side effect of causing the source variable to become undefined. On a “set” operation (using the UVALUE keyword to WIDGET_TABLE or the SET_UVALUE keyword to WIDGET_CONTROL), the variable passed as value becomes undefined. On a “get” operation (GET_UVALUE keyword to WIDGET_CONTROL), the user value of the widget in question becomes undefined.</p>
        <h3 class="Keyword"><a name="W_811389549_909873"></a><a name="W_811389549_909873_Keywords_WIDGET_TABLE__"></a>NO_HEADERS</h3>
        <p>Set this keyword to disable the display of the table widget’s header area (where row and column labels are normally displayed).</p>
        <h3 class="Keyword"><a name="W_811389549_1074723"></a><a name="W_811389549_98017"></a>NO_ROW_HEADERS</h3>
        <p>Set this keyword to disable the display of the table widget’s row header area. The setting for the NO_HEADERS keyword supersedes any setting for this keyword.</p>
        <h3 class="Keyword"><a name="W_811389549_896166"></a><a name="W_811389549_896166_Keywords_WIDGET_TABLE__"></a>NOTIFY_REALIZE</h3>
        <p>Set this keyword to a string that contains the name of a procedure to be called automatically when the specified widget is realized. This callback occurs just once (because widgets are realized only once). Each widget is allowed a single such “callback” procedure. It can be removed by setting the routine to an empty string (<code>''</code>). The callback routine is called with the widget ID as its only argument.</p>
        <h3 class="Keyword"><a name="W_811389549_896169"></a><a name="W_811389549_896169_Keywords_WIDGET_TABLE__"></a>PRO_SET_VALUE</h3>
        <p>A string containing the name of a procedure to be called when the SET_VALUE keyword to the WIDGET_CONTROL procedure is called for this widget. See the description of the <a href="WIDGET_CONTROL.htm#W_811389549_680154">PRO_SET_VALUE</a> keyword to <a href="WIDGET_CONTROL.htm#W_811389549_1232714">WIDGET_CONTROL</a> for information on using this keyword.</p>
        <h3 class="Keyword"><a name="W_811389549_896172"></a><a name="W_811389549_896172_Keywords_WIDGET_TABLE__"></a>RESIZEABLE_COLUMNS</h3>
        <p>Set this keyword to allow the user to change the size of columns using the mouse. Note that if the NO_HEADERS keyword was set, the columns cannot be resized interactively.</p>
        <h3 class="Keyword"><a name="W_811389549_901244"></a><a name="W_811389549_901244_Keywords_WIDGET_TABLE__"></a>RESIZEABLE_ROWS</h3>
        <p>Set this keyword to allow the user to change the size of rows using the mouse. Note that if the NO_HEADERS keyword was set, the rows cannot be resized interactively.</p>
        <p>Under Microsoft Windows, the row size cannot be changed.</p>
        <h3 class="Keyword"><a name="W_811389549_896175"></a><a name="W_811389549_896175_Keywords_WIDGET_TABLE__"></a>RESOURCE_NAME</h3>
        <p>A string containing an X Window System resource name to be applied to the widget. See <a href="WIDGET_BASE.htm#W_811389549_281150">RESOURCE_NAME </a> for a complete discussion of this keyword.</p>
        <h3 class="Keyword"><a name="W_811389549_909879"></a><a name="W_811389549_909879_Keywords_WIDGET_TABLE__"></a>ROW_HEIGHTS</h3>
        <p>Set this keyword equal to an array of heights for the rows of the table widget. The heights are given in any of the units as specified with the <a href="#W_811389549_896203" class="selected">UNITS</a> keyword. If no height is specified for a row, that row is set to the default size, which varies by platform. If ROW_HEIGHTS is set to a scalar value, all of the row heights are set to that value.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>On Microsoft Windows platforms, rows cannot have different heights. If you supply an array of values, IDL applies the last value to all rows.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Row heights are limited to 0 on Motif and 1 on Windows.</p>
        <h3 class="Keyword"><a name="W_811389549_896181"></a><a name="W_811389549_896181_Keywords_WIDGET_TABLE__"></a>ROW_LABELS</h3>
        <p>Set this keyword equal to an array of strings to be used as labels for the rows of the table. If no label is specified for a row, it receives the default label “<i>n</i>”, where <i>n</i> is the row number. If this keyword is set to the empty string (<code>''</code>), all row labels are set to be empty.</p>
        <h3 class="Keyword"><a name="W_811389549_909886"></a><a name="W_811389549_909886_Keywords_WIDGET_TABLE__"></a><a name="W_811389549_15520"></a>ROW_MAJOR</h3>
        <p>This keyword is only valid if the table data is organized as a vector of structures rather than a two-dimensional array. See the <a href="#W_811389549_896212" class="selected">VALUE</a> keyword for details.</p>
        <p>Set this keyword to specify that the data should be read into the table as if each element of the vector is a structure containing one row’s data. Note that the structures must all be of the same type, and must have one field for each column in the table. This is the default behavior if neither the COLUMN_MAJOR or ROW_MAJOR keyword is set.</p>
        <h3 class="Keyword"><a name="W_811389549_896187"></a><a name="W_811389549_896187_Keywords_WIDGET_TABLE__"></a><a name="W_811389549_11786"></a>SCR_XSIZE</h3>
        <p>Set this keyword to the desired “screen” width of the widget, in units specified by the UNITS keyword (pixels are the default). Note that the screen width of the widget <i>includes</i> the width of scroll bars, if any are present. Setting SCR_XSIZE overrides values set for the XSIZE or X_SCROLL_SIZE keywords. See <a href="#W_811389549_923538" class="selected">Note on Table Sizing</a>.</p>
        <h3 class="Keyword"><a name="W_811389549_896190"></a><a name="W_811389549_896190_Keywords_WIDGET_TABLE__"></a><a name="W_811389549_38379"></a>SCR_YSIZE</h3>
        <p>Set this keyword to the desired “screen” height of the widget, in units specified by the UNITS keyword (pixels are the default). Note that the screen height of the widget <i>includes</i> the height of scroll bars, if any are present. Setting SCR_YSIZE overrides values set for the YSIZE or Y_SCROLL_SIZE keywords. See <a href="#W_811389549_923538" class="selected">Note on Table Sizing</a>. </p>
        <h3 class="Keyword"><a name="W_811389549_896193"></a><a name="W_811389549_896193_Keywords_WIDGET_TABLE__"></a>SCROLL</h3>
        <p>Set this keyword to give the widget scroll bars that allow viewing portions of the widget contents that are not currently on the screen. See <a href="#W_811389549_923538" class="selected">Note on Table Sizing</a>.</p>
        <h3 class="Keyword"><a name="W_811389549_948291"></a><a name="W_811389549_948291_Keywords_WIDGET_TABLE__"></a>SENSITIVE</h3>
        <p>Set this keyword to control the initial sensitivity state of the widget.</p>
        <p><a name="kanchor2889"></a>If SENSITIVE is zero, the widget becomes insensitive. If nonzero, it becomes sensitive. When a widget is sensitive, it has normal appearance and can receive user input. For example, a sensitive button widget can be activated by moving the mouse cursor over it and pressing a mouse button. When a widget is insensitive, it indicates the fact by changing its appearance, looking disabled, and it ignores any input. </p>
        <p>Sensitivity can be used to control when a user is allowed to manipulate the widget. Note that some widgets do not change their appearance when they are made insensitive, but they cease generating events.</p>
        <p>After creating the widget hierarchy, you can change the sensitivity state using the SENSITIVE keyword with the <a href="WIDGET_CONTROL.htm#W_811389549_1232714">WIDGET_CONTROL</a> procedure.</p>
        <h3 class="Keyword"><a name="W_811389549_1072083"></a><a name="W_811389549_22475"></a>TAB_MODE</h3>
        <p>Set this keyword to one of the values shown in the table below to determine how the widget hierarchy can be navigated using the <b>Tab</b> key. The TAB_MODE setting is inherited by lower-level bases and child widgets from the parent <a href="WIDGET_BASE.htm#W_811389549_974349">WIDGET_BASE</a> unless it is explicitly set on an individual widget. If the TAB_MODE value of the widget differs from that of the base, the setting on the widget will be respected when the widget has focus. For example, if a base does not support tabbing, but an individual child widget does support tabbing, this functionality will be enabled when the child widget has focus. </p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>It is not possible to tab to disabled (SENSITIVE=0) or hidden (MAP=0) widgets.</p>
        <p>Valid settings are:</p>
        <table style="margin-left: 0;margin-right: auto;caption-side: top;mc-table-style: url('../../Resources/TableStyles/NoLines.css');" class="TableStyle_NoLines" cellspacing="0">
            <col class="Column-Column1" />
            <col class="Column-Column1" />
            <tbody>
                <tr class="Body-Body1">
                    <td class="TableStyle_NoLines_Body_0_0_RowSep_ColSep">
                        <p>0</p>
                    </td>
                    <td class="TableStyle_NoLines_Body_0_0_RowSep_ColEnd">
                        <p>Disable navigation onto or off of the widget. This is the default unless the TAB_MODE has been set on a parent base. Child widgets automatically inherit the tab mode of the parent base as described in <a href="../../Creating IDL Programs/Creating Applications in IDL/Enhancing_Widget_Applica.htm#widget_techniques_4218446668_142828">Inheriting the TAB_MODE Value</a>. </p>
                    </td>
                </tr>
                <tr class="Body-Body2">
                    <td class="TableStyle_NoLines_Body_0_0_RowSep_ColSep">
                        <p>1</p>
                    </td>
                    <td class="TableStyle_NoLines_Body_0_0_RowSep_ColEnd">
                        <p>Enable navigation onto and off of the widget.</p>
                    </td>
                </tr>
                <tr class="Body-Body1">
                    <td class="TableStyle_NoLines_Body_0_0_RowSep_ColSep">
                        <p>2</p>
                    </td>
                    <td class="TableStyle_NoLines_Body_0_0_RowSep_ColEnd">
                        <p>Navigate only onto the widget.</p>
                    </td>
                </tr>
                <tr class="Body-Body2">
                    <td class="TableStyle_NoLines_Body_0_0_RowEnd_ColSep">
                        <p>3</p>
                    </td>
                    <td class="TableStyle_NoLines_Body_0_0_RowEnd_ColEnd">
                        <p>Navigate only off of the widget.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>In widget applications on the UNIX platform, the Motif library controls what widgets are brought into and released from focus using tabbing. The TAB_MODE keyword value is always zero, and any attempt to change it is ignored when running a widget application on the UNIX platform. Tabbing behavior may vary significantly between UNIX platforms; do not rely on a particular behavior being duplicated on all UNIX systems.</p>
        <p>When a WIDGET_TABLE widget receives focus through tabbing, the result is platform dependent:</p>
        <ul>
            <li value="1">On Windows – table widgets can receive and lose focus through tabbing, but the focus is not clearly depicted.</li>
            <li value="2">On UNIX – the Motif library controls tabbing functionality. </li>
        </ul>
        <p>After creating the widget hierarchy, you can change tabbing support using the <a href="WIDGET_CONTROL.htm#W_811389549_1232714">WIDGET_CONTROL </a> procedure’s TAB_MODE keyword, or query a widget’s support for tabbing using the <a href="WIDGET_INFO.htm#W_811389549_680333">WIDGET_INFO </a> procedure’s TAB_MODE keyword.</p>
        <p>See <a href="../../Creating IDL Programs/Creating Applications in IDL/Enhancing_Widget_Applica.htm#widget_techniques_4218446668_142739">Tabbing in Widget Applications</a> for usage details and examples. </p>
        <h3 class="Keyword"><a name="W_811389549_896200"></a><a name="W_811389549_896200_Keywords_WIDGET_TABLE__"></a>TRACKING_EVENTS</h3>
        <p>Set this keyword to cause widget tracking events to be issued for the widget whenever the mouse pointer enters or leaves the region covered by that widget. For the structure of tracking events, see <a href="WIDGET_BASE.htm#W_811389549_58059">TRACKING_EVENTS</a> in the documentation for WIDGET_BASE.</p>
        <h3 class="Keyword"><a name="W_811389549_949524"></a><a name="W_811389549_949524_Keywords_WIDGET_TABLE__"></a>UNAME </h3>
        <p>Set this keyword to a string that can be used to identify the widget in your code. You can associate a name with each widget in a specific hierarchy, and then use that name to query the widget hierarchy and get the correct widget ID.</p>
        <p>To query the widget hierarchy, use the <a href="WIDGET_INFO.htm#W_811389549_680333">WIDGET_INFO</a> function with the FIND_BY_UNAME keyword. The UNAME should be unique to the widget hierarchy because the FIND_BY_UNAME keyword returns the ID of the first widget with the specified name.</p>
        <h3 class="Keyword"><a name="W_811389549_896203"></a><a name="W_811389549_896203_Keywords_WIDGET_TABLE__"></a>UNITS</h3>
        <p>Set this keyword to specify the units used when <i>supplying</i> measurements or position values. Set UNITS equal to 0 (zero) to specify that all measurements are in pixels (this is the default), to 1 (one) to specify that all measurements are in inches, or to 2 (two) to specify that all measurements are in centimeters. This keyword does not change the units used in a widget event structure or in most of the fields of the geometry structure returned by WIDGET_INFO.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>This keyword does not affect all sizing operations. Specifically, the value of UNITS is ignored when setting the XSIZE or YSIZE keywords. </p>
        <h3 class="Keyword"><a name="W_811389549_896207"></a><a name="W_811389549_896207_Keywords_WIDGET_TABLE__"></a>UVALUE</h3>
        <p>The “user value” to be assigned to the widget.</p>
        <p>Each widget can contain a user-specified value of any data type and organization. This value is not used by the widget in any way, but exists entirely for the convenience of the IDL programmer. This keyword allows you to set this value when the widget is first created.</p>
        <p>If UVALUE is not present, the widget's initial user value is undefined.</p>
        <h3 class="Keyword"><a name="W_811389549_896212"></a><a name="W_811389549_896212_Keywords_WIDGET_TABLE__"></a><a name="W_811389549_22424"></a>VALUE</h3>
        <p>The initial value setting of the widget. The value of a table widget is either a two-dimensional array of any data type or a vector of structures, representing the contents of the table. </p>
        <p>If the value is specified as a two-dimensional array, all data must be of the same data type.</p>
        <p>If the value is specified as a vector of structures, it can be displayed either in column-major or row-major format by setting either the <a href="#W_811389549_909845" class="selected">COLUMN_MAJOR</a> keyword or the <a href="#W_811389549_909886" class="selected">ROW_MAJOR</a> keyword. All of the structures must be of the same type, and must contain one field for each row (if COLUMN_MAJOR is set) or column (if ROW_MAJOR is set) in the table. (Setting ROW_MAJOR means that each structure is given its own row, and hence the number of columns should match the number of fields.) If neither keyword is set, the data is displayed in row major format. The individual structure fields can be of any data type.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>If the VALUE keyword is not specified, the data in the created table will be of type STRING.</p>
        <p>If none of [XY]SIZE, SCR_[XY]SIZE, or [XY]_SCROLL_SIZE is present, the size of the table is determined by the size of the array or vector of structures specified by VALUE. See <a href="#W_811389549_923538" class="selected">Note on Table Sizing</a>.</p>
        <h3 class="Keyword"><a name="W_811389549_896215"></a><a name="W_811389549_896215_Keywords_WIDGET_TABLE__"></a>XOFFSET</h3>
        <p>The horizontal offset of the widget in units specified by the UNITS keyword (pixels are the default) relative to its parent. This offset is specified relative to the <i>upper left</i> corner of the parent widget.</p>
        <p>Specifying an offset relative to a row or column major base widget does not work because those widgets enforce their own layout policies. This keyword is primarily of use relative to a plain base widget. Note that it is best to avoid using this style of widget programming.</p>
        <h3 class="Keyword"><a name="W_811389549_896219"></a><a name="W_811389549_896219_Keywords_WIDGET_TABLE__"></a><a name="W_811389549_19345"></a>XSIZE</h3>
        <p>The width of the widget in columns. If row labels are present, one column is automatically added to this value. See <a href="#W_811389549_923538" class="selected">Note on Table Sizing</a>.</p>
        <h3 class="Keyword"><a name="W_811389549_896223"></a><a name="W_811389549_896223_Keywords_WIDGET_TABLE__"></a><a name="W_811389549_36815"></a>X_SCROLL_SIZE</h3>
        <p>The XSIZE keyword always specifies the width of a widget, in columns. When the SCROLL keyword is specified, this size is not necessarily the same as the width of the visible area. The X_SCROLL_SIZE keyword allows you to set the width of the scrolling viewport independently of the actual width of the widget. See <a href="#W_811389549_923538" class="selected">Note on Table Sizing</a>.</p>
        <p>Use of the X_SCROLL_SIZE keyword implies SCROLL. This means that scroll bars will be added in both the horizontal and vertical directions when X_SCROLL_SIZE is specified. Because the default size of the scrolling viewport may differ between platforms, it is best to specify Y_SCROLL_SIZE when specifying X_SCROLL_SIZE.</p>
        <h3 class="Keyword"><a name="W_811389549_896227"></a><a name="W_811389549_896227_Keywords_WIDGET_TABLE__"></a>YOFFSET</h3>
        <p>The vertical offset of the widget in units specified by the UNITS keyword (pixels are the default) relative to its parent. This offset is specified relative to the <i>upper left</i> corner of the parent widget.</p>
        <p>Specifying an offset relative to a row or column major base widget does not work because those widgets enforce their own layout policies. This keyword is primarily of use relative to a plain base widget. Note that it is best to avoid using this style of widget programming.</p>
        <h3 class="Keyword"><a name="W_811389549_896231"></a><a name="W_811389549_896231_Keywords_WIDGET_TABLE__"></a><a name="W_811389549_42287"></a>YSIZE</h3>
        <p>The height of the widget in rows. If column labels are present, one row is automatically added to this value. See <a href="#W_811389549_923538" class="selected">Note on Table Sizing</a>.</p>
        <h3 class="Keyword"><a name="W_811389549_896235"></a><a name="W_811389549_896235_Keywords_WIDGET_TABLE__"></a><a name="W_811389549_12755"></a>Y_SCROLL_SIZE</h3>
        <p>The YSIZE keyword always specifies the height of a widget in rows. When the SCROLL keyword is specified, this size is not necessarily the same as the height of the visible area. The Y_SCROLL_SIZE keyword allows you to set the height of the scrolling viewport independently of the actual height of the widget. See <a href="#W_811389549_923538" class="selected">Note on Table Sizing</a>.</p>
        <p>Use of the Y_SCROLL_SIZE keyword implies SCROLL. This means that scroll bars will be added in both the horizontal and vertical directions when Y_SCROLL_SIZE is specified. Because the default size of the scrolling viewport may differ between platforms, it is best to specify X_SCROLL_SIZE when specifying Y_SCROLL_SIZE.</p>
        <h2 class="API"><a name="W_811389549_85275"></a>Keywords to WIDGET_CONTROL</h2>
        <p>A number of keywords to the <a href="WIDGET_CONTROL.htm#W_811389549_1232714">WIDGET_CONTROL</a> procedure affect the behavior of table widgets. In addition to those keywords that affect all widgets, the following are particularly useful: <a href="WIDGET_CONTROL.htm#W_811389549_894840">ALIGNMENT</a>, <a href="WIDGET_CONTROL.htm#W_811389549_894849">ALL_TABLE_EVENTS</a>, <a href="WIDGET_CONTROL.htm#W_811389549_1184487">BACKGROUND_COLOR</a>, <a href="WIDGET_CONTROL.htm#W_811389549_894928">COLUMN_LABELS</a>, <a href="WIDGET_CONTROL.htm#W_811389549_894930">COLUMN_WIDTHS</a>, <a href="WIDGET_CONTROL.htm#W_811389549_949802">CONTEXT_EVENTS</a>, <a href="WIDGET_CONTROL.htm#W_811389549_894963">DELETE_COLUMNS</a>, <a href="WIDGET_CONTROL.htm#W_811389549_919067">DELETE_ROWS</a>, <a href="WIDGET_CONTROL.htm#W_811389549_889314">EDITABLE</a>, <a href="WIDGET_CONTROL.htm#W_811389549_1184426">FOREGROUND_COLOR</a>, <a href="WIDGET_CONTROL.htm#W_811389549_895011">EDIT_CELL</a>, <a href="WIDGET_CONTROL.htm#W_811389549_1184933">FONT</a>, <a href="WIDGET_CONTROL.htm#W_811389549_895067">FORMAT</a>, <a href="WIDGET_CONTROL.htm#W_811389549_680122">GET_VALUE</a>, <a href="WIDGET_CONTROL.htm#W_811389549_1183394">IGNORE_ACCELERATORS</a>, <a href="WIDGET_CONTROL.htm#W_811389549_895129">INSERT_COLUMNS</a>, <a href="WIDGET_CONTROL.htm#W_811389549_895131">INSERT_ROWS</a>, <a href="WIDGET_CONTROL.htm#W_811389549_919052">KBRD_FOCUS_EVENTS</a>, <a href="WIDGET_CONTROL.htm#W_811389549_895148">ROW_LABELS</a>, <a href="WIDGET_CONTROL.htm#W_811389549_895150">ROW_HEIGHTS</a>, <a href="WIDGET_CONTROL.htm#W_811389549_895216">SET_TABLE_SELECT</a>, <a href="WIDGET_CONTROL.htm#W_811389549_895208">SET_TABLE_VIEW</a>, <a href="WIDGET_CONTROL.htm#W_811389549_680181">SET_TEXT_SELECT</a>, <a href="WIDGET_CONTROL.htm#W_811389549_680190">SET_VALUE</a>, <a href="WIDGET_CONTROL.htm#W_811389549_1069681">TABLE_BLANK</a>, <a href="WIDGET_CONTROL.htm#W_811389549_987414">TABLE_DISJOINT_SELECTION</a>, <a href="WIDGET_CONTROL.htm#W_811389549_895238">TABLE_XSIZE</a>, <a href="WIDGET_CONTROL.htm#W_811389549_895244">TABLE_YSIZE</a>, <a href="WIDGET_CONTROL.htm#W_811389549_934621">USE_TABLE_SELECT</a>, <a href="WIDGET_CONTROL.htm#W_811389549_192856">USE_TEXT_SELECT</a>.</p>
        <h2 class="API"><a name="W_811389549_55408"></a>Keywords to WIDGET_INFO</h2>
        <p>A number of keywords to the <a href="WIDGET_INFO.htm#W_811389549_680333">WIDGET_INFO</a> function return information that applies specifically to table widgets. In addition to those keywords that apply to all widgets, the following are particularly useful: <a href="WIDGET_INFO.htm#W_811389549_895941">COLUMN_WIDTHS</a>, <a href="WIDGET_INFO.htm#W_811389549_1018413">CONTEXT_EVENTS</a>, <a href="WIDGET_INFO.htm#W_811389549_1012790">KBRD_FOCUS_EVENTS</a>, <a href="WIDGET_INFO.htm#W_811389549_895972">ROW_HEIGHTS</a>, <a href="WIDGET_INFO.htm#W_811389549_1186243">STRING_SIZE</a>, <a href="WIDGET_INFO.htm#W_811389549_971069">TABLE_ALL_EVENTS</a>, <a href="WIDGET_INFO.htm#W_811389549_1185689">TABLE_BACKGROUND_COLOR</a>, <a href="WIDGET_INFO.htm#W_811389549_987431">TABLE_DISJOINT_SELECTION</a>, <a href="WIDGET_INFO.htm#W_811389549_895979">TABLE_EDITABLE</a>, <a href="WIDGET_INFO.htm#W_811389549_895981">TABLE_EDIT_CELL</a>, <a href="WIDGET_INFO.htm#W_811389549_1185917">TABLE_FONT</a>, <a href="WIDGET_INFO.htm#W_811389549_1185529">TABLE_FOREGROUND_COLOR</a>, <a href="WIDGET_INFO.htm#W_811389549_895983">TABLE_SELECT</a>, <a href="WIDGET_INFO.htm#W_811389549_895985">TABLE_VIEW</a>, <a href="WIDGET_INFO.htm#W_811389549_1181619">TEXT_SELECT</a>, <a href="WIDGET_INFO.htm#W_811389549_896009">USE_TABLE_SELECT</a>.</p>
        <h2 class="API"><a name="W_811389549_896242"></a><a name="W_811389549_31457"></a>Widget Events Returned by Table Widgets</h2>
        <p>There are several variations of the table widget event structure depending on the specific event being reported. All of these structures contain the standard three fields (ID, TOP, and HANDLER). Several contain an integer TYPE field that indicates which type of structure has been returned. Others, such as keyboard focus and context menu event structures, do not. If an event structure is known to have a TYPE field, check this first before branching to further event handling code. If it is possible that the event structure is a keyboard focus or context menu type, check the STRUCTURE_NAME of the event structure first. The different table widget event structures are described below.</p>
        <h3><a name="W_811389549_896244_Keywords_WIDGET_TABLE__"></a>Insert Single Character (TYPE = 0)</h3>
        <p>This is the type of structure returned when a single character is typed into a cell of a table widget by a user.</p>
        <p class="Code">{WIDGET_TABLE_CH, ID:0L, TOP:0L, HANDLER:0L, TYPE:0, OFFSET:0L,</p>
        <p class="Code">&#160;&#160;&#160;CH:0B, X:0L, Y:0L }</p>
        <p>OFFSET is the (zero-based) insertion position that will result after the character is inserted. CH is the ASCII value of the character. X and Y give the zero-based address of the cell within the table.</p>
        <h3><a name="W_811389549_896248_Keywords_WIDGET_TABLE__"></a>Insert Multiple Characters (TYPE = 1)</h3>
        <p>This is the type of structure returned when multiple characters are pasted into a cell by the window system.</p>
        <p class="Code">{WIDGET_TABLE_STR, ID:0L, TOP:0L, HANDLER:0L, TYPE:1, OFFSET:0L,</p>
        <p class="Code">&#160;&#160;&#160;STR:'', X:0L, Y:0L}</p>
        <p>OFFSET is the (zero-based) insertion position that will result after the text is inserted. STR is the string to be inserted. X and Y give the zero-based address of the cell within the table.</p>
        <h3><a name="W_811389549_896252_Keywords_WIDGET_TABLE__"></a>Delete Text (TYPE = 2)</h3>
        <p>This is the type of structure returned when any amount of text is deleted from a cell of a table widget.</p>
        <p class="Code">{WIDGET_TABLE_DEL, ID:0L, TOP:0L, HANDLER:0L, TYPE:2, OFFSET:0L,</p>
        <p class="Code">&#160;&#160;&#160;LENGTH:0L, X:0L, Y:0L}</p>
        <p>OFFSET is the (zero-based) character position of the first character deleted. It is also the insertion position that will result when the next character is inserted. LENGTH gives the number of characters involved. X and Y give the zero-based address of the cell within the table.</p>
        <h3><a name="W_811389549_896256_Keywords_WIDGET_TABLE__"></a>Text Selection (TYPE = 3)</h3>
        <p>This is the type of structure returned when an area of text is selected (highlighted) by the user.</p>
        <p class="Code">{WIDGET_TABLE_TEXT_SEL, ID:0L, TOP:0L, HANDLER:0L, TYPE:3,</p>
        <p class="Code">&#160;&#160;&#160;OFFSET:0L, LENGTH:0L, X:0L, Y:0L}</p>
        <p>The event announces a change in the insertion point. OFFSET is the (zero-based) character position of the first character to be selected. LENGTH gives the number of characters involved. A LENGTH of zero indicates that the widget has no selection, and that the insertion position is given by OFFSET. X and Y give the zero-based address of the cell within the table.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Text insertion, text deletion, or any change in the current insertion point causes any current selection to be lost. In such cases, the loss of selection is implied by the text event reporting the insert/delete/movement and a separate zero length selection event is not sent.</p>
        <h3><a name="W_811389549_896261_Keywords_WIDGET_TABLE__"></a>Cell Selection (TYPE = 4)</h3>
        <p>This is the type of structure returned when range of cells is selected (highlighted) or deselected by the user.</p>
        <p class="Code">{WIDGET_TABLE_CELL_SEL, ID:0L, TOP:0L, HANDLER:0L, TYPE:4,</p>
        <p class="Code">&#160;&#160;&#160;SEL_LEFT:0L, SEL_TOP:0L, SEL_RIGHT:0L, SEL_BOTTOM:0L}</p>
        <p>The event announces a change in the currently selected cells. The range of cells selected is given by the zero-based indices into the table specified by the SEL_LEFT, SEL_TOP, SEL_RIGHT, and SEL_BOTTOM fields. </p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>If the table is in disjoint selection mode, selecting an additional region will result in a new WIDGET_TABLE_CELL_SEL event that reflects only the newly-selected cells. Use WIDGET_INFO, /TABLE_SELECT to obtain the entire selected region in disjoint selection mode.</p>
        <p>When cells are deselected (either by changing the selection or by clicking in the upper left corner of the table) an event is generated in which the SEL_LEFT, SEL_TOP, SEL_RIGHT, and SEL_BOTTOM fields contain the value -1. This means that two WIDGET_TABLE_CELL_SEL events are generated when an existing selection is changed to a new selection. If your code pays attention to WIDGET_TABLE_CELL_SEL events, be sure to differentiate between select and deselect events.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>If the table is in disjoint selection mode and a new cell range is selected <i>starting on a previously-selected cell</i>, the previously selected cells are deselected but a WIDGET_TABLE_CELL_DESEL event is generated for the deselection rather than a WIDGET_TABLE_CELL_SEL event. See <a href="#W_811389549_987494" class="selected">Cell Deselection (Disjoint Mode) (TYPE = 9)</a> for details.</p>
        <h3><a name="W_811389549_896270_Keywords_WIDGET_TABLE__"></a>Row Height Changed (TYPE = 6)</h3>
        <p>This is the type of structure returned when a row height is changed by the user.</p>
        <p class="Code">{WIDGET_TABLE_ROW_HEIGHT, ID:0L, TOP:0L, HANDLER:0L, TYPE:6,</p>
        <p class="Code">&#160;&#160;&#160;&#160;ROW:0L, HEIGHT:0L}</p>
        <p>The event announces that the height of the given row has been changed by the user. The ROW field contains the zero-based row number, and the HEIGHT field contains the new height.</p>
        <h3><a name="W_811389549_896274_Keywords_WIDGET_TABLE__"></a>Column Width Changed (TYPE = 7)</h3>
        <p>This is the type of structure returned when a column width is changed by the user.</p>
        <p class="Code">{WIDGET_TABLE_COL_WIDTH, ID:0L, TOP:0L, HANDLER:0L, TYPE:7,</p>
        <p class="Code">&#160;&#160;&#160;COL:0L, WIDTH:0L}</p>
        <p>The event announces that the width of the given column has been changed by the user. The COL field contains the zero-based column number, and the WIDTH field contains the new width.</p>
        <h3><a name="W_811389549_896278_Keywords_WIDGET_TABLE__"></a>Invalid Data (TYPE = 8)</h3>
        <p>This is the type of structure returned when the text entered by the user does not pass validation, and the user has finished editing the field (by hitting TAB or ENTER).</p>
        <p class="Code">{WIDGET_TABLE_INVALID_ENTRY, ID:0L, TOP:0L, HANDLER:0L, TYPE:8,</p>
        <p class="Code">&#160;&#160;&#160;STR:'', X:0L, Y:0L}</p>
        <p>When this event is generated, the cell’s data is left unchanged. The invalid contents entered by the user is given as a text string in the STR field. The cell location is given by the X and Y fields.</p>
        <h3><a name="W_811389549_987494"></a><a name="W_811389549_987494_Keywords_WIDGET_TABLE__"></a><a name="W_811389549_66946"></a>Cell Deselection (Disjoint Mode) (TYPE = 9)</h3>
        <p>This is the type of structure returned when selected cells are de-selected by the user <i>and the table is in disjoint selection mode</i>. It is identical to the (TYPE = 4) WIDGET_TABLE_CELL_SEL event structure except for the name and type value.</p>
        <p>This event occurs when the user holds down the control key when starting a selection and the cell used to start the selection was already selected. In contrast, if the user starts a selection with the control key down but starts on a cell that was not selected, the normal WIDGET_TABLE_CELL_SEL is generated.</p>
        <p class="Code">{WIDGET_TABLE_CELL_DESEL, ID:0L, TOP:0L, HANDLER:0L, TYPE:9,</p>
        <p class="Code">&#160;&#160;&#160;SEL_LEFT:0L, SEL_TOP:0L, SEL_RIGHT:0L, SEL_BOTTOM:0L}</p>
        <p>The range of cells selected is given by the zero-based indices into the table specified by the SEL_LEFT, SEL_TOP, SEL_RIGHT, and SEL_BOTTOM fields. </p>
        <h3><a name="W_811389549_911533_Keywords_WIDGET_TABLE__"></a>Keyboard Focus Events</h3>
        <p>Table widgets return the following event structure when the keyboard focus changes and the base was created with the KBRD_FOCUS_EVENTS keyword set:</p>
        <p class="Code">{ WIDGET_KBRD_FOCUS, ID:0L, TOP:0L, HANDLER:0L, ENTER:0 }</p>
        <p>ID is the widget ID of the table widget generating the event. TOP is the widget ID of the top level widget containing ID. HANDLER contains the widget ID of the widget associated with the handler routine. The ENTER field returns 1 (one) if the table widget is gaining the keyboard focus, or 0 (zero) if the table widget is losing the keyboard focus.</p>
        <h3>Context Menu Events</h3>
        <p>A table widget created with the CONTEXT_EVENTS keyword set returns the following event structure in response to a right mouse button click:</p>
        <p class="Code">{WIDGET_CONTEXT, ID:0L, TOP:0L, HANDLER:0L, X:0L, Y:0L, </p>
        <p class="Code">&#160;&#160;&#160;ROW:0L, COL:0L}</p>
        <p>The first three fields are the standard fields found in every widget event. The X and Y fields give the device coordinates at which the event occurred, measured from the upper left corner of the table widget. The ROW and COL fields return meaningful information for table widgets and values of zero (0) for other widgets. </p>
        <p>For table widgets, ROW and COL indicate the zero-based index of the cell that was clicked on when the context menu was initiated. The upper-left data cell has a row and column index of 0,0. Row and column headers have indices of -1. If the context-menu event takes place outside of all table cells and headers, then both ROW and COL will have values of -1.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>When working with table widget context menu events or keyboard focus events, it is important to notice that the event structures do not have a TYPE field, so special code is needed for the table event handler. Instead of keying off the TYPE field, use the event structure's name. See <a href="WIDGET_PROPERTYSHEET.htm#W_811389549_1075200">Property Sheet Context Menu Example</a> for sample code dealing with the same issue.</p>
        <h2 class="API"><a name="W_811389549_1078272"></a><a name="W_811389549_896282_PageTOC_WIDGET_TABLE_"></a>Version History</h2>
        <table style="mc-table-style: url('../../Resources/TableStyles/VersionTable.css');caption-side: top;" cellspacing="0" class="TableStyle_VersionTable">
            <col />
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_ColSep">
                        <p>5.0</p>
                    </td>
                    <td class="TableStyle_VersionTable_Body_0_0_ColEnd">
                        <p>Introduced</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_RowSep_ColSep">
                        <p>5.6</p>
                    </td>
                    <td class="TableStyle_VersionTable_Body_0_0_RowSep_ColEnd">
                        <p>Added DISJOINT_SELECTION keyword and cell deselection (TYPE = 9) event</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_ColSep">
                        <p>6.1</p>
                    </td>
                    <td class="TableStyle_VersionTable_Body_0_0_ColEnd">
                        <p>Added ROW and COL fields to WIDGET_CONTEXT event structure</p>
                        <p>Added CONTEXT_EVENTS, IGNORE_ACCELERATORS, NO_COLUMN_HEADERS, NO_ROW_HEADERS, and TAB_MODE keywords</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_RowSep_ColSep">
                        <p>6.2</p>
                    </td>
                    <td class="TableStyle_VersionTable_Body_0_0_RowSep_ColEnd">
                        <p>Added BACKGROUND_COLOR, EDITABLE, FONT, and FOREGROUND_COLOR keywords</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColSep">
                        <p>8.2.1</p>
                    </td>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColEnd">
                        <p>On Windows platforms, the ALL_EVENTS&#160;keyword now works as it does in UNIX&#160;platforms, returning cell events with keyboard arrow navigation.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2 class="API"><a name="W_811389549_983468"></a><a name="W_811389549_983468_PageTOC_WIDGET_TABLE_"></a>See Also</h2>
        <p><a href="WIDGET_CONTROL.htm#W_811389549_1232714">WIDGET_CONTROL</a>
        </p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>