<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Routines (alphabetical)|Routines: D">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>DICTIONARY</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/TableStyles/VersionTable.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../../images/ref_part1.htm">Routines (alphabetical)</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="D_list.htm">Routines: D</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">DICTIONARY</span>
        </div>
        <h1 class="Routine"><a name="kanchor653"></a>DICTIONARY</h1>
        <p>The DICTIONARY function creates a new dictionary. An IDL <i>dictionary</i> is a compound data type that contains key-value pairs of different data types including any mixture of scalars, arrays, structures, pointers, object references, <a href="../L/LIST.htm">lists</a>, <a href="../H/HASH.htm">hashes</a>, and other dictionaries. Unlike <a href="../H/HASH.htm">HASH</a>, the keys in a dictionary are case insensitive and must be valid IDL variable names. An IDL dictionary is very similar to an IDL structure except that it is easy to add or remove keys, or change the data type of a value. </p>
        <p>IDL dictionaries have the following properties:</p>
        <ul>
            <li value="1">Elements in a dictionary are unordered and are indexed by a scalar key.</li>
            <li value="2">The key is a case-insensitive scalar string and must be a valid IDL&#160;variable name (i.e., no spaces or special characters).</li>
            <li value="3">You can retrieve elements by using either the <a href="../../Creating IDL Programs/Components of the IDL Language/Understanding_Array_Subs.htm">bracket array notation</a> or using <a href="../../Creating IDL Programs/Components of the IDL Language/Structure_References.htm">the "dot" syntax</a> like an IDL structure.</li>
            <li value="4">Dictionaries can change their size, growing and shrinking as elements are added or deleted.</li>
            <li value="5">Unlike structures, with a dictionary you can change the data type of a value without a performance penalty.</li>
        </ul>
        <h3>Methods and Additional Information</h3>
        <ul>
            <li value="1"><a href="#Dictiona" class="selected">Dictionary::Count</a>
            </li>
            <li value="2"><a href="#Filter" class="selected">Dictionary::Filter</a>
            </li>
            <li value="3">
                <p><a href="#Dictiona2" class="selected">Dictionary::HasKey</a>
                </p>
            </li>
            <li value="4">
                <p><a href="#Dictiona3" class="selected">Dictionary::IsEmpty</a>
                </p>
            </li>
            <li value="5">
                <p><a href="#Dictiona4" class="selected">Dictionary::Keys</a>
                </p>
            </li>
            <li value="6"><a href="#Map" class="selected">Dictionary::Map</a>
            </li>
            <li value="7"><a href="#Reduce" class="selected">Dictionary::Reduce</a>
            </li>
            <li value="8">
                <p><a href="#Dictiona5" class="selected">Dictionary::Remove</a>
                </p>
            </li>
            <li value="9">
                <p><a href="#Dictiona6" class="selected">Dictionary::ToStruct</a>
                </p>
            </li>
            <li value="10">
                <p><a href="#Dictiona7" class="selected">Dictionary::Values</a>
                </p>
            </li>
            <li value="11">
                <p><a href="#Dictiona8" class="selected">Dictionary::Where</a>
                </p>
            </li>
            <li value="12"><a href="#Access" class="selected">Dictionary Access Using Dot Notation</a>
            </li>
        </ul>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Since the DICTIONARY is so similar to HASH, most of the documentation can be found under <a href="../H/HASH.htm">HASH</a>. Here we provide some examples of the differences between the two data types.</p>
        <h2 class="API">Examples</h2>
        <h4>Create a dictionary containing three key-value pairs, with strings for keys.</h4>
        <p class="Code">dict = DICTIONARY("one", 1.0, "blue", [255,0,0], "Pi", !DPI)</p>
        <p class="Code">PRINT, N_ELEMENTS(dict)</p>
        <p>IDL prints:</p>
        <p class="Code">3</p>
        <h4>Access and modify dictionary values using both the <a href="../../Creating IDL Programs/Components of the IDL Language/Understanding_Array_Subs.htm">bracket</a> and <a href="../../Creating IDL Programs/Components of the IDL Language/Structure_References.htm">"dot" notation</a>.</h4>
        <p class="Code">dict = DICTIONARY("one", 1.0, "blue", [255,0,0], "Pi", !DPI)</p>
        <p class="Code">PRINT, dict["one"]</p>
        <p class="Code">PRINT, dict.one</p>
        <p class="Code">PRINT, dict.ONE</p>
        <p>In all three cases IDL prints:</p>
        <p class="Code">      1.00000</p>
        <p data-mc-conditions="">Now try changing the data type:</p>
        <p class="Code" data-mc-conditions="">dict.one = 'my value'</p>
        <p class="Code" data-mc-conditions="">PRINT, dict.One ; case insensitive</p>
        <p data-mc-conditions="">IDL prints:</p>
        <p class="Code">my value</p>
        <p data-mc-conditions="">Now dynamically add a new key:</p>
        <p class="Code" data-mc-conditions="">dict.newkey = [0,1,2]</p>
        <p class="Code" data-mc-conditions="">PRINT, dict.newkey</p>
        <p data-mc-conditions="">IDL prints:</p>
        <p class="Code">0       1       2</p>
        <h4>Create a dictionary containing all of the elements of a list</h4>
        <p class="Code">keys = ['A', 'B', 'C', 'D', 'E', 'F', 'G']</p>
        <p class="Code">values = LIST('one', 2.0, 3, 4l, PTR_NEW(5), {n:6}, COMPLEX(7,0))</p>
        <p class="Code">dict = DICTIONARY(keys, values)</p>
        <p class="Code">PRINT, N_ELEMENTS(dict)</p>
        <p>IDL prints:</p>
        <p class="Code">7</p>
        <h4>Create a dictionary from a structure, and also convert any substructures into dictionaries</h4>
        <p class="Code">struct = {FIELD1: 4.0, FIELD2: {SUBFIELD1: "hello", SUBFIELD2: 3.14}}</p>
        <p class="Code">dict = DICTIONARY(struct, /EXTRACT)</p>
        <p class="Code">PRINT, dict</p>
        <p class="Code">PRINT, dict.field2</p>
        <p class="Code">PRINT, 'subfield1 = ', dict.field2.subfield1</p>
        <p>IDL prints:</p>
        <p class="Code">FIELD2: DICTIONARY  &lt;ID=4  NELEMENTS=2&gt;</p>
        <p class="Code">FIELD1:       4.00000</p>
        <p class="Code">&#160;</p>
        <p class="Code">SUBFIELD1: hello</p>
        <p class="Code">SUBFIELD2:       3.14000</p>
        <p class="Code">&#160;</p>
        <p class="Code">subfield1 = hello</p>
        <h2 class="API">Syntax</h2>
        <p>For details on the input arguments and keywords see <a href="../H/HASH.htm#L_826528365_1077842">HASH</a>.</p>
        <p class="Syntax"><i>Result</i> = DICTIONARY( <i>Key</i><sub class="italic">1</sub>, <i>Value</i><sub class="italic">1</sub>, <i>Key</i><sub class="italic">2</sub>,
		<i>Value</i><sub class="italic">2</sub>, ... <i>Key</i><sub class="italic">n</sub>, <i>Value</i><sub class="italic">n</sub>,&#160;/EXTRACT ,&#160;/NO_COPY )</p>
        <p>or</p>
        <p class="Syntax"><i>Result</i> = DICTIONARY( <i>Keys</i>, <i>Values</i>,&#160;/EXTRACT )</p>
        <p>or</p>
        <p class="Syntax"><i>Result</i> = DICTIONARY( <i>Keys</i><i>&#160;</i>)</p>
        <p>or</p>
        <p class="Syntax"><i>Result</i> = DICTIONARY( <i>Structure</i>,&#160;/EXTRACT )</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">Key<sub>n</sub></h3>
        <h3 class="Argument">Value<sub>n</sub></h3>
        <h3 class="Argument">Structure</h3>
        <h2 class="API">Keywords</h2>
        <h3 class="Keyword">EXTRACT</h3>
        <h3 class="Keyword">NO_COPY</h3>
        <p><a name="Dictionary::Co"></a>
        </p>
        <h1 class="ObjMethod"><a name="Dictiona"></a><a name="kanchor654"></a>Dictionary::Count</h1>
        <p>See <a href="../H/HASH.htm#Hash::Co">Hash::Count</a> for detailed documentation.</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result </i>= dictionary.Count( [<i>Value</i>] )</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">Value</h3>
        <h1 class="ObjMethod"><a name="Filter"></a>Dictionary::Filter</h1>
        <p>See <a href="../H/HASH.htm#Filter">Hash::Filter</a> for detailed documentation.</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result </i>= dictionary.Filter(<i>Function</i>, <i>Args</i>)</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">Function</h3>
        <h3 class="Argument">Args</h3>
        <p><a name="Dictionary::HasKey"></a>
        </p>
        <h1 class="ObjMethod"><a name="Dictiona2"></a>Dictionary::HasKey</h1>
        <p>See <a href="../H/HASH.htm#Hash::Ha">Hash::HasKey</a> for detailed documentation.</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax" style="font-style: normal;"><i>Result</i> = dictionary.HasKey( <i>Keys</i> )</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">Keys</h3>
        <p><a name="Dictionary::Is"></a>
        </p>
        <h1 class="ObjMethod"><a name="Dictiona3"></a>Dictionary::IsEmpty</h1>
        <p>See <a href="../H/HASH.htm#Hash::Is">Hash::IsEmpty</a> for detailed documentation.</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result </i>= dictionary.IsEmpty( )</p>
        <p><a name="Dictionary::Keys"></a>
        </p>
        <h1 class="ObjMethod"><a name="Dictiona4"></a>Dictionary::Keys</h1>
        <p>See <a href="../H/HASH.htm#Hash::Ke">Hash::Keys</a> for detailed documentation.</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax" style="font-style: normal;"><i>Result</i> = dictionary.Keys( )</p>
        <h1 class="ObjMethod"><a name="Map"></a>Dictionary::Map</h1>
        <p>See <a href="../H/HASH.htm#Map">Hash::Map</a> for detailed documentation.</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result </i>= dictionary.Map(<i>Function</i>, <i>Args</i>)</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">Function</h3>
        <h3 class="Argument">Args</h3>
        <h1 class="ObjMethod"><a name="Reduce"></a>Dictionary::Reduce</h1>
        <p>See <a href="../H/HASH.htm#Reduce">Hash::Reduce</a> for detailed documentation.</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result </i>= dictionary.Reduce(<i>Function</i>, <i>Args</i>, VALUE=<i>value</i>)</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">Function</h3>
        <h3 class="Argument">Args</h3>
        <h2 class="API">Keywords</h2>
        <h3 class="Keyword">VALUE</h3>
        <p><a name="Dictionary::Remove"></a>
        </p>
        <h1 class="ObjMethod"><a name="Dictiona5"></a><a name="kanchor655"></a>Dictionary::Remove</h1>
        <p>See <a href="../H/HASH.htm#Hash::Re">Hash::Remove</a> for detailed documentation.</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax">dictionary.Remove [,&#160;<i>Keys</i>] [,&#160;/ALL]</p>
        <p>or</p>
        <p class="Syntax"><i>Result</i> = dictionary.Remove( [, <i>Keys</i>] [,&#160;/ALL] )</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">Keys</h3>
        <h2 class="API">Keywords</h2>
        <h3 class="Keyword">ALL</h3>
        <p><a name="Dictionary::ToStruct"></a>
        </p>
        <h1 class="ObjMethod"><a name="Dictiona6"></a>Dictionary::ToStruct</h1>
        <p>See <a href="../H/HASH.htm#Hash::To">Hash::ToStruct</a> for detailed documentation.</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax" style="font-style: normal;"><i>Result</i> = dictionary.ToStruct(&#160;[, MISSING=<i>value</i>] [, /NO_COPY] [, /RECURSIVE] [, SKIPPED=<i>variable</i>] )</p>
        <h2 class="API">Keywords</h2>
        <h3 class="Keyword">MISSING</h3>
        <h3 class="Keyword">NO_COPY</h3>
        <h3 class="Keyword">RECURSIVE</h3>
        <h3 class="Keyword">SKIPPED</h3>
        <p><a name="Dictionary::Values"></a>
        </p>
        <h1 class="ObjMethod"><a name="Dictiona7"></a>Dictionary::Values</h1>
        <p>See <a href="../H/HASH.htm#Hash::Values">Hash::Values</a> for detailed documentation.</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax" style="font-style: normal;"><i>Result</i> = dictionary.Values( )</p>
        <p><a name="Dictionary::Where"></a>
        </p>
        <h1 class="ObjMethod"><a name="Dictiona8"></a>Dictionary::Where</h1>
        <p>See <a href="../H/HASH.htm#Hash::Where">Hash::Where</a> for detailed documentation.</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result </i>= dictionary.Where( <i>Value </i>[, COMPLEMENT=<i>variable</i>] [, COUNT=<i>variable</i>] [, NCOMPLEMENT=<i>variable</i>] )</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">Value</h3>
        <h2 class="API">Keywords</h2>
        <h3 class="Keyword">COMPLEMENT</h3>
        <h3 class="Keyword">COUNT</h3>
        <h3 class="Keyword">NCOMPLEMENT</h3>
        <h1>Additional Information on Dictionaries</h1>
        <p>See the following sections in HASH for additional information on using dictionaries:</p>
        <ul>
            <li value="1"><a href="../H/HASH.htm#Concatenating">Concatenating Hashes</a>
            </li>
            <li value="2">
                <p><a href="../H/HASH.htm#Comparing">Comparing Hashes</a>
                </p>
            </li>
            <li value="3">
                <p><a href="../H/HASH.htm#HashAccess">Hash Access</a>
                </p>
            </li>
            <li value="4">
                <p><a href="../H/HASH.htm#HashInformation">Information about Hashes</a>
                </p>
            </li>
        </ul>
        <h2 class="API"><a name="Access"></a>Dictionary Access</h2>
        <p>In many cases, you can access elements of a dictionary variable using standard IDL array syntax, as if the dictionary were a one-dimensional array. You can also access elements using standard IDL structure syntax using dot notation.</p>
        <h3>Retrieve a Single Element</h3>
        <p>To copy the value of a single dictionary element into a new variable, leaving the dictionary unchanged, use array syntax:</p>
        <p class="Code">value = dictionary[<i>Key</i>]</p>
        <p>where <i>Key</i> is an IDL variable containing a scalar string.</p>
        <p>Or you can use dot notation:</p>
        <p class="Code">value = dictionary.Key</p>
        <p>where <code>Key</code> is the name of the desired element within the dictionary.</p>
        <p>For example:</p>
        <p class="Code">d = DICTIONARY("planet", "Saturn")</p>
        <p class="Code">mykey = "dwarf"</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Three ways to access the same key.</p>
        <p class="Code">PRINT, d[mykey], d["dwarf"], d.dwarf</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Using array notation, you are supplying a variable containing a string key. Using dot notation, you are hard-coding the key name into your program. The array notation method is more flexible because the variable can be created at runtime, while the dot notation may produce more human-readable code and is slightly faster to execute.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>IDL structures have a "special" parentheses syntax where you can retrieve structure fields by the tag number enclosed in parentheses. You cannot use this parentheses notation with dictionaries.</p>
        <h3>Insert a Single Element</h3>
        <p>To insert a single value into a dictionary, use array syntax or dot notation:</p>
        <p class="Code">dictionary[<i>Key</i>] = <i>Value</i></p>
        <p>or</p>
        <p class="Code">dictionary.Key = <i>Value</i></p>
        <p>where <i>Value</i> is the value to be stored in the new dictionary element.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Using array notation, you supply a variable containing a string key. Using dot notation, you hard-code the key name into your program. The array notation method is more flexible because the variable can be created at runtime, while the dot notation may produce more human-readable code and is slightly faster to execute.</p>
        <h3>Change the Value of a Single Element</h3>
        <p>To change the value of a single dictionary element, use array syntax or dot notation:</p>
        <p class="Code">dictionary[<i>Key</i>] = <i>Value</i></p>
        <p>or</p>
        <p class="Code">dictionary.Key = <i>Value</i></p>
        <p>where <i>Value</i> is the new value.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Using array notation, you supply a variable containing a string key. Using dot notation, you hard-code the key name into your program. The array notation method is more flexible because the variable can be created at runtime, while the dot notation may produce more human-readable code and is slightly faster to execute.</p>
        <h4>Difference between Dictionary and IDL Structures</h4>
        <p>If your dictionary contains an array, you can combine the dot notation with brackets to access a subset of the array. For example:</p>
        <p class="Code">IDL&gt; dict = DICTIONARY('data', FINDGEN(10))</p>
        <p class="Code">IDL&gt; PRINT, dict.data[2:5]</p>
        <p class="Code">2.00000      3.00000      4.00000      5.00000</p>
        <p>However, unlike structures, you cannot change the array elements using the dot notation:</p>
        <p class="Code">IDL&gt; dict = DICTIONARY('data', FINDGEN(10))</p>
        <p class="Code">IDL&gt; dict.data[2:5] = 0</p>
        <p class="Code">% Attempt to store into an expression: Structure reference.</p>
        <p class="Code">% Execution halted at: $MAIN$</p>
        <p>Instead, you should use the bracket notation with multiple indexing to change just a subset. For example:</p>
        <p class="Code">IDL&gt; dict['data', 2:5] = 0</p>
        <p>This is because the DICTIONARY is implemented as a container of data pointers instead of a structure that is laid out directly into memory.</p>
        <h3>Iterating over a Dictionary</h3>
        <p>Just like HASH, you can use the FOREACH operator to iterate over the dictionary.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>While iterating through a dictionary you should avoid adding or removing elements. If the dictionary is changed during the FOREACH, the behavior  is undefined.</p>
        <h2>Version History</h2>
        <table style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/VersionTable.css');" cellspacing="0" class="TableStyle_VersionTable">
            <col style="width: 40px;" />
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_ColSep">
                        <p>8.3</p>
                    </td>
                    <td class="TableStyle_VersionTable_Body_0_0_ColEnd">
                        <p>Introduced</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColSep">8.4</td>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColEnd">
                        <p>Added Filter, Map, Reduce methods</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2>See Also</h2>
        <p><a href="../../Creating IDL Programs/Components of the IDL Language/The_Null_Variable.htm">!NULL</a>, <a href="../../Creating IDL Programs/Components of the IDL Language/Creating_and_Defining_St.htm">Creating and Defining Structures</a>, <a href="../H/HASH.htm">HASH</a>, <a href="../L/LIST.htm#L_826528365_1077832">LIST</a>, <a href="../O/ORDEREDHASH.htm">ORDEREDHASH</a>, <a href="../../Creating IDL Programs/Components of the IDL Language/Logical_Operators.htm">Logical Operators</a>, <a href="../../Object Classes/IDL Object Class Overview/Object_Properties.htm">Modifying Object Properties</a>, <a href="../../Creating IDL Programs/Components of the IDL Language/Relational_Operators.htm">Relational Operators</a>, <a href="../../Creating IDL Programs/Components of the IDL Language/Structure_References.htm">Structure References</a>, <a href="../L/LAMBDA.htm">LAMBDA</a></p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>