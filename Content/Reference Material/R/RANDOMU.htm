<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Routines (alphabetical)|Routines: R">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>RANDOMU </title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/TableStyles/VersionTable.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../../images/ref_part1.htm">Routines (alphabetical)</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="R_list.htm">Routines: R</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">RANDOMU</span>
        </div>
        <h1 class="Routine"><a name="R_822202989_678392"></a><a name="kanchor2177"></a><a name="R_822202989_39733"></a>RANDOMU </h1>
        <p><a name="kanchor2178"></a><a name="kanchor2179"></a><a name="kanchor2180"></a><a name="kanchor2181"></a><a name="kanchor2182"></a><a name="kanchor2183"></a>The RANDOMU function returns one or more pseudo-random numbers with one of the following distributions: uniform (the default), Gaussian, binomial, gamma, or Poisson. </p>
        <h2 class="API">Examples</h2>
        <h4>Generating Uniform Random Numbers</h4>
        <p>This example simulates rolling three dice 10,000 times and plots the distribution of the total:</p>
        <p class="Code">d1 = FIX(6 * RANDOMU(Seed, 10000))</p>
        <p class="Code">d2 = FIX(6 * RANDOMU(Seed, 10000))</p>
        <p class="Code">d3 = FIX(6 * RANDOMU(Seed, 10000))</p>
        <p class="Code">h = HISTOGRAM(d1 + d2 + d3, LOCATIONS=hlocs)</p>
        <p class="Code">p = BARPLOT(hlocs, h)</p>
        <p class="Code">&#160;</p>
        <p class="Code">
            <img src="../../IDL Graphics/images/randomu_barplot.png" class="imgCentered" />
        </p>
        <p>In the above statement, the expression RANDOMU(Seed, 10000) is a 10,000-element, floating-point array of random numbers greater than or equal to 0 and less than 1. Multiplying this array by 6 converts the range to 0 ≤<i>Y</i> &lt; 6. Applying the <a href="../F/FIX.htm">FIX</a> function yields a 10,000-point integer vector with values from 0 to 5, one less than the numbers on one die. This computation is done three times, once for each die, then the results are added to obtain a vector from 3 to 18.</p>
        <p>The <a href="../H/HISTOGRAM.htm">HISTOGRAM</a> function makes a vector in which each element contains the number of occurrences of dice rolls whose total is equal to the subscript of the element. Finally, this vector is plotted by the <a href="../B/BARPLOT.htm">BARPLOT</a> function.</p>
        <p>For further information see <a href="#Addition" class="selected">Additional Examples</a>.</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = RANDOMU( <i>Seed</i><i>[</i>,&#160;<i>D</i><sub class="italic">1</sub><i>[</i>,<i> ...</i>,<i> D</i><sub class="italic">8</sub><i>]]</i> [,&#160;<a href="#BINOMIAL" class="selected">BINOMIAL</a>=<i>[trials</i>, <i>probability]</i>] [,&#160;/<a href="#DOUBLE" class="selected">DOUBLE</a>] [,&#160;<a href="#GAMMA" class="selected">GAMMA</a>=<i>integer</i>] [,&#160;/<a href="#LONG" class="selected">LONG</a>] [,&#160;/<a href="#NORMAL" class="selected">NORMAL</a>] [,&#160;<a href="#POISSON" class="selected">POISSON</a>=<i>value</i>] [,&#160;/<a href="#RAN1" class="selected">RAN1</a>] [,&#160;/<a href="#ULONG" class="selected">ULONG</a>] [,&#160;/<a href="#UNIFORM" class="selected">UNIFORM</a>]&#160;)</p>
        <h2 class="API">Return Value</h2>
        <p>Returns an array of uniformly distributed random numbers of the specified dimensions.</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">Seed</h3>
        <p>A variable or constant used to initialize the random sequence on input, and in which the state of the random number generator is saved on output.</p>
        <p>If <i>Seed</i> is:</p>
        <ul>
            <li value="1">an undefined variable — the generic state is used and the resulting generic state array is returned in <i>Seed</i>. The generic state is initialized on IDL startup using the time-of-day.</li>
            <li value="2">a constant or expression containing a scalar long integer — the value is used to re-initialize the generic state.</li>
            <li value="3">
                <p>an expression containing an array of long integers  of any length — the value is used to re-initialize the generic state.  </p>
                <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Do not pass in an array with the same type and dimensions as the output seed array — IDL will assume that this is a previous seed and will corrupt the random sequence.</p>
            </li>
        </ul>
        <ul>
            <li value="1">a named variable containing a scalar long integer — the scalar value is used to start a new sequence and the resulting state array is returned in <i>Seed</i>.</li>
            <li value="2">a named variable containing an array of long integers  of any length — the array is used to start a new sequence and the resulting state array is returned in <i>Seed</i>.<i> </i><b style="font-style: italic;">Warning</b><i>: Do not pass in an array with the same type and dimensions as the output seed array — IDL will assume that this is a previous seed and will corrupt the random sequence.</i></li>
            <li value="3">a named variable that contains the state array from a previous call — it is used to continue the pseudo-random sequence,  and the resulting state array is returned in <i>Seed</i>.</li>
        </ul>
        <p>For <i>Seed</i> values equal to a non-whole number, such as float, RANDOMU only recognizes the whole number portion of the constant <i>Seed</i>. For example, using 7.0 as the <i>Seed</i> produces the same result as using 7.5 or 7.9.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>RANDOMN and RANDOMU use the same sequence, so starting or restarting the sequence for one starts or restarts the sequence for the other. Some IDL routines such as CLUST_WTS use the random number generator, so using them will initialize the seed sequence.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Do not alter the seed array returned by this function. The only valid use for the seed argument is to pass it back to a subsequent call. Changing the seed values will corrupt the random sequence.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Each independent random number sequence should maintain its own state variable. To continue a particular sequence over repeated calls to a procedure, the seed variable should be passed in as an argument to your procedure (or stored in a COMMON block for example).</p>
        <h3 class="Argument">D<sub>i</sub></h3>
        <p>Either an array or a series of scalar expressions specifying the dimensions of the result. If a single argument is specified, it can be either a scalar expression or an array of up to eight elements. If multiple arguments are specified, they must all be scalar expressions. Up to eight dimensions can be specified. If no dimensions are specified, RANDOMU returns a scalar result.</p>
        <h2 class="API">Keywords</h2>
        <p>The formulas for the binomial, gamma, and Poisson distributions are from Section 7.3 of <i>Numerical Recipes in C: The Art of Scientific Computing</i> (Second Edition), Cambridge University Press, 1992.</p>
        <h3 class="Keyword"><a name="BINOMIAL"></a>BINOMIAL</h3>
        <p>Set this keyword to a 2-element array, [<i>n</i>, <i>p</i>], to generate random deviates from a binomial distribution. If an event occurs with probability <i>p</i>, with <i>n</i> trials, then the number of times it occurs has a binomial distribution.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>For <i>n</i> &gt; 1.0 x 10<sup>7</sup>, you should set the DOUBLE keyword.</p>
        <h3 class="Keyword"><a name="DOUBLE"></a>DOUBLE</h3>
        <p>Set this keyword to return a double-precision random number.</p>
        <p>RANDOMU constructs double-precision uniform random numbers with 53-bits of precision by combining two single-precision numbers:</p>
        <p>X = [(A &gt;&gt; 5)*2<sup>26</sup> + (B &gt;&gt; 6)]*2<sup>-53</sup></p>
        <p>where A and B are 32-bit integer random numbers in the range 0...4294967295, and the shift-right operator &gt;&gt; is used to remove bits of precision. The resulting values will be  0 ≤ X &lt; 1.</p>
        <h3 class="Keyword"><a name="GAMMA"></a>GAMMA</h3>
        <p>Set this keyword to an integer order <i>i</i> &gt; 0 to generate random deviates from a gamma distribution. The gamma distribution is the waiting time to the <i>i</i>th event in a Poisson random process of unit mean. A gamma distribution of order equal to 1 is the same as the exponential distribution.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>For GAMMA &gt; 1.0&#160;x&#160;10<sup>7</sup>, you should set the DOUBLE keyword.</p>
        <h3 class="Keyword"><a name="LONG"></a>LONG</h3>
        <p>Set this keyword to return integer uniform random deviates in the range [0...2<sup>31</sup>&#160;–&#160;1],  using the Mersenne Twister algorithm. If LONG is set, all other keywords (except RAN1) are ignored.</p>
        <h3 class="Keyword"><a name="NORMAL"></a>NORMAL</h3>
        <p>Set this keyword to generate random deviates from a normal distribution.</p>
        <h3 class="Keyword"><a name="POISSON"></a>POISSON</h3>
        <p>Set this keyword to the mean number of events occurring during a unit of time. The POISSON keyword returns a random deviate drawn from a Poisson distribution with that mean.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>For POISSON &gt; 1.0 x 10<sup>7</sup>, you should set the DOUBLE keyword.</p>
        <h3 class="Keyword"><a name="RAN1"></a>RAN1</h3>
        <p>Set this keyword to use the older <code>ran1</code> algorithm, which was the default in IDL 8.1 and earlier.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>The RAN1 keyword is only provided for backwards compatibility, for cases where you need to regenerate the same random sequence from an older version of IDL. Because of the limitations in the algorithm's design, it is strongly recommended that you use the default Mersenne Twister algorithm.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span><a href="#Notes" class="selected">See below</a> for a detailed description of this algorithm.</p>
        <h3 class="Keyword"><a name="ULONG"></a>ULONG</h3>
        <p>Set this keyword to return unsigned-integer uniform random deviates in the range [0...2<sup>32</sup>&#160;–&#160;1],  using the Mersenne Twister algorithm. If ULONG is set, all other keywords are ignored. The ULONG keyword cannot be used with the RAN1 keyword.</p>
        <h3 class="Keyword"><a name="UNIFORM"></a>UNIFORM</h3>
        <p>Set this keyword to generate random deviates from a uniform distribution. This is the default behavior.</p>
        <h2 class="API"><a name="Addition"></a>Additional Examples</h2>
        <h4>Using the Seed Argument</h4>
        <p>If this is the first time that RANDOMU has been called and you start the sequence with an <i>undefined</i> variable, then IDL initializes the sequence with the system time:</p>
        <p class="Code">; Initialize the sequence with an  undefined variable,<br />; and generate one random number<br />seed = !NULL<br />randomValue = RANDOMU(seed)</p>
        <p>The new state is saved in <code>seed</code>. To generate repeatable experiments, begin the sequence with a particular seed:</p>
        <p class="Code">; Initialize the sequence and generate 3 random numbers:</p>
        <p class="Code">seed = 12345</p>
        <p class="Code">randomValue = RANDOMU(seed, 3)</p>
        <p class="Code">PRINT, randomValue</p>
        <p class="Code">; Restart the sequence.</p>
        <p class="Code">seed = 12345</p>
        <p class="Code">randomValue = RANDOMU(seed, 3)</p>
        <p class="Code">PRINT, randomValue</p>
        <p>IDL prints:</p>
        <p class="Code">0.923121     0.333147     0.197888</p>
        <p class="Code">0.923121     0.333147     0.197888</p>
        <p>To continue generating numbers from the same sequence, pass in the <code>seed</code> variable:</p>
        <p class="Code">PRINT, RANDOMU(seed, 3)</p>
        <p>IDL prints:</p>
        <p class="Code">0.949422     0.783800    0.983885</p>
        <h4>Using an Array of Seed Values</h4>
        <p>To generate numbers using an array of integers as the seed:</p>
        <p class="Code">seed = [1798157082, 2109670255, 1881608512, 763029868, 1350847629]</p>
        <p class="Code">; Pass in the seed array as an expression so our seed is unchanged</p>
        <p class="Code">x1 = RANDOMU(seed[*], 100000)</p>
        <p class="Code">; Tweak the last seed value slightly and regenerate</p>
        <p class="Code">seed[4]++</p>
        <p class="Code">x2 = RANDOMU(seed[*], 100000)</p>
        <p class="Code">; Should get a completely different random sequence...</p>
        <p class="Code">PRINT, CORRELATE(x1, x2)</p>
        <p>IDL prints:</p>
        <p class="Code">-0.000321955</p>
        <h4>Other Distributions</h4>
        <p>To obtain a sequence of 1000 exponential (gamma distribution, order 1) deviates, type:</p>
        <p class="Code">Result = RANDOMN(seed, 1000, GAMMA=1)</p>
        <p>The result contains a random series of waiting times for events occurring an average of one per time period.</p>
        <p>To obtain a series of 1000 random elapsed times required for the arrival of two events, type:</p>
        <p class="Code">;Returns a series of 1000 random elapsed times required for the<br />;arrival of two events.<br />Result = RANDOMN(seed, 1000, GAMMA=2)</p>
        <p>To obtain a 128 x 128 array filled with Poisson deviates, with a mean of 1.5, type:</p>
        <p class="Code">Result = RANDOMN(seed, 128, 128, POISSON=1.5)</p>
        <p>To simulate the count of “heads” obtained when flipping a coin 10 times, type:</p>
        <p class="Code">Result = RANDOMN(seed, BINOMIAL=[10,.5])</p>
        <h2 class="API">Notes on the RANDOMU algorithm</h2>
        <ul>
            <li value="1">The random number generator uses the Mersenne Twister (MT19937) <a href="#Resource" class="selected">algorithm</a>. </li>
            <li value="2">
                <p>MT has a very long period of 2<sup>19937</sup> − 1, and has been optimized for use in Monte Carlo simulations.</p>
            </li>
            <li value="3">The algorithm is uniformly distributed (to 32-bit accuracy) in any space up to 623 dimensions (the <i>k</i>-distribution test).</li>
            <li value="4">The algorithm is not suitable for cryptography. Since the algorithm is based on linear recursion, observing a sufficiently long sequence could potentially allow you to predict all future iterates.</li>
            <li value="5">IDL uses the <code>mt19937ar.c</code> code, with only one modification: The <code>genrand_real2()</code> function, which generates 32-bit (single-precision) floating point numbers, could occasionally return a value of 1.0 when the return value was cast to a single-precision float. To correct this, if the value 1.0 occurs, it is rejected, and the next random number in the sequence is returned (this is repeated until a value &lt; 1.0 is found).</li>
            <li value="6">
                <p>The initial seed may be either a scalar long integer or an array of long integers of any length. Passing in an array of integers allows you to select a larger "space" for the seed, and avoids the possibility of accidentally picking the same scalar seed for two different sequences. </p>
                <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Do not pass in an array with the same type and dimensions as the output seed array — IDL will assume that this is a previous seed and will corrupt the random sequence.</p>
            </li>
            <li value="7">Note that when returning a large number of values, a particular value may occur more than once in the returned array. This is the expected behavior.</li>
        </ul>
        <h2 class="API"><a name="Notes"></a>Notes on the RAN1 algorithm</h2>
        <ul>
            <li value="1"><code>ran1</code> is a multiplicative congruential algorithm, based off of the algorithm given in Section 7.1 of <i>Numerical Recipes in C: The Art of Scientific Computing</i> (Second Edition), published by Cambridge University Press. To remove low-order serial correlations, a Bays-Durham shuffle is added. During the shuffle, instead of outputting the <i>n</i>-th value in the sequence on the <i>n</i>-th call, it is output on a randomized later call, <i>n</i>+32 on average.</li>
            <li value="2">In IDL's <code>ran1</code> algorithm, if the value 1.0 occurs, it is rejected, and the next random number in the sequence is returned (this is repeated until a value &lt; 1.0 is found).</li>
            <li value="3">Like all software-based random number generators, the RANDOMU algorithm is a compromise between performance and statistical robustness. Because of the Bays-Durham shuffle, the algorithm should not exhibit any low-order serial correlations. Nevertheless, once the number of generated random numbers approaches the order of the period (approximately 10<sup>8</sup> or 100,000,000), then the numbers will begin to fail statistical tests.</li>
            <li value="4">Because of the algorithm's design, when returning 32-bit integer random numbers (/LONG is set), a particular value will never be repeated until approximately 2<sup>31</sup> values have been generated.</li>
        </ul>
        <h2 class="API">Version History</h2>
        <table style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/VersionTable.css');" cellspacing="0" class="TableStyle_VersionTable">
            <col />
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_ColSep">
                        <p>Original</p>
                    </td>
                    <td class="TableStyle_VersionTable_Body_0_0_ColEnd">
                        <p>Introduced</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColSep">8.2.2</td>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColEnd">Changed to use the Mersenne Twister algorithm, added the ability to use an array of integers as the seed, added the RAN1 and ULONG keywords.</td>
                </tr>
            </tbody>
        </table>
        <h2 class="API">See Also</h2>
        <p><a href="RANDOMN.htm#R_822202989_1079058">RANDOMN</a>
        </p>
        <h2 class="API"><a name="Resource"></a>Resources and References</h2>
        <p>The Mersenne Twister algorithm was proposed in the following paper: </p>
        <p>M. Matsumoto and T. Nishimura, "Mersenne Twister: A 623-dimensionally equidistributed uniform pseudorandom number generator", ACM Trans. on Modeling and Computer Simulation Vol. 8, No. 1, January pp.3-30 (1998). See <a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html">http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html</a> for details.</p>
        <p class="Hiddenp>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>