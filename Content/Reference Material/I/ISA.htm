<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Routines (alphabetical)|Routines: I">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>ISA</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/TableStyles/VersionTable.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../../images/ref_part1.htm">Routines (alphabetical)</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="I_list.htm">Routines: I</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">ISA</span>
        </div>
        <h1 class="Routine"><a name="I_833016429_1127569"></a><a name="kanchor1557"></a><a name="I_833016429_57861"></a>ISA</h1>
        <p>The ISA function determines whether a variable is of a certain type, class, or structure name. It can also test whether a variable is a valid object or pointer, whether it is an array or scalar, and if a variable is associated with a file.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>The ISA&#160;function only looks at the high-level properties of a variable such as the data type or dimensions. It does not examine individual elements within a variable. You can use the <a href="../Static Methods/IDL_Variable.htm">IDL_Variable</a> class for more data-specific methods.</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = ISA(<i>Variable</i>,&#160;<i>Typename</i>, /<a href="#ARRAY" class="selected">ARRAY</a>, /<a href="#BOOLEAN" class="selected">BOOLEAN</a>, /<a href="#COMPLEX" class="selected">COMPLEX</a>, /<a href="#FILE" class="selected">FILE</a>, /<a href="#FLOAT" class="selected">FLOAT</a>, /<a href="#INTEGER" class="selected">INTEGER</a>, /<a href="#NULL" class="selected">NULL</a>, /<a href="#NUMBER" class="selected">NUMBER</a>, /<a href="#SCALAR" class="selected">SCALAR</a>, /<a href="#STRING" class="selected">STRING</a> )</p>
        <h2 class="API">Return Value</h2>
        <p>Returns true (1) if <i>Variable</i> is defined, and (optionally) matches <i>Typename</i> or one of the other keywords. Otherwise, false (0) is returned.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>If <i>Variable</i> is a scalar object or pointer, and <i>Typename</i> is not present, ISA returns 1 (true) if the object or pointer is valid, and 0 (false) if it is a null object or pointer.</p>
        <h2 class="API">Argument</h2>
        <h3 class="Argument">Variable</h3>
        <p>An IDL variable or expression.</p>
        <h3 class="Argument">Typename</h3>
        <p>An optional scalar string type name to test against. The following table contains the list of typenames which will return true (1) for a given variable type:</p>
        <table style="width: 100%; margin-left: 0; margin-right: auto;">
            <col />
            <col />
            <thead>
                <tr>
                    <th>Variable Type</th>
                    <th>Allowed Typenames</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Undefined or !NULL (0)</td>
                    <td>Undefined (use /NULL to distinguish)</td>
                </tr>
                <tr>
                    <td>Byte (1)</td>
                    <td>
                        <p>Byte, IDL_Byte, IDL_Integer, IDL_Number, IDL_Variable</p>
                    </td>
                </tr>
                <tr>
                    <td>Int (2)</td>
                    <td>
                        <p>Int, IDL_Int, IDL_Integer, IDL_Number, IDL_Variable</p>
                    </td>
                </tr>
                <tr>
                    <td>Long (3)</td>
                    <td>
                        <p>Long, IDL_Long, IDL_Integer, IDL_Number, IDL_Variable</p>
                    </td>
                </tr>
                <tr>
                    <td>Float (4)</td>
                    <td>
                        <p>Float, IDL_Float, IDL_Number, IDL_Variable</p>
                    </td>
                </tr>
                <tr>
                    <td>Double (5)</td>
                    <td>
                        <p>Double, IDL_Double, IDL_Number, IDL_Variable</p>
                    </td>
                </tr>
                <tr>
                    <td>Complex (6)</td>
                    <td>
                        <p>Complex, IDL_Complex, IDL_Number, IDL_Variable</p>
                    </td>
                </tr>
                <tr>
                    <td>String (7)</td>
                    <td>
                        <p>String, IDL_String, IDL_Variable</p>
                    </td>
                </tr>
                <tr>
                    <td>Structure (8)</td>
                    <td>STRUCT, structure name, or "Anonymous"</td>
                </tr>
                <tr>
                    <td>Double Complex (9)</td>
                    <td>
                        <p>Dcomplex, IDL_Dcomplex, IDL_Number, IDL_Variable</p>
                    </td>
                </tr>
                <tr>
                    <td>Pointer (10)</td>
                    <td>
                        <p>Pointer, IDL_Pointer, IDL_Variable</p>
                    </td>
                </tr>
                <tr>
                    <td>Objref (11)</td>
                    <td>Objref, class name, or superclass name</td>
                </tr>
                <tr>
                    <td>Uint (12)</td>
                    <td>
                        <p>Uint, IDL_Uint, IDL_Integer, IDL_Number, IDL_Variable</p>
                    </td>
                </tr>
                <tr>
                    <td>Ulong (13)</td>
                    <td>
                        <p>Ulong, IDL_Ulong, IDL_Integer, IDL_Number, IDL_Variable</p>
                    </td>
                </tr>
                <tr>
                    <td>Long64 (14)</td>
                    <td>
                        <p>Long64, IDL_Long64, IDL_Integer, IDL_Number, IDL_Variable</p>
                    </td>
                </tr>
                <tr>
                    <td>Ulong64 (15)</td>
                    <td>
                        <p>Ulong64, IDL_Ulong64, IDL_Integer, IDL_Number, IDL_Variable</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>All of the above strings are case insensitive.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>If <i>Variable</i> is a scalar object or a one-element object array, then <i>Typename</i> can be the class name or the name of a superclass. If <i>Variable</i> is an object array with two or more elements, <i>Typename</i> can only be the IDL basic type name “OBJECT”.</p>
        <h2 class="API">Keywords</h2>
        <h3 class="Keyword"><a name="ARRAY"></a>ARRAY
        </h3>
        <p>Set this keyword to return 1 (true) if <i>Variable</i> is an array, list, or structure and (optionally) matches <i>Typename</i>, and 0 (false) otherwise. You can combine this keyword with BOOLEAN, COMPLEX, FILE, FLOAT, INTEGER, NUMBER, and STRING. This keyword cannot be used with the SCALAR keyword.</p>
        <h3 class="Keyword"><a name="BOOLEAN"></a>BOOLEAN        </h3>
        <p>Set this keyword to return 1 (true) if <i>Variable</i> is a <a href="../B/BOOLEAN.htm">BOOLEAN</a> variable (a variable of type byte with the boolean flag). You can combine this keyword with ARRAY, FILE, NUMBER, or SCALAR. This keyword cannot be used with the FLOAT, INTEGER, or STRING keywords.</p>
        <h3 class="Keyword"><a name="COMPLEX"></a>COMPLEX
		</h3>
        <p>Set this keyword to return 1 (true) if <i>Variable</i> is type COMPLEX or DCOMPLEX, or 0 (false) otherwise. You can combine this keyword with ARRAY, FILE, or SCALAR. This keyword cannot be used with the BOOLEAN, FLOAT, INTEGER, or STRING keywords.</p>
        <h3 class="Keyword"><a name="FILE"></a>FILE
        </h3>
        <p>Set this keyword to return 1 (true) if <i>Variable</i> is associated with a file (using the <a href="../A/ASSOC.htm">ASSOC</a> function) and (optionally) matches <i>Typename</i>, and 0 (false) otherwise.</p>
        <h3 class="Keyword"><a name="FLOAT"></a>FLOAT
		</h3>
        <p>Set this keyword to return 1 (true) if <i>Variable</i> is type FLOAT or DOUBLE, or 0 (false) otherwise. You can combine this keyword with ARRAY, FILE, or SCALAR. This keyword cannot be used with the BOOLEAN, COMPLEX, INTEGER, or STRING keywords.</p>
        <h3 class="Keyword"><a name="INTEGER"></a>INTEGER
		</h3>
        <p>Set this keyword to return 1 (true) if <i>Variable</i> is one of the integer data types (including BYTE), or 0 (false) otherwise. You can combine this keyword with ARRAY, FILE, or SCALAR. This keyword cannot be used with the BOOLEAN, COMPLEX, FLOAT, or STRING keywords.</p>
        <h3 class="Keyword"><a name="NULL"></a>NULL</h3>
        <p>Set this keyword to return 1 (true) if <i>Variable </i>is equal to the <a href="../../Creating IDL Programs/Components of the IDL Language/The_Null_Variable.htm">!NULL</a> system variable, and 0 (false) if otherwise. This keyword cannot be used with any other keywords.</p>
        <p class="Tip" data-mc-autonum="&lt;b&gt;Tip: &lt;/b&gt;"><span class="autonumber"><span><b>Tip: </b></span></span>The NULL keyword allows you to distinguish between a variable that is simply undefined, and a variable that is equal to !NULL.</p>
        <h3 class="Keyword"><a name="NUMBER"></a>NUMBER</h3>
        <p>Set this keyword to return 1 (true) if <i>Variable </i>is a numeric type, and 0 (false) if otherwise. Numeric types include byte, any signed or unsigned integer type, float, double, complex, or double complex. You can combine this keyword with ARRAY, FILE, or SCALAR.</p>
        <h3 class="Keyword"><a name="SCALAR"></a>SCALAR
        </h3>
        <p>Set this keyword to return 1 (true) if <i>Variable</i> is a scalar and (optionally) matches <i>Typename</i>, and 0 (false) otherwise.  You can combine this keyword with BOOLEAN, COMPLEX, FILE, FLOAT, INTEGER, NUMBER, and STRING. This keyword cannot be used with the ARRAY keyword.
        </p>
        <h3 class="Keyword"><a name="STRING"></a>STRING
		</h3>
        <p>Set this keyword to return 1 (true) if <i>Variable</i> is type STRING, or 0 (false) otherwise. You can combine this keyword with ARRAY, FILE, or SCALAR. This keyword cannot be used with the BOOLEAN, COMPLEX, FLOAT, INTEGER, or NUMBER keywords.</p>
        <h2 class="API">Examples</h2>
        <p class="Code">; undefined variable foo</p>
        <p class="Code">PRINT, ISA(foo) ; IDL prints 0</p>
        <p class="Code">&#160;</p>
        <p class="Code">a = 1.0d</p>
        <p class="Code">PRINT, ISA(a) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;; 1</p>
        <p class="Code">PRINT, ISA(a, /NUMBER) &#160;; 1</p>
        <p class="Code">PRINT, ISA(a, /FLOAT) &#160;&#160;; 1</p>
        <p class="Code">PRINT, ISA(a, 'Float') &#160;; 0</p>
        <p class="Code">PRINT, ISA(a, /SCALAR) &#160;; 1</p>
        <p class="Code">PRINT, ISA(a, /SCALAR, /FLOAT) &#160;; 1</p>
        <p class="Code">PRINT, ISA(a, 'IDL_Number')&#160;&#160;; 1</p>
        <p class="Code">PRINT, ISA(a, 'IDL_Variable')&#160;&#160;; 1</p>
        <p class="Code">&#160;</p>
        <p class="Code">a = "hello"</p>
        <p class="Code">PRINT, ISA(a, /STRING) &#160;; 1</p>
        <p class="Code">PRINT, ISA(a, /STRING, /SCALAR) &#160;; 1</p>
        <p class="Code">PRINT, ISA(a, /STRING, /ARRAY) &#160;&#160;; 0</p>
        <p class="Code">&#160;</p>
        <p class="Code">list = LIST(1,2,3)</p>
        <p class="Code">PRINT, ISA(list, 'LIST')&#160;&#160;; 1</p>
        <p class="Code">PRINT, ISA(list, /ARRAY)&#160;&#160;; 1</p>
        <p class="Code">&#160;</p>
        <p class="Code">struct = {MYSTRUCT, field1: 'hi'}</p>
        <p class="Code">PRINT, ISA(struct)&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;; 1</p>
        <p class="Code">PRINT, ISA(struct, 'MYSTRUCT')&#160;&#160;; 1</p>
        <p class="Code">; structures are always arrays
                        </p>
        <p class="Code">PRINT, ISA(struct, /ARRAY)&#160;&#160;&#160;&#160;&#160;&#160;; 1</p>
        <p class="Code">&#160;</p>
        <p class="Code">ptr = PTR_NEW()</p>
        <p class="Code">PRINT, ISA(ptr)&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;; 0</p>
        <p class="Code">PRINT, ISA(ptr, "POINTER")&#160;; 1</p>
        <p class="Code">&#160;</p>
        <p class="Code">obj = OBJ_NEW('IDLgrModel')</p>
        <p class="Code">; IDL basic type
                        </p>
        <p class="Code">PRINT, ISA(obj, 'OBJREF')&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;; 1</p>
        <p class="Code">; my class
                        </p>
        <p class="Code">PRINT, ISA(obj, 'IDLgrModel')&#160;&#160;&#160;&#160;&#160;; 1</p>
        <p class="Code">; a superclass
                        </p>
        <p class="Code">PRINT, ISA(obj, 'IDLitComponent')
                        ; 1</p>
        <p class="Code">; not a superclass
                        </p>
        <p class="Code">PRINT, ISA(obj, 'IDLgrView')&#160;&#160;&#160;&#160;&#160;&#160;; 0</p>
        <h2 class="API">Version History</h2>
        <table style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/VersionTable.css');" cellspacing="0" class="TableStyle_VersionTable">
            <col style="width: 61px;" />
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_ColSep">
                        <p>8.0
                        </p>
                    </td>
                    <td class="TableStyle_VersionTable_Body_0_0_ColEnd">
                        <p>Introduced</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_RowSep_ColSep">8.1</td>
                    <td class="TableStyle_VersionTable_Body_0_0_RowSep_ColEnd">Added NUMBER keyword</td>
                </tr>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_ColSep">8.2</td>
                    <td class="TableStyle_VersionTable_Body_0_0_ColEnd">Added NULL keyword</td>
                </tr>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_RowSep_ColSep">
                        <p>8.4</p>
                    </td>
                    <td class="TableStyle_VersionTable_Body_0_0_RowSep_ColEnd">
                        <p>Added BOOLEAN, COMPLEX, FLOAT, INTEGER, STRING keywords</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColSep">8.5</td>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColEnd">Added support for IDL_Variable and its subclasses</td>
                </tr>
            </tbody>
        </table>
        <h2 class="API">See Also</h2>
        <p><a href="../A/ASSOC.htm#A_850317933_675739">ASSOC</a>, <a href="../S/SIZE.htm#S_820040301_678885">SIZE</a>, <a href="../T/TYPENAME.htm#T_809226861_1160964">TYPENAME</a>,&#160;<a href="../../Creating IDL Programs/Components of the IDL Language/IDL_Data_Types.htm#constants_818058343_672352">IDL Data Types</a></p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>