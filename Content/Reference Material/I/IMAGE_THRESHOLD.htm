<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Routines (alphabetical)|Routines: I">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>IMAGE_THRESHOLD</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/TableStyles/Description.css" rel="stylesheet" />
        <link href="../../Resources/TableStyles/VersionTable.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../../images/ref_part1.htm">Routines (alphabetical)</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="I_list.htm">Routines: I</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">IMAGE_THRESHOLD</span>
        </div>
        <h1 class="Routine"><a name="kanchor1531"></a>IMAGE_THRESHOLD</h1>
        <p>The IMAGE_THRESHOLD function generates a threshold value for an 8 or 16 bit image. </p>
        <p>IMAGE_THRESHOLD returns a binary mask that represents whether any given pixel was below (0) or above (1) the calculated threshold value, effectively turning the input into a binary image.</p>
        <h2 class="API">Examples</h2>
        <p>This examples shows you how to apply IMAGE_THRESHOLD to an image and display the results. This examples uses the default ISODATA algorithm. Copy and paste the following code into IDL's command line:</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Read the image </p>
        <p class="Code">fire = READ_IMAGE(FILEPATH('image_threshold_fire_ex1.png', $</p>
        <p class="Code">&#160;&#160;&#160;SUBDIRECTORY=['examples', 'data']))</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Display the image</p>
        <p class="Code">original = IMAGE(fire)</p>
        <p class="Code">&#160;</p>
        <p>IDL displays the full-color image:</p>
        <p class="Code">&#160;</p>
        <p>
            <img src="../../IDL Graphics/images/image_threshold_fire_ex1.png" />
        </p>
        <p class="Code">&#160;</p>
        <p class="Code">; Apply IMAGE_THRESHOLD to the image </p>
        <p class="Code">; saving the threshold values ("tf") and computing separate</p>
        <p class="Code">; thresholds for each layer using default ISODATA</p>
        <p class="Code">result = IMAGE_THRESHOLD(fire, THRESHOLD=tf, /BYIMAGE)</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Display the threshold values for each layer</p>
        <p class="Code">PRINT, tf</p>
        <p class="Code">&#160;</p>
        <p>IDL displays:</p>
        <p class="Code">100&#160;&#160;          -1 &#160;&#160;         47</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Show each band of the original image </p>
        <p class="Code">; separately in the same window</p>
        <p class="Code">preImage1 = IMAGE(REFORM(fire[0,*,*]), $</p>
        <p class="Code">&#160;&#160;&#160;LAYOUT=[3,2,1]) ;red</p>
        <p class="Code">preImage2 = IMAGE(REFORM(fire[1,*,*]), $</p>
        <p class="Code">&#160;&#160;&#160;LAYOUT=[3,2,2], /CURRENT) ;green</p>
        <p class="Code">preImage3 = IMAGE(REFORM(fire[2,*,*]), $</p>
        <p class="Code">&#160;&#160;&#160;LAYOUT=[3,2,3], /CURRENT) ;blue</p>
        <p class="Code">&#160;</p>
        <p>After the above three lines, IDL displays the following in an image window. Note the separation of the red, green, and blue bands into distinct images using REFORM:</p>
        <p class="Code">&#160;</p>
        <p>
            <img src="../../IDL Graphics/images/image_threshold_fire_ex2.png" class="imgCentered" />
        </p>
        <p class="Code">&#160;</p>
        <p class="Code">; Using the MAX_VALUE property, display each band separately</p>
        <p class="Code">; considering only values 1 and below. This effectively displays</p>
        <p class="Code">; the resulting mask.</p>
        <p class="Code">mask1 = IMAGE(REFORM(result[0,*,*]), MAX_VALUE=1, $</p>
        <p class="Code">&#160;&#160;&#160;LAYOUT=[3,2,4], /CURRENT) ;red</p>
        <p class="Code">mask2 = IMAGE(REFORM(result[1,*,*]), MAX_VALUE=1, $</p>
        <p class="Code">&#160;&#160;&#160;LAYOUT=[3,2,5], /CURRENT) ;green</p>
        <p class="Code">mask3 = IMAGE(REFORM(result[2,*,*]), MAX_VALUE=1, $</p>
        <p class="Code">&#160;&#160;&#160;LAYOUT=[3,2,6], /CURRENT) ;blue</p>
        <p class="Code">&#160;</p>
        <p>After adding the next three lines, IDL displays the following:</p>
        <p class="Code">&#160;</p>
        <p>
            <img src="../../IDL Graphics/images/image_threshold_fire_ex3.png" class="imgCentered" />
        </p>
        <p>See <a href="#Addition" class="selected">Additional Examples</a> and <a href="../../GuideMe/ImageProcessing/ImageThresholding.htm">Image Thresholding Guide Me</a> for more examples using IMAGE_THRESHOLD.</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax" style="font-style: normal;"><i>Result</i> = IMAGE_THRESHOLD(<i>Image</i>[,&#160;/<a href="#BYIMAGE" class="MCXref xref selected">BYIMAGE</a>] [,&#160;<a href="#HISTMAX" class="MCXref xref selected">HISTMAX</a>=<i>value</i>] [,&#160;<a href="#HISTMIN" class="MCXref xref selected">HISTMIN</a>=<i>value</i>] [,&#160;/<a href="#INTERLEA" class="MCXref xref selected">INTERLEAVE</a>] [,&#160;/<a href="#INVERT" class="MCXref xref selected">INVERT</a>] [,&#160;/<a href="#MASK_INV" class="MCXref xref selected">MASK_INVERT</a>] [, <a href="#NBINS" class="selected">NBINS</a>=<i>value</i>] [,&#160;<a href="#THRESHOL" class="MCXref xref selected">THRESHOLD</a>=<i>variable</i>] [,&#160;/<a href="#ISODATA" class="MCXref xref selected">ISODATA</a> | , /<a href="#MAXENTRO" class="selected">MAXENTROPY</a> | , /<a href="#MEAN" class="selected">MEAN</a> | , /<a href="#MINERROR" class="selected">MINERROR</a> | , /<a href="#MOMENTS" class="selected">MOMENTS</a> | , /<a href="#OTSU" class="selected">OTSU</a>])</p>
        <h2 class="API">Return Value</h2>
        <p>Returns a binary mask that represents whether any given pixel was below (0) or above (1) the calculated threshold value.  The returned mask will be the same dimensions as the input image.</p>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">Image</h3>
        <p>A single image or a stack of single-channel images to be processed.  If passing in a stack of images, set the INTERLEAVE keyword.      </p>
        <h2 class="API">Keywords</h2>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>The keywords representing the different thresholding algorithms are mutually exclusive: ISODATA, OTSU, MOMENTS, MAXENTROPY, MINERROR, and MEAN. Attempting to apply more than one algorithm keyword within one command will cause an error. For example, if you apply "/ISODATA" you cannot also apply "/OTSU" in the same command. </p>
        <h3 class="Keyword"><a name="BYIMAGE"></a>BYIMAGE</h3>
        <p>If set, and if the image is a stack of images (such as JPEG), each layer in the stack will be processed individually rather than as a whole. Separate threshold values will be calculated for each layer in the stack.</p>
        <h3 class="Keyword"><a name="HISTMAX"></a>HISTMAX</h3>
        <p>Set this keyword to define the maximum value for the algorithm to consider during processing. This is useful for processing under- or overexposed images.</p>
        <h3 class="Keyword"><a name="HISTMIN"></a>HISTMIN</h3>
        <p>Set this keyword to define the minimum value for the algorithm to consider during processing. This is useful for processing under- or overexposed images.</p>
        <h3 class="Keyword"><a name="INTERLEA"></a>INTERLEAVE</h3>
        <p>Set this keyword to indicate the interleave type in a stack of images. The default value is  0.</p>
        <table style="margin-left: 0;margin-right: auto;caption-side: top;mc-table-style: url('../../Resources/TableStyles/Description.css');" class="TableStyle_Description" cellspacing="0">
            <col class="Column-Column1" />
            <col class="Column-Column1" />
            <thead>
                <tr class="Head-Header1">
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColSep">
                        <p>Value</p>
                    </td>
                    <td class="TableStyle_Description_Head_0_0_RowSep_ColEnd">
                        <p>Description</p>
                    </td>
                </tr>
            </thead>
            <tbody>
                <tr class="Body-Body1">
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColSep">
                        <p>0</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowSep_ColEnd">
                        <p>Band interleaved by pixel (BIP): <i>Input</i> and <i>output</i> images will have dimensions of[<i>Channels, Columns, Rows</i>].</p>
                    </td>
                </tr>
                <tr class="Body-Body2">
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColSep">
                        <p>1</p>
                    </td>
                    <td class="TableStyle_Description_Body_1_0_RowSep_ColEnd">
                        <p>Band interleaved by line (BIL): <i>Input</i> and <i>output</i> images will have dimensions of[<i>Columns, Channels, Rows</i>]. </p>
                    </td>
                </tr>
                <tr class="Body-Body1">
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColSep">
                        <p>2</p>
                    </td>
                    <td class="TableStyle_Description_Body_0_0_RowEnd_ColEnd">
                        <p>Band sequential (BSQ): <i>Input</i> and <i>output</i> images will have dimensions of[<i>Columns, Rows, Channels</i>]. </p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h3 class="Keyword"><a name="INVERT"></a>INVERT</h3>
        <p>This keyword applies an inverse to the image before processing. This keyword is helpful for processing dark images, or when you want the algorithm to define bright spots.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Only available for BYTE&#160;data.</p>
        <h3 class="Keyword"><a name="MASK_INV"></a>MASK_INVERT</h3>
        <p>Set this keyword to invert the return mask such that "1" represents values below the threshold and "0" represents values above the threshold.</p>
        <h3 class="Keyword"><a name="NBINS"></a>NBINS</h3>
        <p>Set this keyword to define the number of bins used when computing the <a href="../H/HISTOGRAM.htm">HISTOGRAM</a>&#160;of the data.</p>
        <h3 class="Keyword"><a name="THRESHOL"></a>THRESHOLD</h3>
        <p>Set this keyword to return a scalar or an array of the final threshold values generated by the image threshold algorithm. For single images, the threshold value will be a scalar. For a stack of images, IDL will return an array of a size equal to the number of channels in the image (i.e., one threshold value per channel).</p>
        <h3 class="Keyword"><a name="ISODATA"></a>ISODATA</h3>
        <p>Set this keyword to apply the<a href="#Resource" class="selected"> Isodata thresholding algorithm</a> to the image during processing. ISODATA is the default.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>The Isodata algorithm works iteratively by calculating an initial threshold that is half the dynamic range of the image or layer, effectively dividing the image into "foreground" (above the initial threshold) and "background" (below the initial threshold) pixels. Next, the algorithm separately calculates the sample mean of the foreground and background pixels, using these new sample means to calculate a new threshold value (the average of the sample means). The process repeats using each new, successive threshold value until the resulting threshold value ceases to change.</p>
        <h3 class="Keyword"><a name="MAXENTRO"></a>MAXENTROPY</h3>
        <p>Set this keyword to apply the <a href="#Resource" class="selected">Maximum Entropy thresholding algorithm</a> during image processing.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>This is an entropy-based thresholding method developed by J. N. Kapur, et. al. It considers the thresholding image as two classes of events, with each class characterized by Probability Density Function (PDF). The method then maximizes the sum of the entropy of the two PDFs to converge on a single threshold value.</p>
        <h3 class="Keyword"><a name="MEAN"></a>MEAN</h3>
        <p>Set this keyword to apply the <a href="#Resource" class="selected"><a href="#Resource" class="selected">Mean thresholding algorithm</a></a><a href="#Resource" class="selected">&#160;</a> during image processing.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>This method takes the mean value of the gray levels as the threshold</p>
        <h3 class="Keyword"><a name="MINERROR"></a>MINERROR</h3>
        <p>Set this keyword to apply the <a href="#Resource" class="selected">Minimum Error thresholding algorithm</a> during image processing.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>This is a histogram shape-based method developed by J. Kittler and J. Illingworth. It approximates the histogram as a bimodal Gaussian distribution and finds a cutoff point. The cost function is based on the Bayes classification rule.</p>
        <h3 class="Keyword"><a name="MOMENTS"></a>MOMENTS</h3>
        <p>Set this keyword to apply the <a href="#Resource" class="selected">Moments thresholding algorithim</a> during image processing.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>This is a moment-based thresholding method developed by W. Tsai which considers the grayscale image as a blurred version of an ideal binary image. This method determines the threshold so that the first three moments of the input image are preserved in the output image.</p>
        <h3 class="Keyword"><a name="OTSU"></a>OTSU</h3>
        <p>Set this keyword to apply the <a href="#Resource" class="selected">Otsu thresholding algorithm</a> during processing.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>This is a histogram shape-based method developed by N. Otsu. It assumes a distinctly bimodal image histogram and uniform illumination and is based on finding a threshold that minimizes the weighted within-class variance. This method works best on images with clearly bimodal histogram distributions.</p>
        <h2 class="API"><a name="Addition"></a>Additional Examples</h2>
        <p>For this example, take one image and run it through each of the thresholding methods to see the differences in output. Copy and paste the code below at the IDL command line to run it:</p>
        <p class="Code">&#160;</p>
        <p class="Code">;Read the image into IDL</p>
        <p class="Code">data = READ_IMAGE(FILEPATH('lymp.png', SUBDIRECTORY=['examples', 'data']))</p>
        <p class="Code">&#160;</p>
        <p class="Code">; Create thresholds using each of the available algorithms</p>
        <p class="Code">; Note the different threshold values</p>
        <p class="Code">iso     = IMAGE_THRESHOLD(data, /ISODATA)</p>
        <p class="Code">otsu    = IMAGE_THRESHOLD(data, /OTSU)</p>
        <p class="Code">moments = IMAGE_THRESHOLD(data, /MOMENTS)</p>
        <p class="Code">me      = IMAGE_THRESHOLD(data, /MAXENTROPY)</p>
        <p class="Code">minerr  = IMAGE_THRESHOLD(data, /MINERROR)</p>
        <p class="Code">mean    = IMAGE_THRESHOLD(data, /MEAN)</p>
        <p>&#160;</p>
        <p class="Code">orig_view = IMAGE(data, TITLE="Original Data", LAYOUT=[4,4,1])</p>
        <p class="Code">iso_view = IMAGE(iso, MAX_VALUE=1, TITLE="Isodata", LAYOUT=[4,4,2], /CURRENT)</p>
        <p class="Code">otsu_view = IMAGE(otsu, MAX_VALUE=1, TITLE="Otsu", LAYOUT=[4,4,3], /CURRENT)</p>
        <p class="Code">mom_view = IMAGE(moments, MAX_VALUE=1, TITLE="Moments", LAYOUT=[4,4,4], /CURRENT)</p>
        <p class="Code">entr_view = IMAGE(me, MAX_VALUE=1, TITLE="Max Entropy", LAYOUT=[4,4,5], /CURRENT)</p>
        <p class="Code">err_view = IMAGE(minerr, MAX_VALUE=1, TITLE="Min Error", LAYOUT=[4,4,6], /CURRENT)</p>
        <p class="Code">mean_view = IMAGE(mean, MAX_VALUE=1, TITLE="Mean", LAYOUT=[4,4,7], /CURRENT)</p>
        <p class="Code">&#160;</p>
        <p>IDL displays:</p>
        <p class="Code">&#160;</p>
        <p>
            <img src="../images/Thresh_AddlEx.png" />
        </p>
        <h2 class="API">Version History</h2>
        <table style="mc-table-style: url('../../Resources/TableStyles/VersionTable.css');margin-left: 0;margin-right: auto;caption-side: top;" cellspacing="0" class="TableStyle_VersionTable">
            <col />
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColSep">
                        <p>8.2.2</p>
                    </td>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColEnd">
                        <p>Introduced.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2 class="API"><a name="Resource"></a>Resources and References</h2>
        <ol>
            <li value="1">MAXENTROPY: J. Kapur, P. Sahoo, and A. Wong, "A New Method for Gray-Level Picture Thresholding Using the Entropy of the Histogram", <i>Graphical Models and Image Processing</i> 29(3): 273-285 (1985).</li>
            <li value="2">ISODATA: T. Ridler and S. Calvard, "Picture thresholding using an iterative selection method", <i>IEEE Transactions on Systems, Man and Cybernetics 8</i>: pp. 630 - 632 (1978). </li>
            <li value="3">
                <p>MINERROR: J. Kittler, and J. Illingworth, "Minimum error thresholding", <i>Pattern Recognition</i> 19: 41-47 (1986).</p>
            </li>
            <li value="4">OTSU: N. Otsu, "A threshold selection method from gray-level histograms", <i>IEEE Trans. Sys., Man., Cyber.</i> 9: 62-66 (1979).</li>
            <li value="5">MOMENTS: W. Tsai, "Moment-preserving thresholding: a new approach", <i>Computer Vision, Graphics, and Image Processing</i> 29: 377-393 (1985).</li>
            <li value="6">MEAN: C. Glasbey, "An analysis of histogram-based thresholding algorithms", <i>CVGIP: Graphical Models and Image Processing</i> 55: 532-537 (1993).</li>
        </ol>
        <h2 class="API">See Also</h2>
        <p><a href="IMAGE.htm">IMAGE</a>, <a href="../R/READ_IMAGE.htm">READ_IMAGE</a>, <a href="../R/REFORM.htm">REFORM</a>, <a href="../../GuideMe/ImageProcessing/ImageThresholding.htm">Image Thresholding Guide Me Example</a></p>
        <p>&#160;</p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>