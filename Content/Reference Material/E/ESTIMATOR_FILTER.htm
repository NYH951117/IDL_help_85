<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Routines (alphabetical)|Routines: E">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>ESTIMATOR_FILTER</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/TableStyles/VersionTable.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../../images/ref_part1.htm">Routines (alphabetical)</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="E_list.htm">Routines: E</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">ESTIMATOR_FILTER</span>
        </div>
        <h1 class="Routine"><a name="E_841667181_1035909"></a><a name="kanchor854"></a><a name="E_841667181_17913"></a>ESTIMATOR_FILTER</h1>
        <p>The ESTIMATOR_FILTER function applies an order statistic noise-reduction filter to a one-channel image.</p>
        <p>For each pixel in the image, the estimator filter analyzes the neighboring pixels. The order statistic estimator is computed for this neighborhood and the pixel is replaced by the result.</p>
        <p>This routine is written in the IDL language. Its source code can be found in the file <code>estimator_filter.pro</code> in the <code>lib</code> subdirectory of the IDL distribution.</p>
        <h2 class="API"><a name="E_841667181_1035914"></a><a name="E_841667181_1035914_PageTOC_ESTIMATOR_FILTER__"></a>Syntax</h2>
        <p class="Syntax"><i>Result</i> = ESTIMATOR_FILTER( <i>ImageData</i>, <i>Width</i> [,&#160;<i>Height</i>] [,&#160;<a href="#E_841667181_1035945" class="selected">INVALID</a>=<i>value</i>] [,&#160;/<a href="#E_841667181_1035950" class="selected">MEDIAN</a>] [,&#160;/<a href="#E_841667181_1035960" class="selected">MIDPOINT</a>] [,&#160;<a href="#E_841667181_1035970" class="selected">MISSING</a>=<i>value</i>] [,&#160;/<a href="#E_841667181_1035979" class="selected">NAN</a>] [,&#160;<a href="#E_841667181_1035983" class="selected">TRUNCATE</a>=<i>value</i>] )</p>
        <h2 class="API"><a name="E_841667181_1035934"></a><a name="E_841667181_1035934_PageTOC_ESTIMATOR_FILTER__"></a>Return Value</h2>
        <p>Returns an array containing the filtered image, which has the same dimensions and type as <i>ImageData</i>.</p>
        <h2 class="API"><a name="E_841667181_1035936"></a><a name="E_841667181_1035936_PageTOC_ESTIMATOR_FILTER__"></a>Arguments</h2>
        <h3 class="Argument">ImageData</h3>
        <p>A two-dimensional array containing the pixel values of the input image.</p>
        <h3 class="Argument">Width</h3>
        <p>The width of the two-dimensional neighborhood. Since the neighborhood is centered on a pixel, this value must be an odd, positive integer.</p>
        <h3 class="Argument">Height</h3>
        <p>The height of the two-dimensional neighborhood. Since the neighborhood is centered on a pixel, this value must be an odd, positive integer. If this value is omitted, <i>Height</i> is set to <i>Width</i>, resulting in a square neighborhood.</p>
        <h2 class="API"><a name="E_841667181_1035943"></a><a name="E_841667181_1035943_PageTOC_ESTIMATOR_FILTER__"></a>Keywords</h2>
        <h3 class="Keyword"><a name="E_841667181_1035945"></a><a name="E_841667181_54396"></a>INVALID</h3>
        <p>Set this keyword to a scalar value of the same type as <i>ImageData</i> that should be used to indicate missing or invalid data within <i>ImageData</i>. Missing data are ignored when computing the mean of an element’s neighborhood. In <i>Result</i>, missing elements are replaced by the mean of all other valid points within that element’s neighborhood.</p>
        <p class="Tip" data-mc-autonum="&lt;b&gt;Tip: &lt;/b&gt;"><span class="autonumber"><span><b>Tip: </b></span></span>The INVALID keyword has the same effect as the NAN keyword, but is useful for byte or integer data which have missing values.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>The INVALID keyword uses a simple comparison to ignore values and should not be set to NaN. For floating-point data, you can use the INVALID and NAN keywords simultaneously to filter out both user-defined values and NaN or Infinity values.</p>
        <h3 class="Keyword"><a name="E_841667181_1035950"></a><a name="E_841667181_43050"></a>MEDIAN</h3>
        <p>Set this keyword to replace a pixel with the neighborhood median value. Using the median value reduces unipolar and bipolar impulse noise (also known as salt-and-pepper noise) without introducing blur.</p>
        <p>For <i>S</i><sub class="italic">x,y</sub>, the <i>m x n</i> neighborhood surrounding the pixel ƒ(<i>x</i>,<i>y</i>), the median pixel is given by: </p>
        <p>
            <img src="../../images/11_11.jpg" />
        </p>
        <h3 class="Keyword"><a name="E_841667181_1035960"></a><a name="E_841667181_25271"></a>MIDPOINT</h3>
        <p>Set this keyword to replace a pixel with the neighborhood midpoint value. Using the midpoint estimator reduces Gaussian noise.</p>
        <p>For <i>S</i><sub class="italic">x,y</sub>, the <i>m x n </i>neighborhood surrounding the pixel ƒ(<i>x</i>,<i>y</i>), the midpoint pixel is given by:</p>
        <p>
            <img src="../../images/11_12.jpg" />
        </p>
        <h3 class="Keyword"><a name="E_841667181_1035970"></a><a name="E_841667181_87358"></a>MISSING</h3>
        <p>Set this keyword to the value that will be substituted for missing data. This keyword is used only if the <a href="#E_841667181_1035945" class="selected">INVALID</a> or <a href="#E_841667181_1035979" class="selected">NAN</a> keyword is set.</p>
        <h3 class="Keyword"><a name="E_841667181_1035979"></a><a name="E_841667181_85410"></a>NAN</h3>
        <p>Set this keyword to check for occurrences of the IEEE floating-point values <i>NaN</i> or <i>Infinity</i> in the input data. Pixels with the value <i>NaN</i> or <i>Infinity</i> are treated as missing data. Missing data are ignored when computing the mean of an element’s neighborhood. In <i>Result</i>, missing elements are replaced by the mean of all other valid points within that element’s neighborhood.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>ESTIMATOR_FILTER should never be called without the NAN keyword if the input array may possibly contain <i>NaN</i> or <i>Infinity</i> values.</p>
        <h3 class="Keyword"><a name="E_841667181_1035983"></a><a name="E_841667181_21695"></a>TRUNCATE</h3>
        <p>Set this keyword to a value between 0 and 100 that represents the percentage of total data to be trimmed from the truncated (or alpha-trimmed) mean of each neighborhood.</p>
        <p>If <i>d</i> is the keyword value, the filter trims the <i>d/2</i>% largest and <i>d/2</i>% smallest values and calculates the mean of the remaining neighborhood values. If <i>d</i>=0, this filter is equivalent to the arithmetic mean filter; if <i>d</i>=100, this filter is equivalent to the median estimator filter.</p>
        <p>For S′<sub class="italic">x,y</sub>, the <i>m x n</i> neighborhood surrounding the pixel ƒ(<i>x</i>,<i>y</i>) with the <i>d/2</i>% largest and smallest values removed from <i>S</i><sub class="italic">x,y</sub>, the truncated mean is given by:</p>
        <p>
            <img src="../../images/11_13.jpg" />
        </p>
        <h2 class="API"><a name="E_841667181_1035996"></a><a name="E_841667181_1035996_PageTOC_ESTIMATOR_FILTER__"></a>Examples</h2>
        <h3>Example 1</h3>
        <p>In the following example, we add some unipolar impulse (salt) noise to an image and filter it with ESTIMATOR_FILTER, using the MEDIAN keyword.</p>
        <p>First, we read the file and add noise to the image:</p>
        <p class="Code">; Read the PNG file<br />file = FILEPATH('moon_landing.png', SUBDIR=['examples','data'])<br />imageOriginal = READ_PNG(file)<br /><br />; Generate some unipolar impulse (salt) noise<br />noise = RANDOMN(SYSTIME(/SECONDS), 300, 300, /UNIFORM)<br />noise[WHERE(noise LE .95)] = 0<br />noise[WHERE(noise GT .95)] = 255<br />imageNoise = imageOriginal+noise &lt; 255 &gt; 0<br /><br />; Filter with 3x3 median filter<br />imageFiltered = ESTIMATOR_FILTER(imageNoise, 3, /MEDIAN)</p>
        <p>Next, we render the result:</p>
        <p class="Code">; Find the image dimensions so we can display three of them<br />; side by side in an iImage iTool<br />dims = [(SIZE(imageOriginal))[1]*3, $<br />&#160;&#160;&#160;(SIZE(imageOriginal))[2]*1+120]<br /><br />; Display the original, noise-added, and filtered images<br />IIMAGE, imageOriginal, VIEW_GRID=[3,1], $<br />&#160;&#160;&#160;VIEW_TITLE='Original Image', $<br />&#160;&#160;&#160;DIMENSIONS=dims, WINDOW_TITLE='ESTIMATOR_FILTER Example', $<br />&#160;&#160;&#160;/NO_SAVEPROMPT<br />IIMAGE, imageNoise, /VIEW_NEXT, VIEW_TITLE='Added Noise'<br />IIMAGE, imageFiltered, /VIEW_NEXT, $<br />&#160;&#160;&#160;VIEW_TITLE='Using ESTIMATOR_FILTER, /MEDIAN'<br />; Increase the text size<br />ISETPROPERTY, 'text*', FONT_SIZE=36</p>
        <p>&#160;</p>
        <p>
            <img src="../../images/estimator_filter_median_ex.gif" />
        </p>
        <h3>Example 2</h3>
        <p>In the following example, we add some uniform noise to an image and filter it with ESTIMATOR_FILTER, using the MIDPOINT keyword.</p>
        <p class="Code">; Read the PNG file<br />file = FILEPATH('moon_landing.png', SUBDIR=['examples','data'])<br />imageOriginal = READ_PNG(file)<br /><br />; Generate some uniform noise<br />noise = randomn(SYSTIME(/SECONDS), 512, 512, /UNIFORM)*150<br />noise = FIX(noise-75)<br />imageNoise = imageOriginal + noise &lt; 255 &gt; 0<br /><br />; Filter with 3x3 midpoint filter<br />imageFiltered = ESTIMATOR_FILTER(imageNoise, 3, $<br />&#160;&#160;&#160;/MIDPOINT)<br /><br />; Find the image dimensions so we can display three of them<br />; side by side in an iImage iTool<br />dims = [(SIZE(imageOriginal))[1]*3, $<br />&#160;&#160;&#160;(SIZE(imageOriginal))[2]*1+120]<br /><br />; Display the original, noise-added, and filtered images<br />IIMAGE, imageOriginal, VIEW_GRID=[3,1], $<br />&#160;&#160;&#160;VIEW_TITLE='Original Image', $<br />&#160;&#160;&#160;DIMENSIONS=dims, WINDOW_TITLE='ESTIMATOR_FILTER Example', $<br />&#160;&#160;&#160;/NO_SAVEPROMPT<br />IIMAGE, imageNoise, /VIEW_NEXT, VIEW_TITLE='Added Noise'<br />IIMAGE, imageFiltered, /VIEW_NEXT, $<br />&#160;&#160;&#160;VIEW_TITLE='Using ESTIMATOR_FILTER, /MIDPOINT'<br />; Increase the text size<br />ISETPROPERTY, 'text*', FONT_SIZE=36</p>
        <h3>Example 3</h3>
        <p>In the following example, we add a mixture of uniform noise and unipolar impulse noise to an image and filter it with ESTIMATOR_FILTER, using the TRUNCATE keyword.</p>
        <p>First, we read the file and add noise to the image:</p>
        <p class="Code">; Read the PNG file<br />file = FILEPATH('moon_landing.png', SUBDIR=['examples','data'])<br />imageOriginal = READ_PNG(file)<br /><br />; Generate a mixture of uniform noise and unipolar impulse noise<br />noise = randomn(SYSTIME(/seconds), 512, 512, /UNIFORM)<br />noise[WHERE(noise GT .98)] = 255<br />noise[WHERE(noise LE .98)] *= 75<br />imageNoise = imageOriginal + noise &lt; 255 &gt; 0<br /><br />; Filter with a 50% 3x3 truncated mean filter<br />imageFiltered = ESTIMATOR_FILTER(imageNoise, 3, $<br />&#160;&#160;&#160;TRUNCATE=50)</p>
        <p>Next, we render the result:</p>
        <p class="Code">; Find the image dimensions so we can display three of them<br />; side by side in an iImage iTool<br />dims = [(SIZE(imageOriginal))[1]*3, $<br />&#160;&#160;&#160;(SIZE(imageOriginal))[2]*1+120]<br /><br />; Display the original, noise-added, and filtered images<br />IIMAGE, imageOriginal, VIEW_GRID=[3,1], $<br />&#160;&#160;&#160;VIEW_TITLE='Original Image', $<br />&#160;&#160;&#160;DIMENSIONS=dims, WINDOW_TITLE='ESTIMATOR_FILTER Example', $<br />&#160;&#160;&#160;&#160;/NO_SAVEPROMPT<br />IIMAGE, imageNoise, /VIEW_NEXT, VIEW_TITLE='Added Noise'<br />IIMAGE, imageFiltered, /VIEW_NEXT, $<br />&#160;&#160;&#160;VIEW_TITLE='Using ESTIMATOR_FILTER, /TRUNCATE'<br />; Increase the text size<br />ISETPROPERTY, 'text*', FONT_SIZE=36</p>
        <h2 class="API"><a name="E_841667181_1036011"></a><a name="E_841667181_1036011_PageTOC_ESTIMATOR_FILTER__"></a>Version History</h2>
        <table style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/VersionTable.css');" cellspacing="0" class="TableStyle_VersionTable">
            <col />
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColSep">
                        <p>7.1</p>
                    </td>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColEnd">
                        <p>Introduced</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2 class="API"><a name="E_841667181_1036018"></a><a name="E_841667181_1036018_PageTOC_ESTIMATOR_FILTER__"></a>See Also</h2>
        <p>“Overview of Image Processing” (<i>Image Processing in IDL</i>) in the <code>help/pdf</code> directory of your IDL installation, 
            <a href="../M/MEAN_FILTER.htm#M_824365677_1160294">MEAN_FILTER</a>, <a href="../B/BANDPASS_FILTER.htm#B_856805997_1044554">BANDPASS_FILTER</a>, <a href="../B/BANDREJECT_FILTER.htm#B_856805997_1044879">BANDREJECT_FILTER</a>, <a href="../W/WIENER_FILTER.htm#W_811389549_1250099">WIENER_FILTER</a>, <a href="../L/LEAST_SQUARES_FILTER.htm#L_826528365_1072970">LEAST_SQUARES_FILTER</a></p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>