<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-US" xml:lang="en-US" data-mc-search-type="Stem" data-mc-help-system-file-name="idl.xml" data-mc-path-to-help-system="../../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Routines (alphabetical)|Routines: J">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>JSON_PARSE</title>
        <link href="../../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Resources/TableStyles/VersionTable.css" rel="stylesheet" />
        <link href="../../Resources/Stylesheets/Doc_Style.css" rel="stylesheet" />
        <script src="../../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix"> </span><a class="MCBreadcrumbsLink" href="../../images/ref_part1.htm">Routines (alphabetical)</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="J_list.htm">Routines: J</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">JSON_PARSE</span>
        </div>
        <h1 class="Routine"><a name="kanchor1567"></a>JSON_PARSE</h1>
        <p>The JSON_PARSE function takes a JSON (JavaScript Object Notation) string or file and converts it into an IDL variable.</p>
        <p>This routine is written in the IDL language. Its source code can be found in the file <code>json_parse.pro</code> in the <code>lib</code> subdirectory of the IDL distribution.</p>
        <p class="Tip" data-mc-autonum="&lt;b&gt;Tip: &lt;/b&gt;"><span class="autonumber"><span><b>Tip: </b></span></span>The default result of JSON_PARSE is either a LIST or an ORDEREDHASH. If you print out the result using <a href="../../Creating IDL Programs/Components of the IDL Language/ImpliedPrint.htm">Implied Print</a>, then the output will automatically be printed in JSON format.</p>
        <h2 class="API">Examples</h2>
        <h4>Convert JSON array into a LIST</h4>
        <p class="Code">json = '[true,null,42,3.14,"Hello"]'</p>
        <p class="Code">result = JSON_PARSE(json)</p>
        <p class="Code">HELP, result</p>
        <p class="Code">result</p>
        <p>IDL&#160;prints:</p>
        <p class="Code">RESULT          LIST  &lt;ID=3  NELEMENTS=5&gt;</p>
        <p class="Code">[</p>
        <p class="Code_Indented">true,</p>
        <p class="Code_Indented">null,</p>
        <p class="Code_Indented">42,</p>
        <p class="Code_Indented">3.1400000000000001,</p>
        <p class="Code_Indented">"Hello"</p>
        <p class="Code">]</p>
        <h4>Convert JSON object into an ORDEREDHASH</h4>
        <p class="Code">json = '{"Jupiter":{"Europa":4.8e22, "Ganymede":1.48e23}}'</p>
        <p class="Code">result = JSON_PARSE(json)</p>
        <p class="Code">HELP, result</p>
        <p class="Code">result</p>
        <p class="Code">PRINT, result['Jupiter'].Keys()</p>
        <p class="Code">PRINT, result['Jupiter', 'Europa']</p>
        <p>IDL prints:</p>
        <p class="Code">RESULT          HASH  &lt;ID=3  NELEMENTS=1&gt;</p>
        <p class="Code">{</p>
        <p class="Code_Indented">"Jupiter":</p>
        <p class="Code_Indented">{</p>
        <p class="Code_Indented2">"Ganymede":     1.4800000e+023,</p>
        <p class="Code_Indented2">"Europa":       4.8000000e+022</p>
        <p class="Code_Indented">}</p>
        <p class="Code">}</p>
        <p class="Code">Ganymede</p>
        <p class="Code">Europa</p>
        <p class="Code">4.8000000e+022</p>
        <h4>Convert JSON array into an IDL array</h4>
        <p class="Code">json = '["Mercury", "Venus", "Earth"]'</p>
        <p class="Code">result = JSON_PARSE(json, /TOARRAY)</p>
        <p class="Code">PRINT, result</p>
        <p>IDL prints:</p>
        <p class="Code">Mercury</p>
        <p class="Code">Venus</p>
        <p class="Code">Earth</p>
        <h4>Convert an IDL structure into a JSON string and back into an IDL structure</h4>
        <p class="Code">mystruct = {TRUE: !TRUE, FALSE: !FALSE, INT: 5, FLOAT: 3.14, $</p>
        <p class="Code_Indented"> STR: "Hello", INTARRAY: [1,2,3,4,5], FLOATARRAY: [1.0,2.0,3.0]}</p>
        <p class="Code">json = JSON_SERIALIZE(mystruct)</p>
        <p class="Code">output = JSON_PARSE(json, /TOARRAY, /TOSTRUCT)</p>
        <p class="Code">HELP, output</p>
        <p>IDL&#160;prints:</p>
        <p class="Code">** Structure &lt;1d8ea18&gt;, 7 tags, length=104, data length=98, refs=1:</p>
        <p class="Code">TRUE&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BOOLEAN&#160;&#160;&#160;&#160;true (1)</p>
        <p class="Code">FALSE&#160;&#160;&#160;&#160;&#160;&#160;&#160;BOOLEAN&#160;&#160;&#160;&#160;false (0)</p>
        <p class="Code">INT&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;LONG64&#160;&#160;&#160;&#160;&#160;5</p>
        <p class="Code">FLOAT&#160;&#160;&#160;&#160;&#160;&#160;&#160;DOUBLE&#160;&#160;&#160;&#160;&#160;3.1400001</p>
        <p class="Code">STR&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;STRING&#160;&#160;&#160;&#160;&#160;'Hello'</p>
        <p class="Code">INTARRAY&#160;&#160;&#160;&#160;LONG64&#160;&#160;&#160;&#160;&#160;Array[5]</p>
        <p class="Code">FLOATARRAY&#160;&#160;DOUBLE&#160;&#160;&#160;&#160;&#160;Array[3]</p>
        <h2 class="API">Syntax</h2>
        <p class="Syntax"><i>Result</i> = JSON_PARSE(<i>String</i>, /<a href="#DICTIONARY" class="selected">DICTIONARY</a>,&#160;/<a href="#FOLD_CASE" class="selected">FOLD_CASE</a>, /<a href="#TOARRAY" class="selected">TOARRAY</a>, /<a href="#TOSTRUCT" class="selected">TOSTRUCT</a> )</p>
        <h2 class="API">Return Value</h2>
        <p>   If <i>String</i> begins with a curly brace "{", then the result is an <a href="../O/ORDEREDHASH.htm">ORDEREDHASH</a> (or a structure if TOSTRUCT is set), containing the ordered key-value pairs from the JSON string. If <i>String</i> begins with a square bracket "[", then the result is a <a href="../L/LIST.htm">LIST</a> (or an array if TOARRAY is set), containing the ordered collection of values.</p>
        <p>If <i>String</i> is a scalar string that does not begin with "{" or "[", then it is assumed to be a file name. If the file exists, then the contents of the file are read and parsed.</p>
        <p>When converting JSON values into IDL variables, the following rules are used:</p>
        <ul>
            <li value="1">     "null" becomes !NULL, unless the TOSTRUCT keyword is set, in which case the string "!NULL" is used.</li>
            <li value="2">     "false" and "true" become IDL <a href="../B/BOOLEAN.htm">booleans</a>.</li>
            <li value="3">An integer value in the range -2<sup>63</sup> to 2<sup>63</sup>–1 becomes an IDL variable of type LONG64.</li>
            <li value="4">    An integer value in the range 2<sup>63</sup> to 2<sup>64</sup>–1 becomes an IDL variable of type ULONG64.</li>
            <li value="5">    An integer value greater than or equal to 2<sup>64</sup> becomes an IDL variable of type DOUBLE (in this case some precision will be lost as doubles can only represent an exact integer up to about 2<sup>53</sup>).</li>
            <li value="6">     A floating-point number becomes an IDL variable of type DOUBLE.</li>
            <li value="7">     A string will be converted to an IDL string. Any escaped characters (preceded by a "\") will be converted back to normal characters.</li>
            <li value="8">     A JSON <i>array</i> becomes an IDL <a href="../L/LIST.htm">LIST</a> variable, unless the TOARRAY keyword is set, in which case an IDL array is returned.</li>
            <li value="9">     A JSON <i>object</i> becomes an IDL <a href="../O/ORDEREDHASH.htm">ORDEREDHASH</a> variable, unless either the DICTIONARY or TOSTRUCT keyword is set.</li>
        </ul>
        <h2 class="API">Arguments</h2>
        <h3 class="Argument">String</h3>
        <p><i>String</i> must be a valid JSON string containing either a    JSON <i>object</i> of name-value pairs, or a JSON <i>array</i> of values. If <i>String</i> is not valid JSON, JSON_PARSE will parse <i>String</i> until the first instance of invalid JSON.</p>
        <p><i>String</i> can also be a file name. In this case the entire file is read into memory and parsed as a single JSON string.</p>
        <h2 class="API">Keywords</h2>
        <h3 class="Keyword"><a name="DICTIONARY"></a>DICTIONARY</h3>
        <p>If this keyword is set, then any JSON <i>objects</i> within the result (including the result itself) will be returned as <a href="../D/DICTIONARY.htm">DICTIONARY</a> variables, instead of ORDEREDHASH variables. For IDL dictionaries, the keys are case <i>insensitive</i> and can be accessed using IDL's "dot" notation, similar to IDL structures. For example:</p>
        <p class="Code">json = '{"Jupiter":{"Europa":4.8e22, "Ganymede":1.48e23}}'</p>
        <p class="Code">result = JSON_PARSE(json, /DICTIONARY)</p>
        <p class="Code">HELP, result</p>
        <p class="Code">HELP, result.jupiter ; case insensitive</p>
        <p class="Code">PRINT, result.jupiter.Keys()</p>
        <p class="Code">PRINT, result.jupiter.europa</p>
        <p>IDL prints:</p>
        <p class="Code">RESULT          DICTIONARY &lt;ID=3  NELEMENTS=1&gt;</p>
        <p class="Code">&lt;Expression&gt;    DICTIONARY  &lt;ID=10  NELEMENTS=2&gt;</p>
        <p class="Code">Ganymede Europa</p>
        <p class="Code">4.8000000e+022</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>The JSON format specifies that key names are case <i>sensitive</i>. If you have a JSON object with two keys that are identical except for their case, then using the DICTIONARY keyword will only return the second key/value pair.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>To use the DICTIONARY keyword successfully, all of the JSON keys must be valid IDL variable names (no special characters or spaces). If any keys are not valid then an error is thrown.</p>
        <h3 class="Keyword"><a name="FOLD_CASE"></a>FOLD_CASE</h3>
        <p>By default, the keys returned in the ORDEREDHASH are case sensitive. If the FOLD_CASE keyword is set, then the ORDEREDHASH variable will be case insensitive. For example:</p>
        <p class="Code">json = '{"My Key":1.23}'</p>
        <p class="Code">result = JSON_PARSE(json, /FOLD_CASE)</p>
        <p class="Code">PRINT, result.Keys()</p>
        <p class="Code">PRINT, result['MY KEY'] ; ignore case</p>
        <p>IDL prints:</p>
        <p class="Code">My Key</p>
        <p class="Code">1.2300000</p>
        <p>This keyword is ignored when either the DICTIONARY or TOSTRUCT keyword is set.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>When using FOLD_CASE, the original case is preserved within the OrderedHash key list. You could therefore pass this OrderedHash back into JSON_SERIALIZE to reproduce the original JSON.</p>
        <h3 class="Keyword"><a name="TOARRAY"></a>TOARRAY</h3>
        <p>If this keyword is set, then any JSON <i>arrays</i> within the result (including the result itself) will be returned as IDL arrays, instead of LIST variables.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>For this keyword to work correctly, each JSON <i>array</i> within the result must contain values that can all be converted to the same data type. The data type of each array will be determined by using the "highest" type within that array. For example, if your JSON array has two integer values and one decimal value, the resulting array will have type DOUBLE. For details on the rules used for type promotion, see <a href="../L/LIST.htm#ToArrayMethod">List::ToArray</a> under the PROMOTE_TYPE keyword.</p>
        <h3 class="Keyword"><a name="TOSTRUCT"></a>TOSTRUCT</h3>
        <p>If this keyword is set, then any JSON <i>objects</i> within the result (including the result itself) will be returned as IDL structures, instead of ORDEREDHASH variables.</p>
        <p class="Note" data-mc-autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="autonumber"><span><b>Note: </b></span></span>Since IDL structure tags must be valid IDL identifiers, any spaces or special characters within the JSON keys will be converted to underscore characters. In addition, all keys will be converted to uppercase. Finally, any "null" values will be converted to the string "!NULL" since you cannot have a null field in a structure. If you need to convert the result back into an equivalent JSON string, you should not use this keyword and return the result as an ORDEREDHASH instead.</p>
        <h2 class="API">Version History</h2>
        <table style="caption-side: top;mc-table-style: url('../../Resources/TableStyles/VersionTable.css');" class="TableStyle_VersionTable" cellspacing="0">
            <col />
            <col />
            <tbody>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_ColSep">
                        <p>8.2</p>
                    </td>
                    <td class="TableStyle_VersionTable_Body_0_0_ColEnd">
                        <p>Introduced</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_RowSep_ColSep">8.3</td>
                    <td class="TableStyle_VersionTable_Body_0_0_RowSep_ColEnd">
                        <p>Added DICTIONARY keyword</p>
                        <p>Updated references from HASH to ORDEREDHASH</p>
                    </td>
                </tr>
                <tr>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColSep">8.4</td>
                    <td class="TableStyle_VersionTable_Body_0_0_RowEnd_ColEnd">
                        <p>The TOARRAY keyword now uses all of the array elements to determine the type, not just the first element. Values for "false" and "true" now use BOOLEAN variables.</p>
                        <p>Added FOLD_CASE keyword.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2 class="API">Resources and References</h2>
        <p>JSON (JavaScript Object Notation) is a lightweight data-interchange format that is easy for humans to read and write, and for machines to parse and generate. JSON was designed as an alternative to XML, and is based on a subset of the JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999. Further details can be found at <a href="http://www.json.org/">http://www.json.org</a>.</p>
        <h2 class="API">See Also</h2>
        <p><a href="JSON_SERIALIZE.htm">JSON_SERIALIZE</a>, <a href="../H/HASH.htm">HASH</a>, <a href="../O/ORDEREDHASH.htm">ORDEREDHASH</a>, <a href="../L/LIST.htm">LIST</a>, <a href="../O/ORDEREDHASH.htm">IDLnetURL </a></p>
        <div class="mp_footer">© <span class="DocumentTitleCopyrightYear">2015</span>&#160;<span class="DocumentTitleCopyrightCompanyName">Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation</span>. All Rights Reserved. This information is not subject to the controls of the International Traffic in Arms Regulations (ITAR) or the Export Administration Regulations (EAR). However, this information may be restricted from transfer to various embargoed countries under U.S. laws and regulations.</div>
    </body>
</html>