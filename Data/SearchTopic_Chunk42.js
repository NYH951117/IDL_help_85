define({"2993":{i:0.000102543907312952,u:"../Content/External Development/IDLInternals - Miscellaneous/Macros.htm",a:"The macros defined in idl_export.h handle recurring small jobs. Those macros not discussed elsewhere in this book are covered here. IDL_ABS(x) IDL_ABS() accepts a single argument of any numeric C type, and returns its absolute value. IDL_ABS() evaluates its argument more than once, so be careful to ...",t:"Macros"},"2994":{i:0.000169408416814879,u:"../Content/External Development/Adding System Routines/AddingSystRoutines.htm",a:"Adding System Routines ",t:"Adding System Routines"},"2995":{i:5.54291242025632E-05,u:"../Content/External Development/Adding System Routines/IDLSystemRoutinesPre80.htm",a:"An IDL system routine is an IDL procedure or function that is written in a compiled language with an IDL specific interface and linked into IDL, instead of being written in the IDL language itself. The best way to create an IDL system routine is to compile and link the routine into a sharable ...",t:"IDL and System Routines Pre-IDL 8.0"},"2996":{i:5.54291242025632E-05,u:"../Content/External Development/Adding System Routines/SystRoutineInterface.htm",a:"All IDL system routines must supply the same calling interface to the system, differing only in that system functions must return an IDL_VPTR to the IDL_VARIABLE that contains the result, while system procedures do not return anything. Typical system routine definitions are: IDL_VPTR my_function(int ...",t:"System Routine Interface"},"2997":{i:5.54291242025632E-05,u:"../Content/External Development/Adding System Routines/ExampleHelloWorld.htm",a:"Our version of this now-famous program is a system function that returns a scalar containing the text “Hello World!”: #include \u003cstdio.h\u003e #include \"idl_export.h\" IDL_VPTR hello_world(int argc, IDL_VPTR argv[]) { return(IDL_StrToSTRING(\"Hello World!\")); } This is about as simple as an IDL system ...",t:"Example: Hello World"},"2998":{i:5.54291242025632E-05,u:"../Content/External Development/Adding System Routines/ExampeMult2.htm",a:"The system function example shown in the following figure expects a single argument (an array). It returns a single-precision, floating-point array that contains the values from the argument, multiplied by two. #Include the required header files. #include \u003cstdio.h\u003e #include \"idl_export.h\"  # Every ...",t:"Example: MULT2"},"2999":{i:5.54291242025632E-05,u:"../Content/External Development/Adding System Routines/ExampleRSUM.htm",a:"This example shows how a simple routine can be developed in stages. RSUM is a function that returns the running sum of the values in its single input argument. We will present three versions of this routine, each one of which represents an improvement in functionality and flexibility. All three ...",t:"Example: Using Routine Design Iteration (RSUM)"},"3000":{i:0.000466767071129474,u:"../Content/External Development/Adding System Routines/RegisterRoutines.htm",a:"IDL_SysRtnAdd() The IDL_SysRtnAdd() function adds system routines to IDL’s internal tables of system functions and procedures. As a programmer, you will need to call this function directly if you are linking a version of IDL to which you are adding routines, although this is very rare and not ...",t:"Registering Routines"},"3001":{i:5.54291242025632E-05,u:"../Content/External Development/Adding System Routines/EnableDisableSysRoutines.htm",a:"The following IDL internal functions allow the enabling and/or disabling of  system routines. Disabled routines will throw an error when called from IDL code. These routines are primarily meant for authors of Runtime or Callable IDL applications. IDL_SysRtnEnable() The IDL_SysRtnEnable() function is ...",t:"Enabling and Disabling System Routines"},"3002":{i:0.000537510878055694,u:"../Content/External Development/Adding System Routines/LinkImage.htm",a:"The IDL user level LINKIMAGE procedure makes the functionality of the IDL_ SysRtnAdd() function available to IDL programs. It allows IDL programs to merge routines written in other languages  at run-time. Each call to LINKIMAGE defines a new system procedure or function by specifying the routine’s ...",t:"Adding System Routines with LINKIMAGE"},"3003":{i:0.000988457078595291,u:"../Content/External Development/Adding System Routines/DLM.htm",a:"This section covers the following topics: DLM Concepts How DLMs Work The Module Description (.dlm) File The IDL_Load() function DLM Example Packaging and Installing DLMs DLM Concepts The IDL_SYSFUN_DEF2 structure, which is described in “ Registering Routines ,\" contains all the information required ...",t:"DLMs"},"3004":{i:7.229027636739E-05,u:"../Content/External Development/Callable IDL/CallableIDL.htm",a:"Callable IDL ",t:"Callable IDL"},"3005":{i:5.54291242025632E-05,u:"../Content/External Development/Callable IDL/CallingIDL.htm",a:"You can call IDL as a subroutine from other programs. This capability is referred to as Callable IDL to distinguish it from the more common case of calling your code from IDL (as with CALL_EXTERNAL or as a system routine ( LINKIMAGE , Dynamically Loadable Modules )). How Callable IDL is Implemented ...",t:"Calling IDL as a Subroutine"},"3006":{i:5.54291242025632E-05,u:"../Content/External Development/Callable IDL/CallableIDLAppropriate.htm",a:"Although Callable IDL is very powerful and convenient, it is not always the best method of communication between with other programs. There may be easier approaches that will solve a given problem. See Supported Inter-Language Communication Techniques in IDL for alternatives. IDL will not integrate ...",t:"When is Callable IDL Appropriate"},"3007":{i:5.54291242025632E-05,u:"../Content/External Development/Callable IDL/LicensingIssues.htm",a:"Licensing Issues If you intend to distribute an application that calls IDL, note that each copy of your application must have access to a properly licensed copy of the IDL library. For availability of a runtime version of IDL, contact Exelis VIS or your IDL distributor. ",t:"Licensing Issues"},"3008":{i:7.22137692890558E-05,u:"../Content/External Development/Callable IDL/UsingCallableIDL.htm",a:"The process of using Callable IDL has three stages: initialization, IDL use, and cleanup. Between the initialization and the cleanup, your program contains a complete active IDL session just as if a user were typing commands at an IDL\u003e prompt. In addition to the usual IDL abilities, you can import ...",t:"Using Callable IDL"},"3009":{i:6.15672984405394E-05,u:"../Content/External Development/Callable IDL/Initialization.htm",a:"Use IDL_Initialize() function  to prepare Callable IDL. As a convenience in simpler situations, the IDL_Init() function may also be used for this purpose. IDL can only be initialized once for a given process; calling an IDL initialization function more than once for a process will cause an error. If ...",t:"Initialization Using IDL_Initialize()"},"3010":{i:6.15672984405394E-05,u:"../Content/External Development/Callable IDL/DivertingIDLOutput.htm",a:"When using a tty-based interface (available only on UNIX platforms), IDL sends its output to the screen for the user to see. When using a GUI-based interface (any platform), the output goes to the IDL log window. The default output function is automatically installed by IDL at startup. To divert IDL ...",t:"Diverting IDL Output"},"3011":{i:6.15672984405394E-05,u:"../Content/External Development/Callable IDL/ExecuteIDL.htm",a:"IDL_ExecuteStr() executes a single IDL command, while IDL_Execute() takes an array of commands and executes them in order. In both cases, the commands are null terminated strings—just as they would be typed by an IDL user at the IDL\u003e prompt. It is important to realize that the full abilities of IDL ...",t:"Executing IDL Statements"},"3012":{i:5.54291242025632E-05,u:"../Content/External Development/Callable IDL/RuntimeEmbedded.htm",a:"If you distribute programs that call IDL with a runtime license or an embedded license, use IDL_RuntimeExec() . After initialization IDL_RuntimeExec() can be used to run self-contained IDL applications from a Save/Restore file. IDL_RuntimeExec() restores the file, then attempts to call an IDL ...",t:"Runtime and Embedded IDL - IDL_RuntimeExec()"},"3013":{i:6.15672984405394E-05,u:"../Content/External Development/Callable IDL/CleanupCallable.htm",a:"After your program is finished using IDL  it should call IDL_Cleanup() . This allows IDL to exit gracefully. IDL_Cleanup() returns a status value that can be passed to Exit() . int IDL_Cleanup(int just_cleanup); where: just_cleanup If TRUE, IDL_Cleanup() does all the process shutdown tasks, but ...",t:"IDL_Cleanup()"},"3014":{i:6.58298397616876E-05,u:"../Content/External Development/Adding External Widgets to IDL/ExternalWidgets.htm",a:"Adding External Widgets to IDL ",t:"Adding External Widgets to IDL"},"3015":{i:7.89865157577579E-05,u:"../Content/External Development/Adding External Widgets to IDL/IDLExternalWidgets.htm",a:"This topic describes stub widgets, an IDL widget type not documented in the main IDL online help. Stub widgets allow CALL_EXTERNAL , LINKIMAGE , DLM , and Callable IDL users to add their own widgets to IDL widget hierarchies. This feature depends on your system providing the window system libraries ...",t:"IDL and External Widgets"},"3016":{i:5.54291242025632E-05,u:"../Content/External Development/Adding External Widgets to IDL/InternalCallbackFn.htm",a:"Real widget toolkits (upon which IDL widgets are built) are event-driven. C language programs register interest in specific events by providing callback functions that are called when that event occurs. All but the most basic of widgets are capable of generating events. In order for IDL stub widgets ...",t:"Internal Callback Functions"},"3017":{i:5.54291242025632E-05,u:"../Content/External Development/Adding External Widgets to IDL/WIDGET_STUB_Example.htm",a:"The following example adds the Motif ArrowButton widget to UNIX IDL in the form of an IDL program named widget_arrowb.pro . The primary user interface to our arrow button widget is the WIDGET_ARROWB function. It presents an interface much like any of the built in WIDGET_* functions provided by IDL. ...",t:"UNIX WIDGET_STUB Example: WIDGET_ARROWB"},"3018":{i:5.50327019655568E-05,u:"../Content/External Development/Obsolete Internal Interfaces/ObsIntInterfaces.htm",a:"Obsolete Internal Interfaces ",t:"Obsolete Internal Interfaces"},"3019":{i:5.54291242025632E-05,u:"../Content/External Development/Obsolete Internal Interfaces/Obs63.htm",a:"Prior to IDL 6.3, the IDL_Win32Init() function was used to initialize IDL in callable IDL applications for the Microsoft Windows environment, It was obsoleted in IDL 6.3, replaced by the IDL_Initialize() function that offers the same abilities in addition to being usable on a cross platform basis. ...",t:"Interfaces Obsoleted in IDL 6.3"},"3020":{i:5.54291242025632E-05,u:"../Content/External Development/Obsolete Internal Interfaces/Obs55.htm",a:"The following areas changed in IDL 5.5, requiring the introduction of new interfaces, and causing some old interfaces to become obsolete. These old interfaces remain in IDL and can be used by user code. However, new code should not use them, and old code might benefit from migration as part of ...",t:"Interfaces Obsoleted in IDL 5.5"},"3021":{i:5.54291242025632E-05,u:"../Content/External Development/Obsolete Internal Interfaces/Obs521.htm",a:"Changes were required to implement the ability to enable and disable IDL system routines from runtime and callable IDL. Rather than alter the IDL_SYSFUN_DEF structure, and the IDL_AddSystemRoutine() function in an incompatible way, a new structure (IDL_SYSFUN_DEF2) and new function (IDL_SysRtnAdd()) ...",t:"Interfaces Obsoleted in IDL 5.2.1"},"3022":{i:5.54291242025632E-05,u:"../Content/External Development/Obsolete Internal Interfaces/SimplifiedRoutineInvocation.htm",a:"The functions and techniques described in this section are no longer widely used, and are considered functionally obsolete although they continue to be supported by Exelis VIS . This section is supplied to help those maintaining older code. New code should be written using the information found in ...",t:"Simplified Routine Invocation"},"3023":{i:5.54291242025632E-05,u:"../Content/External Development/Obsolete Internal Interfaces/ObsErrHandl.htm",a:"The following variables can be accessed only on UNIX. These variables have been superseded by the functions listed in “Functions for Returning System Variables”, which are available on all platforms. In all cases, these variables should be considered READ-ONLY:  IDL System Variable Internal Variable ...",t:"Obsolete Error Handling API"},"3024":{i:5.50327019655568E-05,u:"../Content/IDLdoc/IDLdoc.htm",a:"Advanced Code Commenting with IDLdoc The IDL Workbench provides quick information about IDL routines via the Hover Help and Content Assist features. Using a special commenting scheme called IDLdoc, you control how Hover Help displays for routines that you write. ",t:"Advanced Code Commenting with IDLdoc"},"3025":{i:5.50327019655568E-05,u:"../Content/IDLdoc/Code_Comments.htm",a:"When you open a code file, isn’t it a relief to see that the developer left some documentation? You can return the favor for other developers by using the commenting features available in IDL. For basic documentation, you can use the standard comments that begin with a semicolon (;). IDL ignores the ...",t:"Code Comments"},"3026":{i:7.0625309954478E-05,u:"../Content/IDLdoc/Formatting_IDLdoc_Commen.htm",a:"IDLdoc comment blocks begin with “ ;+ ” (semicolon and plus sign) and end with “ ;- ” (semicolon and minus sign) characters. The following example shows an IDLdoc comment block: ;+ ; This widget program allows a user to display data as a surface ; using OG. The data can be rotated interactively. ; ...",t:"Formatting IDLdoc Comment Blocks"},"3027":{i:7.0625309954478E-05,u:"../Content/IDLdoc/IDLdoc_Comment_Tags.htm",a:"If IDLdoc comment tags are present in a .PRO file, the IDL Workbench uses them to format Hover Help for the routine. IDLdoc supports three format types. (These types are documented in “Getting Started with IDLdoc.” See IDLdoc Resources .) The IDL Workbench recognizes all of the formats, but gives ...",t:"IDLdoc Comment Tags"},"3028":{i:0.000115064252248263,u:"../Content/IDLdoc/IDLdoc_Resources.htm",a:"IDLdoc Resources The following links are resources that you may need when working with IDLdoc: Getting Started with IDLdoc: http://idldoc.idldev.com . Michael Galloy’s web site: http://michaelgalloy.com  ",t:"IDLdoc Resources"},"3029":{i:0.000112538768162592,u:"../Content/IDLdoc/Using_IDLdoc_to_Generate.htm",a:"Michael Galloy developed IDLdoc to generate Javadoc-style HTML documents from comments in IDL .PRO code. Galloy ( http://michaelgalloy.com ) provides the code for IDLdoc as well as the documentation for using it. Some developers who build IDL applications distribute IDLdoc-generated documentation to ...",t:"Using IDLdoc to Generate Documentation"},"3030":{i:0.000433020010590288,u:"../Content/DICOM_Medical/Expanded DICOM Support in IDL/ExpandedDICOMFunctionality.htm",a:"Using DICOM Network Services Query a remote machine and retrieve selected DICOM files Build custom queries Send files to a remote destination Troubleshoot network connections using echo See Using IDL DICOM Network Services for complete details on using the DICOM Network Services utility. The section ...",t:"Expanded DICOM Functionality in IDL"},"3031":{i:5.50327019655568E-05,u:"../Content/DICOM_Medical/Expanded DICOM Support in IDL/DICOMPlatformSupportLicensing.htm",a:"Supported Platforms See IDL Feature Support for a current list of operating systems that support the expanded DICOM functionality in IDL. Licensing Requirements For more information about the following items, contact your Exelis VIS sales representative or technical support. To redistribute ...",t:"DICOM Platform Support and Licensing "},"3032":{i:0.000180968278103003,u:"../Content/DICOM_Medical/Expanded DICOM Support in IDL/ComplianceWithDICOMStandard.htm",a:"Information on the compliance of IDL’s DICOM Network Services and the IDLffDicomEx object to the DICOM standard are provided in a conformance statement. IDL, the IDL DICOM toolkit, and the contents of the IDL documentation are not marketed as products with FDA Section 510(k) premarket notification ...",t:"Compliance with the DICOM Standard"},"3033":{i:0.000199515085258783,u:"../Content/DICOM_Medical/Using IDL DICOM Network Services/Overview.htm",a:"IDL DICOM Network Services supports SCU (service class user) and SCP (service class provider) network functionality including: Echo SCU Query/Retrieve SCU Storage SCU Storage SCP This feature requires an additional-cost license key to access the functionality. For more information, contact your ...",t:"Overview of DICOM Network Services"},"3034":{i:0.000163010766117081,u:"../Content/DICOM_Medical/Using IDL DICOM Network Services/DeterminingConfigurationParameters.htm",a:"When defining Application Entities, you will need the host name (or IP address), and port number of your machine and any remote machines you will connect to, in addition to other information. This section provides information on how to retrieve this information. Determining the IP Address Determine ...",t:"Determining Configuration Parameters"},"3035":{i:0.000539586506994678,u:"../Content/DICOM_Medical/Using IDL DICOM Network Services/StartingNetworkServer.htm",a:"The DICOM Network Services utility allows you to create and store Application Entity definitions in a local configuration file or a system configuration file. This distinction is only required when you define an Application Entity associated with the Storage SCP service, or configure properties of ...",t:"Starting the Network Services Utility  "},"3036":{i:0.000210856073416377,u:"../Content/DICOM_Medical/Using IDL DICOM Network Services/LocalVersusSystemConfiguration.htm",a:"There are two modes of configuration available; local configuration and system configuration. Underlying each set of user-defined settings is an .xml file. Changes made to Application Entities (AEs) defined in the system configuration and local configuration mode of the DICOM Network Services ...",t:"Local Versus System Configuration"},"3037":{i:5.50327019655568E-05,u:"../Content/DICOM_Medical/Using IDL DICOM Network Services/StartingInLocalMode.htm",a:"Enter the following at the IDL command prompt to launch the DICOM Network Services utility in local configuration mode: DICOMEX_NET This provides access to the local Configuration tab, the Query Retrieve SCU tab and the Storage SCU tab. On Windows, you can also select Start  \u003e Programs  \u003e IDL x.x  \u003e ...",t:"Starting the DICOM Network Services Utility in Local Mode"},"3038":{i:0.000102610175936086,u:"../Content/DICOM_Medical/Using IDL DICOM Network Services/StartingInSystemMode.htm",a:"Use the SYSTEM keyword to launch the DICOM Network Services utility in system configuration mode: DICOMEX_NET, /SYSTEM This provides access to the system Configuration tab. On Windows, you can also select Start  \u003e Programs  \u003e IDL x.x  \u003e DICOM Network Services and click the System button to start the ...",t:"Starting the DICOM Network Services Utility in System Mode"},"3039":{i:5.50327019655568E-05,u:"../Content/DICOM_Medical/Using IDL DICOM Network Services/CompletingRequiredSetup.htm",a:"Before using the DICOM Network Services utility to query, retrieve or transfer files across a network, you need to define Application Entities (AEs) for the needed DICOM services. AEs define the machine characteristics where a local or remote DICOM network service exists. The exact steps depend on ...",t:"Completing Required Setup Tasks"},"3040":{i:0.000323719167665779,u:"../Content/DICOM_Medical/Using IDL DICOM Network Services/ConfiguringSystemToReceiveFiles.htm",a:"Storage is the process by which DICOM files are transferred from one DICOM device to another. In order to receive files, you need to specify a Storage SCP Application Entity for the machine that will store the files that are returned. This entity uses the Storage SCP Service, which listens at a ...",t:"Configuring Your System to Receive Files"},"3041":{i:0.000110065111750945,u:"../Content/DICOM_Medical/Using IDL DICOM Network Services/ConfiguringApplicationEntity.htm",a:"An Application Entity (AE) is a local or remote DICOM service. In an image archival system, common DICOM services include storage and query/retrieve. Devices (local or remote imaging equipment or computers) may support one or more services, and one or more service roles. Roles define a device as a ...",t:"Configuring an Application Entity"},"3042":{i:0.000196007179419888,u:"../Content/DICOM_Medical/Using IDL DICOM Network Services/DefaultApplicationEntities.htm",a:"The DICOM Network Services utility defines four default Application Entities: IDL_AE_QUERY_SCU — uses the Query SCU service, which lets you ask a device (a file source) about DICOM files contained in its database. This service works in conjunction with the Query SCP service, which allows you ...",t:"Default Application Entities"},"3043":{i:0.000213178005486471,u:"../Content/DICOM_Medical/Using IDL DICOM Network Services/DefiningNewApplicationEntity.htm",a:"To define a new Application Entity for a service, complete the following steps: Select the Configuration tab of the DICOM Network Services utility that has been started in local or system configuration mode. See Starting the Network Services Utility for details. In the Application Entities area, ...",t:"Defining a New Application Entity"},"3044":{i:0.000110568121730554,u:"../Content/DICOM_Medical/Using IDL DICOM Network Services/ModifyingApplicationEntity.htm",a:"On the Configuration tab of the DICOM Network Services utility, you can modify the characteristics of default or custom application entities. For the default, Application Entities (those listed in Default Application Entities ), you can modify the following fields: Application Entity Title Host Name ...",t:"Modifying an Application Entity"},"3045":{i:0.000110568121730554,u:"../Content/DICOM_Medical/Using IDL DICOM Network Services/DeletingApplicationEntity.htm",a:"You can delete any custom Application Entity definitions that you have defined. You cannot delete the default Application Entities (those listed in Default Application Entities ). To delete an Application Entity, complete the following steps: Select the Application Entity to be deleted from the ...",t:"Deleting an Application Entity "},"3046":{i:0.0002798662782958,u:"../Content/DICOM_Medical/Using IDL DICOM Network Services/DefiningMachineToBeQueried.htm",a:"Query/Retrieve is the process by which DICOM devices request information from a database and retrieve data and images through those requests. To form an association, the local Query Retrieve SCU connects with a remote Query Retrieve SCP. The client at the Query Retrieve SCU machine sends a request ...",t:"Defining a Machine to Be Queried"},"3047":{i:0.000148180269649948,u:"../Content/DICOM_Medical/Using IDL DICOM Network Services/QueryingRemoteMachine.htm",a:"The Query/Retrieve functionality of the DICOM Network Services utility is located on the Query Retrieve SCU tab. Once you have defined a Query SCP Application Entity for one or more file source devices (as described in Defining a Machine to Be Queried), you can query the remote machine. If you have ...",t:"Querying a Remote Machine"},"3048":{i:8.65211563790146E-05,u:"../Content/DICOM_Medical/Using IDL DICOM Network Services/ConfigureQuerySCUServiceProperties.htm",a:"Before querying a remote machine, select an Application Entity that supports the Query SCU service type and define the number of responses to be returned. Open the DICOM Network Services utility by entering the following at the IDL command prompt: DICOMEX_NET On the Configuration tab, modify ...",t:"Configure Query SCU Service Properties"},"3049":{i:0.000162367291637491,u:"../Content/DICOM_Medical/Using IDL DICOM Network Services/QueryRemoteNode.htm",a:"To query a remote machine, complete the following steps: Open the DICOM Network Services utility if needed by entering: DICOMEX_NET Click on the Query Retrieve SCU tab. In the Query Node droplist, select the Application Entity name associated with the remote machine to be queried. If this droplist ...",t:"Query the Remote Node"},"3050":{i:0.000145538695455787,u:"../Content/DICOM_Medical/Using IDL DICOM Network Services/BuildOrModifyCustomQuery.htm",a:"You can create a custom query to return patient or study files that match specific patient-, study-, or series-level characteristics. To create a custom query, complete the following steps: Click the Build Query button on the Query Retrieve SCU tab to open the Query Fields dialog. In the Query Model ...",t:"Build or Modify a Custom Query"},"3051":{i:8.65211563790146E-05,u:"../Content/DICOM_Medical/Using IDL DICOM Network Services/RetrieveFilesFromRemoteNode.htm",a:"The DICOM Network Services utility lets you retrieve selected DICOM data from a remote machine, and store the files in the directory you associated with the Storage SCP service. To retrieve data, complete the following steps: Click on the Query Retrieve SCU tab of the DICOM Network Services utility ...",t:"Retrieve Files from a Remote Node "},"3052":{i:0.00013858816392434,u:"../Content/DICOM_Medical/Using IDL DICOM Network Services/TroubleshootingRetrievalOperation.htm",a:"There are common configuration errors that can lead to retrieval problems. If one of the following errors appear in the Status window of the Query Retrieve SCU tab, consider the following possible resolutions: Error Resolution Move destination unknown. The remote machine does not recognize the ...",t:"Troubleshooting a Retrieval Operation"},"3053":{i:0.000121371741880247,u:"../Content/DICOM_Medical/Using IDL DICOM Network Services/SendingFilesToRemoteDestination.htm",a:"The Storage SCU functionality of the DICOM Network Services utility transmits DICOM files from the local DICOM Storage SCU (Service Class User) to a remote destination that is identified as a DICOM Storage SCP (Service Class Provider). This sends a copy of the images to the file storage machine, ...",t:"Sending Files to a Remote Destination"},"3054":{i:0.000208934049232137,u:"../Content/DICOM_Medical/Using IDL DICOM Network Services/DefiningRemoteStorageSCPNode.htm",a:"You need to configure an Application Entity for the remote machine to which you will send DICOM files. (Once an Application Entity has been defined, you do not need to re-execute the following steps.) Record the Application Entity name, host name or IP address, and port number of the remote ...",t:"Defining the Remote Storage SCP Node"},"3055":{i:0.00010661587762624,u:"../Content/DICOM_Medical/Using IDL DICOM Network Services/SendingFilesToRemoteMachine.htm",a:"You can use the Storage SCU functionality of the DICOM Network Services utility to browse for and send DICOM files to a remote machine. To do so, complete the following steps: Open the DICOM Network Services utility by entering the following at the IDL command prompt if needed: DICOMEX_NET Click on ...",t:"Sending Files to a Remote Machine"},"3056":{i:5.50327019655568E-05,u:"../Content/DICOM_Medical/Using IDL DICOM Network Services/TroubleshootingSendOperation.htm",a:"There are common configuration errors that can lead to problems when attempting to send files. If the following error appears in the Status window of the Storage SCU tab, consider the following possible resolutions: Error Resolution Failed to open an association. The remote machine you are ...",t:"Troubleshooting a Send Operation"},"3057":{i:0.000319042195968183,u:"../Content/DICOM_Medical/Using IDL DICOM Network Services/ReturningConnectionStatusWithEcho.htm",a:"The Echo SCU functionality of the DICOM Network Services utility lets you test the network connection to a remote machine that supports Query SCP or Storage SCP service types. To test the connection status of a remote node, do the following: If needed, start the DICOM Network Services utility. See ...",t:"Returning Connection Status with Echo"},"3058":{i:0.000125678118004882,u:"../Content/DICOM_Medical/Using IDL DICOM Network Services/AboutStorageSCPServer.htm",a:"The Storage SCP Service runs as a service on Windows and as a daemon on UNIX. This service listens at a specified TCP/IP port for incoming DICOM files and writes them to the directory that is specified in Configuring Your System to Receive Files . Incoming files are named according to the file’s SOP ...",t:"About the Storage SCP Service"},"3059":{i:5.50327019655568E-05,u:"../Content/DICOM_Medical/Using IDL DICOM Network Services/StorageSCPServicePermissions.htm",a:"You must define a Storage SCP directory to which files are written. The Storage SCP Service requires permissions to: Create, read, write and delete files in the Storage SCP directory Create a depot subdirectory in the Storage SCP directory Create, read, write and delete files in the depot directory ...",t:"Storage SCP Service Permissions"},"3060":{i:5.50327019655568E-05,u:"../Content/DICOM_Medical/Using IDL DICOM Network Services/StorageSCPServiceLogFiles.htm",a:"Service events generated by the Storage SCP Service are recorded in two log files located in the bin/bin. platform /dicomex directory of the IDL installation directory where platform is the platform-specific bin directory. These files are called storscp1.log and storscp2.log . Events are logged to ...",t:"Storage SCP Service Log Files"},});