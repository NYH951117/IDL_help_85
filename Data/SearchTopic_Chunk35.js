define({"2515":{i:0.000152645546706303,u:"../Content/Creating IDL Programs/Distributing IDL Applications/CreateRuntimeDistribution/WorkingWithManifestFile.htm",a:"In many cases you can use the IDL_DIR /bin/make_rt/manifest_rt.txt file (where IDL_DIR is the IDL installation directory) without modification. If, however, your application uses files that are not part of the IDL distribution, or if you want to include features described in manifest_rt.txt but ...",t:"Working with the manifest_rt.txt File"},"2516":{i:0.000417725975270897,u:"../Content/Creating IDL Programs/Distributing IDL Applications/CreateRuntimeDistribution/RuntimeApplicationLaunchScripts.htm",a:"The bin/make_rt subdirectory of the IDL installation directory contains generic launch scripts for Windows , Macintosh , and Linux/Solaris applications. If you use the MAKE_RT procedure to create a runtime distribution, the appropriate launch scripts will be copied to your distribution and renamed ...",t:"Runtime Application Launch Scripts"},"2517":{i:0.00101741160386928,u:"../Content/Creating IDL Programs/Distributing IDL Applications/CreateRuntimeDistribution/DistributingRuntimeApplicationsOnRemovableMedia.htm",a:"The runtime distribution you create using MAKE_RT can be distributed on removable media such as a CD-ROM, DVD-ROM, or flash drive. The application will, in most cases, run directly from the removable media without any need to install files on the end-user’s system. (See Installation Issues: Windows ...",t:"Distributing Runtime Applications on Removable Media"},"2518":{i:0.000161791573920863,u:"../Content/Creating IDL Programs/Managing IDL Paths.htm",a:"About IDL’s Path IDL maintains a list of directories where it searches for .pro and .sav files in the system variable !PATH . If the IDL interpreter encounters a reference to a routine that is not already included in its list of compiled routines, it searches the directories specified in !PATH for a ...",t:"Managing IDL Paths"},"2519":{i:5.50327019655568E-05,u:"../Content/Creating IDL Programs/Application Programming/File_and_Path_Specificat.htm",a:"Different operating systems use different path specification syntax and directory separation characters. The following table summarizes the different characters used by different operating systems; see !PATH for further details on path specification. Operating System Directory Separator Path Element ...",t:"File and Path Specifications"},"2520":{i:0.000240663924710403,u:"../Content/Creating IDL Programs/IDL Projects/PathManagementWithProjects.htm",a:"By default, the IDL Workbench will add open project directories to the !PATH system variable. This means that files contained in the open project will be found by IDL for automatic compilation. To change the default behavior, uncheck the Update IDL path checkbox on the IDL Project Properties page of ...",t:"IDL Path Management with Projects"},"2521":{i:5.50327019655568E-05,u:"../Content/MiscellaneousEnvironmentTopics.htm",a:"Miscellaneous Environment Topics ",t:"Miscellaneous Environment Topics"},"2522":{i:0.000139386789615867,u:"../Content/Creating IDL Programs/Application Programming/Automatic_Compilation_an.htm",a:"When used in interactive mode (in the IDL Workbench or in a command shell session — anywhere you see the IDL\u003e prompt) IDL automatically compiles and executes a user-written function or procedure when it is first referenced if: The source code of the function is in the current working directory or in ...",t:"Automatic Compilation and Execution"},"2523":{i:5.50327019655568E-05,u:"../Content/PlatformSupportTable.htm",a:"Platform Hardware Operating System Supported Versions a Windows Intel/AMD 32-bit Intel/AMD 64-bit Windows 7, 8, 10 7, 8, 10 Macintosh Intel 64-bit OS X 10.9, 10.10 b UNIX Intel/AMD 64-bit Linux Kernel 2.6.32                          , glibc 2.12 SPARC 64-bit Intel/AMD 64-bit Solaris 10 IDL Help ...",t:"IDL Hardware and Operating System Requirements"},"2524":{i:5.50327019655568E-05,u:"../Content/Creating IDL Programs/Character Encoding.htm",a:"Character Encoding governs which specific bytes are used to represent individual characters stored in a file. There are many different character encodings in common use; usage varies depending on location (different encodings may be used to represent different character sets, such as Latin or ...",t:"Character Encoding"},"2525":{i:6.63044685156903E-05,u:"../Content/Creating IDL Programs/Application Programming/Command_Line_Tips_and_Tr.htm",a:"Entering text at the command line allows you to perform ad hoc analysis, compile and launch applications, and create $MAIN$ programs. IDL provides some valuable command line functionality to support these tasks. See the following sections for details. Copying and Pasting Multiple IDL Code Lines ...",t:"Command Line Tips and Tricks"},"2526":{i:0.00165966661736157,u:"../Content/Creating IDL Programs/Application Programming/Controlling_the_IDL_Thre.htm",a:"IDL allows you to programmatically control the use of thread pool. This section discusses the following aspects of thread pool use: Viewing the Current Thread Pool Settings Using the Default Thread Pool Settings Changing Global Thread Pool Settings Changing Thread Pool Settings for a Specific ...",t:"Controlling the IDL Thread Pool"},"2527":{i:9.83474895470045E-05,u:"../Content/File Formats.htm",a:"Image File Formats Format Description BMP Windows Bitmap format GIF Graphics Interchange Format JPEG Joint Photographic Experts Group format JPEG 2000 JPEG 2000 format MPEG 1 & 2 Moving Picture Experts Group format NRIF NCAR Raster Interchange Format PICT Macintosh version 2 PICT files (bitmap only) ...",t:"File Formats Supported in IDL"},"2528":{i:9.86198317729761E-05,u:"../Content/Creating IDL Programs/IDL Features to Help You Develop Code.htm",a:"Content Assist Content Assistance displays in a pop-up window  when you place the mouse cursor in a full or partial IDL routine name and press Ctrl-Space . The Content Assist window displays a list of routine and variable names that begin with the characters in the selected string. Highlighting an ...",t:"IDL Features to Help You Develop Code"},"2529":{i:5.50327019655568E-05,u:"../Content/Creating IDL Programs/Application Programming/Interrupting_or_Aborting.htm",a:"Interru pting or A borting Execution To manually stop programs that are running, issue a keyboard interrupt by typing Ctrl+C . If you are using the IDL Workbench, Ctrl+C interrupts execution only when the focus is in the IDL command line and a program is running. In other situations, Ctrl+C copies ...",t:"Interrupting or Aborting Execution"},"2530":{i:0.000705517709731173,u:"../Content/Creating IDL Programs/Internationalizing Code.htm",a:"Your programs may need to adapt to different encodings depending on the languages and operating systems of your users. In widget programming, displaying languages other than English is only supported in Windows. Terminology Term Definition I18N The term internationalization is often abbreviated as ...",t:"Internationalizing Code"},"2531":{i:0.000214780680761861,u:"../Content/Direct Graphics/Supported_Devices.htm",a:"IDL Direct Graphics support graphic output to the devices listed below: Device Name Description CGM Computer Graphics Metafile HP Hewlett-Packard Graphics Language (HP-GL) METAFILE Windows Metafile Format (WMF) NULL No graphics output PCL Hewlett-Packard Printer Control Language (PCL) PRINTER System ...",t:"Supported Devices"},"2532":{i:7.6789836178486E-05,u:"../Content/Creating IDL Programs/Application Programming/Virtual_Memory.htm",a:"Virtual memory allows the computer to execute programs that require more memory than is actually present in the machine by keeping those portions of programs and data that are not being used on the disk. Although this process is transparent to the user, it greatly affects the efficiency of the ...",t:"Virtual Memory"},"2533":{i:5.50327019655568E-05,u:"../Content/Creating IDL Programs/Appendices/Setting Preferences.htm",a:"Setting Preferences ",t:"Setting Preferences"},"2534":{i:0.00130359500855089,u:"../Content/Creating IDL Programs/Appendices/About_IDL_System_Prefere.htm",a:"System Preferences are internal values that control various aspects of the environment that IDL presents to its users. Preferences supply initial values for many system variables and control the layout of the IDL Workbench and a variety of other aspects of IDL’s behavior. Preferences can be ...",t:"About IDL System Preferences"},"2535":{i:0.00126546988184346,u:"../Content/Creating IDL Programs/Appendices/prefs_cpu.htm",a:"The preferences with names starting with the IDL_CPU_ prefix supply default values for the related fields of the !CPU system variable. IDL_CPU_TPOOL_MAX_ELTS The IDL_CPU_TPOOL_MAX_ELTS preference sets the default value of the !CPU. TPOOL_MAX_ELTS system variable, which sets the maximum number of ...",t:"!CPU Settings Preferences"},"2536":{i:0.0014720237509406,u:"../Content/Creating IDL Programs/Appendices/prefs_directory.htm",a:"This section describes the preferences for directories and search paths. IDL_DIR The IDL_DIR preference provides the value of the !DIR system variable, which contains the location of the IDL distribution that contains the currently running IDL program. You cannot set IDL_DIR by using user or ...",t:"Directory and Search Path Preferences"},"2537":{i:0.00323889264550188,u:"../Content/Creating IDL Programs/Appendices/prefs_general.htm",a:"This section describes the preferences for the general user environment. IDL_DATAFILE_USER_COMMENTS The IDL_DATAFILE_USER_COMMENTS preference specifies whether or not IDL is allowed to put comments that include user and host name into generated data files, such as SAVE and JOURNAL files. Such ...",t:"General User Environment Preferences"},"2538":{i:5.50327019655568E-05,u:"../Content/Creating IDL Programs/Appendices/prefs_graphics.htm",a:"Preferences in this category are supported by all versions of IDL. IDL_GR_TILECACHESIZE The IDL_GR_TILECACHESIZE preference controls how much memory (in megabytes) IDL can use for caching image tiles. IDL allocates memory for caching a tile each time IDLgrImage::SetTileData is called. When the ...",t:"General Graphics Preferences"},"2539":{i:0.000101484808570708,u:"../Content/Creating IDL Programs/Appendices/prefs_win_rt.htm",a:"These preferences exist to support the use of IDL runtime and the IDL Virtual Machine under Microsoft Windows. They are not present in non-Windows versions of IDL.o Under Microsoft Windows, the idlrt.exe program runs runtime or virtual-machine applications. The preferences described here provide ...",t:"Windows Runtime Preferences"},"2540":{i:0.00168173242601668,u:"../Content/Creating IDL Programs/Appendices/prefs_gr_win.htm",a:"Preferences in this section control the default behavior of graphics produced by the Microsoft Windows window system. IDL_GR_WIN_HEIGHT The IDL_GR_WIN_HEIGHT preference sets the default height of graphics windows on Windows platforms. Set IDL_GR_WIN_HEIGHT to a value greater than or equal to 1. ...",t:"Windows Graphics Preferences"},"2541":{i:0.000252308800009482,u:"../Content/Creating IDL Programs/Appendices/prefs_gr_x.htm",a:"The preferences in this section are specific to versions of IDL that support the X Window System. They do not exist in the Microsoft Windows version of IDL. IDL_GR_X_COLORS The IDL_GR_X_COLORS preference specifies the number of color-table indices to allocate from the shared colormap used by direct ...",t:"X Window System Graphics Preferences"},"2542":{i:7.0625309954478E-05,u:"../Content/Creating IDL Programs/IDL Projects/Projects.htm",a:"A project is a directory that contains source code files and other resources (data, image files, documentation, etc.). While files included in a project need not be associated with each other, projects are especially useful as logical containers for related source code and resource files. When the ...",t:"Projects"},"2543":{i:7.50432187264587E-05,u:"../Content/Creating IDL Programs/IDL Projects/CreatingProjects.htm",a:"By default, project directories are created within the workspace directory. In addition, you can link an existing directory in another location into the workspace, providing all of the benefits of the project mechanism but leaving the actual files in their original location. Once your project is ...",t:"Creating IDL Projects"},"2544":{i:0.000527723654388552,u:"../Content/Creating IDL Programs/IDL Projects/ProjectBuildConcepts.htm",a:"Building an IDL Workbench project is the process of ensuring that all of the .pro files included in the project compile without errors. While neither of the following is required, the build process almost always does the following as well: Ensures that all routines called by the .pro files in the ...",t:"Building IDL Projects"},"2545":{i:0.000240663924710403,u:"../Content/Creating IDL Programs/IDL Projects/ProjectRunConcepts.htm",a:"Running an IDL Workbench project is the process of executing a single routine designated as the Run Command. Other routines called by the routine being run are located, compiled, and run using IDL’s built-in mechanisms for resolving and executing routines. You can modify an IDL Workbench project’s ...",t:"Running IDL Projects"},"2546":{i:0.000655159500805286,u:"../Content/Creating IDL Programs/IDL Projects/IDLProjectProperties.htm",a:"The IDL Project Properties page controls a project’s execution (run) properties. To display the IDL Project Properties page, right click on a project in the Project Explorer , select Properties , then in the Properties dialog, select the IDL Project Properties page. Property Description Default ...",t:"IDL Project Properties"},"2547":{i:0.000504439312135377,u:"../Content/Creating IDL Programs/IDL Projects/IDLBuildProperties.htm",a:"The IDL Build Properties page controls a project’s build properties. To set a project’s run properties, refer to IDL Project Properties . To display the IDL Build Properties page, right click on a project in the Project Explorer , select Properties , then in the Properties dialog, select the IDL ...",t:"IDL Build Properties"},"2548":{i:0.000386514556137286,u:"../Content/Creating IDL Programs/IDL Projects/ChangingCompileOrder.htm",a:"To display the IDL Compile Order page, right click on a project in the Project Explorer , select Properties , then in the Properties dialog, select the IDL Compile Order page. Changing the Compile Order and Excluding Files from the Build Although you can have any number of files physically residing ...",t:"IDL Compile Order"},"2549":{i:5.50327019655568E-05,u:"../Content/Creating IDL Programs/IDL Projects/ENVIExtensionWizard.htm",a:"The ENVI Extension Wizard allows you to create an IDL project to be used as a custom ENVI extension. Custom ENVI extensions appear in the Toolbox within the ENVI application. The steps necessary to build an ENVI extension are: Use the ENVI Extension Wizard to create an IDL project, along with a ...",t:"ENVI Extension Wizard"},"2550":{i:5.50327019655568E-05,u:"../Content/Creating IDL Programs/IDL Program Types.htm",a:"Procedures, Functions, SAVE Files ",t:"Procedures, Functions, SAVE Files"},"2551":{i:0.000113396640147252,u:"../Content/Creating IDL Programs/Application Programming/Overview_of_IDL_Program.htm",a:"In addition to being a useful interactive data analysis tool, IDL is a powerful programming language. Many of IDL’s programming language features and constructs can be used either interactively at the IDL command line or as part of a larger program — which can itself be invoked at the IDL command ...",t:"Overview of IDL Program Types"},"2552":{i:0.000221778064410219,u:"../Content/Creating IDL Programs/BatchJobs.htm",a:"Batch files in IDL are .PRO files that contain a series of single IDL statements, executed in order. Batch files are not programs - they cannot be compiled and run. Instead, IDL interprets and executes each statement inside of a batch file sequentially, as if you had entered them directly at the IDL ...",t:"Executing Batch Job Files in IDL"},"2553":{i:5.50327019655568E-05,u:"../Content/Creating IDL Programs/Application Programming/Defining_a_Procedure.htm",a:"A sequence of one or more IDL statements can be given a name, compiled, and saved for future use with the procedure definition statement. Once a procedure has been successfully compiled, it can be executed using a procedure call statement interactively from the terminal, from a main program, or from ...",t:"Defining a Procedure"},"2554":{i:0.00010429559961656,u:"../Content/Creating IDL Programs/Application Programming/Defining_a_Function.htm",a:"A function is a program unit containing one or more IDL statements that returns a value. This unit executes independently of its caller. It has its own local variables and execution environment. Referencing a function causes the program unit to be executed. All functions return a function value ...",t:"Defining a Function"},"2555":{i:0.000223643440462607,u:"../Content/Creating IDL Programs/Application Programming/Using_Keyword_Parameters.htm",a:"A short example of a function that exchanges two columns of a 4 ∞ 4 homogeneous, coordinate-transformation matrix is shown below. The function has one positional parameter, the coordinate-transformation matrix T. The caller can specify one of the keywords XYEXCH, XZEXCH, or YZEXCH to interchange the ...",t:"Using Keyword Parameters"},"2556":{i:9.40695669088197E-05,u:"../Content/Creating IDL Programs/Application Programming/Determining_if_a_Keyword.htm",a:"The previous function example (in Using Keyword Parameters ) uses the system function KEYWORD_SET to determine if a keyword parameter has been passed and if it is nonzero. This is similar to using the condition: IF N_ELEMENTS(P) NE 0 THEN IF P THEN ... ... to test if keywords that have a true/false ...",t:"Determining if a Keyword is Set "},"2557":{i:0.000134108339971498,u:"../Content/Creating IDL Programs/Application Programming/Recognizing_Potential_Na.htm",a:"IDL favors simple names, and it blurs the user level distinction between system routine s and user routines. See Managing IDL Paths for more on how IDL finds routine names on its path. Names should make sense, be easy to remember, and not require too much typing. Language transparency also results ...",t:"Recognizing Potential Naming Conflicts"},"2558":{i:5.50327019655568E-05,u:"../Content/Creating IDL Programs/Application Programming/Overview_of_SAVE_Files.htm",a:"You can create binary file s containing data variables, system variables, functions, procedures, or objects using the SAVE procedure. These SAVE files can be shared with other users who will be able to execute the program, but who will not have access to the IDL code that created it. Variables that ...",t:"Overview of SAVE Files"},"2559":{i:0.000576929237550212,u:"../Content/Creating IDL Programs/Application Programming/Creating_SAVE_Files_of_P.htm",a:"An IDL application created in IDL 6.0 or later that does not use the EXECUTE function can be saved in one or more SAVE files that will run in the IDL Virtual Machine. If an IDL application is to be run in the IDL Virtual Machine, it is not necessary to include an IDL distribution with the SAVE file ...",t:"Creating SAVE Files of Program Files"},"2560":{i:0.0001885443643644,u:"../Content/Creating IDL Programs/Application Programming/Executing_SAVE_Files.htm",a:"IDL SAVE files (created using the SAVE procedure) can contain one or more routines that have been packaged into a single binary file. SAVE files can also contain system or data variables. While IDL routines or data can be saved in a file with any extension, it is common to use the extension .sav for ...",t:"Executing SAVE Files"},"2561":{i:5.50327019655568E-05,u:"../Content/Creating IDL Programs/Workspaces.htm",a:"A workspace is a directory that contains Projects, their metadata, and information about the state of the IDL Workbench. A workspace can also contain other programs, scripts, and supporting files that are not contained within a Project. When the IDL Workbench starts it creates a default workspace ...",t:"Workspaces"},"2562":{i:0.000266119489072169,u:"../Content/IDL Programming.htm",a:"Language ",t:"Language"},"2563":{i:5.50327019655568E-05,u:"../Content/Creating IDL Programs/Arrays.htm",a:"Arrays ",t:"Arrays"},"2564":{i:7.53662217603217E-05,u:"../Content/Creating IDL Programs/Components of the IDL Language/Creating_Arrays.htm",a:"IDL provides a variety of mechanisms to create arrays. IDL arrays can have up to 8 dimensions. Each dimension can have a length between 1 and the maximum integer value (either a 32-bit integer for 32-bit IDL or a 64-bit integer for 64-bit IDL). Array Concatenation Using square brackets, you can ...",t:"Creating Arrays"},"2565":{i:0.00014782913521342,u:"../Content/Creating IDL Programs/Components of the IDL Language/Array_Subscript_Ranges.htm",a:"Subscript ranges are used to select a subarray from an array by giving the starting and ending subscripts of the subarray in each dimension. Subscript ranges can be combined with scalar and array subscripts and with other subscript ranges. Any rectangular portion of an array can be selected with ...",t:"Array Subscript Ranges\n        "},"2566":{i:0.00023997773398418,u:"../Content/Creating IDL Programs/Components of the IDL Language/Columns__Rows__and_Array.htm",a:"Computer hardware does not directly support the concept of multidimensional arrays. Computer memory is unidimensional, providing memory addresses that start at zero and increase serially to the highest available location. Multidimensional arrays are therefore a software concept: software (IDL in ...",t:"Columns, Rows, and Array Majority"},"2567":{i:0.000123294341612791,u:"../Content/Creating IDL Programs/Components of the IDL Language/Combining_Array_Subscrip.htm",a:"Subscript arrays can be combined with subscript ranges, simple scalar subscripts, and other subscript arrays. When IDL encounters a multidimensional subscript expression that contains one or more subscript arrays, ranges, or scalars, it builds a subscript array by processing each element in the ...",t:"Combining Array Subscripts"},"2568":{i:0.000431264894329585,u:"../Content/Creating IDL Programs/Components of the IDL Language/Manipulating_Arrays.htm",a:"IDL provides a variety of mechanisms for working with multidimensional data sets. Understanding these mechanisms requires a familiarity with linear algebra and the concept of a two-dimensional data set. There are two terms commonly used to refer to two-dimensional data sets: array and matrix . ...",t:"Manipulating Arrays"},"2569":{i:7.80229751940066E-05,u:"../Content/Creating IDL Programs/Components of the IDL Language/Using_Scalar_Values_as_A.htm",a:"Use scalar subscript values to select individual elements or subarrays from an array. If the array has more than one dimension, you can specify a scalar subscript for each dimension. Subscripting One-Dimensional Arrays (Vectors) Subscripting Multidimensional Arrays Subscripting Multidimensional ...",t:"Using Scalar Values as Array Subscripts"},"2570":{i:0.000100528137839448,u:"../Content/Creating IDL Programs/Components of the IDL Language/Using_Arrays_as_Array_Su.htm",a:"Arrays can be used as subscripts to other arrays. Each element in the subscript array selects an element in the subscripted array. When subscript arrays are used in conjunction with subscript ranges (as discussed in Combining Array Subscripts ), more than one element may be selected for each element ...",t:"Using Arrays as Array Subscripts"},"2571":{i:0.000276018516093694,u:"../Content/Creating IDL Programs/Components of the IDL Language/Understanding_Array_Subs.htm",a:"You can use subscripts to either to retrieve the value of one or more array elements or to designate array elements to receive new values. The expression arr[12] denotes the value of the 13th element of arr (because subscripts start at 0), while the statement arr[12] = 5 stores the number 5 in the ...",t:"Understanding Array Subscripts"},"2572":{i:0.00139220440247517,u:"../Content/Creating IDL Programs/Components of the IDL Language/Conditionally_Altering_A.htm",a:"The WHERE function can be used to select array elements that meet certain conditions. For example, the statement: data[WHERE(data LT 0, /NULL)] = -1 sets all negative elements of data to -1 without changing the positive elements. The result of the function, WHERE(data LT 0) , is a vector composed of ...",t:"Conditionally Altering Array Elements"},"2573":{i:5.50327019655568E-05,u:"../Content/Creating IDL Programs/Components of the IDL Language/Concatenating_Arrays.htm",a:"To concatenate two arrays, create a new array with the arrays to be combined as elements: array1 = FINDGEN(1000) array2 = FINDGEN(999) array3 = [array1, array2] HELP, array3 IDL prints: ARRAY3     FLOAT     = Array[1999] You can, of course, assign the value of the concatenation to one of the ...",t:"Concatenating Arrays"},"2574":{i:5.50327019655568E-05,u:"../Content/Creating IDL Programs/Components of the IDL Language/Arrays_of_Structures.htm",a:"An array of structures is simply an array in which each element is a structure of the same type. The referencing and subscripting of these arrays (also called structure arrays) follow the same rules as simple arrays. Creating an Arr ay of Structures The easiest way to create an array of structures ...",t:"Arrays of Structures"},"2575":{i:0.000580412541615868,u:"../Content/Creating IDL Programs/Components of the IDL Language/IDL_Data_Types.htm",a:"In IDL there are twelve basic, atomic data types, each with its own form of constant. The data type assigned to a variable is determined either by the syntax used when creating the variable, or as a result of some operation that changes the type of the variable. IDL\u0027s basic data types are discussed ...",t:"IDL Data Types"},"2576":{i:5.50327019655568E-05,u:"../Content/Creating IDL Programs/Components of the IDL Language/Dynamic_Data_Typing.htm",a:"The IDL language is dynamically typed . This means that an operation on a variable can change that variable’s type. In general, when variables of different types are combined in an expression, the result has the data type that yields the highest precision. For example, if an integer variable is ...",t:"Dynamic Data Typing"},"2577":{i:6.7682962248732E-05,u:"../Content/Creating IDL Programs/Components of the IDL Language/Compound_Data_Types.htm",a:"IDL’s compound data types provide ways to organize and manage data values of any data type. There are no constants for compound data types; the actual data values contained in a variable of a compound data type will always be of one or more of the basic data types. IDL provides the following ...",t:"Compound Data Types"},"2578":{i:0.001464342981733,u:"../Content/Creating IDL Programs/Components of the IDL Language/Data_Type_and_Structure.htm",a:"Every entity in IDL has an associated data type and structure . The structure of an expression determines whether the expression can represent a single value or multiple values. IDL expressions can be either scalars (with exactly one value) or arrays (with one or more values). The data type and ...",t:"Data Type and Structure of Expressions"},"2579":{i:0.000306524975565936,u:"../Content/Creating IDL Programs/Components of the IDL Language/Date_Time_Data.htm",a:"Dates and times are among the many types of information that numerical data can represent. IDL provides a number of routines that offer specialized support for generating, analyzing, and displaying date- and time-based data (herein referred to as date/time data). Julian Dates and Times Within IDL, ...",t:"Date/Time Data"},"2580":{i:0.00398661478071583,u:"../Content/Creating IDL Programs/Components of the IDL Language/The_Null_Variable.htm",a:"The system variable !NULL is a special variable of type Undefined . Unlike a variable that is truly undefined, the value !NULL can be assigned to other variables and used in comparisons. Assignment Syntax Use any of the following to assign the value !NULL to a variable: variable = !NULL variable = ...",t:"The Null Variable"},"2581":{i:9.59678196111049E-05,u:"../Content/Creating IDL Programs/Components of the IDL Language/Type_Conversion_Function.htm",a:"IDL allows you to convert data from one data type to another using a set of conversion functions. These functions are useful when you need to force the evaluation of an expression to a certain type, output data in a mode compatible with other programs, etc. For a list of type conversion functions, ...",t:"Type Conversion Functions"},"2582":{i:0.000135261870141439,u:"../Content/Creating IDL Programs/Components of the IDL Language/Creating_and_Defining_St.htm",a:"A named structure is created by executing a structure-definition expression, which is an expression of the following form: { Structure_Name, Tag_Name 1 : Tag_Definition 1 , ..., Tag_Name n : Tag_Definition n } Anonymous structures are created in the same way, but with the structure’s name omitted. { ...",t:"Creating and Defining Structures"},"2583":{i:0.00012265885852584,u:"../Content/Creating IDL Programs/Components of the IDL Language/Relaxed_Structure_Assign.htm",a:"The IDL “=” operator is unable to assign a structure value to a structure with a different definition. For example, suppose we have an existing structure definition SRC, as follows: source = { SRC, A:FINDGEN(4), B:12 } and we wish to create a second instance of the same structure, but with slightly ...",t:"Relaxed Structure Assignment"},});