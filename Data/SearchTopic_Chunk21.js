define({"1539":{i:0.000219467331155521,u:"../Content/Object Classes/Analysis/IDLanROIGroup__ComputeMa.htm",a:"The IDLanROIGroup::ComputeMask function method prepares a two-dimensional mask for this group of regions. Syntax Result = Obj-\u003e [ IDLanROIGroup ::]ComputeMask( [, INITIALIZE ={ ‑1 | 0 | 1 }] [, DIMENSIONS = [xdim , ydim] ] | [, MASK_IN = array ] [, LOCATION = [x , y [, z ] ] ] [, MASK_RULE ...",t:"IDLanROIGroup::ComputeMask"},"1540":{i:0.000176083870669819,u:"../Content/Object Classes/Analysis/IDLanROIGroup__ComputeMe.htm",a:"The IDLanROIGroup::ComputeMesh function method triangulates a surface mesh with optional capping from the stack of regions contained within this group. The contained regions may be concave. However, this method will fail under the following conditions: The region group contains fewer than two ...",t:"IDLanROIGroup::ComputeMesh"},"1541":{i:0.000126193193045559,u:"../Content/Object Classes/Analysis/IDLanROIGroup__ContainsP.htm",a:"The IDL anROIGroup::ContainsPoints function method determines whether the given points (in data coordinates) are contained within this region group. The regions within this group must have a TYPE of 2 (closed polygon) and must fall on parallel planes for successful containment testing to occur. For ...",t:"IDLanROIGroup::ContainsPoints"},"1542":{i:0.000184090019903231,u:"../Content/Object Classes/Analysis/IDLanROIGroup__GetProper.htm",a:"The IDL anROIGroup::Get Property procedure method retrieves the value of a property or group of properties for the region group. Syntax Obj-\u003e [ IDLanROIGroup ::]GetProperty [, PROPERTY = value ] Arguments None. Keywords Any property listed under IDLanROIGroup Properties that contains the word “Yes” ...",t:"IDLanROIGroup::GetProperty"},"1543":{i:0.000184090019903231,u:"../Content/Object Classes/Analysis/IDLanROIGroup__Init.htm",a:"The IDL anROIGroup::Init function method initializes a region of interest group object. Init methods are special life cycle methods, and as such cannot be called outside the context of object creation. This means that in most cases, you cannot call the Init method directly. There is one exception to ...",t:"IDLanROIGroup::Init"},"1544":{i:0.000219467331155521,u:"../Content/Object Classes/Analysis/IDLanROIGroup__Rotate.htm",a:"The IDL anROIGroup::Rotate procedure method modifies the vertices for all regions within the group by applying a rotation. Syntax Obj-\u003e [ IDLanROIGroup ::]Rotate, Axis , Angle [, CENTER = [ x , y [, z ] ] ] Arguments Axis A three-element vector of the form [ x , y , z ] describing the axis about ...",t:"IDLanROIGroup::Rotate"},"1545":{i:0.000126193193045559,u:"../Content/Object Classes/Analysis/IDLanROIGroup__Scale.htm",a:"The IDL anROIGroup::Scale procedure method modifies the vertices for the region by applying a scale. Syntax Obj-\u003e [ IDLanROIGroup ::]Scale, Sx [, Sy [, Sz ]] Arguments Sx The X scale factor. If the Sy and Sz arguments are not specified, Sx must be a two or three-element vector, in which case Sx [0] ...",t:"IDLanROIGroup::Scale"},"1546":{i:0.000126193193045559,u:"../Content/Object Classes/Analysis/IDLanROIGroup__Translate.htm",a:"The IDL anROIGroup::Translate procedure method modifies the vertices of all regions within the group by applying a translation. Syntax Obj-\u003e [ IDLanROIGroup ::]Translate, Tx [, Ty [, Tz ]] Arguments Tx The X translation factor. If the Ty and Tz arguments are not specified, Tx must be a two or ...",t:"IDLanROIGroup::Translate"},"1547":{i:6.43882667589095E-05,u:"../Content/Object Classes/File Format/objects_ff.htm",a:"File Format Object Classes This section describes IDL’s built-in file format class library.  ",t:"File Format Object Classes"},"1548":{i:0.00180671957651058,u:"../Content/Object Classes/File Format/IDLffDICOM.htm",a:"IDLff DICOM Superclasses | Creation | Properties | Methods | Version History An IDLffDICOM object contains the data for one or more images embedded in a DICOM Part 10 file. The API to the IDLffDICOM object provides accessor methods to the basic data elements of a DICOM file, namely the group/element ...",t:"IDLffDICOM"},"1549":{i:0.000313534213844133,u:"../Content/Object Classes/File Format/IDLffDICOM_Properties.htm",a:"IDLffDICOM objects have the following properties. Properties with the word “Yes” in the “Init” column of the property table can be set via IDLffDICOM::Init . For a discussion of the property description tables shown below, see About Object Property Descriptions . Objects of this class have the ...",t:"IDLffDICOM Properties"},"1550":{i:0.000236283556595943,u:"../Content/Object Classes/File Format/IDLffDICOM__Cleanup.htm",a:"Syntax | Arguments | Keywords | Examples | Version History The IDLffDICOM::Cleanup procedure method destroys the IDLffDICOM object. Syntax Obj -\u003eCleanup or Obj -\u003e[ IDLffDICOM ::]Cleanup or OBJ_DESTROY, Obj Arguments None Keywords None Examples ; Create a DICOM object, read a DICOM file and dump its ...",t:"IDLffDICOM::Cleanup"},"1551":{i:0.000236283556595943,u:"../Content/Object Classes/File Format/IDLffDICOM__DumpElements.htm",a:"Syntax | Arguments | Keywords | Examples | Version History The IDLffDICOM::DumpElements procedure method dumps a description of the DICOM data elements of the IDLffDICOM object to the screen or to a file. Syntax Obj -\u003e[ IDLffDICOM ::]DumpElements [, Filename ] Arguments Filename A scalar string ...",t:"IDLffDICOM::DumpElements"},"1552":{i:0.000236283556595943,u:"../Content/Object Classes/File Format/IDLffDICOM__GetChildren.htm",a:"Syntax | Return Value | Arguments | Keywords | Examples | Version History The IDLffDICOM::GetChildren function method is used to find the member element references of a DICOM sequence. It takes as an argument a scalar reference to a DICOM element representing the parent of the sequence. Syntax ...",t:"IDLffDICOM::GetChildren"},"1553":{i:0.000236283556595943,u:"../Content/Object Classes/File Format/IDLffDICOM__GetDescripti.htm",a:"Syntax | Return Value | Arguments | Keywords | Examples | Version History The IDLffDICOM::GetDescription function method takes optional DICOM group and element arguments and returns an array of STRING descriptions. Syntax Result = Obj -\u003e[ IDLffDICOM ::]GetDescription([ Group [, Element ]] [, ...",t:"IDLffDICOM::GetDescription"},"1554":{i:0.000236283556595943,u:"../Content/Object Classes/File Format/IDLffDICOM__GetElement.htm",a:"Syntax | Return Value | Arguments | Keywords | Examples | Version History The IDLffDICOM::GetElement function method takes optional DICOM group and/or element arguments and returns an array of DICOM Element numbers for those parameters. Syntax Result = Obj -\u003e[ IDLffDICOM ::]GetElement([ Group [, ...",t:"IDLffDICOM::GetElement"},"1555":{i:0.000236283556595943,u:"../Content/Object Classes/File Format/IDLffDICOM__GetGroup.htm",a:"Syntax | Return Value | Arguments | Keywords | Examples | Version History The IDLffDICOM::GetGroup function method takes optional DICOM group and/or element arguments and returns an array of DICOM Group numbers for those parameters. Syntax Result = Obj -\u003e[ IDLffDICOM ::]GetGroup([ Group [, Element ...",t:"IDLffDICOM::GetGroup"},"1556":{i:0.000236283556595943,u:"../Content/Object Classes/File Format/IDLffDICOM__GetLength.htm",a:"Syntax | Return Value | Arguments | Keywords | Examples | Version History The IDLffDICOM::GetLength function method takes optional DICOM group and/or element arguments and returns an array of LONGs. Syntax Result = Obj -\u003e[ IDLffDICOM ::]GetLength([ Group [, Element ]] [, REFERENCE = list of element ...",t:"IDLffDICOM::GetLength"},"1557":{i:0.000236283556595943,u:"../Content/Object Classes/File Format/IDLffDICOM__GetParent.htm",a:"Syntax | Return Value | Arguments | Keywords | Examples | Version History The IDLffDICOM::GetParent function method is used to find the parent references of a set of elements in a DICOM sequence. Syntax Result = Obj -\u003e[ IDLffDICOM ::]GetParent( ReferenceList ) Return Value Returns the parent ...",t:"IDLffDICOM::GetParent"},"1558":{i:0.000236283556595943,u:"../Content/Object Classes/File Format/IDLffDICOM__GetPreamble.htm",a:"Syntax | Return Value | Arguments | Keywords | Examples | Version History The IDLffDICOM::GetPreamble function method returns the preamble of a DICOM v3.0 Part 10 file. Syntax Result = Obj -\u003e[ IDLffDICOM ::]GetPreamble() Return Value Returns a 128-element byte array containing the preamble, which is ...",t:"IDLffDICOM::GetPreamble"},"1559":{i:0.000236283556595943,u:"../Content/Object Classes/File Format/IDLffDICOM__GetReference.htm",a:"Syntax | Return Value | Arguments | Keywords | Examples | Version History The IDLffDICOM::GetReference function method takes optional DICOM group and/or element arguments and returns an array of references to matching elements in the object. Syntax Result = Obj -\u003e[ IDLffDICOM ::]GetReference([ Group ...",t:"IDLffDICOM::GetReference"},"1560":{i:0.000236283556595943,u:"../Content/Object Classes/File Format/IDLffDICOM__GetValue.htm",a:"Syntax | Return Value | Arguments | Keywords | Examples | Version History This method takes optional DICOM group and/or element arguments and returns an array of POINTERs to the values of the elements matching those parameters. Syntax Result = Obj -\u003e[ IDLffDICOM ::]GetValue([ Group [, Element ]] [, ...",t:"IDLffDICOM::GetValue"},"1561":{i:0.000236283556595943,u:"../Content/Object Classes/File Format/IDLffDICOM__GetVR.htm",a:"Syntax | Return Value | Arguments | Keywords | Examples | Version History The IDLffDICOM::GetVR function method takes optional DICOM group and/or element arguments and returns an array of VR (Value Representation) STRINGs for those parameters. Syntax array = Obj -\u003e[ IDLffDICOM ::]GetVR([ Group [, ...",t:"IDLffDICOM::GetVR"},"1562":{i:0.000313534213844133,u:"../Content/Object Classes/File Format/IDLffDICOM__Init.htm",a:"Syntax | Return Value | Arguments | Keywords | Examples | Version History The IDLffDICOM::Init function method creates a new IDLffDICOM object and optionally re ads the specified file as defined in the IDLffDICOM::Read method. Init methods are special lifecycle methods , and as such cannot be called ...",t:"IDLffDICOM::Init"},"1563":{i:0.000236283556595943,u:"../Content/Object Classes/File Format/IDLffDICOM__Read.htm",a:"Syntax | Return Value | Arguments | Keywords | Examples | Version History The IDLffDICOM::Read function method opens and rea ds from the specified disk file, places the information into the DICOM object, then closes the file. Syntax Result = Obj -\u003e[ IDLffDICOM ::]Read( Filename [, ENDIAN ={1 | 2 | 3 ...",t:"IDLffDICOM::Read"},"1564":{i:0.000236283556595943,u:"../Content/Object Classes/File Format/IDLffDICOM__Reset.htm",a:"Syntax | Arguments | Keywords | Examples | Version History The IDLffDICOM::Reset procedure method removes all of the elements from the IDLffDICOM object, leaving the object otherwise intact. Syntax Obj -\u003e[ IDLffDICOM ::]Reset Arguments None Keywords None Examples ; Create a DICOM object, read a ...",t:"IDLffDICOM::Reset"},"1565":{i:0.00146685637772025,u:"../Content/Object Classes/File Format/IDLffDXF.htm",a:"Superclasses | Creation | Properties | Methods | Version History An IDLffDXF object contains geometry, connectivity and attributes for graphics primitives. IDL supports version 2.003 of the DXF Library. See IDL Feature Support for a list of platforms that support DXF functionality. This object ...",t:"IDLffDXF"},"1566":{i:5.50327019655568E-05,u:"../Content/Object Classes/File Format/IDLffDXF_Properties.htm",a:"IDLffDXF Properties Objects of this class have no properties of their own. ",t:"IDLffDXF Properties"},"1567":{i:0.000262513998760169,u:"../Content/Object Classes/File Format/IDLffDXF__Cleanup.htm",a:"IDLffDXF::Cleanup Syntax | Arguments | Keywords | Version History The IDLffDXF::Cleanup procedure method performs all cleanup on the object. Syntax Obj -\u003e Cleanup or Obj-\u003e [ IDLffDXF ::]Cleanup or OBJ_DESTROY, Obj Arguments None Keywords None Version History 5.2 Introduced ",t:"IDLffDXF::Cleanup"},"1568":{i:0.00021062062384557,u:"../Content/Object Classes/File Format/IDLffDXF__GetContents.htm",a:"Syntax | Return Value | Arguments | Keywords | Version History The IDLffDXF::GetContents function method returns a description of the content of the DXF file. See the Examples in the GetEntity method for an illustration of the difference between the GetContents and the GetEntity methods. The Read or ...",t:"IDLffDXF::GetContents"},"1569":{i:0.000366300748589367,u:"../Content/Object Classes/File Format/IDLffDXF__GetEntity.htm",a:"Syntax | Return Value | Arguments | Keywords | Examples | Version History The ID LffDXF::GetEntity function method returns an array of data for the requested entity type. Syntax Result = Obj -\u003e[ IDLffDXF ::]GetEntity( Type [, BLOCK = string ] [, INDEX = value ] [, LAYER = string ]) Return Value ...",t:"IDLffDXF::GetEntity"},"1570":{i:0.000262513998760169,u:"../Content/Object Classes/File Format/IDLffDXF__GetPalette.htm",a:"Syntax | Arguments | Keywords | Version History The I DLffDXF::GetPalette procedure method returns the current color table in the object. Syntax Obj -\u003e[ IDLffDXF ::]GetPalette, Red , Green , Blue Arguments Red Returns an array of the red components to the current color table. Green Returns an array ...",t:"IDLffDXF::GetPalette"},"1571":{i:0.000262513998760169,u:"../Content/Object Classes/File Format/IDLffDXF__Init.htm",a:"IDLffDX F::Init Syntax | Return Value | Arguments | Keywords | Version History The IDLffDXF::Init function method initializes the DXF object. Init methods are special lifecycle methods , and as such cannot be called outside the context of object creation. This means that in most cases, you cannot ...",t:"IDLffDXF::Init"},"1572":{i:0.000262513998760169,u:"../Content/Object Classes/File Format/IDLffDXF__PutEntity.htm",a:"Syntax | Arguments | Keywords | Version History The IDLffDXF::PutEntity procedure method inserts an entity into the DXF object. The type of the entity is determined from the DXF_TYPE field of the entity structure. If DXF_TYPE is set to 0, the type is implied by the entity structure. Line3D entity ...",t:"IDLffDXF::PutEntity"},"1573":{i:0.000262513998760169,u:"../Content/Object Classes/File Format/IDLffDXF__Read.htm",a:"Syntax | Arguments | Keywords | Examples | Version History The IDLffDXF::Read function method reads a file, parsing the DXF object information contained in the file, and inserts it into itself. Syntax Result = Obj -\u003e[ IDLffDXF ::]Read( Filename ) Return Value Returns a 1 indicating success in ...",t:"IDLffDXF::Read"},"1574":{i:0.000262513998760169,u:"../Content/Object Classes/File Format/IDLffDXF__RemoveEntity.htm",a:"Syntax | Arguments | Keywords | Version History The IDLffDXF::RemoveEntity procedure method removes the specified entity or entities from the DXF object. Syntax Obj -\u003e[ IDLffDXF ::]RemoveEntity[, Type ] [, INDEX = value ] Arguments Type An optional scalar string containing the DXF type to be removed ...",t:"IDLffDXF::RemoveEntity"},"1575":{i:0.000262513998760169,u:"../Content/Object Classes/File Format/IDLffDXF__Reset.htm",a:"IDLffDXF::Reset Syntax | Arguments | Keywords | Version History The IDLffDXF::Reset procedure method removes all the entities from the DXF object. Syntax Obj -\u003e[ IDLffDXF ::]Reset Arguments None Keywords None Version History 5.2 Introduced ",t:"IDLffDXF::Reset"},"1576":{i:0.000262513998760169,u:"../Content/Object Classes/File Format/IDLffDXF__SetPalette.htm",a:"Syntax | Arguments | Keywords | Version History The IDLffDXF::SetPalette procedure method sets the current color table in the object. Syntax Obj -\u003e[ IDLffDXF ::]SetPalette, Red , Green , Blue Arguments Red Sets the red components of the current color table to this array. Green Sets the green ...",t:"IDLffDXF::SetPalette"},"1577":{i:0.000262513998760169,u:"../Content/Object Classes/File Format/IDLffDXF__Write.htm",a:"Syntax | Arguments | Keywords | Examples | Version History The IDLffDXF::Write function method writes a file for the DXF entity information this object contains. Syntax Result = Obj -\u003e[ IDLffDXF ::]Write( Filename ) Return Value Returns a 1 if successful in writing the file, 0 otherwise. Arguments ...",t:"IDLffDXF::Write"},"1578":{i:0.00110945481581796,u:"../Content/Object Classes/File Format/IDLffJPEG2000.htm",a:"Superclasses | Creation | Properties | Methods | Version History An IDLffJPEG2000 object contains the data for one or more images embedded in a JPEG2000 file as well as functionality for reading and writing JPEG2000 files. For additional information on the JPEG 2000 file format, see Overview of IDL ...",t:"IDLffJPEG2000"},"1579":{i:0.000501560273856294,u:"../Content/Object Classes/File Format/IDLffJPEG2000_Properties.htm",a:"IDLffJPEG2000 objects have the following properties. Properties with the word “Yes” in the “Get” column of the property table can be retrieved via IDLffJPEG2000::GetProperty . Properties with the word “Yes” in the “Init” column of the property table can be set via IDLffJPEG2000::Init . Properties ...",t:"IDLffJPEG2000 Properties"},"1580":{i:0.000244810973870676,u:"../Content/Object Classes/File Format/IDLffJPEG2000__Cleanup.htm",a:"Syntax | Arguments | Keywords The IDLffJPEG2000::Cleanup procedure method performs all cleanup on the object. Calling OBJ_DESTROY will also close any files that have been opened for reading or writing. Syntax Obj -\u003eCleanup or Obj -\u003e [ IDLffJPEG2000 ::]Cleanup or OBJ_DESTROY, Obj Arguments None ...",t:"IDLffJPEG2000::Cleanup"},"1581":{i:0.000244810973870676,u:"../Content/Object Classes/File Format/IDLffJPEG2000__GetData.htm",a:"Syntax | Return Value | Keywords | Examples | Version History The IDLffJPEG2000::GetData function method returns image data from the IDLffJPEG2000 object. Syntax Result = Obj-\u003e [ IDLffJPEG2000 ::]GetData( [, COMPONENT = value ] [, DISCARD_LEVELS = value ] [, MAX_LAYERS = value ] [, N_COMPONENTS = ...",t:"IDLffJPEG2000::GetData"},"1582":{i:0.000281401305713852,u:"../Content/Object Classes/File Format/IDLffJPEG2000__GetProper.htm",a:"Syntax | Arguments | Keywords | Version History The IDLffJPEG2000::GetProperty procedure method returns information describing the properties of an IDLffJPEG2000 object in the supplied variable - keyword pairs. Syntax Obj -\u003e[ IDLffJPEG2000 ::]GetProperty [, PROPERTY = variable ] Arguments None ...",t:"IDLffJPEG2000::GetProperty"},"1583":{i:0.000196416983965767,u:"../Content/Object Classes/File Format/IDLffJPEG2000__GetTilePr.htm",a:"Syntax | Arguments | Keywords | Version History The IDLffJPEG2000::GetTileProperty procedure method returns information describing the properties of a tile in an IDLffJPEG2000 object in the supplied variable-keyword pairs. The object must be open for reading. An error is produced if the object is ...",t:"IDLffJPEG2000::GetTileProperty"},"1584":{i:0.000244810973870676,u:"../Content/Object Classes/File Format/IDLffJPEG2000__GetUUID.htm",a:"The IDLffJPEG2000::GetUUI D function method allows you to get the data field from the specified UUID box. A JPEG2000 file can contain 0- n number of UUID boxes. Each UUID box in a JPEG2000 file is made up of a UUID field and a user data field. A UUID box allows the user to store application specific ...",t:"IDLffJPEG2000::GetUUID"},"1585":{i:0.000281401305713852,u:"../Content/Object Classes/File Format/IDLffJPEG2000__Init.htm",a:"Syntax | Return Value | Arguments | Keywords | Version History The IDLffJPEG2000::Init() function method initializes an IDLffJPEG2000 object that can be used to read (decode) image data from a JPEG2000 image file, or write (encode) image data to a JPEG2000 image file. Init methods are special ...",t:"IDLffJPEG2000::Init"},"1586":{i:0.000244810973870676,u:"../Content/Object Classes/File Format/IDLffJPEG2000__SetData.htm",a:"Syntax | Arguments | Keywords | Examples | Version History The IDLffJPEG2000::SetData procedure method writes data to the IDLffJPEG2000 object. Syntax Obj -\u003e [ IDLffJPEG2000 ::]SetData, P 1 , ..., P n [, COMPONENT = value ] [, / ORDER ] [, TILE_INDEX = value ] Arguments P 1 , ... , P n Arguments may ...",t:"IDLffJPEG2000::SetData"},"1587":{i:0.000281401305713852,u:"../Content/Object Classes/File Format/IDLffJPEG2000__SetProper.htm",a:"Syntax | Arguments | Keywords | Version History This procedure sets the properties of an object that is open for writing. This method may not be called on files opened for reading. Syntax Obj -\u003e[ IDLffJPEG2000 ::]SetProperty [, PROPERTY = value ] Arguments None. Keywords Any property listed under ...",t:"IDLffJPEG2000::SetProperty"},"1588":{i:0.000140764732550033,u:"../Content/Object Classes/File Format/IDLffJPEG2000__SetUUID.htm",a:"The IDLffJPEG2000::SetUUID procedure meth od allows you to add UUID boxes when creating a new JPEG2000 file. This method can only be called when the JPEG2000 object was created with the WRITE property set. Each call to SetUUID will add a new uuid box to the JPEG2000 file. A JPEG2000 file can contain ...",t:"IDLffJPEG2000::SetUUID"},"1589":{i:0.000621825749854343,u:"../Content/Object Classes/File Format/IDLffLangCat.htm",a:"The IDLffLangCat class is used to find and load an XML language catalog. A language catalog is composed of key names and key values. The key value of the specified key name can be retrieved to support internationalization. For example: \u003cKEY NAME=\u0027Menu:File:Open\u0027\u003eOpen...\u003c/KEY\u003e in an English language ...",t:"IDLffLangCat"},"1590":{i:0.000414022181239867,u:"../Content/Object Classes/File Format/IDLffLangCat_Properties.htm",a:"IDLffLangCat objects have the following properties in addition to properties inherited from any superclasses. Properties with the word “Yes” in the “Get” column of the property table can be retrieved via IDLffLangCat::GetProperty . Properties with the word “Yes” in the “Init” column of the property ...",t:"IDLffLangCat Properties"},"1591":{i:0.000227031181061824,u:"../Content/Object Classes/File Format/IDLffLangCat__AppendCata.htm",a:"Syntax | Return Value | Arguments | Keywords | Version History The IDLffLangCat:: AppendCatalog function method adds keys from a file or files to those used to build the language catalog. All valid keys present in the current language will be inserted into the current key/value list. If any new ...",t:"IDLffLangCat::AppendCatalog"},"1592":{i:0.000227031181061824,u:"../Content/Object Classes/File Format/IDLffLangCat__Cleanup.htm",a:"Syntax | Arguments | Keywords | Version History The IDLffLangCat:: Cleanup procedure method performs all cleanup operations on the language catalog object, and should be called by the Cleanup method of a subclass. Syntax Obj -\u003eCleanup or Obj -\u003e[ IDLffLangCat ::]Cleanup or OBJ_DESTROY, Obj Arguments ...",t:"IDLffLangCat::Cleanup"},"1593":{i:0.000255146050067225,u:"../Content/Object Classes/File Format/IDLffLangCat__GetPropert.htm",a:"Syntax | Arguments | Keywords | Version History The IDLffLangCat:: GetProperty procedure method retrieves a property or group of properties for an IDLffLangCat object. Comparisons such as those done with IDLffLangCat::Query are case insensitive, but the values returned by GetProperty are exactly as ...",t:"IDLffLangCat::GetProperty"},"1594":{i:0.000280364639487756,u:"../Content/Object Classes/File Format/IDLffLangCat__Init.htm",a:"Syntax | Return Value | Arguments | Keywords | Version History The IDLffLangCat:: Init function method initializes an IDLffLangCat object. Init methods are special life cycle methods, and as such cannot be called outside the context of object creation. This means that in most cases, you cannot call ...",t:"IDLffLangCat::Init"},"1595":{i:0.000321327655738472,u:"../Content/Object Classes/File Format/IDLffLangCat__Query.htm",a:"Syntax | Return Value | Arguments | Keywords | Version History The IDLffLangCat:: Query function method returns the string or string array that corresponds to all supplied key values. Syntax Result = Obj -\u003e[ IDLffLangCat ::]Query( Key [, DEFAULT_STRING = string ] ) Return Value Returns a string or ...",t:"IDLffLangCat::Query"},"1596":{i:0.000280364639487756,u:"../Content/Object Classes/File Format/IDLffLangCat__SetPropert.htm",a:"Syntax | Arguments | Keywords | Version History The IDLffLangCat:: SetProperty procedure method sets the value of a property or group of properties for an IDLffLangCat object. Syntax Obj -\u003e[ IDLffLangCat ::]SetProperty [, PROPERTY=variable ] Arguments None Keywords Any property listed under ...",t:"IDLffLangCat::SetProperty"},"1597":{i:0.00089996790150812,u:"../Content/Object Classes/File Format/IDLffMJPEG2000.htm",a:"Superclasses | Creation | Properties | Methods | Examples | Version History | See Also The IDL ffMJPEG2000 object provides the ability to read and write Motion JPEG2000 (MJ2) files. Motion JPEG2000, like JPEG2000, uses the Discrete Wavelet Transform (DWT) to compress files. This lossless compression ...",t:"IDLffMJPEG2000"},"1598":{i:0.000769808283406262,u:"../Content/Object Classes/File Format/IDLffMJPEG2000_Propertie.htm",a:"IDLffMJPEG2000 objects have the following properties in addition to properties inherited from any superclasses. Properties with the word “Yes” in the “Get” column of the property table can be retrieved via IDLffMJPEG2000::GetProperty . Properties with the word “Yes” in the “Init” column of the ...",t:"IDLffMJPEG2000 Properties"},"1599":{i:0.000190740289854616,u:"../Content/Object Classes/File Format/IDLffMJPEG2000__Cleanup.htm",a:"Syntax | Arguments | Keywords | Version History The IDLffMJPEG2000:: Cleanup procedure method performs all cleanup operations on the Motion JPEG2000 object, and should be called by the Cleanup method of a subclass. Syntax Obj -\u003eCleanup or Obj -\u003e[ IDLffMJPEG2000 ::]Cleanup or OBJ_DESTROY, Obj ...",t:"IDLffMJPEG2000::Cleanup"},"1600":{i:0.000220970050422895,u:"../Content/Object Classes/File Format/IDLffMJPEG2000__Commit.htm",a:"Syntax | Return Value | Arguments | Keywords | Version History The IDLffMJPEG2000::C ommit method shuts down the background processing thread and closes the MJ2 file that is being written. Although the MJ2 file does exist on disk, it cannot be accessed until this method successfully returns. The ...",t:"IDLffMJPEG2000::Commit "},"1601":{i:0.000243135729703748,u:"../Content/Object Classes/File Format/IDLffMJPEG2000__GetData.htm",a:"Syntax | Return Value | Arguments | Keywords | Version History The IDLffMJPEG::GetData function method returns data for a specified frame (or component, tile or region of a frame) from an MJ2 file. This method does not return until the requested data has been decompressed. It will throw an error if ...",t:"IDLffMJPEG2000::GetData "},"1602":{i:0.000267167260834547,u:"../Content/Object Classes/File Format/IDLffMJPEG2000__GetPrope.htm",a:"Syntax | Arguments | Keywords | Version History The IDLffMJPEG2000:: GetProperty procedure method retrieves a property or group of properties for an IDLffMJPEG2000 object. Syntax Obj -\u003e[ IDLffMJPEG2000 ::]GetProperty [, PROPERTY=variable ] Arguments None Keywords Any property listed under ...",t:"IDLffMJPEG2000::GetProperty "},"1603":{i:0.000320888370926981,u:"../Content/Object Classes/File Format/IDLffMJPEG2000__GetSeque.htm",a:"Syntax | Return Value | Arguments | Keywords | Examples | Version History The IDLffMJPEG2000::GetSequentialData function method returns the frame index number and retrieves the associated frame data from the frame buffer. The StartSequentialReading method, which loads data into the frame buffer, ...",t:"IDLffMJPEG2000::GetSequentialData "},"1604":{i:0.000339261854226942,u:"../Content/Object Classes/File Format/IDLffMJPEG2000__Init.htm",a:"Syntax | Return Value | Arguments | Keywords | Version History The IDLffMJPEG:: Init method initializes an IDLffMJPEG2000 object. When WRITE is not set or set equal to 0 (the default), the newly created Motion JPEG2000 object can be used to read (decode) frame data from a Motion JPEG2000 (MJ2) frame ...",t:"IDLffMJPEG2000::Init "},"1605":{i:0.000139269765453001,u:"../Content/Object Classes/File Format/IDLffMJPEG2000__ReleaseS.htm",a:"Syntax | Arguments | Keywords | Examples | Version History The IDLffMJPEG2000:: ReleaseSequentialData procedure method releases a frame from the frame buffer during animation playback. After calling GetSequentialData, which reads the frame from the frame buffer, call this method to release the frame ...",t:"IDLffMJPEG2000::ReleaseSequentialData "},"1606":{i:0.000302763898267031,u:"../Content/Object Classes/File Format/IDLffMJPEG2000__SetData.htm",a:"Syntax | Arguments | Keywords | Version History The IDLffMJPEG:: SetData function method starts a background processing thread and adds frame data to an MJ2 file that is being created. Each call to SetData call adds a frame to the frame buffer, which will be compressed by the processing thread. The ...",t:"IDLffMJPEG2000::SetData "},"1607":{i:0.000267167260834547,u:"../Content/Object Classes/File Format/IDLffMJPEG2000__SetPrope.htm",a:"Syntax | Arguments | Keywords | Version History The IDLffMJPEG:: SetProperty procedure method sets the value of properties of an IDLffMJPEG2000 object. You can only set object properties for an associated file that is open for writing ( WRITE =1). Syntax Obj -\u003e[ IDLffMJPEG2000 ::]SetProperty [, ...",t:"IDLffMJPEG2000::SetProperty "},"1608":{i:0.000329726583145252,u:"../Content/Object Classes/File Format/IDLffMJPEG2000__StartSeq.htm",a:"Syntax | Return Value | Arguments | Keywords | Examples | Version History The IDLffMJPEG2000:: StartSequentialReading function method initiates a sequential playback of a large number of frames. This method lets you configure what data is to be decompressed from each frame of the MJ2 file (the ...",t:"IDLffMJPEG2000::StartSequentialReading "},});