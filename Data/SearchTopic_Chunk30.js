define({"2163":{i:0.00206573132238955,u:"../Content/Object Classes/Miscellaneous/IDLdbRecordset.htm",a:"The IDLdbRecordset object contains a database table or the results from an SQL query. Superclasses None Creation To create a recordset object, a valid database object is required. Use the following IDL DataMinercommand to create a new recordset object: RSObj = OBJ_NEW(\u0027IDLdbRecordset\u0027, DBobj, ...",t:"IDLdbRecordset\n        "},"2164":{i:0.000350173773716855,u:"../Content/Object Classes/Miscellaneous/IDLdbRecordset__AddRecor.htm",a:"Use the IDLdbRecordset::AddRecord procedure method to add a record to a recordset. If you don’t have permission to modify the recordset, an error is returned. The location in the recordset of the new record is dependent on the ODBC Driver, but in most cases it is added to the end of the recordset. ...",t:"IDLdbRecordset::AddRecord\n        "},"2165":{i:0.000201352690346264,u:"../Content/Object Classes/Miscellaneous/IDLdbRecordset__Cleanup.htm",a:"The IDLdbRecordset:: Cleanup procedure method performs all cleanup on the object. Cleanup methods are special lifecycle methods , and as such cannot be called outside the context of object creation and destruction. This means that in most cases, you cannot call the Cleanup method directly. There is ...",t:"IDLdbRecordset::Cleanup"},"2166":{i:0.000201352690346264,u:"../Content/Object Classes/Miscellaneous/IDLdbRecordset__CurrentR.htm",a:"The IDLdbRecordset::CurrentRecord function method requests the current record number in a recordset. This method is driver-dependent. If the record number of the current record cannot be determined by the ODBC driver, this function returns a negative number. Because this function is ...",t:"IDLdbRecordset::CurrentRecord\n        "},"2167":{i:0.000201352690346264,u:"../Content/Object Classes/Miscellaneous/IDLdbRecordset__DeleteRe.htm",a:"Use the IDLdbRecordset::DeleteRecord procedure method to delete the current record from a recordset. Any attempt to access this record after it has been deleted can result in an error. This method will fail if the SQL driver doesn’t support positioned deletions to the recordset. Syntax RSobj -\u003e [ ...",t:"IDLdbRecordset::DeleteRecord\n        "},"2168":{i:0.000350173773716855,u:"../Content/Object Classes/Miscellaneous/IDLdbRecordset__GetField.htm",a:"Use the IDLdbRecordset::GetField function method to get the value of a field from the current record in the recordset. Syntax value = RSobj -\u003e [ IDLdbRecordset ::]GetField( iFieldNumber [, IS_NULL = variable ] [, NULL_VALUE = variable ] ) Return Value Returns the specified field value or if the ...",t:"IDLdbRecordset::GetField\n        "},"2169":{i:0.000201352690346264,u:"../Content/Object Classes/Miscellaneous/IDLdbRecordset__GetPrope.htm",a:"Use the IDLdbRecordset::GetProperty procedure method to get properties of the recordset. Syntax RSobj -\u003e [ IDLdbRecordset ::]GetProperty [, PROPERTY = variable ] Arguments None. Keywords Any property listed under IDLdbRecordset Properties that contains the word “Yes” in the “Get” column of the ...",t:"IDLdbRecordset::GetProperty\n        "},"2170":{i:0.000201352690346264,u:"../Content/Object Classes/Miscellaneous/IDLdbRecordset__GetRecor.htm",a:"Use the IDLdbRecordset::GetRecord function method to retrieve the value of the current record in an IDL DataMiner anonymous structure. The field names of the structure are the field names of the recordset. Any blob data is placed in an IDL DataMiner pointer and as such must be freed using the IDL ...",t:"IDLdbRecordset::GetRecord\n        "},"2171":{i:0.000201352690346264,u:"../Content/Object Classes/Miscellaneous/IDLdbRecordset__Init.htm",a:"The IDLdbRecordset:: Init function method initializes a database object. Init methods are special lifecycle methods , and as such cannot be called outside the context of object creation. This means that in most cases, you cannot call the Init method directly. There is one exception to this rule: if ...",t:"IDLdbRecordset::Init"},"2172":{i:0.000350173773716855,u:"../Content/Object Classes/Miscellaneous/IDLdbRecordset__MoveCurs.htm",a:"Use the IDLdbRecordset::MoveCursor function method to move the cursor in a given recordset. Syntax Result = RSobj -\u003e [ IDLdbRecordset ::]MoveCursor( [, ABSOLUTE = integer ] [, / FIRST ] [, / LAST ] [, / NEXT ] [, / PRIOR ] [, RELATIVE = integer ] ) Return Value The function returns true (1) if the ...",t:"IDLdbRecordset::MoveCursor\n        "},"2173":{i:0.000201352690346264,u:"../Content/Object Classes/Miscellaneous/IDLdbRecordset__NFields.htm",a:"IDLdbRecordset::NFields The IDLdbRecordset::NFields function method returns the number of fields in the recordset. Syntax status = RSobj -\u003e [ IDLdbRecordset ::]NFields() Return Value Returns the number of fields. Arguments None. Keywords None. Version History 5.0 Introduced ",t:"IDLdbRecordset::NFields\n        "},"2174":{i:0.000350173773716855,u:"../Content/Object Classes/Miscellaneous/IDLdbRecordset__SetField.htm",a:"IDLdbRecord set::SetField Use the IDLdbRecordset::SetField procedure method to set the value of a field in the current record of a recordset. Syntax RSobj -\u003e [ IDLdbRecordset ::]SetField, iFieldNumber , Value [, / NULL ] Arguments iFieldNumber The number of the field whose value is returned. Field ...",t:"IDLdbRecordset::SetField\n        "},"2175":{i:0.000587910229824682,u:"../Content/Object Classes/Miscellaneous/IDL_IDLBridge.htm",a:"Superclasses | Creation | Properties | Methods | Examples | Version History | See Also The IDL_IDLBridge object class allows an IDL se ss ion to create and control other IDL sessions, each of which runs as a separate process. Each instantiation of an IDL_IDLBridge object corresponds to one such ...",t:"IDL_IDLBridge"},"2176":{i:0.000378468359559064,u:"../Content/Object Classes/Miscellaneous/IDL_IDLBridge_Properties.htm",a:"IDL_IDLBridge objects have the following properties. Properties with the word “Yes” in the “Get” column of the property table can be retrieved via IDL_IDLBridge::GetProperty . Properties with the word “Yes” in the “Init” column of the property table can be set via IDL_IDLBridge::Init . Properties ...",t:"IDL_IDLBridge Properties"},"2177":{i:0.000271991102935643,u:"../Content/Object Classes/Miscellaneous/IDL_IDLBridge__Abort.htm",a:"Syntax | Arguments | Keywords | Version History The IDL_IDLBridge:: Abort procedure method causes the asynchronous operation currently being executed by the child IDL process to abort, returning the child to the idle state. This operation is similar to what happens when a user of interactive IDL ...",t:"IDL_IDLBridge::Abort"},"2178":{i:0.000194109356592574,u:"../Content/Object Classes/Miscellaneous/IDL_IDLBridge__Cleanup.htm",a:"Syntax | Arguments | Keywords | Examples | Version History The IDL_IDLBridge:: Cleanup procedure method performs all cleanup when the bridge object is destroyed. A program should ensure that a child process executing a command asynchronously has been completed or aborted before the associated ...",t:"IDL_IDLBridge::Cleanup"},"2179":{i:0.000310430317338811,u:"../Content/Object Classes/Miscellaneous/IDL_IDLBridge__Execute.htm",a:"Syntax | Arguments | Keywords | Examples | Version History The IDL_IDLBridge:: Execute procedure method causes the child IDL process to execute a given IDL command. There are two possible modes in which this can be done: Synchronous — IDL waits until the child process completes the specified ...",t:"IDL_IDLBridge::Execute"},"2180":{i:0.000186539784000798,u:"../Content/Object Classes/Miscellaneous/IDL_IDLBridge__GetProper.htm",a:"Syntax | Arguments | Keywords | Version History The IDL_IDLBridge:: GetProperty procedure method retrieves a property or group of properties for this object. Syntax Obj -\u003e[ IDL_IDLBridge ::] GetProperty [, PROPERTY=variable ] Arguments None Keywords Any property listed under IDL_IDLBridge Properties ...",t:"IDL_IDLBridge::GetProperty "},"2181":{i:0.000158035389402586,u:"../Content/Object Classes/Miscellaneous/IDL_IDLBridge__GetVar.htm",a:"Syntax | Return Value | Arguments | Keywords | Examples | Version History The IDL_IDLBridge:: GetVar function copies the value of a variable from the child process to the parent process. The variable must exist in the child process at the $MAIN$ level. See Examples for more information. ...",t:"IDL_IDLBridge::GetVar"},"2182":{i:0.000133686273130393,u:"../Content/Object Classes/Miscellaneous/IDL_IDLBridge__Init.htm",a:"The IDL_IDLBridge::Init method initializes an IDL_IDLBridge object, which provides a means of controlling the corresponding IDL child process. A startup file is not automatically executed when a child process is created. To manually run a startup file, see Executing a Batch File in a Child Process ...",t:"IDL_IDLBridge::Init"},"2183":{i:0.000234883190172098,u:"../Content/Object Classes/Miscellaneous/IDL_IDLBridge__OnCallbac.htm",a:"Syntax | Arguments | Keywords | Examples | Version History The IDL_IDLBridge:: OnCallback procedure method is called automatically when an asynchronous command ends. By default the IDL_IDLBridge::OnCallback method will check if the CALLBACK property has been set, and if so, the method will ...",t:"IDL_IDLBridge::OnCallback"},"2184":{i:0.000186539784000798,u:"../Content/Object Classes/Miscellaneous/IDL_IDLBridge__SetProper.htm",a:"Syntax | Arguments | Keywords | Version History The IDL_IDLBridge:: SetProperty procedure method sets the properties of an IDL_IDLBridge object. Syntax Obj -\u003e[ IDL_IDLBridge ::]SetProperty [, PROPERTY=variable ] Arguments None Keywords Any property listed under IDL_IDLBridge Properties that contains ...",t:"IDL_IDLBridge::SetProperty "},"2185":{i:0.000158035389402586,u:"../Content/Object Classes/Miscellaneous/IDL_IDLBridge__SetVar.htm",a:"Syntax | Arguments | Keywords | Examples | Version History The IDL_IDLBridge:: SetVar function copies the value of a variable from the parent IDL process to the $MAIN$ level of the child process under the given name. IDL_IDLBridge::SetVar is subject to the following limitations: Only scalar or array ...",t:"IDL_IDLBridge::SetVar"},"2186":{i:0.00036649752046247,u:"../Content/Object Classes/Miscellaneous/IDL_IDLBridge__Status.htm",a:"The IDL_IDLBridge::Status function method queries the state of an IDL_IDLBridge object. When the NOWAIT keyword is used with the IDL_IDLBridge::Execute method to execute IDL commands asynchronously, IDL_IDLBridge::Status can track the state of the child process. Syntax Result = Obj -\u003e[ IDL_IDLBridge ...",t:"IDL_IDLBridge::Status"},"2187":{i:0.00487337734330639,u:"../Content/Object Classes/Miscellaneous/IDL_Object.htm",a:"The IDL_Object class is designed to be inherited by objects that define _overload methods, in order to overload the behavior of one or more of IDL’s standard operators. It is not meant to be instantiated directly. To overload the behavior of a standard operator for objects of a user-defined object ...",t:"IDL_Object"},"2188":{i:0.000166991234684265,u:"../Content/Object Classes/Miscellaneous/IDL_Object_GetProperty.htm",a:"The IDL_Object:: GetProperty method returns property values for the object. If you write an object class that inherits from IDL_Object and overloads this method, you can call the superclass method directly to return the default property values. Syntax In most cases, this method is called by IDL when ...",t:"IDL_Object::GetProperty"},"2189":{i:0.000166991234684265,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadAND.htm",a:"The IDL_Object::_overloadAND function method defines the behavior of the bitwise AND operator for instances of objects that inherit from the IDL_Object class. This method is designed to replicate the default behavior of objects that do not use operator overloading. As a result, object classes that ...",t:"IDL_Object::_overloadAND"},"2190":{i:0.000166991234684265,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadAsterisk.htm",a:"The IDL_Object::_overloadAsterisk function method defines the behavior of the multiplication (*) operator for instances of objects that inherit from the IDL_Object class. This method is designed to replicate the default behavior of objects that do not use operator overloading. As a result, object ...",t:"IDL_Object::_overloadAsterisk"},"2191":{i:0.000166991234684265,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadBracketsLeftSide.htm",a:"The IDL_Object::_overloadBracketsLeftSide procedure method defines the behavior of the array subscript ([]) operator (used on the left side of the equals sign) for instances of objects that inherit from the IDL_Object class. This method is designed to replicate the default behavior of objects that ...",t:"IDL_Object::_overloadBracketsLeftSide"},"2192":{i:0.000166991234684265,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadBracketsRightSide.htm",a:"The IDL_Object::_overloadBracketsRightSide function method defines the behavior of the array subscript ([]) operator (used on the right side of the equals sign) for instances of objects that inherit from the IDL_Object class. This method is designed to replicate the default behavior of objects that ...",t:"IDL_Object::_overloadBracketsRightSide"},"2193":{i:0.000166991234684265,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadCaret.htm",a:"The IDL_Object::_overloadCaret function method defines the behavior of the exponentiation (^) operator for instances of objects that inherit from the IDL_Object class. This method is designed to replicate the default behavior of objects that do not use operator overloading. As a result, object ...",t:"IDL_Object::_overloadCaret"},"2194":{i:0.000166991234684265,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadEQ.htm",a:"The IDL_Object::_overloadEQ function method defines the behavior of the relational equality (EQ) operator for instances of objects that inherit from the IDL_Object class. This method is designed to replicate the default behavior of objects that do not use operator overloading. As a result, object ...",t:"IDL_Object::_overloadEQ"},"2195":{i:0.000166991234684265,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadForeach.htm",a:"The IDL_Object:: _overloadForeach function method retrieves the value of the next object element. If you write an object class that inherits from IDL_Object and overloads this method, you can call the superclass method directly to achieve the default behavior for specific cases. Syntax In most ...",t:"IDL_Object::_overloadForeach"},"2196":{i:0.000236061787905714,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadFunction.htm",a:"The IDL_Object::_overloadFunction function method allows you to create \"function pointers\" in IDL. By implementing the _overloadFunction method on your class, users can then make a function call on an object reference. This function call could then execute different code based upon the object\u0027s ...",t:"IDL_Object::_overloadFunction"},"2197":{i:0.000166991234684265,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadGE.htm",a:"The IDL_Object::_overloadGE function method defines the behavior of the relational greater-than-or-equal (GE) operator for instances of objects that inherit from the IDL_Object class. This method is designed to replicate the default behavior of objects that do not use operator overloading. As a ...",t:"IDL_Object::_overloadGE"},"2198":{i:0.000166991234684265,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadGreaterThan.htm",a:"The IDL_Object::_overloadGreaterThan function method defines the behavior of the maximum (\u003e) operator for instances of objects that inherit from the IDL_Object class. This method is designed to replicate the default behavior of objects that do not use operator overloading. As a result, object ...",t:"IDL_Object::_overloadGreaterThan"},"2199":{i:0.000166991234684265,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadGT.htm",a:"The IDL_Object::_overloadGT function method defines the behavior of the relational greater-than (GT) operator for instances of objects that inherit from the IDL_Object class. This method is designed to replicate the default behavior of objects that do not use operator overloading. As a result, ...",t:"IDL_Object::_overloadGT"},"2200":{i:0.000330863139767298,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadHelp.htm",a:"The IDL_Object::_overloadHelp function method returns a scalar string or array of strings containing the “help” information for the object. The result of this function is then used as the output of the HELP procedure. This method is designed to replicate the default behavior of objects that do not ...",t:"IDL_Object::_overloadHelp"},"2201":{i:0.000166991234684265,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadIsTrue.htm",a:"The IDL_Object::_overloadIsTrue function method defines the behavior of instances of objects that inherit from the IDL_Object class when a “truth test” operation is applied. For example, if an instance of an overloaded object class is used in conjunction with the logical AND (&&) or logical OR (||) ...",t:"IDL_Object::_overloadIsTrue"},"2202":{i:0.000166991234684265,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadLE.htm",a:"The IDL_Object::_overloadLE function method defines the behavior of the relational less-than-or-equal (LE) operator for instances of objects that inherit from the IDL_Object class. This method is designed to replicate the default behavior of objects that do not use operator overloading. As a result, ...",t:"IDL_Object::_overloadLE"},"2203":{i:0.000166991234684265,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadLessThan.htm",a:"The IDL_Object::_overloadLessThan function method defines the behavior of the minimum (\u003c) operator for instances of objects that inherit from the IDL_Object class. This method is designed to replicate the default behavior of objects that do not use operator overloading. As a result, object classes ...",t:"IDL_Object::_overloadLessThan"},"2204":{i:0.000166991234684265,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadLT.htm",a:"The IDL_Object::_overloadLT function method defines the behavior of the relational less-than (LT) operator for instances of objects that inherit from the IDL_Object class. This method is designed to replicate the default behavior of objects that do not use operator overloading. As a result, object ...",t:"IDL_Object::_overloadLT"},"2205":{i:0.000236061787905714,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadMethod.htm",a:"The IDL_Object::_overloadMethod function method allows you to create dynamic methods off of IDL objects. By implementing _overloadMethod on your class, users can then make an arbitrary method call on an object reference. This method call could then execute different code based upon the object\u0027s ...",t:"IDL_Object::_overloadMethod"},"2206":{i:0.000166991234684265,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadMinus.htm",a:"The IDL_Object::_overloadMinus function method defines the behavior of the subtraction (-) operator for instances of objects that inherit from the IDL_Object class. This method is designed to replicate the default behavior of objects that do not use operator overloading. As a result, object classes ...",t:"IDL_Object::_overloadMinus"},"2207":{i:0.000255881249706174,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadMinusMinus.htm",a:"The IDL_Object::_overloadMinusMinus procedure method defines the behavior of the decrement (––) operator for instances of objects that inherit from the IDL_Object class. Object classes that  inherit from the IDL_Object class but that do not override this method will throw an error if you attempt to ...",t:"IDL_Object::_overloadMinusMinus"},"2208":{i:0.000166991234684265,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadMinusUnary.htm",a:"The IDL_Object::_overloadMinusUnary function method defines the behavior of the negation (unary -) operator for instances of objects that inherit from the IDL_Object class. This method is designed to replicate the default behavior of objects that do not use operator overloading. As a result, object ...",t:"IDL_Object::_overloadMinusUnary"},"2209":{i:0.000166991234684265,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadMOD.htm",a:"The IDL_Object::_overloadMOD function method defines the behavior of the MOD operator for instances of objects that inherit from the IDL_Object class. This method is designed to replicate the default behavior of objects that do not use operator overloading. As a result, object classes that do ...",t:"IDL_Object::_overloadMOD"},"2210":{i:0.000166991234684265,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadNE.htm",a:"The IDL_Object::_overloadNE function method defines the behavior of the relational not-equal (NE) operator for instances of objects that inherit from the IDL_Object class. This method is designed to replicate the default behavior of objects that do not use operator overloading. As a result, object ...",t:"IDL_Object::_overloadNE"},"2211":{i:0.000166991234684265,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadNOT.htm",a:"The IDL_Object::_overloadNOT function method defines the behavior of the bitwise NOT operator for instances of objects that inherit from the IDL_Object class. This method is designed to replicate the default behavior of objects that do not use operator overloading. As a result, object classes that ...",t:"IDL_Object::_overloadNOT"},"2212":{i:0.000166991234684265,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadOR.htm",a:"The IDL_Object::_overloadOR function method defines the behavior of the bitwise OR operator for instances of objects that inherit from the IDL_Object class. This method is designed to replicate the default behavior of objects that do not use operator overloading. As a result, object classes that do ...",t:"IDL_Object::_overloadOR"},"2213":{i:0.000166991234684265,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadPlus.htm",a:"The IDL_Object::_overloadPlus function method defines the behavior of the addition (+) operator for instances of objects that inherit from the IDL_Object class. This method is designed to replicate the default behavior of objects that do not use operator overloading. As a result, object classes that ...",t:"IDL_Object::_overloadPlus"},"2214":{i:0.000255881249706174,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadPlusPlus.htm",a:"The IDL_Object::_overloadPlusPlus procedure method defines the behavior of the increment (++) operator for instances of objects that inherit from the IDL_Object class. Object classes that  inherit from the IDL_Object class but that do not override this method will throw an error if you attempt to ...",t:"IDL_Object::_overloadPlusPlus"},"2215":{i:0.000253991750576666,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadPostIncrementCopy.htm",a:"The IDL_Object::_overloadPostIncrementCopy function method defines the behavior when the increment (++) or decrement (––) operator is used as part of an assignment statement. There are two different forms of the increment/decrement operators: pre-increment (++a) and post-increment (a++). If you use ...",t:"IDL_Object::_overloadPostIncrementCopy"},"2216":{i:0.000166991234684265,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadPound.htm",a:"The IDL_Object::_overloadPound function method defines the behavior of the matrix multiplication (#) operator for instances of objects that inherit from the IDL_Object class. This method is designed to replicate the default behavior of objects that do not use operator overloading. As a result, ...",t:"IDL_Object::_overloadPound"},"2217":{i:0.000166991234684265,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadPoundPound.htm",a:"The IDL_Object::_overloadPoundPound function method defines the behavior of the matrix multiplication (##) operator for instances of objects that inherit from the IDL_Object class. This method is designed to replicate the default behavior of objects that do not use operator overloading. As a result, ...",t:"IDL_Object::_overloadPoundPound"},"2218":{i:0.000319265767547782,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadPrint.htm",a:"The IDL_Object::_overloadPrint function method can return a variable of any type to be printed out, although in this default method the self object reference is returned to the PRINT/PRINTF procedures. This method is designed to replicate the default behavior of objects that do not use operator ...",t:"IDL_Object::_overloadPrint"},"2219":{i:0.000223238699236556,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadSize.htm",a:"The IDL_Object:: _overloadSize function method returns a vector of values representing the object’s “dimensions”. This method is designed to replicate the default behavior of objects that do not use operator overloading. As a result, object classes that do inherit from the IDL_Object class but that ...",t:"IDL_Object::_overloadSize"},"2220":{i:0.000166991234684265,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadSlash.htm",a:"The IDL_Object::_overloadSlash function method defines the behavior of the division (/) operator for instances of objects that inherit from the IDL_Object class. This method is designed to replicate the default behavior of objects that do not use operator overloading. As a result, object classes ...",t:"IDL_Object::_overloadSlash"},"2221":{i:0.000166991234684265,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadTilde.htm",a:"The IDL_Object::_overloadTilde function method defines the behavior of the unary logical NOT (~) operator for instances of objects that inherit from the IDL_Object class. This method is designed to replicate the default behavior of objects that do not use operator overloading. As a result, object ...",t:"IDL_Object::_overloadTilde"},"2222":{i:0.000166991234684265,u:"../Content/Object Classes/Miscellaneous/IDL_Object_overloadXOR.htm",a:"The IDL_Object::_overloadXOR function method defines the behavior of the bitwise XOR operator for instances of objects that inherit from the IDL_Object class. This method is designed to replicate the default behavior of objects that do not use operator overloading. As a result, object classes that ...",t:"IDL_Object::_overloadXOR"},"2223":{i:0.00113303981401968,u:"../Content/Object Classes/Miscellaneous/IDL_Savefile.htm",a:"Superclasses | Creation | Properties | Methods | Example | Version History | See Also The IDL_Savefile object provides complete query and restore capabilities for IDL SAVE files. IDL SAVE files are binary format files created with the SAVE procedure; they can contain data or IDL routines. Using ...",t:"IDL_Savefile"},"2224":{i:5.50327019655568E-05,u:"../Content/Object Classes/Miscellaneous/IDL_Savefile_Properties.htm",a:"IDL_Savefile Properties Objects of this class have no properties of their own.  ",t:"IDL_Savefile Properties"},"2225":{i:0.000247982939416998,u:"../Content/Object Classes/Miscellaneous/IDL_Savefile__Cleanup.htm",a:"Syntax | Arguments | Keywords | Version History The IDL_Savefile:: Cleanup procedure method performs all necessary cleanup when the savefile object is destroyed. The SAVE file associated with the object is closed. In addition, all in-memory data structures created by IDL when cataloging the SAVE ...",t:"IDL_Savefile::Cleanup"},"2226":{i:0.000290592867861868,u:"../Content/Object Classes/Miscellaneous/IDL_Savefile__Contents.htm",a:"Syntax | Return Value | Arguments | Keywords | Example | Version History The IDL_Savefile:: Contents function method returns a structure variable of type IDL_SAVEFILE_CONTENTS containing information about the associated SAVE file and its contents. Syntax Result = Obj -\u003e[ IDL_Savefile ::]Contents() ...",t:"IDL_Savefile::Contents"},"2227":{i:0.000181065063944751,u:"../Content/Object Classes/Miscellaneous/IDL_Savefile__Init.htm",a:"The IDL_Savefile::Init function method initializes the savefile object. The SAVE file associated with the object is opened and scanned to construct an internal data structure representing the contents. The SAVE file remains open until the savefile object is destroyed — the user is not allowed to use ...",t:"IDL_Savefile::Init"},"2228":{i:0.000314900814889246,u:"../Content/Object Classes/Miscellaneous/IDL_Savefile__Names.htm",a:"Syntax | Return Value | Arguments | Keywords | Example | Version History The IDL_Savefile:: Names function method returns names, or heap variable identifiers, of items contained within the SAVE file. By default, this method returns the names of variables in the file; keywords can be used to obtain ...",t:"IDL_Savefile::Names"},"2229":{i:0.000314900814889246,u:"../Content/Object Classes/Miscellaneous/IDL_Savefile__Restore.htm",a:"Syntax | Arguments | Keywords | Notes on Restored Heap Variables | Example | Version History The IDL_Savefile:: Restore procedure method selectively restores individual items from the associated SAVE file. Given the identifier for an item within the SAVE file, this method restores the item along ...",t:"IDL_Savefile::Restore"},"2230":{i:0.000181065063944751,u:"../Content/Object Classes/Miscellaneous/IDL_Savefile__Size.htm",a:"Syntax | Return Value | Arguments | Keywords | Example | Version History | See Also The IDL_Savefile:: Size function method returns the size and type information for the specified variable, system variable, or heap variable in the SAVE file associated with the savefile object, if no keywords are ...",t:"IDL_Savefile::Size"},});