define({"3127":{i:0.000258170502884445,u:"../Content/DICOM_Medical/IDL DICOM Reference/IDLffDicomExStorScu__Send.htm",a:"The IDLffDicomExStorScu::Send function method transfers DICOM files to a remote Storage SCP node. The send is complete (all files have been transferred) The send encounters an error condition The callback function defined by the CALLBACK_FUNCTION property returns zero Properties Required For a Send ...",t:"IDLffDicomExStorScu::Send"},"3128":{i:0.000204660014179632,u:"../Content/DICOM_Medical/IDL DICOM Reference/IDLffDicomExStorScu__SetProperty.htm",a:"Syntax Obj -\u003e[ IDLffDicomExStorScu ::]SetProperty[, PROPERTY=value ] Arguments Keywords Any property listed under IDLffDicomExStorScu Properties that contains the word “Yes” in the “Set” column of the properties table can be set using this method. To set the value of a property, specify the property ...",t:"IDLffDicomExStorScu::SetProperty"},"3129":{i:0.000801664264165519,u:"../Content/DICOM_Medical/DICOM Resources/DICOMAttributes.htm",a:"A DICOM attribute or data element is composed of the following parts: A tag , in the format of group , element ( XXXX , XXXX ) that identifies the element A Value Representation (VR) that describes the data type and format of the attribute’s value A value length that defines the length of the ...",t:"DICOM Attributes "},"3130":{i:0.000530892651962741,u:"../Content/DICOM_Medical/DICOM Resources/ValueRepresentations.htm",a:"The following Value Representations describe the data type and format of each DICOM attribute. These are defined in Section 6.2 of Digital Imaging and Communications in Medicine (DICOM) - Part 5: Data Structures and Encoding . To search for a value representation, click in the table, press Ctrl+E , ...",t:"Value Representations"},"3131":{i:5.67137900987713E-05,u:"../Content/Creating IDL Programs/Extending ENVI with IDL.htm",a:"If you have ENVI or ENVI LiDAR licensed and installed on your machine, you can extend and customize them with IDL. To start ENVI: To start ENVI from the IDL command line, type: e = envi() To start ENVI Classic: From the Start menu: Select All Programs \u003e ENVI x.x \u003e Tools \u003e ENVI Classic or ENVI ...",t:"Extend ENVI and ENVI LiDAR with IDL"},"3132":{i:5.50327019655568E-05,u:"../Content/PDF_pages/AdvancedMathStats.htm",a:"IDL provides the Advanced Math and Stats module, which combines the power of IDL with the IMSL C Numerical Library provided by Visual Numerics, Inc. The addition of the IMSL library gives IDL users access to an extensive and powerful set of mathematical and statistical analysis routines via the ...",t:"Advanced Math and Statistics"},"3133":{i:5.50327019655568E-05,u:"../Content/PDF_pages/DataMiner.htm",a:"The IDL DataMiner is an Open Database Connectivity (ODBC) interface that allowsIDL users to access and manipulate information from a variety of database management systems. You can find information in the IDL DataMiner Guide, located  in the help\\pdf directory of your IDL installation. This guide ...",t:"DataMiner"},"3134":{i:5.50327019655568E-05,u:"../Content/PDF_pages/iTools_books.htm",a:"The iTools make up the IDL legacy visualization interface. These tools have largely been replaced by IDL Graphics , but are still available to use. For more information, see the iTools Routines. You can learn more about iTools from these PDF resources, found in the help\\pdf directory of your IDL ...",t:"iTools Help"},"3135":{i:5.50327019655568E-05,u:"../Content/AboutIDL.htm",a:"About IDL ",t:"About IDL"},"3136":{i:0.000408401030688896,u:"../Content/IDLFeatureSupport.htm",a:"The following table indicates which platforms support the corresponding feature. IDL technologies not listed in this table are assumed to work on all supported platforms. Feature Windows OS X Linux Solaris Intel 32-bit Intel 64-bit Intel 64-bit Intel 64-bit SPARC 64-bit Intel 64-bit ...",t:"IDL Feature Support"},"3137":{i:5.50327019655568E-05,u:"../Content/Legal/LegalAndCopyrightNotices.htm",a:"Also refer to the End User License Agreement . The IDL® and ENVI® software programs and the accompanying procedures, functions, and documentation described herein are sold under license agreements. Their use, duplication, and disclosure are subject to the restrictions stated in the license ...",t:"Legal and Copyright Notices"},"3138":{i:0.00010181052593232,u:"../Content/Legal/eula.htm",a:"EXELIS VISUAL INFORMATION SOLUTIONS, INC. END USER LICENSE AGREEMENT FOR IDL® 8.5, ENVI® 5.3, ENVI® LIDAR 5.3 & ENVI® PHOTOGRAMMETRY MODULE 5.3 IMPORTANT: PLEASE READ THIS END USER LICENSE AGREEMENT CAREFULLY.  DOWNLOADING, INSTALLING OR USING THE SOFTWARE CONSTITUTES ACCEPTANCE OF THIS AGREEMENT. ...",t:"End User License Agreement"},"3139":{i:0.000102147485075946,u:"../Content/ContactUs.htm",a:"Corporate Office Exelis Visual Information Solutions, Inc., a subsidiary of Harris Corporation 4990 Pearl East Circle Boulder, CO 80301 USA Web: http://www.exelisvis.com E-Mail: info@exelisvis.com Phone: 303-786-9900 Fax: 303-786-9909 Technical Support E-Mail: support@exelisvis.com Phone: ...",t:"Contact Us"},"3140":{i:5.50327019655568E-05,u:"../Content/EquationTest.htm",a:" This content is taken from the Adv Math and Stats book as a test of Flare 7 equation editor functionality. Overview: Optimization This section introduces some of the mathematical concepts used with IDL Advanced Math and Stats. Unconstrained Minimization The unconstrained minimization problem can be ...",t:"Overview: Optimization"},"3141":{i:5.50327019655568E-05,u:"../Content/home.htm",a:"What\u0027s New in IDL Read details about new and enhanced features for this release. Getting Started Start here to learn the basics. Visualize Data Use IDL Graphics to process and analyze your data. IDL Routines See the list of all IDL programming routines. IDL Language Learn how to create IDL programs. ...",t:"home"},"3142":{i:6.86204946882682E-05,u:"../Content/WhatsNew_in_8_0.htm",a:"IDL 8.0 provides some ground-breaking functionality to make data visualization and IDL programming easier than ever. The new graphics functions allow you to create visualizations on the fly or within a program. You can also use create graphics singly or in batches and save the output files. The ...",t:"What\u0027s New in IDL 8.0"},"3143":{i:6.69468230889633E-05,u:"../Content/WhatsNew_in_8_1.htm",a:"IDL 8.1 expands support for geospatial data visualization by supporting new file formats and allowing you to create high-quality video animations and high-resolution maps. New graphics and image analysis upgrades simplify scientific visualization tasks and make it easier to learn the IDL language. ...",t:"What\u0027s New in IDL 8.1"},"3144":{i:6.29397011221516E-05,u:"../Content/Whats_New_8_2_2.htm",a:"IDL 8.2.2 adds complex functionality to IDL Graphics,  provides a new look and new features to Widget programming, and simplified building of custom tools for ENVI. An exciting new development is IDL Help on the Web. View the IDL Documentation Center at http://www.exelisvis.com/docs/ If you are new ...",t:"What\u0027s New in IDL 8.2.2"},"3145":{i:6.14879025532736E-05,u:"../Content/Whats_New_8_2_3.htm",a:"IDL 8.2.3 adds  functionality to IDL Graphics,  provides a new look and new features to Widget programming, and simplified building of custom tools for ENVI. If you are new to IDL or upgrading from an older version, see also: What\u0027s New in IDL 8.0 What\u0027s New in IDL 8.1 What\u0027s New in IDL 8.2 What\u0027s ...",t:"What\u0027s New in IDL 8.2.3"},"3146":{i:6.04394622759372E-05,u:"../Content/Whats_New_8_3.htm",a:"IDL 8.3 adds new core language features, adds functionality to IDL Graphics, and simplifies building of custom tasks for the IDL and ENVI Services Engine. If you are new to IDL or upgrading from an older version, see also: What\u0027s New in IDL 8.0 What\u0027s New in IDL 8.1 What\u0027s New in IDL 8.2 What\u0027s New ...",t:"What\u0027s New in IDL 8.3"},"3147":{i:5.94291658558539E-05,u:"../Content/Whats_New_8_4.htm",a:"If you are new to IDL or upgrading from an older version, see also: What\u0027s New in IDL 8.3 What\u0027s New in IDL 8.2.3 What\u0027s New in IDL 8.2.2 What\u0027s New in IDL 8.2.1 What\u0027s New in IDL 8.2 What\u0027s New in IDL 8.1 What\u0027s New in IDL 8.0 New Features ALOG2 Function The ALOG2 function computes the logarithm ...",t:"What\u0027s New in IDL 8.4"},"3148":{i:5.72184516483852E-05,u:"../Content/Whats_New_8_4_1.htm",a:"If you are new to IDL or upgrading from an older version, see also: What\u0027s New in IDL 8.4 What\u0027s New in IDL 8.3 What\u0027s New in IDL 8.2.3 What\u0027s New in IDL 8.2.2 What\u0027s New in IDL 8.2.1 What\u0027s New in IDL 8.2 What\u0027s New in IDL 8.1 What\u0027s New in IDL 8.0 New Features ENVI Services Engine (ESE) API The ...",t:"What\u0027s New in IDL 8.4.1"},"3149":{i:6.52657349557487E-05,u:"../Content/Whats_New_in_82.htm",a:"IDL 8.2 adds complex functionality to IDL Graphics, provides a new look and new features to Widget programming, and simplified building of custom tools for ENVI. Other improvements include streamlined project builds and new fonts for Unicode math symbols. If you are new to IDL or upgrading from an ...",t:"What\u0027s New in IDL 8.2"},"3150":{i:6.52657349557487E-05,u:"../Content/Whats_New_in_821.htm",a:"Graphics Antialiasing By default, antialiasing is now used when drawing all lines, polygons, shapes, contours, and surface lines in Graphics. The ANTIALIAS property can be used to turn off the default behavior. A new ANTIALIAS property has also been added to IDLgrPolygon and IDLgrSurface . The ...",t:"What\u0027s New in IDL 8.2.1"},"3151":{i:0.000163764230540139,u:"../Content/Creating IDL Programs/IncludeFiles.htm",a:"Include files in IDL are .PRO files that contain IDL code and are designed to be included within other programs at compile time. You can include these files within your routines using the @ character. For example, assume you have a file named myroutine.pro containing the following statements: PRO ...",t:"Using Include Files in Routines"},"3152":{i:5.50327019655568E-05,u:"../Content/Creating IDL Programs/Programming Tasks.htm",a:"Programming Tasks ",t:"Programming Tasks"},"3153":{i:5.50327019655568E-05,u:"../Content/Creating IDL Programs/Using Breakpoints.htm",a:"Breakpoints A breakpoint is a marker in an IDL source code file that tells IDL to halt execution temporarily, allowing you to inspect the state of program variables in the program unit where the breakpoint occurred. Breakpoints allow you to control the flow of execution of your IDL program, stopping ...",t:"Using Breakpoints"},"3154":{i:0.000569568290920138,u:"../Content/Creating IDL Programs/Appendices/Formatting_Command_Examp.htm",a:"The figure below illustrates the relative positions and effects on character size of the level commands. In this figure, the word “Normal” positioned with the letters “ !N ” are normal level and size characters. The positioning shown was created with the following command: XYOUTS, 0.1, 0.3, SIZE=3, ...",t:"Formatting Command Examples"},"3155":{i:9.3030094259474E-05,u:"../Content/Creating IDL Programs/Application Programming/Advice_for_Library_Autho.htm",a:"The structure and organization of the library needs to encourage reuse and generality. Library code must be more robust than the usual program. Stability of implementation, and especially of interface, are very important. Errors must be gracefully handled whenever possible. See Debugging and ...",t:"Advice for Library Authors"},"3156":{i:9.3030094259474E-05,u:"../Content/Creating IDL Programs/Application Programming/Converting_Existing_Libr.htm",a:"Existing libraries are bound to experience an occasional conflict with new versions of IDL. The best solution to avoid conflicts is to perform a systematic one-time conversion to a pre fixed naming scheme. Any existing library is likely to already have users. Assuming that non-prefixed names were ...",t:"Converting Existing Code Libraries "},"3157":{i:0.00129324179714405,u:"../Content/Creating IDL Programs/Application Programming/Routines_that_Use_the_Th.htm",a:"Multithreading offers the possibility of increased execution speed for many IDL routines. The following operators and routines use the thread pool. Binary and Unary Operators + – * / ++ –– ^ # ## \u003c \u003e MOD AND OR NOT XOR EQ NE GT GE LT LE If an operator uses the thread pool, any compound assignment ...",t:"Routines that Use the Thread Pool"},"3158":{i:0.00146523963996127,u:"../Content/Creating IDL Programs/Application Programming/The__Thread_Pool.htm",a:"On computer systems that have more than one central processing unit, multi-threading can be used to increase the speed of numeric calculations by using multiple system processors to simultaneously carry out different parts of the computation. In a multithreaded environment, each thread handles a ...",t:"The IDL Thread Pool"},"3159":{i:5.50327019655568E-05,u:"../Content/Creating IDL Programs/Application Programming/Use_System_Functions_and.htm",a:"IDL supplies a number of built-in functions and procedures to perform common operations. These system-supplied functions have been carefully optimized and are almost always much faster than writing the equivalent operation in IDL with loops and subscripting. Example A common operation is to find the ...",t:"Use System Functions and Procedures"},"3160":{i:0.000138756899987824,u:"../Content/Creating IDL Programs/Components of the IDL Language/Accuracy_and_Floating_Po.htm",a:"In a computer, real numbers are represented with finite precision. While in most cases it is safe to assume that the result of an arithmetic operation done on your computer is correct, it is important to remember that this finite-precision representation leads to unavoidable errors, especially when ...",t:"Accuracy and Floating Point Operations "},"3161":{i:5.50327019655568E-05,u:"../Content/Creating IDL Programs/Components of the IDL Language/AsyncTimersOverview.htm",a:"Overview of Asynchronous Timers This content has been replaced with TIMER . ",t:"Overview of Asynchronous Timers"},"3162":{i:5.50327019655568E-05,u:"../Content/Creating IDL Programs/Components of the IDL Language/AsyncTimersUsing.htm",a:"Using Asynchronous Timers Note that this content has been replaced with TIMER . ",t:"Using Asynchronous Timers"},"3163":{i:7.0625309954478E-05,u:"../Content/Creating IDL Programs/Components of the IDL Language/Dangling_References.htm",a:"If Automatic Garbage Collection is turned off for a heap variable and the variable is destroyed using PTR_FREE or OBJ_DESTROY, any remaining pointer variables or object references that still refer to it are \"dangling references.\" Unlike lower level languages such as C, dereferencing a dangling ...",t:"Dangling References"},"3164":{i:5.50327019655568E-05,u:"../Content/Creating IDL Programs/Components of the IDL Language/File_Unit_Manipulations.htm",a:"The following sections describe common tasks when working with file units. Flushing File Units For efficiency, IDL buffers its input/output in memory. Therefore, when data are output, there is a window of time during which data are in memory and have not been actually placed into the file. Normally, ...",t:"File Unit Manipulations "},"3165":{i:0.000119575923024424,u:"../Content/Creating IDL Programs/Components of the IDL Language/Reading_and_Writing_FORT.htm",a:"The standard FORTRAN unformatted sequential file input/output mechanism performs file input and output by reading and writing blocks of data from (or to) a file as logical records . To read data, the FORTRAN program asks for the next logical record from an open file; the operating system is then ...",t:"Reading and Writing FORTRAN Data"},"3166":{i:0.000265186367042726,u:"../Content/Creating IDL Programs/Components of the IDL Language/Understanding__LUNs_.htm",a:"IDL Logical Unit Numbers (LUNs) fall within the range -2 to 128. Some LUNs are reserved for special functions as described below. The Standard Input, Output, and Error LUNs The three LUNs described below have special meanings that are operating system dependent: UNIX Logical Unit Numbers 0, -1, and ...",t:"Understanding (LUNs)"},"3167":{i:5.50327019655568E-05,u:"../Content/Creating IDL Programs/Creating Applications in IDL/GUI_programming.htm",a:"GUI Programming ",t:"GUI Programming"},"3168":{i:6.67271579572477E-05,u:"../Content/Creating IDL Programs/Distributing IDL Applications/RuntimeModeApplications/RuntimeModeApplicationsIntro.htm",a:"An IDL runtime mode application is a program or set of programs written to use IDL’s data analysis and display capabilities in a stand-alone mode, without access to the IDL Workbench, the IDL command line, or the ability to compile IDL .pro files. All IDL code for a runtime mode application must be ...",t:"Runtime Mode Applications"},"3169":{i:0.000393897073021948,u:"../Content/DICOM_Medical/IDL DICOM Reference/IDLffDicomExQuery Properties.htm",a:"IDLffDicomExQuery objects have the following properties. Properties with the word “Yes” in the “Get” column of the property table can be retrieved via IDLffDicomExQuery::GetProperty . Properties with the word “Yes” in the “Init” column of the property table can be set via IDLffDicomExQuery::Init . ...",t:"IDLffDicomExQuery Properties "},"3170":{i:0.000254010795567036,u:"../Content/Direct Graphics/Color_tables_in_direct_graphics.htm",a:"Although you can define your own color tables, IDL provides predefined color lookup tables. (LUTs). Each color table contained within this routine is specified through an index value, shown in Loading a Default Color Table . If you are running IDL on a TrueColor display, set DEVICE, DECOMPOSED = 0 ...",t:"Color Tables in Direct Graphics"},"3171":{i:0.000190417259973085,u:"../Content/Direct Graphics/Coordinate_Conversions.htm",a:"Depending upon the data and type of visualization, you may want to convert between normalized, data or device coordinates. This section details two-dimensional and three-dimensional coordinate system characteristics and provides resources for various coordinate conversions. See the following for ...",t:"Coordinate Conversions"},"3172":{i:5.50327019655568E-05,u:"../Content/Direct Graphics/DG_Programming.htm",a:"      Using Direct Graphics in Draw Widgets By default, draw widgets use IDL Direct graphics. (To create a draw widget that uses Object graphics, set the GRAPHICS_LEVEL keyword to WIDGET_DRAW equal to two..) Once created, draw widgets using Direct graphics are used in the same way as standard Direct ...",t:"Programming with Direct Graphics"},"3173":{i:7.97010214598085E-05,u:"../Content/Direct Graphics/Fonts_in_IDL_Direct_Grap.htm",a:"When generating characters for Direct Graphics plots, IDL uses the font system specified by setting the !P.FONT system variable to one of the following values: -1 Use Hershey vector-drawn fonts—the d efault 0 Use device fonts (fonts supplied by the graphics device) 1 Use TrueType fonts The IDL ...",t:"Fonts in IDL Direct Graphics"},"3174":{i:0.000696515237523922,u:"../Content/Direct Graphics/graphkeyw.htm",a:"The IDL Direct G raphics routines, CURSOR, ERASE, PLOTS, POLYFILL, TV (and TVSCL), TVCRS, TVRD, and XYOUTS, and the plotting procedures, AXIS, CONTOUR, PLOT, OPLOT, SHADE_SURF, and SURFACE, accept a number of common keywords. Therefore, instead of describing each keyword along with the description ...",t:"Direct Graphics Keywords"},"3175":{i:5.50327019655568E-05,u:"../Content/Direct Graphics/intro.htm",a:"IDL Graphics were introduced in IDL 8.0, providing a simple and powerful way to visualize data. IDL Graphics are the preferred method to view data in IDL because the functions are easy to use and the graphics can be modified after visualization. For more information, please see Using IDL Graphics ...",t:"IDL Graphics vs. Direct Graphics"},"3176":{i:0.000271099845046621,u:"../Content/Direct Graphics/Keywords_Accepted_by_the.htm",a:"The following indicates which keywords are accepted by the DEVICE procedure. The NULL device is not listed as it accepts no keywords. Click on a keyword to see detailed information about that keyword. Most keywords to the DEVICE procedure are sticky — that is, once you set them, they remain in ...",t:"Keywords Accepted by the IDL Devices"},"3177":{i:7.04548695811932E-05,u:"../Content/Direct Graphics/Loading_a_Default_Color.htm",a:"Although you can define your own color tables, IDL provides predefined color lookup tables (LUTs). Each color table contained within this routine is specified through an index value, shown in the following table. If you are running IDL on a TrueColor display, set DEVICE, DECOMPOSED = 0 before your ...",t:"Loading a Default Color Table"},"3178":{i:0.000240516431125741,u:"../Content/Direct Graphics/Multi_Monitor_Configurat.htm",a:"IDL allows you to position windows on multiple monitors attached to the same computer. Such multi-monitor configurations may appear to the user (and to you as an IDL programmer) as a single extended desktop consisting of multiple physical monitors, or as a series of individual desktops appearing on ...",t:"Multi-Monitor Configurations"},"3179":{i:5.50327019655568E-05,u:"../Content/External Development/Adding System Routines/IDLSystemRoutinesPost80.htm",a:"An IDL system routine is an IDL procedure or function that is written in a compiled language with an IDL specific interface and linked into IDL, instead of being written in the IDL language itself. The best way to create an IDL system routine is to compile and link the routine into a sharable ...",t:"IDL and System Routines Post-IDL 8.0"},"3180":{i:5.79773759099561E-05,u:"../Content/External Development/IDLInternals - Timers/InternalsTimers.htm",a:"IDL Internals - Timers ",t:"IDL Internals - Timers"},"3181":{i:6.48125999784072E-05,u:"../Content/GuideMe/GenerateCode.htm",a:"You can generate much of the code needed to recreate the content of a graphics window. The examples on this page include adding lines to the generated code, and converting the code to an IDL function. Adding to the Generated Code As certain things are currently not supported by the GenerateCode ...",t:"Generate Code"},"3182":{i:0.000177441421767276,u:"../Content/GuideMe/GraphicsEventHandler.htm",a:"You can create a custom event handler to handle events in a graphics WINDOW or a WIDGET_WINDOW . The event handler class must be a subclass of GraphicsEventAdapter. Your subclass can then override any of the following methods: ::MouseDown, ::MouseUp, ::MouseMotion, ::MouseWheel, ::KeyHandler, and ...",t:"Creating a Graphics Event Handler Class"},"3183":{i:0.000142378543410091,u:"../Content/GuideMe/KeyboardEventFunctions.htm",a:"You can create custom functions to handle keyboard events in a graphics WINDOW or in a WIDGET_WINDOW . These functions must use the syntax described below. Each function must return a value of 0 to turn off default event handling or 1 to perform default event handling. Instead of creating a separate ...",t:"Creating Keyboard Event Functions"},"3184":{i:0.0001292494091093,u:"../Content/GuideMe/MouseEventFunctions.htm",a:"You can create custom functions to handle mouse events in a graphics WINDOW or a WIDGET_WINDOW . These functions must use the syntax described below. Each function must return a value of 0 to turn off default event handling or 1 to perform default event handling. See the WINDOW example and ...",t:"Creating Mouse Event Functions"},"3185":{i:5.67063735648617E-05,u:"../Content/GuideMe/Selection Change Event Handler.htm",a:"You can create custom functions to handle selection change events in a graphics WINDOW or in a WIDGET_WINDOW . These functions must use the syntax described below. Each function must return a value of 0 to turn off default event handling or 1 to perform default event handling. Instead of creating a ...",t:"Creating Selection Change Event Handlers"},"3186":{i:5.50327019655568E-05,u:"../Content/GuideMe/PlotGuideMe/Scatterplot.htm",a:"You can create a scatterplot using two bands of image data. Two-dimensional (2D) scatterplots show the range of pixel values in each band, creating a visual way to assess data variance. The code shown below creates the graphic shown above. You can copy the entire block and paste it into the ...",t:"Scatterplot"},"3187":{i:0.000242413515380724,u:"../Content/GUInavigation/LongExamples.htm",a:"Long Examples Dynamic Visualizations  Environmental Monitoring - Tritium Plume See Also ",t:"Long Examples"},"3188":{i:5.50327019655568E-05,u:"../Content/GUInavigation/visualize_old.htm",a:"Graphics Gallery See the following for examples of using IDL visualizations. Plot Examples  Map Examples Image Examples   Image Analysis   Surface, Contour, and Vector Examples Annotations Examples Changing and Adding Properties Graphics Window Examples  Graphics Topics Graphics Resources Using IDL ...",t:"visualize_old"},"3189":{i:5.50327019655568E-05,u:"../Content/GUInavigation/visualize_prototype.htm",a:"IDL Graphics Gallery - Prototype              Graphics Topics ",t:"IDL Graphics Gallery - Prototype"},"3190":{i:5.50327019655568E-05,u:"../Content/IDL Analyst/EigensystemAnalysis/EigensystemOverview.htm",a:"An ordinary linear eigensystem problem is represented by the equation Ax = λx , where A denotes an n x n matrix. The value λ is an eigenvalue, and x ≠ 0 is the corresponding eigenvector. The eigenvector is determined up to a scalar factor. In all functions, this factor is chosen so that x has ...",t:"EigensystemOverview"},"3191":{i:5.50327019655568E-05,u:"../Content/IDL Analyst/EigensystemAnalysis/EigensystemRoutines.htm",a:"Eigensystem Routines Linear Eigensystem Problems IMSL_EIG—General and symmetric matrices. Generalized Eigensystem Problems IMSL_EIGSYMGEN—Real symmetric matrices and B positive definite. IMSL_GENEIG—General eigenexpansion of Ax=λBx . ",t:"Eigensystem Routines"},"3192":{i:5.50327019655568E-05,u:"../Content/IDL Analyst/EigensystemAnalysis/ErrorAnalysis.htm",a:"This section discusses ordinary eigenvalue problems. Except in special cases, functions do not return the exact eigenvalue-eigenvector pair for the ordinary eigenvalue problem Ax = λx . Typically, the computed pair: is an exact eigenvector-eigenvalue pair for a “nearby” matrix A + E . Information ...",t:"Error Analysis and Accuracy"},"3193":{i:5.50327019655568E-05,u:"../Content/IDL Analyst/EigensystemAnalysis/Reformulating.htm",a:"The generalized eigenvalue problem Ax = λBx is often difficult to analyze because it is frequently ill-conditioned. Occasionally, there are changes of variables that can be performed on the given problem to ease this ill-conditioning. Using an example where B is singular, but A is nonsingular, ...",t:"Reformulating Generalized Eigenvalue Problems"},"3194":{i:5.50327019655568E-05,u:"../Content/IDL Analyst/LinearSystems/IllConditioning.htm",a:"An m x n matrix A is mathematically singular if an x ≠ 0 exists such that Ax = 0 . In this case, the system of linear equations Ax = b does not have a unique solution. However, a matrix A is numerically singular if it is “close” to a mathematically singular matrix. Such problems are called ...",t:"Ill-Conditioning and Singularity"},"3195":{i:5.50327019655568E-05,u:"../Content/IDL Analyst/LinearSystems/LeastSquaresSolution.htm",a:"Least-squares solutions are usually computed for an over-determined system of linear equations A m x n x = b , where m \u003e n . A least-squares solution x minimizes the Euclidean length of the residual vector r = Ax – b . The IMSL_QRSOL function computes a unique least-squares solution for x when A has ...",t:"Lease-squares Solution and QR Factorization"},"3196":{i:5.50327019655568E-05,u:"../Content/IDL Analyst/LinearSystems/LinearSystemsRoutines.htm",a:"Matrix Inversion IMSL_INV —General matrix inversion. Linear Equations with Full Matrices IMSL_LUSOL —Systems involving general matrices. IMSL_LUFAC —LU factorization of general matrices. IMSL_CHSO L—Systems involving symmetric positive definite matrices. IMSL_CHFAC —Factorization of symmetric ...",t:"Linear Systems Routines"},"3197":{i:5.50327019655568E-05,u:"../Content/IDL Analyst/LinearSystems/MatrixFactorizations.htm",a:"In some applications, you may only want to factor the n × n matrix A into a product of two triangular matrices. Functions and procedures that end with “FAC” are designed to compute these factorizations. Suppose that in addition to the solution x of a linear system of equations Ax = b , you want the ...",t:"Matrix Factorizations"},"3198":{i:5.50327019655568E-05,u:"../Content/IDL Analyst/LinearSystems/MatrixInversion.htm",a:"The IMSL_INV function inverts an n × n nonsingular matrix—either real or complex. The inverse also can be obtained by using the INVERSE keyword in functions for solving systems of linear equations. You do not need to compute the inverse of a matrix if the purpose is to solve one or more systems of ...",t:"Matrix Inversion"},"3199":{i:5.50327019655568E-05,u:"../Content/IDL Analyst/LinearSystems/MultipleRightHandSides.htm",a:"In a case in which a system of linear equations has more than one right-hand side vector, it is most economical to find the solution vectors by first factoring the coefficient matrix A into products of triangular matrices. Then, the resulting triangular systems of linear equations are solved for ...",t:"Multiple Righthand Sides"},"3200":{i:5.50327019655568E-05,u:"../Content/IDL Analyst/LinearSystems/Notation.htm",a:"Notation Since many functions and procedures described in this chapter operate on both real or complex matrices, the notation A H is used to represent both the transpose of A if A is real and the conjugate transpose if A is complex. ",t:"Notation"},});