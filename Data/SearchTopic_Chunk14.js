define({"1015":{i:0.000295383216174722,u:"../Content/Reference Material/M/MESH_CLIP.htm",a:"The MESH_CLIP function clips a polygonal mesh to an arbitrary plane in space and returns a polygonal mesh of the remaining portion. An auxiliary array of data may also be passed and clipped. This array can have multiple values for each vertex. The portion of the mesh below the plane, satisfying ax + ...",t:"MESH_CLIP "},"1016":{i:0.000295383216174722,u:"../Content/Reference Material/M/MESH_DECIMATE.htm",a:"The MESH_DECIMATE simplifies a polygonal mesh by combining neighboring polygons in the mesh in such a way that the shape of the original mesh is maintained as closely as possible. The decimation process is accomplished by locating the two most coplanar polygons, combining them by removing the edge ...",t:"MESH_DECIMATE "},"1017":{i:0.000269892941797474,u:"../Content/Reference Material/M/MESH_ISSOLID.htm",a:"The MESH_ISSOLID function computes various mesh properties and enables IDL to determine if a mesh encloses space (is a solid). If the mesh can be considered a solid, routines can compute the volume of the mesh. Syntax Result = MESH_ISSOLID ( Conn ) Return Value Returns 1 if the input mesh fully ...",t:"MESH_ISSOLID "},"1018":{i:0.000295383216174722,u:"../Content/Reference Material/M/MESH_MERGE.htm",a:"The MESH_MERGE function merges two polygonal meshes. Syntax Result = MESH_MERGE ( Verts , Conn , Verts1 , Conn1 [, / COMBINE_VERTICES ] [, TOLERANCE = value ] ) Return Value The function return value is the number of triangles in the modified polygonal mesh connectivity array. Arguments Verts ...",t:"MESH_MERGE"},"1019":{i:0.000269892941797474,u:"../Content/Reference Material/M/MESH_NUMTRIANGLES.htm",a:"The MESH_NUMTRIANGLES function computes the number of triangles in a polygonal mesh. Syntax Result = MESH_NUMTRIANGLES ( Conn ) Return Value Returns the number of triangles in the mesh (a quad is considered two triangles). Arguments Conn Polygonal mesh connectivity array. Keywords None. Version ...",t:"MESH_NUMTRIANGLES "},"1020":{i:0.000336559826961937,u:"../Content/Reference Material/M/MESH_OBJ.htm",a:"The MESH_OBJ procedure generates a polygon mesh (vertex list and polygon list) that represent the desired primitive object. The available primitive objects are: triangulated surface, rectangular surface, polar surface, cylindrical surface, spherical surface, surface of extrusion, surface of ...",t:"MESH_OBJ "},"1021":{i:0.000295383216174722,u:"../Content/Reference Material/M/MESH_SMOOTH.htm",a:"The MESH_SMOOTH function performs spatial smoothing on a polygon mesh. This function smooths a mesh by applying Laplacian smoothing to each vertex, as described by the following formula: is vertex i for iteration n λ is the smoothing factor M is the number of vertices that share a common edge with x ...",t:"MESH_SMOOTH "},"1022":{i:0.000295383216174722,u:"../Content/Reference Material/M/MESH_SURFACEAREA.htm",a:"The MESH_SURFACEAREA function computes various mesh properties to determine the mesh surface area, including integration of other properties interpolated on the surface of the mesh. Syntax Result = MESH_SURFACEAREA ( Verts , Conn [, AUXDATA = array ] [, MOMENT = variable ] ) Return Value Returns the ...",t:"MESH_SURFACEAREA "},"1023":{i:0.000295383216174722,u:"../Content/Reference Material/M/MESH_VALIDATE.htm",a:"The MESH_VALIDATE function checks for NaN values in vertices, removes unused vertices, and combines close vertices. Syntax Result = MESH_VALIDATE ( Verts , Conn [, / REMOVE_NAN ] [, / PACK_VERTICES ] [, / COMBINE_VERTICES ] [, TOLERANCE = value ] ) Return Value The function return value is the ...",t:"MESH_VALIDATE "},"1024":{i:0.000295383216174722,u:"../Content/Reference Material/M/MESH_VOLUME.htm",a:"The MESH_VOLUME function computes the volume that the mesh encloses. A region that a mesh encloses has a positive value for its volume when it is enclosed by mesh polygons that face outward from the enclosed region. Outward-facing polygons follow the convention of their vertices being ordered in a ...",t:"MESH_VOLUME"},"1025":{i:0.000917363944520796,u:"../Content/Reference Material/M/MESSAGE.htm",a:"The MESSAGE procedure issues error and informational messages using the same mechanism employed by built-in IDL routines. By default, the message is issued as an error, the message is output, and IDL performs the required error-handling actions (which can be controlled via the CATCH, ON_ERROR, and ...",t:"MESSAGE "},"1026":{i:0.000318349394728742,u:"../Content/Reference Material/M/MIN.htm",a:"The MIN function returns the value of the smallest element of Array . The type of the result is the same as that of Array . Examples ; Create a simple two-dimensional array: D = DIST(100) ; Find the minimum value in array D and print the result: PRINT, MIN(D) Syntax Result = MIN( Array [, ...",t:"MIN "},"1027":{i:0.000529227393575339,u:"../Content/Reference Material/M/MIN_CURVE_SURF.htm",a:"The MIN_CURVE_SURF function interpolates a regularly- or irregularly-gridded set of points, over either a plane or a sphere, with either a minimum curvature surface or a thin-plate-spline surface. The accuracy of this function is limited by the single-precision floating-point accuracy of the ...",t:"MIN_CURVE_SURF "},"1028":{i:0.000514064522580314,u:"../Content/Reference Material/M/MK_HTML_HELP.htm",a:"The MK_HTML_HELP procedure, given a list of IDL procedure filenames ( .pro files) or the names of directories containing such files, generates a file in HTML (HyperText Markup Language) format that contains documentation for those routines that contain standard IDL documentation headers. The ...",t:"MK_HTML_HELP "},"1029":{i:0.000182763694214599,u:"../Content/Reference Material/M/MODIFYCT_Procedure.htm",a:"The MODIFYCT procedure updates the distribution color table file colors1.tbl , located in the \\resource\\colors subdirectory of the main IDL directory, or a user-designated file with a new, or modified, colortable. This routine is written in the IDL language. Its source code can be found in the file ...",t:"MODIFYCT Procedure"},"1030":{i:0.000530624130078954,u:"../Content/Reference Material/M/MOMENT.htm",a:"The MOMENT function computes the mean, variance, skewness, and kurtosis of a sample population contained in an n -element vector X . When x = ( x 0 , x 1 , x 2 , ..., x n-1 ), the various moments are defined as follows:  This routine is written in the IDL language. Its source code can be found in ...",t:"MOMENT "},"1031":{i:0.000379069495324707,u:"../Content/Reference Material/M/MORPH_CLOSE.htm",a:"The MORPH_CLOSE function applies the closing operator to a binary or grayscale image. MORPH_CLOSE is simply a dilation operation followed by an erosion operation.The closing operation is an idempotent operator—applying it more than once produces no further effect. Both the opening and the closing ...",t:"MORPH_CLOSE "},"1032":{i:0.000379069495324707,u:"../Content/Reference Material/M/MORPH_DISTANCE.htm",a:"The MORPH_DISTANCE function estimates N -dimensional distance maps, which contain for each foreground pixel the distance to the nearest background pixel, using a given norm. Available norms include non-diagonal neighbors, chessboard, city block, and approximate Euclidean distance. The distance map ...",t:"MORPH_DISTANCE "},"1033":{i:0.000379069495324707,u:"../Content/Reference Material/M/MORPH_GRADIENT.htm",a:"The MORPH_GRADIENT function applies the morphological gradient operator to a grayscale image. MORPH_GRADIENT is the subtraction of an eroded version of the original image from a dilated version of the original image. This routine is written in the IDL language. Its source code can be found in the ...",t:"MORPH_GRADIENT "},"1034":{i:0.000342661830922164,u:"../Content/Reference Material/M/MORPH_HITORMISS.htm",a:"The MORPH_HITORMISS function applies the hit-or-miss operator to a binary image. The hit-or-miss operator is implemented by first applying an erosion operator with a hit structuring element to the original image. Then an erosion operator is applied to the complement of the original image with a ...",t:"MORPH_HITORMISS "},"1035":{i:0.000379069495324707,u:"../Content/Reference Material/M/MORPH_OPEN.htm",a:"The MORPH_OPEN function applies the opening operator to a binary or grayscale image. MORPH_OPEN is simply an erosion operation followed by a dilation operation. The opening operation is an idempotent operator, applying it more than once produces no further effect. An alternative definition of the ...",t:"MORPH_OPEN "},"1036":{i:0.000342661830922164,u:"../Content/Reference Material/M/MORPH_THIN.htm",a:"The MORPH_THIN function performs a thinning operation on binary images. The thinning operator is implemented by first applying a hit or miss operator to the original image with a pair of structuring elements, and then subtracting the result from the original image. This routine is written in the IDL ...",t:"MORPH_THIN "},"1037":{i:0.000379069495324707,u:"../Content/Reference Material/M/MORPH_TOPHAT.htm",a:"The MORPH_TOPHAT function applies the top-hat operator to a grayscale image. The top-hat operator is implemented by first applying the opening operator to the original image, then subtracting the result from the original image. Applying the top-hat operator provides a result that shows the bright ...",t:"MORPH_TOPHAT "},"1038":{i:5.77047329653662E-05,u:"../Content/Reference Material/M/MULTI_Procedure.htm",a:"The MULTI procedure expands the current color table to “wrap around” some number of times. This routine is written in the IDL language. Its source code can be found in the file multi.pro in the lib subdirectory of the IDL distribution. Examples In the following example, we first display an image ...",t:"MULTI Procedure"},"1039":{i:5.50327019655568E-05,u:"../Content/Reference Material/N/N_list.htm",a:"N Routines ",t:"N Routines"},"1040":{i:0.000556406036162942,u:"../Content/Reference Material/N/N_ELEMENTS.htm",a:"The N_ELEMENTS function returns the number of elements contained in an expression or variable. Examples Example 1 This example finds the number of elements in an array: ; Create an integer array: I = INTARR(4, 5, 3, 6) ; Find the number of elements in I and print the result: PRINT, N_ELEMENTS(I) ...",t:"N_ELEMENTS "},"1041":{i:0.000242043938053765,u:"../Content/Reference Material/N/N_PARAMS.htm",a:"The N_PARAMS function returns the number of parameters used in calling an IDL procedure or function. This function is only useful within IDL procedures or functions. User-written procedures and functions can use N_PARAMS to determine if they were called with optional parameters. In the case of ...",t:"N_PARAMS "},"1042":{i:0.000656576963590004,u:"../Content/Reference Material/N/N_TAGS.htm",a:"The N_TAGS function returns the number of structure tags contained in a structure expression. N_TAGS and Object Class Definition Structures Although an instance of an object class has an associated structure definition, it is not generally possible to inspect the tags defined by the class structure ...",t:"N_TAGS "},"1043":{i:6.24355967687319E-05,u:"../Content/Reference Material/N/NCDF_Routines.htm",a:"NetCDF Routines NetCDF Overview  ",t:"NetCDF Routines"},"1044":{i:6.63044685156903E-05,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_ATTCOPY.htm",a:"The NCDF_ATTCOPY function copies an attribute from one NetCDF file to another. Note that Incdf and Outcdf can be the same NetCDF ID. Examples See example from NCDF_ATTINQ . Syntax Result = NCDF_ATTCOPY( Incdf [, Invar ] , Name , Outcdf [, Outvar ] [, / IN_GLOBAL ] [, / OUT_GLOBAL ] ) Return Value ...",t:"NCDF_ATTCOPY"},"1045":{i:0.000278226450550768,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_ATTDEL.htm",a:"The NCDF_ATTDEL procedure deletes an attribute from a NetCDF file. Examples ; Open file test.nc for writing: id = NCDF_OPEN(\u0027test.nc\u0027, /WRITE) ; Delete global attribute TITLE from the file: NCDF_ATTDEL, id, \u0027TITLE\u0027, /GLOBAL NCDF_CLOSE, id ; Close the file. Syntax NCDF_ATTDEL, Cdfid [, Varid ] , Name ...",t:"NCDF_ATTDEL"},"1046":{i:0.000277627906308077,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_ATTGET.htm",a:"The NCDF_ATTGET procedure retrieves the value of an attribute from a NetCDF file. Examples For an example using this routine, see the documentation for NCDF_ATTINQ . Syntax NCDF_ATTGET, Cdfid [, Varid ] , Name , Value [, / GLOBAL ] Arguments Cdfid The NetCDF ID, returned from a previous call to ...",t:"NCDF_ATTGET"},"1047":{i:0.00172969290832192,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_ATTINQ.htm",a:"The NCDF_ATTINQ function returns a structure that contains information about a NetCDF attribute. This structure, described below, has the form: { DATATYPE:\u0027\u0027, LENGTH:0L } Examples id = NCDF_CREATE(\u0027test.nc\u0027, /CLOBBER) ; Open a new NetCDF file. id2 = NCDF_CREATE(\u0027test2.nc\u0027, /CLOBBER) ; Open a second ...",t:"NCDF_ATTINQ"},"1048":{i:0.000381979064244466,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_ATTNAME.htm",a:"The NCDF_ATTNAME function returns the name of an attribute in a NetCDF file given its ID. Syntax Result = NCDF_ATTNAME( Cdfid [, Varid ] , Attnum [, / GLOBAL ]) Return Value Returns the specified attribute’s name or an empty string (“”) if there is no such attribute. Arguments Cdfid The NetCDF ID, ...",t:"NCDF_ATTNAME"},"1049":{i:0.000381979064244466,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_ATTPUT.htm",a:"The NCDF_ATTPUT procedure creates an attribute in a NetCDF file. If the attribute is new, or if the space required to store the attribute is greater than before, the NetCDF file must be in define mode. Examples NCDF_ATTPUT, cdfid, /GLOBAL, \"Title\", \"My Favorite Data File\" NCDF_ATTPUT, cdfid, \"data\", ...",t:"NCDF_ATTPUT"},"1050":{i:6.63044685156903E-05,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_ATTRENAME.htm",a:"The NCDF_ATTRENAME procedure renames an attribute in a NetCDF file. Syntax NCDF_ATTRENAME, Cdfid [, Varid ] Oldname , Newname [, / GLOBAL ] Arguments Cdfid The NetCDF ID, returned from a previous call to NCDF_OPEN , NCDF_CREATE , or NCDF_GROUPDEF . Varid The NetCDF variable ID, returned from a ...",t:"NCDF_ATTRENAME"},"1051":{i:0.000435994433113755,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_CLOSE.htm",a:"The NCDF_CLOSE procedure closes an open NetCDF file. If a writable NetCDF file is not closed before exiting IDL, the disk copy of the NetCDF file may not reflect recent data changes or new definitions. Syntax NCDF_CLOSE, Cdfid Arguments Cdfid The NetCDF ID of the file to be closed, returned from a ...",t:"NCDF_CLOSE"},"1052":{i:0.000435994433113755,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_CONTROL.htm",a:"The NCDF_CONTROL procedure performs miscellaneous NetCDF operations. Different options are controlled by keywords. Only one keyword can be specified in any call to NCDF_CONTROL, unless the OLDFILL keyword is specified. Examples See the examples under NCDF_ATTINQ and NCDF_VARPUT . Syntax ...",t:"NCDF_CONTROL"},"1053":{i:0.00151960766947455,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_CREATE.htm",a:"The NCDF_CREATE function creates a new NetCDF file. By default, the file format is NetCDF version 3. To create NetCDF version 4 files, use the NETCDF4_FORMAT keyword. Examples ; Open a new NetCDF File and destroy test.nc if it already exists: id = NCDF_CREATE(\u0027test.nc\u0027,/CLOBBER)  id2 = ...",t:"NCDF_CREATE"},"1054":{i:0.000104646656215997,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_DIMDEF.htm",a:"The NCDF_DIMDEF function defines a dimension in a NetCDF file given its name and size. Examples See NCDF_VARPUT . Syntax Result = NCDF_DIMDEF( Cdfid , DimName , Size [, / UNLIMITED ] ) Return Value If successful, the dimension ID is returned. Arguments Cdfid The NetCDF ID, returned from a previous ...",t:"NCDF_DIMDEF"},"1055":{i:5.50327019655568E-05,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_DIMID.htm",a:"The NCDF_DIMID function returns the ID of a NetCDF dimension, given the name of the dimension. Examples See NCDF_VARPUT . Syntax Result = NCDF_DIMID( Cdfid , DimName ) Return Value Return the dimension ID or -1 if the dimension does not exist. Arguments Cdfid The NetCDF ID, returned from a previous ...",t:"NCDF_DIMID"},"1056":{i:0.000220041076636315,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_DIMIDSINQ.htm",a:"The NCDF_DIMIDSINQ function returns an array of dimension IDs for all dimensions in a given group (and optionally for the group’s parents). Examples See the example for NCDF_GROUPNAME . Syntax Result = NCDF_DIMIDSINQ( Grpid [, / INCLUDE_PARENTS ] ) Return Value Returns an array of all dimension IDs ...",t:"NCDF_DIMIDSINQ"},"1057":{i:6.77437191660934E-05,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_DIMINQ.htm",a:"The NCDF_DIMINQ procedure retrieves the name and size of a dimension in a NetCDF file, given its ID. The size for the unlimited dimension, if any, is the maximum value used so far in writing data for that dimension. Examples See NCDF_VARPUT . Syntax NCDF_DIMINQ, Cdfid , Dimid , Name , Size Arguments ...",t:"NCDF_DIMINQ"},"1058":{i:5.50327019655568E-05,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_DIMRENAME.htm",a:"The NCDF_DIMRENAME procedure renames an existing dimension in a NetCDF file which has been opened for writing. If the new name is longer than the old name, the NetCDF file must be in define mode. You cannot rename one dimension to have the same name as another dimension. Examples See NCDF_VARPUT . ...",t:"NCDF_DIMRENAME"},"1059":{i:5.50327019655568E-05,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_EXISTS.htm",a:"The NCDF_EXISTS function returns true if the Network Common Data Format (NetCDF) scientific data format library is supported on the current IDL platform. This routine is written in the IDL language. Its source code can be found in the file ncdf_exists.pro in the lib subdirectory of the IDL ...",t:"NCDF_EXISTS"},"1060":{i:0.000292237813275163,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_FULLGROUPNAME.htm",a:"The NCDF_FULLGROUPNAME function returns the full pathname of a specified group. Examples See the example for NCDF_GROUPNAME . Syntax Result = NCDF_FULLGROUPNAME( Grpid ) Return Value Returns a string containing the full path of the group relative to the root group (represented by the forward slash ...",t:"NCDF_FULLGROUPNAME"},"1061":{i:0.000186717659755874,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_GET.htm",a:"The NCDF_GET routine retrieves variables and attributes from a NetCDF file. This routine is written in the IDL language. Its source code can be found in the file NCDF_GET.pro in the lib subdirectory of the IDL distribution. Examples In this example, we retrieve the variables and attributes within a ...",t:"NCDF_GET"},"1062":{i:0.0010689404844382,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_GROUPDEF.htm",a:"The NCDF_GROUPDEF function creates a new empty group and assigns it a name. The NetCDF 4 format allows you to create groups within data files to better organize the data within the file. After defining a group, you can define variables, attributes, and dimensions within the group. Examples The ...",t:"NCDF_GROUPDEF"},"1063":{i:0.000336789114180272,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_GROUPNAME.htm",a:"The NCDF_GROUPNAME function returns the name of the specified group. A file’s root group is represented by the forward slash (/) character. Examples The following code sample uses the NetCDF 4 file ncgroup.nc , which is located in the IDL distribution’s /examples/data directory. The file contains ...",t:"NCDF_GROUPNAME"},"1064":{i:0.000169479174294684,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_GROUPPARENT.htm",a:"The NCDF_GROUPPARENT function returns the ID of a group’s parent group. Examples See the example for NCDF_GROUPNAME . Syntax Result = NCDF_GROUPPARENT( Grpid ) Return Value Returns the ID of a group’s parent group. If the specified group is the root group, or the associated file is not a NetCDF 4 ...",t:"NCDF_GROUPPARENT"},"1065":{i:0.000110976097908778,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_GROUPSINQ.htm",a:"The NCDF_GROUPSINQ function returns an array of all the groups contained in the specified group. Examples See the example for NCDF_GROUPNAME . Syntax Result = NCDF_GROUPSINQ( Grpid ) Return Value Returns an array containing the IDs of all the groups contained in the specified group. If Grpid is ...",t:"NCDF_GROUPSINQ"},"1066":{i:6.77437191660934E-05,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_INQUIRE.htm",a:"The NCDF_INQUIRE function returns a structure that contains information about an open NetCDF file. This structure of the form: { NDIMS:0L, NVARS:0L, NGATTS:0L, RECDIM:0L } The structure tags are described below. Examples See NCDF_VARDEF . Syntax Result = NCDF_INQUIRE( Cdfid ) Return Value The ...",t:"NCDF_INQUIRE"},"1067":{i:0.000168155072086214,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_LIST.htm",a:"The NCDF_LIST routine lists the variables and attributes in a NetCDF file. When calling NCDF_LIST, IDL prints the output directly to the console unless you specify the QUIET keyword. This routine is written in the IDL language. Its source code can be found in the file NCDF_LIST.pro in the lib ...",t:"NCDF_LIST"},"1068":{i:0.000134678215958513,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_NCIDINQ.htm",a:"The NCDF_NCIDINQ function returns the ID of a group, given the group’s name and parent group’s ID. Syntax Result = NCDF_NCIDINQ( Grpid , Group_name ) Return Value Returns the ID of a group whose name is given by Group_name , and whose parent group ID is given by Grpid . If the file is not a valid ...",t:"NCDF_NCIDINQ"},"1069":{i:0.00264278412921596,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_OPEN.htm",a:"The NCDF_OPEN function opens an existing NetCDF file. Syntax Result = NCDF_OPEN( Filename [, / NOWRITE | , / WRITE ] ) Return Value If successful, the NetCDF ID for the file is returned. Arguments Filename A scalar string containing the name of the file to be opened. Keywords NOWRITE Set this ...",t:"NCDF_OPEN"},"1070":{i:0.000186717659755874,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_PUT.htm",a:"The NCDF_PUT routine writes variables and attributes to a NetCDF file. This routine is written in the IDL language. Its source code can be found in the file NCDF_PUT.pro in the lib subdirectory of the IDL distribution. Examples In this example, we create a NetCDF file and then list the contents: ...",t:"NCDF_PUT"},"1071":{i:6.26388529835927E-05,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_UNLIMDIMSINQ.htm",a:"The NCDF_UNLIMDIMSINQ function returns the identifiers of the unlimited dimensions in a group. You can also determine the number of unlimited dimensions contained in a group by reading the value returned by the COUNT keyword. Syntax Result = NCDF_UNLIMDIMSINQ( Grpid [, COUNT = Value ] ) Return Value ...",t:"NCDF_UNLIMDIMSINQ"},"1072":{i:0.000354879678209827,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_VARDEF.htm",a:"The NCDF_VARDEF function adds a new variable to an open NetCDF file in define mode. By default, a new NetCDF variable is chunked (meaning that the data is copied from disk into memory in discrete chunks). You can change the data chunk size with the CHUNK_DIMENSIONS keyword, or set the variable to be ...",t:"NCDF_VARDEF"},"1073":{i:0.000109783350642588,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_VARGET.htm",a:"The NCDF_VARGET procedure retrieves a hyperslab of values from a NetCDF variable. The NetCDF file must be in data mode to use this procedure. Examples Suppose that a 230 by 230 image is saved in the NetCDF file dave.nc . The following commands extract both the full image and a 70x70 sub-image ...",t:"NCDF_VARGET"},"1074":{i:0.000104678484460087,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_VARGET1.htm",a:"The NCDF_VARGET1 procedure retrieves one element from a NetCDF variable. The NetCDF file must be in data mode to use this procedure. Examples Suppose that the file dave.nc contains an image saved with the NetCDF variable name “dave”. The following commands extract the value of a single pixel from ...",t:"NCDF_VARGET1"},"1075":{i:0.000104678484460087,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_VARID.htm",a:"The NCDF_VARID function returns the ID of a NetCDF variable. Examples See NCDF_VARDEF . Syntax Result = NCDF_VARID( Cdfid , Name ) Return Value This function returns the variable ID or returns -1 if the variable does not exist. Arguments Cdfid The NetCDF ID, returned from a previous call to ...",t:"NCDF_VARID"},"1076":{i:0.000243485079458194,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_VARIDSINQ.htm",a:"The NCDF_VARIDSINQ function returns a group’s variable IDs. Examples See the example for NCDF_GROUPNAME . Syntax Result = NCDF_VARIDSINQ( Grpid ) Return Value Returns an array of variable IDs associated with the group. If the group contains no variables, the scalar value -1 is returned. Arguments ...",t:"NCDF_VARIDSINQ"},"1077":{i:0.000109783350642588,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_VARINQ.htm",a:"The NCDF_VARINQ function returns a structure that contains information about a NetCDF variable, given its ID. This structure has the form: { NAME:\"\", DATATYPE:\"\", NDIMS:0L, NATTS:0L, DIM:LONARR(NDIMS) } This structure is described below. Examples See NCDF_VARDEF . Syntax Result = NCDF_VARINQ( Cdfid ...",t:"NCDF_VARINQ"},"1078":{i:0.000252793211532084,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_VARPUT.htm",a:"The NCDF_VARPUT procedure writes a hyperslab of values to a NetCDF variable. The NetCDF file must be in data mode to use this procedure. Examples Suppose that you wish to create a 100x100 byte (0 & 1) checker board: ; Create offsets for even and odd rows: offset_even = [0,0] & offset_odd = [1,1] ; ...",t:"NCDF_VARPUT"},"1079":{i:5.50327019655568E-05,u:"../Content/Reference Material/N/NetCDF Routines/NCDF_VARRENAME.htm",a:"The NCDF_VARRENAME procedure renames a NetCDF variable. Examples See NCDF_VARDEF . Syntax NCDF_VARRENAME, Cdfid , Varid , Name Arguments Cdfid The NetCDF ID, returned from a previous call to NCDF_OPEN , NCDF_CREATE , or NCDF_GROUPDEF . Varid The NetCDF variable ID, returned from a previous call to ...",t:"NCDF_VARRENAME"},"1080":{i:0.00049485147832727,u:"../Content/Reference Material/N/NEWTON.htm",a:"The NEWTON function solves a system of n non-linear equations in n dimensions using a globally-convergent Newton’s method. NEWTON is based on the routine newt described in section 9.7 of Numerical Recipes in C: The Art of Scientific Computing (Second Edition), published by Cambridge University ...",t:"NEWTON "},"1081":{i:0.000366875705816166,u:"../Content/Reference Material/N/NOISE_HURL.htm",a:"The NOISE_HURL function introduces noise into an image by changing randomly selected pixels to random colors. Pixel change probability is determined by a parameter that controls the amount of noise introduced into the image. Example This example adds noise to a test image: ; Read an image: image = ...",t:"NOISE_HURL"},"1082":{i:0.000366875705816166,u:"../Content/Reference Material/N/NOISE_PICK.htm",a:"The NOISE_PICK function introduces noise into an image by picking randomly selected pixels to be replaced by a neighboring pixel from a random direction. The probability of replacing a pixel is controlled by a parameter which controls the amount of noise introduced into the image. Example This ...",t:"NOISE_PICK"},"1083":{i:0.000366875705816166,u:"../Content/Reference Material/N/NOISE_SCATTER.htm",a:"The NOISE_SCATTER function introduces noise into an image by applying normally distributed noise to the entire image. In the normal distribution, a large number of pixels will have smaller amounts of noise applied to them, while fewer pixels will have larger amounts of noise applied to them. This ...",t:"NOISE_SCATTER"},"1084":{i:0.000366875705816166,u:"../Content/Reference Material/N/NOISE_SLUR.htm",a:"The NOISE_SLUR function introduces noise into an image by selecting random pixels to be replaced by a neighboring pixel from a random location in the row above. This simulates a downward melting effect. With NOISE_SLUR, there is an 80% chance of using the pixel directly above for replacement and a ...",t:"NOISE_SLUR"},"1085":{i:0.000124859748473134,u:"../Content/Reference Material/N/NORM.htm",a:"The NORM function computes the norm of a vector or a two-dimensional array. By default, NORM computes the L 2 (Euclidean) norm for vectors, and the L • norm for arrays. You may use the LNORM keyword to specify different norms. This routine is written in the IDL language. Its source code can be found ...",t:"NORM "},"1086":{i:5.50327019655568E-05,u:"../Content/Reference Material/O/O_list.htm",a:"O Routines ",t:"O Routines"},"1087":{i:0.00104173984060241,u:"../Content/Reference Material/O/OBJ_CLASS.htm",a:"The OBJ_CLASS function identifies the name of the object class or superclass of the given argument. Syntax Result = OBJ_CLASS( [ Arg ] [, COUNT = variable ] [, / SUPERCLASS {must specify Arg }] ) Return Value Returns a string containing the name of the class or superclass. If the supplied argument ...",t:"OBJ_CLASS "},"1088":{i:0.000601156618270039,u:"../Content/Reference Material/O/OBJ_DESTROY.htm",a:"The OBJ_DESTROY procedure is used to destroy an object. If the class (or one of its superclasses) supplies a procedure method named CLEANUP, the method is called and all arguments and keywords passed by the user are passed to it. This method should perform any required cleanup on the object and ...",t:"OBJ_DESTROY"},});