define({"2446":{i:0.00050005122218444,u:"../Content/Creating IDL Programs/Appendices/Embedded_Formatting_Comm.htm",a:"Text strings can include embedded formatting commands that facilitate subscripting, superscripting, and equation formatting. The method used is similar to that developed by Grandle and Nystrom (1980). Embedded formatting commands are always introduced by the exclamation mark, ( ! ). (The string “ !! ...",t:"Embedded Formatting Commands"},"2447":{i:0.00070227181851203,u:"../Content/LoadingDefaultColorTables.htm",a:"IDL uses color tables to associate pixel values in indexed images with specific RGB color values. To define a color table in graphics functions such as IMAGE and MAP , use the RGB_TABLE property. If no color table is defined, these graphics display in gray scale. The color tables on the right are ...",t:"Loading Default Color Tables"},"2448":{i:0.00140185910797349,u:"../Content/IDL Graphics/FormattingSymsAndLines.htm",a:"You can format IDL Graphics colors, lines, and symbols using either properties or the string argument Format . Examples As an example, to set the plotting symbol to a plus character, the plotting color to green, the linestyle to a dash-dot-dot-dot line, and the line thickness to a value of 2, you ...",t:"Formatting IDL Colors, Graphics Symbols, and Lines"},"2449":{i:0.00018300110263771,u:"../Content/GuideMe/Displaying graphics annotations.htm",a:"In any IDL graphics display, you can add annotations when you create the visualization or after you display it. The following kinds of annotations are available: Drawing circles and ovals using ELLIPSE Drawing multi-sides shapes using POLYGON Drawing lines and arrows using POLYLINE Adding text and ...",t:"Graphics Annotations"},"2450":{i:0.000158204754112569,u:"../Content/GuideMe/Legend_add.htm",a:"Use the LEGEND function to add a legend explaining the data to an existing graphic. You can use LEGEND at the time you create the graphic or from the command line after the graphic is displayed. The example below shows two plots comparing average monthly precipitation, with a legend to explain the ...",t:"Legends "},"2451":{i:7.67649569660617E-05,u:"../Content/GuideMe/polylines.htm",a:"Use the POLYLINE function to draw lines or arrows on existing graphics. You can use POLYLINE at the time you create the graphic, or from the command line after the graphic is displayed. The example shows an image of Mars with an arrow that points to a landing site. The code shown below creates the ...",t:"Draw Lines and Arrows"},"2452":{i:0.000159088503450509,u:"../Content/GuideMe/titles_tex_syntax.htm",a:"The following example shows Greek letters and mathematical symbols in the x and y axis titles. ; Define the data. t = 0.1*FINDGEN(200) y = SMOOTH(RANDOMU(seed,200), 5)  ; Draw the plot p = PLOT(t,y,\u0027b\u0027, $ XTITLE=\u0027Gap Distance ($\\AA$)\u0027, $ YTITLE=\u0027Volts ($\\mu$V)\u0027, $ FONT_SIZE = 20, $ ...",t:"Mathematical Symbols and Greek Letters"},"2453":{i:7.67649569660617E-05,u:"../Content/GuideMe/polygons.htm",a:"Use the POLYGON function to draw a square, rectangle, or other multi-sided shape on an existing graphic. You can use POLYGON at the time you create the graphic, or from the command line after the graphic is displayed. The example shows an image of Mars with a shape that defines a study area. The ...",t:"Draw Multi-Sided Shapes"},"2454":{i:0.000185528448075495,u:"../Content/GuideMe/text_annotations.htm",a:"Use the TEXT function to add labels and annotations to an existing graphic. You can use TEXT at the time you create the graphic or from the command line after the graphic is displayed. The examples show a couple of ways you can use TEXT. Plot with Math and Greek Symbols The code shown below creates ...",t:"Text and Symbols"},"2455":{i:0.000183982573270825,u:"../Content/GuideMe/LongExamples/DynamicVisualizations/DynamicVis_Splash.htm",a:"This long example explores several ways in which you can use the Equation argument (and the EQUATION property) to dynamically visualize a symbolic equation. The EQUATION property is available on the PLOT , CONTOUR , and SURFACE functions. Explore Dynamic Visualizations Topics: Dynamic Plot ...",t:"Dynamic Visualizations"},"2456":{i:0.000100560065291255,u:"../Content/GuideMe/LongExamples/DynamicVisualizations/DynamicVis_Plot.htm",a:"The PLOT function\u0027s Equation argument (and the EQUATION property) adds a level of flexibility to the creation of plots. This topic explores ways you can use the Equation argument to create dynamic, interactive plots. The Equation argument on the PLOT function allows you to specify either a string ...",t:"Dynamic PLOT Visualizations"},"2457":{i:0.000103039433894197,u:"../Content/GuideMe/LongExamples/DynamicVisualizations/DynamicVis_Contour.htm",a:"The CONTOUR function\u0027s Equation argument (and the EQUATION property) adds  flexibility to the creation of contour plots. This topic explores ways you can use the EQUATION property to create dynamic, interactive contour visualizations. The Equation argument  on the CONTOUR function allows you to ...",t:"Dynamic Contour Visualizations"},"2458":{i:0.000103039433894197,u:"../Content/GuideMe/LongExamples/DynamicVisualizations/DynamicVis_Surface.htm",a:"The SURFACE function\u0027s Equation argument (and the EQUATION property)  adds  flexibility to the creation of surface plots. This topic explores ways you can use the EQUATION property to create dynamic, interactive surface visualizations. The Equation argument on the SURFACE function allows you to ...",t:"Dynamic Surface Visualizations"},"2459":{i:8.28424829595994E-05,u:"../Content/GuideMe/LongExamples/EnvMonitoring/EM_Splash.htm",a:"This example explores several ways in which you can use IDL in Environmental Monitoring applications. Topics in the Environmental Monitoring Example: Model the Study Area and Setting Plot 3D Terrain and Water Table Create Contours of Pollutant Plume Plot Supporting Information Plot Aquifer Flow ...",t:"Environmental Monitoring Example"},"2460":{i:0.000154995556229762,u:"../Content/GuideMe/LongExamples/EnvMonitoring/EM1_Gridding.htm",a:"This series of environmental monitoring examples explores ways that IDL can help you characterize environmental conditions, perform analyses, and create visualizations. For this example we examine conditions around a simulated nuclear waste disposal site. At varying times, tritium, a waste product ...",t:"Model the Study Area and Setting"},"2461":{i:0.000108130073625422,u:"../Content/GuideMe/LongExamples/EnvMonitoring/EM1_PlumeContours.htm",a:"Part of the project in this study area involved characterizing both the current extent of the tritium plume and predicting its future extent. The file \"MonitoringWells.csv\" contains data from current readings of tritium concentrations (T 0 ) as well as three future states modeled using separate ...",t:"Create Contours of Pollutant Plume"},"2462":{i:0.000337119311196896,u:"../Content/Creating IDL Programs/Application Programming/CreatingVideo.htm",a:"Video is generally stored as a collection of compressed streams in a container file.  Each  stream may be video images, an audio track, or other data (such as subtitles), synchronized with each other.  The container (file format) determines how those streams are stored. IDLffVideoRead and ...",t:"Creating Video"},"2463":{i:0.000131204965726452,u:"../Content/IDL Graphics/Graphics Methods.htm",a:"Close Method ConvertCoord Method CopyWindow Method Delete Method Erase Method GenerateCode Method GetData Method GetSelect Method GetValueatLocation Method HitTest Method LegendAdd Method LegendRemove Method MapForward Method MapInverse Method Order Method Print Method Refresh Method Rotate Method ...",t:"Graphics Methods"},"2464":{i:0.000228708563507633,u:"../Content/IDL Graphics/Close Method.htm",a:"The Close method destroys the graphic window and all of the contained graphics and annotations. After this method is called, all references to the window object and the contained graphics objects will be invalid, and should not be used. Example plot = PLOT(/TEST) plot.Close Syntax graphic .Close ...",t:"Close Method"},"2465":{i:0.000162801387475566,u:"../Content/IDL Graphics/ConvertCoord Method.htm",a:"The ConvertCoord function method transforms one or more sets of coordinates to and from the coordinate systems supported by IDL. Syntax Result = graphic .CONVERTCOORD( X , [ Y [, Z ]] [, /DATA] [, /DEVICE] [, /NORMAL, /RELATIVE] [, /TO_DATA] [, /TO_DEVICE] [, /TO_NORMAL, /TO_RELATIVE]) Return Value ...",t:"ConvertCoord Method"},"2466":{i:0.000141102003285565,u:"../Content/IDL Graphics/CopyWindow Method.htm",a:"The CopyWindow function method copies the contents of the graphic window into a [3 x M x N ] byte array. By default the resulting image has the same dimensions as the window, although the HEIGHT, WIDTH, and RESOLUTION keywords may be used to override this behavior. Example The following code sample ...",t:"CopyWindow Method"},"2467":{i:6.11673569509146E-05,u:"../Content/IDL Graphics/Delete Method.htm",a:"The Delete method deletes a graphic. Example Copy and paste the first two lines to the IDL command line to draw the plot and the text annotation. Then paste the last line separately to see how it deletes the annotation. plot = PLOT(/TEST) t1 = text(0.5, 0.8, \u0027Text 1\u0027)  t1.Delete Syntax graphic ...",t:"Delete Method"},"2468":{i:0.000140091706865482,u:"../Content/IDL Graphics/Erase Method.htm",a:"The Erase method deletes all of the graphics and annotations within a graphic window, but does not destroy the window itself. This method is only available on the window object. All other properties of the window object remain unchanged after the erase. After this method is called, any references to ...",t:"Erase Method"},"2469":{i:8.5328836129877E-05,u:"../Content/IDL Graphics/GetData Method.htm",a:"The GetData procedure method allows you to programatically retrieve data arguments for an IDL graphic after it has been created. The arguments to the GetData method should be specified in the same manner as the function call used to create the graphic. You may not get the value of non-data arguments ...",t:"GetData Method"},"2470":{i:0.000224828433099012,u:"../Content/IDL Graphics/GetSelect Method.htm",a:"The GetSelect function method retrieves the selected items within a graphic window. Example p = PLOT(/TEST, LAYOUT=[2,1,1]) c = CONTOUR(/TEST, LAYOUT=[2,1,2], /CURRENT) ; Click on something ; Retrieve the selected item(s) graphics = p.Window.GetSelect() Syntax Result = window .GetSelect( ) Return ...",t:"GetSelect Method"},"2471":{i:6.11673569509146E-05,u:"../Content/IDL Graphics/GetValueAtLocation Method.htm",a:"The GetValueAtLocation function method allows you to programmatically retrieve the data value that is closest to the provided location. Example Temperature=[20,24,21,22,25,30,29,30,25,20,15,19] Day=FINDGEN(12) * 30 + 15  p = PLOT(Day, Temperature, \u0027Db-1\u0027, $ XTITLE = \u0027Day of Year\u0027, $ YTITLE = ...",t:"GetValueAtLocation Method"},"2472":{i:0.000159096144242124,u:"../Content/IDL Graphics/HitTestMethod.htm",a:"The HitTest  method returns the  graphics elements at a specific location or within a defined box. Example The MouseDownDeleteRight function uses a mouse event function to define the mouse button action. FUNCTION MOUSEDOWNDELETERIGHT, Window, $ X, Y, Button, KeyMods, Clicks  PRINT, ...",t:"HitTest Method"},"2473":{i:5.94936853516097E-05,u:"../Content/IDL Graphics/LegendAdd Method.htm",a:"The Legend Add method adds another item to an existing legend. Example plot = PLOT(/TEST, COLOR=\u0027lime\u0027) l = LEGEND(LABEL=\u0027First Plot\u0027) plot2 = PLOT(RANDOMU(seed,200), COLOR=\u0027purple\u0027, /OVERPLOT) l.add, plot2, LABEL=\u0027Second Plot\u0027 Syntax legend .Add, TARGET [, Properties = variable ] Arguments TARGET ...",t:"Legend Add Method"},"2474":{i:5.94936853516097E-05,u:"../Content/IDL Graphics/LegendRemove Method.htm",a:"The Legend Remove method removes an item from an existing legend. Example plot = PLOT(/TEST, NAME=\u0027First Plot\u0027, COLOR=\u0027lime\u0027) plot2 = PLOT(RANDOMU(seed,200), NAME=\u0027Second Plot\u0027, $ COLOR=\u0027purple\u0027, /OVERPLOT) l = LEGEND() l.Remove, plot2 Syntax legend .Remove, TARGET Arguments TARGET One or more ...",t:"Legend Remove Method"},"2475":{i:0.000277526713270239,u:"../Content/IDL Graphics/MapForward Method.htm",a:"The MapForward method transforms map coordinates from longitude and latitude to Cartesian (x, y) coordinates, using the map projection associated with the graphic. Example ; Set up map projection, draw a grid mymap = MAP(\u0027Hotine Oblique Mercator\u0027, $ ELLIPSOID=\u0027GRS1980\u0027, $ MERCATOR_SCALE=0.9996d, $ ...",t:"MapForward Method"},"2476":{i:0.000259760705763553,u:"../Content/IDL Graphics/MapInverse Method.htm",a:"The MapInverse method transforms map coordinates from Cartesian (x, y) coordinates to longitude and latitude, using the map projection associated with the graphic. Example See the example for the MapForward Method . Syntax Result = graphic .MapInverse( X [, Y ] [, /RADIANS]) Return Value The result ...",t:"MapInverse Method"},"2477":{i:0.00014423041158514,u:"../Content/IDL Graphics/Order Method.htm",a:"The Order method controls the Z-order of a graphics item relative to other graphics items. Example ; Create a deck of cards. w = WINDOW() x = [0,0.25,0.25,0] y = [0,0,0.5,0.5] r = OBJARR(20) for i=0,19 do r[i] = POLYGON(x+i/30.,y+i/40.,FILL_COLOR=!COLOR.(i)) WAIT, 1  ; Bring every other card forward ...",t:"Order Method"},"2478":{i:0.000494151977055972,u:"../Content/IDL Graphics/Print Method.htm",a:"The Print procedure method prints the window contents of an IDL Graphic to the default printer. Example x = FINDGEN(41)/10 - 2 gauss = EXP(-x^2) p = BARPLOT(x, gauss, TITLE=\u0027Gaussian Distribution\u0027, $ XTITLE=\u0027$\\it x$\u0027, YTITLE=\u0027$\\it f(x)$\u0027, YRANGE=[0,1.1]) t = TEXT(0.75,0.85,\u0027$\\it f(x)=exp(-x^2)$\u0027, ...",t:"Print Method"},"2479":{i:0.00014547062169823,u:"../Content/IDL Graphics/Refresh Method.htm",a:"The Refresh method enables and disables the refresh (drawing) of the graphics window. This method is useful if you are doing a large number of graphics updates and you do not want to see the intermediate steps. Example ; Run this line of code first. p = PLOT(/TEST)  ; Disable re-draws. p.Refresh, ...",t:"Refresh Method"},"2480":{i:0.000769724825054787,u:"../Content/IDL Graphics/Rotate Method.htm",a:"The Rotate method rotates a graphic item. Example s = SURFACE(/TEST, /CURRENT)  s.Rotate, /RESET s.Rotate, 45, /ZAXIS s.Rotate, -60, /XAXIS s.Rotate, 45, /YAXIS  t = TEXT(0.5, 0.3, \u0027Sample\u0027, $ FONT_SIZE=100, ALIGNMENT=0.5, $ COLOR=\u0027yellow\u0027)  t.Rotate, -30 Syntax graphic .Rotate, Angle [, /DEFAULT] ...",t:"Rotate Method"},"2481":{i:0.000708218218640542,u:"../Content/IDL Graphics/Save Method.htm",a:"The Save method saves the window contents of an IDL Graphic to an image file. Example The following code sample creates a bar plot and saves the image to a PNG file. x = FINDGEN(41)/10 - 2 gauss = EXP(-x^2) myPlot = BARPLOT(x, gauss, TITLE=\u0027Gaussian Distribution\u0027, $ XTITLE=\u0027$\\it x$\u0027, YTITLE=\u0027$\\it ...",t:"Save Method"},"2482":{i:0.000679783038496159,u:"../Content/IDL Graphics/Scale Method.htm",a:"The Scale method scales a graphic item in the X, Y, or Z dimensions. Examples p = PLOT(RANDOMU(seed, 20)) p.Scale, 0.5, 0.3   ; Need to reset rotation before scaling. s = SURFACE(/TEST) s.Rotate, /RESET s.Scale, 1.5, 1.5, 0.5 s.Rotate, /DEFAULT Syntax graphic .Scale, X , Y , Z [, /RESET] Arguments ...",t:"Scale Method"},"2483":{i:0.000398758842967843,u:"../Content/IDL Graphics/Select Method.htm",a:"The Select method changes the selection of items in the graphic window and brings the window to the front. Example ; Create two plot lines in the same graphics window p1 = PLOT(/TEST) p2 = PLOT(randomu(seed,150), /OVERPLOT) ; Select the first plot p1.Select  ; Create two different graphics windows p ...",t:"Select Method"},"2484":{i:0.000478700211577737,u:"../Content/IDL Graphics/SetCurrent Method.htm",a:"The SetCurrent method changes the specified window to be the current window for adding new graphics. The GETWINDOWS function may be used to retrieve the current window. This method does not change the visibility or focus of the window. The Show method may be used to control visibility. Example ; ...",t:"SetCurrent Method"},"2485":{i:6.65462717836623E-05,u:"../Content/IDL Graphics/SetData Method.htm",a:"The SetData procedure method allows you to programatically replace a graphic\u0027s existing data with the specified data. When the SetData method is called, the graphic window is immediately updated to display the new data. Coordinate Systems For the Arrow, Polygon, Polyline, and Symbol graphics, if the ...",t:"SetData Method"},"2486":{i:0.000301213887449573,u:"../Content/IDL Graphics/Show Method.htm",a:"The SHOW method brings the specified window to the front. The specified window will have the focus and will not be iconified. Example ; Define the data. plot1data=[0.4, 0.6, 1.4, 1.6, 1.9, 1.8, 2.8, 2.6, 1.3, 1.3, .09, 0.7]  plot2data=[0.6, 0.4, 2.1, 1.2, 1.5, 1.8, 2.3, 3.1, 1.1, 1.7, .07, 0.3] ...",t:"Show Method"},"2487":{i:0.000676498419244999,u:"../Content/IDL Graphics/Translate Method.htm",a:"The Translate method moves or translates a graphic item in the X, Y, or Z dimensions. Example ; Create the data. x = FINDGEN(100) y = 20 * Sin(x*2*!PI/25.0) * Exp(-0.01*x)  ; Draw the sky and sea. p = PLOT(x, y, XRANGE=[0,99], YRANGE=[-40,100], $ FILL_LEVEL=-40, $ AXIS_STYLE=0, MARGIN=0, ...",t:"Translate Method"},"2488":{i:6.1715248246523E-05,u:"../Content/IDL Concepts.htm",a:"Environment ",t:"Environment"},"2489":{i:6.1715248246523E-05,u:"../Content/Getting Started.htm",a:"Getting Started ",t:"Getting Started"},"2490":{i:0.000185688488024441,u:"../Content/StartingIDL.htm",a:"The easiest way to start IDL is by launching the IDL Workbench, which is an Eclipse-based graphical user interface. You can also run IDL in command-line mode, which uses a text-only interface and sends output to your terminal screen or shell window. IDL is available in both 32- and 64-bit versions ...",t:"Starting IDL"},"2491":{i:5.50327019655568E-05,u:"../Content/StartupFiles.htm",a:"A startup file is a batch file that is executed automatically each time you start IDL. You can specify a startup file in one of two ways: Specify the name of the startup file in the IDL Workbench from the Window \u003e Preferences \u003e IDL menu option. Specify the name of the startup file as the value of ...",t:"Startup Files"},"2492":{i:5.50327019655568E-05,u:"../Content/IDL_execution_options.htm",a:"The following sections discuss the various ways you can influence IDL\u0027s environment and execution. Startup Options You can add options to the command that starts IDL. If you are starting IDL from the command or shell prompt, append the option flag after the idl or idlde command. (If you are starting ...",t:"IDL Execution Options"},"2493":{i:0.000427359296221472,u:"../Content/Reference Material/C/Command_Line_Options_for.htm",a:"You can alter some IDL behaviors by supplying command-line switches along with the command used to invoke IDL. The following table shows the IDL command-line switches and the IDL interfaces to which they apply (See also Language Codes): Switch IDL Workbench (idlde) Command Line (idl) UNIX Windows ...",t:"Command-line Options for IDL Startup "},"2494":{i:5.50327019655568E-05,u:"../Content/Creating IDL Programs/StartCLWindows.htm",a:"Because the concept of the current directory plays such an important role in IDL, you have the option to open a new command line session from a folder in Windows Explorer. When you do this, the IDL command line opens with the selected folder as IDL\u0027s current directory.   To open the IDL command line ...",t:"Start the IDL Command Line from Windows Explorer"},"2495":{i:7.6789836178486E-05,u:"../Content/UsingHelp.htm",a:"IDL provides both installed, browser-based program documentation, known as the IDL Help System, as well as web-based documentation available via the Exelis VIS website (the Documentation Center ). This topic covers how to open the installed IDL Help System from both the command line and in the ...",t:"Using IDL Help"},"2496":{i:5.50327019655568E-05,u:"../Content/Creating IDL Programs/Distributing IDL Applications/DistributingIDLApplications.htm",a:"Distributing IDL Applications Refer to the following sections: Runtime Mode Applications Virtual Machine Applications Callable IDL Applications Create a Runtime Distribution ",t:"Distributing IDL Applications"},"2497":{i:9.34113820199375E-05,u:"../Content/Creating IDL Programs/Distributing IDL Applications/RuntimeModeApplications/DistributingRuntimeModeApplicationsIntro.htm",a:"An IDL runtime mode application is a program or set of programs written to use IDL’s data analysis and display capabilities in a stand-alone mode, without access to the IDL Workbench, the IDL command line, or the ability to compile IDL .pro files. All IDL code for a runtime mode application must be ...",t:"Distributing Runtime Mode Applications"},"2498":{i:0.000200690083478064,u:"../Content/Creating IDL Programs/Distributing IDL Applications/RuntimeModeApplications/LimitationsRuntimeApplications.htm",a:"IDL applications that run without an IDL development license — whether native IDL or Callable IDL — do not have access to the IDL compiler and thus cannot compile IDL source code from .pro files. As a result, operations that require the compiler will not execute when a development license is not ...",t:"Limitations of Runtime Applications"},"2499":{i:0.000273246735922275,u:"../Content/Creating IDL Programs/Distributing IDL Applications/RuntimeModeApplications/PreferencesRuntimeApplications.htm",a:"IDL’s preference system allows developers, administrators, and individual users to control default values for many aspects of IDL’s environment and configuration. Creators of runtime applications can take advantage of the preference system to customize the environment in which a particular ...",t:"Preferences for Runtime Applications"},"2500":{i:0.000171269740568759,u:"../Content/Creating IDL Programs/Distributing IDL Applications/RuntimeModeApplications/LicensingOptions.htm",a:"When you have an application that uses IDL and you want to distribute it to users who do not have an IDL development license, you have the following choices: Ask your users to install the free IDL Virtual Machine and run your application in the Virtual Machine. Purchase a runtime or embedded license ...",t:"Licensing Options for Runtime Mode Applications"},"2501":{i:0.000171269740568759,u:"../Content/Creating IDL Programs/Distributing IDL Applications/RuntimeModeApplications/CreatingApplicationDistributionRuntime.htm",a:"If your IDL application will be run in an installation with an IDL development license, you do not need to create an IDL distribution. Just package your application files (either .pro files or .sav files, and any necessary data files) and distribute them to your users along with instructions ...",t:"Creating an Application Distribution"},"2502":{i:9.89197189085506E-05,u:"../Content/Creating IDL Programs/Distributing IDL Applications/RuntimeModeApplications/StartingRuntimeApplication.htm",a:"You must provide your end users with instructions describing how to start your application. You may choose to provide users with the name and location of your application executable along with a launch command to execute, or (if you are using an installer for your application) with shell scripts, ...",t:"Starting a Runtime Application"},"2503":{i:9.034552284036E-05,u:"../Content/Creating IDL Programs/Distributing IDL Applications/RuntimeModeApplications/InstallingYourApplication.htm",a:"Installation of your application on the end user’s machine can be performed manually by the user, or it can be automated using an installer. There are a number of commercial applications available to help you build installers. In order to avoid any possible conflicts with existing versions of IDL, ...",t:"Installing Your Application"},"2504":{i:0.000531479353246189,u:"../Content/Creating IDL Programs/Distributing IDL Applications/VirtualMachineApplications/VirtualMachineApplicationsIntro.htm",a:"An IDL Virtual Machine is a runtime version of IDL that can execute IDL .sav files without an IDL license. It is designed to provide IDL users with a simple, no-cost method for distributing IDL applications. It runs on all IDL-supported platforms, and does not require a license to run. This utility ...",t:"Virtual Machine Applications"},"2505":{i:0.000145384873618671,u:"../Content/Creating IDL Programs/Distributing IDL Applications/VirtualMachineApplications/LimitationsOfVirtualMachineApplications.htm",a:"The IDL Virtual Machine will run a compiled IDL SAVE file even if no IDL license is present. The purpose of the IDL Virtual Machine is to facilitate IDL code collaboration and application distribution. In addition to the limitations of runtime applications in general, applications that run in the ...",t:"Limitations of Virtual Machine Applications"},"2506":{i:0.000145384873618671,u:"../Content/Creating IDL Programs/Distributing IDL Applications/VirtualMachineApplications/PreferencesVirtualMachineApplications.htm",a:"IDL’s preference system allows developers, administrators, and individual users to control default values for many aspects of IDL’s environment and configuration. Creators of runtime applications can take advantage of the preference system to customize the environment in which a particular ...",t:"Preferences for Virtual Machine Applications"},"2507":{i:0.000252844486290524,u:"../Content/Creating IDL Programs/Distributing IDL Applications/VirtualMachineApplications/StartingVirtualMachineApplication.htm",a:"Installations of IDL that have access to a development license can create compiled binary versions of IDL applications; these compiled versions are stored in files with the extension .sav . Many applications stored in .sav files can be executed by the IDL Virtual Machine. If you use the MAKE_RT ...",t:"Starting a Virtual Machine Application"},"2508":{i:0.000123445058239328,u:"../Content/Creating IDL Programs/Distributing IDL Applications/CallableIDLApplications/CallableIDLApplicationsIntro.htm",a:"A Callable IDL application is written in another programming language, such as C or C++, and calls IDL as a subroutine. The process of creating Callable IDL applications is described in the External Development Guide . Unlike applications written entirely in IDL, the process of creating an ...",t:"Callable IDL Applications"},"2509":{i:7.00224700365557E-05,u:"../Content/Creating IDL Programs/Distributing IDL Applications/CallableIDLApplications/PreferencesCallableIDLApplications.htm",a:"IDL’s preference system allows developers, administrators, and individual users to control default values for many aspects of IDL’s environment and configuration. Creators of runtime applications can take advantage of the preference system to customize the environment in which a particular ...",t:"Preferences for Callable IDL Applications"},"2510":{i:7.00224700365557E-05,u:"../Content/Creating IDL Programs/Distributing IDL Applications/CallableIDLApplications/LicensingOptionsCallable.htm",a:"Refer to Licensing Options for Runtime Mode Applications . The licensing options and steps are the same for callable IDL applications, with the following exception that applies to embedded licensing: After you receive your license information, make the following changes to your application code, in ...",t:"Licensing Options for Callable IDL Applications"},"2511":{i:7.00224700365557E-05,u:"../Content/Creating IDL Programs/Distributing IDL Applications/CallableIDLApplications/CreatingCallableIDLApplicationDistribution.htm",a:"This section discusses the process of creating an application distribution that includes the files necessary to run IDL, allowing you to distribute your application to users who do not already have IDL installed. First, see Creating an Application Distribution for information on creating an IDL ...",t:"Creating a Callable IDL Application Distribution"},"2512":{i:7.00224700365557E-05,u:"../Content/Creating IDL Programs/Distributing IDL Applications/CallableIDLApplications/StartingCallableIDLApplication.htm",a:"You must provide your end users with instructions describing how to start your application. You may choose to provide users with the name and location of your application executable along with a launch command to execute, or (if you are using an installer for your application) with shell scripts, ...",t:"Starting a Callable IDL Application"},"2513":{i:6.67271579572477E-05,u:"../Content/Creating IDL Programs/Distributing IDL Applications/CreateRuntimeDistribution/CreatingRuntimeDistributionIntro.htm",a:"This section discusses the process of creating an application distribution that includes the files necessary to run IDL, allowing you to distribute your application to users who do not already have IDL installed. If your IDL application will be run in an installation with an IDL development license, ...",t:"Create a Runtime Distribution"},"2514":{i:0.00058893855600343,u:"../Content/Creating IDL Programs/Distributing IDL Applications/CreateRuntimeDistribution/CreatingDistributionUsingMAKE_RT.htm",a:"The MAKE_RT procedure creates an IDL distribution for one or more target platforms. You do not need to create a SAVE file in order to use MAKE_RT, but application launch scripts will only be created if a SAVE file is included. To create a runtime distribution for your application, you will do the ...",t:"Creating a Distribution Using MAKE_RT"},});