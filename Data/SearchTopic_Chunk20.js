define({"1464":{i:0.000439545316005705,u:"../Content/Reference Material/W/WV_FN_MORLET.htm",a:"The WV_FN_MORLET function constructs wavelet coefficients for the Morlet wavelet function. In real space, the Morlet wavelet function consists of a complex exponential modulated by a Gaussian envelope: π –1/4s–1/2 exp[ i k x / s ] exp[–( x / s ) 2 /2], where s is the wavelet scale, k is a ...",t:"WV_FN_MORLET"},"1465":{i:0.000439545316005705,u:"../Content/Reference Material/W/WV_FN_PAUL.htm",a:"The WV_FN_PAUL function constructs wavelet coefficients for the Paul wavelet function. In real space, the Paul wavelet function is proportional to the complex polynomial (1 – i x / s )^(– m –1), where s is the wavelet scale, m is a non-dimensional parameter, and x is the position. Examples Plot the ...",t:"WV_FN_PAUL"},"1466":{i:0.000177683163464211,u:"../Content/Reference Material/W/WV_FN_SYMLET.htm",a:"The WV_FN_SYMLET function constructs wavelet coefficients for the Symlet wavelet function. The Symlet wavelet for orders 1–3 are the same as the Daubechies wavelets of the same order. Syntax Result = WV_FN_SYMLET( [ Order , Scaling , Wavelet , Ioff , Joff ] ) Return Value The returned value of this ...",t:"WV_FN_SYMLET"},"1467":{i:0.000139564399283638,u:"../Content/Reference Material/W/WV_IMPORT_DATA.htm",a:"The WV_IMPORT_DATA procedure allows the user to add a variable to the currently active WV_APPLET widget from the IDL\u003e command prompt. Syntax WV_IMPORT_DATA, Data [, MESSAGE_OUT = string ] [, PARENT = variable ] Arguments Data A one- or two-dimensional array of data, or a structure containing the ...",t:"WV_IMPORT_DATA"},"1468":{i:0.000111976047278317,u:"../Content/Reference Material/W/WV_IMPORT_WAVELET.htm",a:"The WV_IMPORT_WAVELET procedure allows the user to add wavelet functions to the currently-active Wavelet Toolkit(s). Any widgets that are currently active will not have access to the new wavelet functions until they are restarted. Syntax WV_IMPORT_WAVELET [, Wavelet ] [, / RESET ] Arguments Wavelet ...",t:"WV_IMPORT_WAVELET"},"1469":{i:0.000101904115825677,u:"../Content/Reference Material/W/WV_PLOT3D_WPS.htm",a:"The WV_PLOT3D_WPS function runs the graphical user interface for three-dimensional visualization of the wavelet power spectrum. WV_PLOT3D_WPS is accessible from the Visualize Menu of WV_APPLET. Syntax Result = WV_PLOT3D_WPS( Array [, X ] [, Y ] [, GROUP_LEADER = widget_id ] [, SURFACE_STYLE = value ...",t:"WV_PLOT3D_WPS"},"1470":{i:0.000101904115825677,u:"../Content/Reference Material/W/WV_PLOT_MULTIRES.htm",a:"The WV_PLOT_MULTIRES function runs the graphical user interface for multiresolution analysis. WV_PLOT_MULTIRES is accessible from the Visualize Menu of WV_APPLET. Syntax Result = WV_PLOT_MULTIRES( Array [, X ] [, Y ] [, GROUP_LEADER = widget_id ] [, TITLE = string ] [, UNITS = string ] [, XTITLE = ...",t:"WV_PLOT_MULTIRES"},"1471":{i:0.000318603300745082,u:"../Content/Reference Material/W/WV_PWT.htm",a:"The WV_PWT function returns the partial wavelet transform of the input vector A . The transform is done using a user-inputted wavelet filter. WV_PWT is called by WV_DWT  . WV_PWT is based on the routine pwt described in section 13.10 of Numerical Recipes in C: The Art of Scientific Computing, 2nd ...",t:"WV_PWT"},"1472":{i:0.000133728230888371,u:"../Content/Reference Material/W/WV_TOOL_DENOISE.htm",a:"The WV_TOOL_DENOISE function runs the graphical user interface for wavelet filtering and denoising. WV_TOOL_DENOISE is accessible from the Tools Menu of WV_APPLET. Syntax Result = WV_TOOL_DENOISE( Array [, X ] [, Y ] [, GROUP_LEADER = widget_id ] [, TITLE = string ] [, UNITS = string ] [, XTITLE = ...",t:"WV_TOOL_DENOISE"},"1473":{i:5.50327019655568E-05,u:"../Content/Reference Material/X/X_list.htm",a:"X Routines ",t:"X Routines"},"1474":{i:0.000177288224346168,u:"../Content/Reference Material/X/XBM_EDIT.htm",a:"The XBM_EDIT procedure is a utility for creating and editing icons for use with IDL widgets as bitmap labels for widget buttons. The icons created with XBM_EDIT can be saved in two different file formats. IDL “array definition files” are text files that can be inserted into IDL programs. “Bitmap ...",t:"XBM_EDIT "},"1475":{i:0.000231782083309723,u:"../Content/Reference Material/X/XDISPLAYFILE.htm",a:"The XDISPLAYFILE procedure is a utility for displaying ASCII text files using a widget interface. In addition to allowing users to read and optionally edit text files, the utility allows you programmatically interact with the text widget. This routine is written in the IDL language. Its source code ...",t:"XDISPLAYFILE"},"1476":{i:0.000100783726018698,u:"../Content/Reference Material/X/XDXF.htm",a:"The XDXF procedure is a utility for displaying and interactively manipulating DXF objects. It also displays a dialog that contains block and layer information for the DXF file, allowing the user to turn on and off the display of individual layers. Using XDXF XDXF displays a resizeable top-level base ...",t:"XDXF "},"1477":{i:0.000173195337663208,u:"../Content/Reference Material/X/XFONT.htm",a:"The XFONT function is a utility that creates a modal widget for selecting and viewing an X Windows font. Calling XFONT resets the current X Windows font. This routine is only available on UNIX platforms. This routine is written in the IDL language. Its source code can be found in the file xfont.pro ...",t:"XFONT "},"1478":{i:0.000265273607793634,u:"../Content/Reference Material/X/XINTERANIMATE.htm",a:"The XINTERANIMATE procedure is a utility for displaying an animated sequence of images using off-screen pixmaps or memory buffers. The speed and direction of the display can be adjusted using the widget interface. On Microsoft Windows systems, the number of pixmap windows that can be created (and ...",t:"XINTERANIMATE "},"1479":{i:0.000380461090487468,u:"../Content/Reference Material/X/XLOADCT_Procedure.htm",a:"The XLOADCT procedure is a utility that provides a graphical widget interface to the LOADCT procedure. XLOADCT displays the current Direct Graphics color table and shows a list of available predefined color tables. Clicking on the name of a color table causes that color table to become IDL’s current ...",t:"XLOADCT Procedure"},"1480":{i:0.00139840532966474,u:"../Content/Reference Material/X/XMANAGER.htm",a:"The XMANAGER procedure provides the main event loop and management for widgets created using IDL. Calling XMANAGER “registers” a widget program with the XMANAGER event handler. XMANAGER takes control of event processing until all widgets have been destroyed. Beginning with IDL version 5.0, IDL ...",t:"XMANAGER "},"1481":{i:0.000113875661849111,u:"../Content/Reference Material/X/XMNG_TMPL.htm",a:"The XMNG_TMPL procedure is a template for widgets that use the XMANAGER. Use this template instead of writing your widget applications from “scratch”. This template can be found in the file xmng_tmpl.pro in the lib subdirectory of the IDL distribution. The documentation header should be altered to ...",t:"XMNG_TMPL "},"1482":{i:0.000513298299714254,u:"../Content/Reference Material/X/XMTOOL.htm",a:"The XMTOOL procedure displays a tool for viewing widgets currently being managed by the XMANAGER. Only one instance of the XMTOOL can run at one time. This routine is written in the IDL language. Its source code can be found in the file xmtool.pro in the lib/utilities subdirectory of the IDL ...",t:"XMTOOL "},"1483":{i:0.000396422313558035,u:"../Content/Reference Material/X/XOBJVIEW.htm",a:"The XOBJVIEW procedure is a utility used to quickly and easily view and manipulate IDL Object Graphics on screen. It displays given objects in an IDL widget with toolbar buttons and menus providing functionality for manipulating, printing, and exporting the resulting graphic. The mouse can be used ...",t:"XOBJVIEW "},"1484":{i:0.000244429591124004,u:"../Content/Reference Material/X/XOBJVIEW_ROTATE.htm",a:"XOBJVIEW_ROTATE procedure is used to programmatically rotate the object currently displayed in XOBJVIEW. XOBJVIEW must be called prior to calling XOBJVIEW_ROTATE. This procedure can be used to create animations of object displays. This routine is written in the IDL language. Its source code can be ...",t:"XOBJVIEW_ROTATE "},"1485":{i:0.000244429591124004,u:"../Content/Reference Material/X/XOBJVIEW_WRITE_IMAGE.htm",a:"The XOBJVIEW_WRITE_IMAGE procedure is used to write the object currently displayed in XOBJVIEW to an image file with the specified name and file format. XOBJVIEW must be called prior to calling XOBJVIEW_WRITE_IMAGE. This routine is written in the IDL language. Its source code can be found in the ...",t:"XOBJVIEW_WRITE_IMAGE "},"1486":{i:0.00134816919118604,u:"../Content/Reference Material/X/XPALETTE_Procedure.htm",a:"The XPALETTE procedure is a utility that displays a widget interface that allows interactive creation and modification of color tables using the RGB, CMY, HSV, or HLS color systems. This procedure can interpolate the space between color indices (to create smooth color transitions) or edit individual ...",t:"XPALETTE Procedure"},"1487":{i:0.000366875705816166,u:"../Content/Reference Material/X/XPCOLOR_Procedure.htm",a:"The XPCOLOR procedure is a utility that allows you to adjust the value of the current Direct Graphics plotting color (foreground) using sliders, and store the desired color in the global system variable, !P.COLOR. When XPCOLOR is called from the IDL input command line, the Set Plot Color dialog box ...",t:"XPCOLOR Procedure"},"1488":{i:7.6789836178486E-05,u:"../Content/Reference Material/X/XPLOT3D.htm",a:"The XPLOT3D procedure is a utility for creating and interactively manipulating 3-D plots. This routine is written in the IDL language. Its source code can be found in the file xplot3d.pro in the lib/utilities subdirectory of the IDL distribution. Using XPLOT3D XPLOT3D displays a resizeable top-level ...",t:"XPLOT3D "},"1489":{i:0.000589224596145137,u:"../Content/Reference Material/X/XREGISTERED.htm",a:"The XREGISTERED function returns the number of instances of the widget named as its argument that are registered with XMANAGER in the current IDL session. The registered widget is brought to the front of the desktop unless the NOSHOW keyword is set. If the specified widget is not currently ...",t:"XREGISTERED "},"1490":{i:0.000232858979999772,u:"../Content/Reference Material/X/XROI.htm",a:"The XROI procedure is a utility for interactively defining regions of interest (ROIs), and obtaining geometry and statistical data about these ROIs. This routine is written in the IDL language. Its source code can be found in the file xroi.pro in the lib/utilities subdirectory of the IDL ...",t:"XROI "},"1491":{i:0.00022299040812966,u:"../Content/Reference Material/X/XSQ_TEST.htm",a:"The XSQ_TEST function computes the chi-square goodness-of-fit test between observed frequencies and the expected frequencies of a theoretical distribution. Expected frequencies of magnitude less than 5 are combined with adjacent elements resulting in a reduction of cells used to formulate the ...",t:"XSQ_TEST "},"1492":{i:6.98828078775762E-05,u:"../Content/Reference Material/X/XSURFACE_Procedure.htm",a:"The XSURFACE procedure is a utility that provides a graphical interface to the SURFACE and SHADE_SURF commands. Different controls are provided to change the viewing angle and other plot parameters. The command used to generate the resulting surface plot is shown in a text window. Note that this ...",t:"XSURFACE Procedure"},"1493":{i:0.000403229582227798,u:"../Content/Reference Material/X/XVAREDIT.htm",a:"The XVAREDIT procedure is a utility that provides a widget-based editor for any IDL variable. Use the input fields to change desired values of the variable or array. Click “Accept” to write the new values into the variable. Click “Cancel” to exit XVAREDIT without saving changes. When XVAREDIT runs ...",t:"XVAREDIT "},"1494":{i:0.000318279714609916,u:"../Content/Reference Material/X/XVOLUME.htm",a:"The XVOLUME procedure is a utility for viewing and interactively manipulating volumes and isosurfaces. The utility provides a graphical interface for manipulating the volume orientation, adjusting the color table and opacity, viewing image planes and contours, and adjusting the color, opacity, and ...",t:"XVOLUME "},"1495":{i:0.000168778823488516,u:"../Content/Reference Material/X/XVOLUME_ROTATE.htm",a:"The XVOLUME_ROTATE procedure is used to programmatically rotate the volume currently displayed in XVOLUME. XVOLUME must be called prior to calling XVOLUME_ROTATE. This procedure can be used to create animations of volumes and isosurfaces. This routine is written in the IDL language. Its source code ...",t:"XVOLUME_ROTATE "},"1496":{i:0.000168778823488516,u:"../Content/Reference Material/X/XVOLUME_WRITE_IMAGE.htm",a:"The XVOLUME_WRITE_IMAGE procedure is used to write the volume currently displayed in XVOLUME to an image file with the specified name and file format. XVOLUME must be called prior to calling XVOLUME_WRITE_IMAGE. This routine is written in the IDL language. Its source code can be found in the file ...",t:"XVOLUME_WRITE_IMAGE "},"1497":{i:0.000256691538132089,u:"../Content/Reference Material/X/XYOUTS_Procedure.htm",a:"Please see the TEXT function, which replicates the functionality of this routine and offers an interactive interface. The XYOUTS procedure draws text on the currently-selected Direct Graphics device starting at the designated coordinate. Arguments X , Y , and String can be any combination of scalars ...",t:"XYOUTS Procedure"},"1498":{i:5.50327019655568E-05,u:"../Content/Reference Material/Z/Z_list.htm",a:"Z Routines ",t:"Z Routines"},"1499":{i:0.000583441877132713,u:"../Content/Reference Material/Z/ZLIB_COMPRESS.htm",a:"The ZLIB_COMPRESS function compresses a given input array using the DEFLATE compression algorithm, and returns a byte array containing the compressed data, along with a header and trailer describing the compressed data. The compression is done using the ZLIB library, written by Jean-Loup Gailly and ...",t:"ZLIB_COMPRESS"},"1500":{i:0.000583441877132713,u:"../Content/Reference Material/Z/ZLIB_UNCOMPRESS.htm",a:"The ZLIB_UNCOMPRESS function uncompresses a given input byte array using the DEFLATE compression algorithm, and returns a byte array containing the original uncompressed data. The uncompression is done using the ZLIB library, written by Jean-Loup Gailly and Mark Adler. If you know the dimensions and ...",t:"ZLIB_UNCOMPRESS"},"1501":{i:0.000194527642946791,u:"../Content/Reference Material/Z/ZOOM_Procedure.htm",a:"The ZOOM procedure displays part of an image from the current window enlarged in a new (“zoom”) window. The cursor is used to mark the center of the zoom area, and different zoom factors can be specified interactively. ZOOM only works with color systems. This routine is written in the IDL language. ...",t:"ZOOM Procedure"},"1502":{i:0.000194527642946791,u:"../Content/Reference Material/Z/ZOOM_24_Procedure.htm",a:"The ZOOM_24 procedure displays part of a 24-bit color image from the current window expanded in a new (“zoom”) window, and provides information about cursor location and color values in an auxiliary (“data”) window. The cursor is used to mark the center of the zoom area, and different zoom factors ...",t:"ZOOM_24 Procedure"},"1503":{i:5.50327019655568E-05,u:"../Content/Reference Material/Dot Commands/symbols.htm",a:"Dot Commands This section describes the following commands: ",t:"Dot Commands"},"1504":{i:0.000798099478667113,u:"../Content/Reference Material/Dot Commands/_COMPILE.htm",a:"The .COMPILE command compiles and saves procedures and programs in the same manner as .RUN . If one or more filenames are specified, the procedures and functions contained therein are compiled but not executed . If you enter this command at the Command Line of the workbench and the files are not yet ...",t:".COMPILE "},"1505":{i:0.00010427689604419,u:"../Content/Reference Material/Dot Commands/_CONTINUE.htm",a:"The .CONTINUE command continues execution of a program that has stopped because of an error, a stop statement, or a keyboard interrupt. IDL saves the location of the beginning of the last statement executed before an error. If it is possible to correct the error condition in the interactive mode, ...",t:".CONTINUE "},"1506":{i:5.90583328763187E-05,u:"../Content/Reference Material/Dot Commands/_EDIT.htm",a:"The .EDIT command opens files in IDL Editor windows when called from the Command Line of the workbench. Note that filenames are separated by spaces, not commas. .EDIT is an executive command. Executive commands can only be used at the IDL command prompt, not in programs. Syntax .EDIT File 1 [ File 2 ...",t:".EDIT"},"1507":{i:0.000347458068383859,u:"../Content/Reference Material/Dot Commands/_FULL_RESET_SESSION.htm",a:"The .FULL_RESET_SESSION command does everything .RESET_SESSION does, plus the following: Removes all system routines installed via LINKIMAGE or a DLM. Removes all structure definitions installed via a DLM. Removes all message blocks added by DLMs or by the DEFINE_MSGBLK or DEFINE_MSGBLK_FROM_FILE ...",t:".FULL_RESET_SESSION"},"1508":{i:5.90583328763187E-05,u:"../Content/Reference Material/Dot Commands/_GO.htm",a:".GO The .GO command starts execution at the beginning of a previously-compiled main program. .GO is an executive command. Executive commands can only be used at the IDL command prompt, not in programs. Syntax .GO ",t:".GO"},"1509":{i:5.90583328763187E-05,u:"../Content/Reference Material/Dot Commands/_OUT.htm",a:".OUT The .OUT command continues executing statements in the current program until it returns. .OUT is an executive command. Executive commands can only be used at the IDL command prompt, not in programs. Syntax .OUT ",t:".OUT"},"1510":{i:0.000592680686404096,u:"../Content/Reference Material/Dot Commands/_RESET_SESSION.htm",a:"The .RESET_SESSION command resets much of the state of an IDL session without requiring the user to exit and restart the IDL session. After the reset is complete, the startup file, if one is specified, is run. The command performs the following actions in the reset: Returns current execution point ...",t:".RESET_SESSION"},"1511":{i:0.000444037094609012,u:"../Content/Reference Material/Dot Commands/_RETURN.htm",a:"The .RETURN command continues execution of a program until encountering a RETURN statement. This is convenient for debugging programs since it allows the whole program to run, stopping before returning to the next-higher program level so you can examine local variables. Also see the RETURN command. ...",t:".RETURN "},"1512":{i:0.00042193620470659,u:"../Content/Reference Material/Dot Commands/_RNEW.htm",a:"The .RNEW command compiles and saves procedures and functions in the same manner as .RUN. In addition, all variables in the main program unit, except those in common blocks, are erased. The -T and -L filename switches have the same effect as with .RUN. .RNEW is an executive command. Executive ...",t:".RNEW"},"1513":{i:0.00045476274120117,u:"../Content/Reference Material/Dot Commands/_RUN.htm",a:"The .RUN command compiles procedures, functions, and/or main programs in memory. Main programs are executed immediately. The command can be optionally followed by a list of files to be compiled. Filenames are separated by blanks, tabs, or commas. If no file name is specified, input is accepted from ...",t:".RUN "},"1514":{i:7.30916800663478E-05,u:"../Content/Reference Material/Dot Commands/_SKIP.htm",a:"The .SKIP command skips one or more statements. It is useful for moving past a program statement that caused an error. If the optional argument n is present, it gives the number of statements to skip; otherwise, a single statement is skipped. Note that .SKIP does not execute or evaluate the code it ...",t:".SKIP"},"1515":{i:0.000143015950563314,u:"../Content/Reference Material/Dot Commands/_STEP.htm",a:"The .STEP command executes one or more statements in the current program starting at the current position, stops, and returns control to the interactive mode. This command is useful in debugging programs. The optional argument n indicates the number of statements to execute. If n is omitted, a ...",t:".STEP "},"1516":{i:7.30916800663478E-05,u:"../Content/Reference Material/Dot Commands/_STEPOVER.htm",a:"The .STEPOVER command executes one or more statements in the current program starting at the current position, stops, and returns control to the interactive mode. Unlike .STEP, if .STEPOVER executes a statement that calls another routine, the called routine runs until it ends before control returns ...",t:".STEPOVER "},"1517":{i:6.37361152729951E-05,u:"../Content/Reference Material/Dot Commands/_TRACE.htm",a:".TRACE The .TRACE command continues execution of a program that has stopped because of an error, a stop statement, or a keyboard interrupt. .TRACE is an executive command. Executive commands can only be used at the IDL command prompt, not in programs. Syntax .TRACE ",t:".TRACE "},"1518":{i:5.50327019655568E-05,u:"../Content/Object Classes/ObjectClasses.htm",a:"Object Classes Analysis Object Classes File Format Object Classes Graphics Object Classes Miscellaneous Object Classes Network Object Classes ",t:"Object Classes"},"1519":{i:6.43882667589095E-05,u:"../Content/Object Classes/Analysis/objects_an.htm",a:"Analysis Object Classes This section  describes IDL’s built-in analysis class library. ",t:"Analysis Object Classes"},"1520":{i:0.00144426804712993,u:"../Content/Object Classes/Analysis/IDLanROI.htm",a:"The IDLanROI object class represents a region of interest. The IDLan* naming convention is used for objects in the analysis domain. Regions of interest are described as a set of vertices that may be connected to generate a path or a polygon, or may be treated as separate points. This object may be ...",t:"IDLanROI"},"1521":{i:0.000587933880165302,u:"../Content/Object Classes/Analysis/IDLanROI_Properties.htm",a:"IDLanROI objects have the following properties in addition to properties inherited from any superclasses. Properties with the word “Yes” in the “Get” column of the property table can be retrieved via IDLanROI::GetProperty . Properties with the word “Yes” in the “Init” column of the property table ...",t:"IDLanROI Properties"},"1522":{i:0.000238048145737437,u:"../Content/Object Classes/Analysis/IDLanROI__AppendData.htm",a:"The IDL anROI::AppendData procedure method appends vertices to the region. Syntax Obj-\u003e [ IDLanROI ::]AppendData, X [, Y ] [, Z ] [, XRANGE = variable ] [, YRANGE = variable ] [, ZRANGE = variable ] Arguments X A vector providing the X components of the vertices to be appended. If the Y and Z ...",t:"IDLanROI::AppendData"},"1523":{i:0.000136876052638943,u:"../Content/Object Classes/Analysis/IDLanROI__Cleanup.htm",a:"IDLanROI::Cleanup The IDLanROI::Cleanup procedure method performs all cleanup for a region of interest object. Syntax Obj -\u003eCleanup or Obj-\u003e [ IDLanROI ::]Cleanup or OBJ_DESTROY, Obj Arguments None. Keywords None. Version History 5.3 Introduced ",t:"IDLanROI::Cleanup"},"1524":{i:0.000238048145737437,u:"../Content/Object Classes/Analysis/IDLanROI__ComputeGeometr.htm",a:"The IDLanROI::ComputeGeometry function method computes the geometrical values for area, perimeter, and/or centroid of the region. Syntax Result = Obj-\u003e [ IDLanROI ::]ComputeGeometry( [, AREA = variable ] [, CENTROID = variable ] [, PERIMETER = variable ] [, SPATIAL_OFFSET = vector ] [, SPATIAL_SCALE ...",t:"IDLanROI::ComputeGeometry"},"1525":{i:0.000238048145737437,u:"../Content/Object Classes/Analysis/IDLanROI__ComputeMask.htm",a:"The IDLanROI::ComputeMask function method prepares a two-dimensional mask for the region. Syntax Result = Obj-\u003e [ IDLanROI ::]ComputeMask( [, INITIALIZE ={ –1 | 0 | 1 }] [, DIMENSIONS = [xdim , ydim] ] | [, MASK_IN = array ] [, LOCATION = [x , y [, z ] ] ] [, MASK_RULE ={ 0 | 1 | 2 }] [, ...",t:"IDLanROI::ComputeMask"},"1526":{i:0.000136876052638943,u:"../Content/Object Classes/Analysis/IDLanROI__ContainsPoints.htm",a:"The IDL anROI::ContainsPoints function method determines whether the given data coordinates are contained within the closed polygon region. Syntax Result = Obj-\u003e [ IDLanROI ::]ContainsPoints( X [, Y [, Z ]] ) Return Value The return value is a vector of values, one per provided point, indicating ...",t:"IDLanROI::ContainsPoints"},"1527":{i:0.000220168410814477,u:"../Content/Object Classes/Analysis/IDLanROI__GetProperty.htm",a:"The IDL anROI::GetProperty procedure method retrieves the value of a property or group of properties for the region. Syntax Obj-\u003e [ IDLanROI ::]GetProperty [, PROPERTY=variable ] Arguments None. Keywords Any property listed under IDLanROI Properties that contains the word “Yes” in the “Get” column ...",t:"IDLanROI::GetProperty"},"1528":{i:0.000220168410814477,u:"../Content/Object Classes/Analysis/IDLanROI__Init.htm",a:"The IDL anROI::Init function method initializes a region of interest object. Init methods are special life cycle methods, and as such cannot be called outside the context of object creation. This means that in most cases, you cannot call the Init method directly. There is one exception to this rule: ...",t:"IDLanROI::Init"},"1529":{i:0.000238048145737437,u:"../Content/Object Classes/Analysis/IDLanROI__RemoveData.htm",a:"The IDL anROI::RemoveData procedure method removes vertices from the region. Syntax Obj-\u003e [ IDLanROI ::]RemoveData[, COUNT = vertices ] [, START = index ] [, XRANGE = variable ] [, YRANGE = variable ] [, ZRANGE = variable ] Arguments None. Keywords COUNT Set this keyword to the number of vertices to ...",t:"IDLanROI::RemoveData"},"1530":{i:0.000307214121180296,u:"../Content/Object Classes/Analysis/IDLanROI__ReplaceData.htm",a:"The IDL anROI::ReplaceData procedure method replaces vertices in the region with alternate values. The number of replacement values need not match the number of values being replaced. Setting the DATA property is equivalent to calling ReplaceData when START=0 and FINISH= nVerts -1 (where nVerts is ...",t:"IDLanROI::ReplaceData"},"1531":{i:0.000238048145737437,u:"../Content/Object Classes/Analysis/IDLanROI__Rotate.htm",a:"The IDL anROI::Rotate procedure method modifies the vertices for the region by applying a rotation. Syntax Obj-\u003e [ IDLanROI ::]Rotate, Axis , Angle [, CENTER = [x, y[, z]] ] Arguments Axis A three-element vector of the form [ x , y , z ] describing the axis about which the region is to be rotated. ...",t:"IDLanROI::Rotate"},"1532":{i:0.000136876052638943,u:"../Content/Object Classes/Analysis/IDLanROI__Scale.htm",a:"The IDL anROI::Scale procedure method modifies the vertices for the region by applying a scale. Syntax Obj-\u003e [ IDLanROI ::]Scale, Sx [, Sy [, Sz ]] Arguments Sx The X scale factor. If the Sy and Sz arguments are not specified, Sx must be a two or three-element vector, in which case Sx [0] represents ...",t:"IDLanROI::Scale"},"1533":{i:0.000220168410814477,u:"../Content/Object Classes/Analysis/IDLanROI__SetProperty.htm",a:"The IDL anROI::SetProperty procedure method sets the value of a property or group of properties for the region. Syntax Obj-\u003e [ IDLanROI ::]SetProperty Arguments None. Keywords Any property listed under IDLanROI Properties that contains the word “Yes” in the “Set” column of the properties table can ...",t:"IDLanROI::SetProperty"},"1534":{i:0.000136876052638943,u:"../Content/Object Classes/Analysis/IDLanROI__Translate.htm",a:"The IDL anROI::Translate procedure method modifies the vertices for the region by applying a translation. Syntax Obj-\u003e [ IDLanROI ::]Translate, Tx [, Ty [, Tz ]] Arguments Tx The X translation factor. If the Ty and Tz arguments are not specified, Tx must be a two or three-element vector, in which ...",t:"IDLanROI::Translate"},"1535":{i:0.00100461295593671,u:"../Content/Object Classes/Analysis/IDLanROIGroup.htm",a:"The IDL anROIGroup object class is an analytical representation of a group of regions of interest. Superclasses IDL_Container Creation See IDLanROIGroup::Init . Properties Objects of this class have the following properties. See IDLanROIGroup Properties for details on individual properties. ALL ...",t:"IDLanROIGroup"},"1536":{i:0.000340567410015491,u:"../Content/Object Classes/Analysis/IDLanROIGroup_Properties.htm",a:"IDLanROIGroup objects have the following properties in addition to properties inherited from any superclasses. Properties with the word “Yes” in the “Get” column of the property table can be retrieved via IDLanROIGroup::GetProperty . Properties with the word “Yes” in the “Init” column of the ...",t:"IDLanROIGroup Properties"},"1537":{i:0.000160504929481948,u:"../Content/Object Classes/Analysis/IDLanROIGroup__Add.htm",a:"The IDL anROIGroup::Add procedure method adds a region to the region group. Only objects of the IDLanROI class may be added to the group. The regions in the group must all be of the same type: all points, all paths, or all polygons. Syntax Obj-\u003e [ IDLanROIGroup ::]Add, ROI Arguments ROI A reference ...",t:"IDLanROIGroup::Add"},"1538":{i:0.000126193193045559,u:"../Content/Object Classes/Analysis/IDLanROIGroup__Cleanup.htm",a:"IDLanROIGroup::Cleanup The IDL anROIGroup::Cleanup procedure method performs all cleanup for a region of interest group object. Syntax Obj -\u003eCleanup or Obj-\u003e [ IDLanROIGroup ::]Cleanup or OBJ_DESTROY, Obj Arguments None. Keywords None. Version History 5.3 Introduced ",t:"IDLanROIGroup::Cleanup"},});