define({"1389":{i:0.000368055828327796,u:"../Content/Reference Material/U/UNIQ.htm",a:"The UNIQ function returns the subscripts of the unique elements in an array. Note that repeated elements must be adjacent in order to be found. This routine is intended to be used with the SORT function: see the examples below. This function was inspired by the UNIX uniq(1) command. This routine is ...",t:"UNIQ "},"1390":{i:6.70460321045149E-05,u:"../Content/Reference Material/U/UNSHARP_MASK.htm",a:"The UNSHARP_MASK function performs an unsharp-mask sharpening filter on a two-dimensional array or a TrueColor image. For TrueColor images the unsharp mask is applied to each channel. The unsharp mask algorithm works by enhancing the contrast between neighboring pixels in an image, and is widely ...",t:"UNSHARP_MASK"},"1391":{i:0.000138610660648534,u:"../Content/Reference Material/U/USERSYM_Procedure.htm",a:"The USERSYM procedure is used to define the plotting symbol that marks points when the PSYM keyword symbol is set to plus or minus 8. Symbols can be drawn with vectors or can be filled. Symbols can be of any size and can have up to 49 vertices. The symbol you define can be drawn using lines or it ...",t:"USERSYM Procedure"},"1392":{i:5.50327019655568E-05,u:"../Content/Reference Material/V/V_list.htm",a:"V Routines ",t:"V Routines"},"1393":{i:0.000368202697321914,u:"../Content/Reference Material/V/VALUE_LOCATE.htm",a:"The VALUE_LOCATE function finds the intervals within a given monotonic vector that brackets a given set of one or more search values. This function is useful for interpolation and table-lookup, and is an adaptation of the locate() routine in Numerical Recipes. VALUE_LOCATE uses the bisection method ...",t:"VALUE_LOCATE "},"1394":{i:0.000357433692525937,u:"../Content/Reference Material/V/VARIANCE.htm",a:"The VARIANCE function uses IDL\u0027s MOMENT function to compute the statistical variance of an n -element vector. Examples ; Define the n-element vector of sample data: x = [1, 1, 1, 2, 5] ; Compute the variance: result = VARIANCE(x) PRINT, result IDL prints: 3.00000 Syntax Result = VARIANCE( X [, ...",t:"VARIANCE"},"1395":{i:0.000176413674580057,u:"../Content/Reference Material/V/VECTOR.htm",a:"The VECTOR function draws a plot of either vectors or wind barbs. The vectors or wind barbs are input using two arrays that specify the horizontal and vertical components (in arbitrary units). You can also specify the X and Y locations for the vectors or wind barbs. The LEGEND function may be used ...",t:"VECTOR"},"1396":{i:0.000372252309330832,u:"../Content/Reference Material/V/VECTOR_FIELD.htm",a:"The VECTOR_FIELD procedure is used to place colored, oriented vectors of specified length at each vertex in an input vertex array. The output can be sent directly to an IDLgrPolyline object. The generated display is generally referred to as a hedgehog display and is used to convey various aspects of ...",t:"VECTOR_FIELD "},"1397":{i:0.000158990459103721,u:"../Content/Reference Material/V/VEL_Procedure.htm",a:"The VEL procedure draws a velocity (flow) field with arrows following the field proportional in length to the field strength. Arrows are composed of a number of small segments that follow the streamlines. This routine is written in the IDL language. Its source code can be found in the file vel.pro ...",t:"VEL Procedure"},"1398":{i:0.000174104287223541,u:"../Content/Reference Material/V/VELOVECT_Procedure.htm",a:"The VELOVECT procedure produces a two-dimensional velocity field plot. A directed arrow is drawn at each point showing the direction and magnitude of the field. This routine is written in the IDL language. Its source code can be found in the file velovect.pro in the lib subdirectory of the IDL ...",t:"VELOVECT Procedure"},"1399":{i:0.00131848101978967,u:"../Content/Reference Material/V/VERT_T3D.htm",a:"The VERT_T3D function transforms a 3-D array by a 4x4 transformation matrix. The 3-D points are typically an array of polygon vertices that were generated by SHADE_VOLUME or MESH_OBJ. This routine is written in the IDL language. Its source code can be found in the file vert_t3d.pro in the lib ...",t:"VERT_T3D "},"1400":{i:0.000113360458696327,u:"../Content/Reference Material/V/VOIGT.htm",a:"The VOIGT function returns the value of the classical Voigt function, H( a , u ), defined in terms of the Voigt damping parameter a and the frequency offset u : The dimensionless frequency offset u and the damping parameter a are determined by: where ν 0 is the line center frequency and the Doppler ...",t:"VOIGT "},"1401":{i:0.000154134836017159,u:"../Content/Reference Material/V/Volume.htm",a:"The VOLUME function displays a  visual representation of a three-dimensional array of data. Example The following lines create the volume shown above. ; Load the MRI head data. file = FILEPATH(\u0027head.dat\u0027, SUBDIRECTORY = [\u0027examples\u0027, \u0027data\u0027]) data = READ_BINARY(file, DATA_DIMS = [80, 100, 57])  ; ...",t:"VOLUME"},"1402":{i:5.52317565356281E-05,u:"../Content/Reference Material/V/VORONOI.htm",a:"The VORONOI procedure computes the Voronoi polygon of a point within an irregular grid of points, given the Delaunay triangulation. The Voronoi polygon of a point contains the region closer to that point than to any other point. For interior points, the polygon is constructed by connecting the ...",t:"VORONOI "},"1403":{i:0.000149143028912191,u:"../Content/Reference Material/V/VOXEL_PROJ.htm",a:"The VOXEL_PROJ function generates visualizations of volumetric data by computing 2-D projections of a colored, semi-transparent volume. Parallel rays from any given direction are cast through the volume, onto the viewing plane. User-selected colors and opacities can be assigned to arbitrary data ...",t:"VOXEL_PROJ "},"1404":{i:5.50327019655568E-05,u:"../Content/Reference Material/W/W_list.htm",a:"W Routines ",t:"W Routines"},"1405":{i:0.000182381176389514,u:"../Content/Reference Material/W/WAIT.htm",a:"The WAIT procedure suspends execution of an IDL program for a specified period. Note that because of other activity on the system, the duration of program suspension may be longer than requested. Examples To make an IDL program suspend execution for about five and one half seconds, use the command: ...",t:"WAIT "},"1406":{i:0.000176248482630217,u:"../Content/Reference Material/W/WARP_TRI.htm",a:"The WARP_TRI function returns an image array with a specified geometric correction applied. Images are warped using control (tie) points such that locations ( Xi, Yi ) are shifted to ( Xo , Yo ). The irregular grid defined by ( Xo, Yo ) is triangulated using TRIANGULATE. Then the surfaces defined by ...",t:"WARP_TRI "},"1407":{i:0.000370978903235253,u:"../Content/Reference Material/W/WATERSHED.htm",a:"The WATERSHED function applies the morphological watershed operator to a grayscale image. This operator segments images into watershed regions and their boundaries. Considering the gray scale image as a surface, each local minimum can be thought of as the point to which water falling on the ...",t:"WATERSHED "},"1408":{i:0.000107272102807374,u:"../Content/Reference Material/W/WDELETE_Procedure.htm",a:"The WDELETE procedure deletes Direct Graphics windows. Examples Create IDL graphics window number 5 by entering: WINDOW, 5 Delete window 5 by entering: WDELETE, 5 Syntax WDELETE [, Window_Index [, ... ]] Arguments Window_Index A list of one or more window indices to delete. If this argument is not ...",t:"WDELETE Procedure"},"1409":{i:6.98828078775762E-05,u:"../Content/Reference Material/W/WF_DRAW_Procedure.htm",a:"The WF_DRAW procedure draws weather fronts of various types using parametric spline interpolation to smooth the lines. WF_DRAW uses the POLYFILL routine to make the annotations on the front lines. This routine is written in the IDL language. Its source code can be found in the file wf_draw.pro in ...",t:"WF_DRAW Procedure"},"1410":{i:0.00146536270183273,u:"../Content/Reference Material/W/WHERE.htm",a:"The WHERE function returns a vector that contains the one-dimensional subscripts of the nonzero elements of Array_Expression . The length of the resulting vector is equal to the number of nonzero elements in Array_Expression . Frequently the result of WHERE is used as a vector subscript to select ...",t:"WHERE"},"1411":{i:0.000250250490269886,u:"../Content/Reference Material/W/WHILE___DO.htm",a:"WHILE...DO loops are used to execute a statement repeatedly while a condition remains true. The WHILE...DO statement is similar to the REPEAT...UNTIL statement except that the condition is checked prior to the initial execution of the statement. See Definition of True and False for details on how ...",t:"WHILE...DO "},"1412":{i:0.00109352224336564,u:"../Content/Reference Material/W/WIDGET_BASE.htm",a:"The WIDGET_BASE function is used to create base widgets. Base widgets serve as containers for other widgets, including other base widgets. Base widgets can optionally contain scroll bars that allow the base to be larger than the space on the screen. In this case, only part of the base is visible at ...",t:"WIDGET_BASE "},"1413":{i:0.000775306849310545,u:"../Content/Reference Material/W/WIDGET_BUTTON.htm",a:"The WIDGET_BUTTON function creates button widgets. A button widget is a pushbutton that is activated by moving the mouse cursor over the widget button and pressing a mouse button. Exclusive And Non-Exclusive Bases Buttons placed into exclusive or non-exclusive bases (created via the EXCLUSIVE or ...",t:"WIDGET_BUTTON "},"1414":{i:0.000257090042787008,u:"../Content/Reference Material/W/WIDGET_COMBOBOX.htm",a:"The WIDGET_COMBOBOX function creates combobox widgets, which are similar to droplist widgets. The combobox display a single entry from a list of options. The main difference between the combobox widget and the droplist widget is that the combobox widget can be created in such a way that the text ...",t:"WIDGET_COMBOBOX "},"1415":{i:0.00153579866935773,u:"../Content/Reference Material/W/WIDGET_CONTROL.htm",a:"The WIDGET_CONTROL procedure is used to realize, manage, and destroy widget hierarchies. It is often used to change the default behavior or appearance of previously-realized widgets. Syntax WIDGET_CONTROL [, Widget_ID ] Keywords that apply to all widgets: [, BAD_ID = variable ] [, / CLEAR_EVENTS ] ...",t:"WIDGET_CONTROL "},"1416":{i:0.00046973355256989,u:"../Content/Reference Material/W/WIDGET_DISPLAYCONTEXTMEN.htm",a:"The WIDGET_DISPLAYCONTEXTMENU procedure displays a context-sensitive menu (also known as a pop-up or shortcut menu). Context-sensitive menus appear when the user clicks the right mouse button over a widget for which a context menu is defined. Because the widget programmer must explicitly detect the ...",t:"WIDGET_DISPLAYCONTEXTMENU "},"1417":{i:0.000748829527523261,u:"../Content/Reference Material/W/WIDGET_DRAW.htm",a:"The WIDGET_DRAW function is used to create draw widgets. Draw widgets are rectangular areas that IDL treats as standard graphics windows. Draw widgets can use either IDL Direct graphics or IDL Object graphics, depending on the value of the GRAPHICS_LEVEL keyword. Any graphical output can be directed ...",t:"WIDGET_DRAW "},"1418":{i:0.000472551724806521,u:"../Content/Reference Material/W/WIDGET_DROPLIST.htm",a:"The WIDGET_DROPLIST function creates “droplist” widgets, which display a single entry from a list of options. A droplist widget displays a text field and an arrow button. Selecting either the text field or the button reveals a list of options from which to choose. When the user selects a new option ...",t:"WIDGET_DROPLIST"},"1419":{i:0.000128342561754174,u:"../Content/Reference Material/W/WIDGET_EVENT.htm",a:"The WIDGET_EVENT function returns events for the widget hierarchy rooted at Widget_ID . Widgets communicate information by generating events. Events are generated when a button is pressed, a slider position is changed, and so forth. Widget applications should use the XMANAGER procedure in preference ...",t:"WIDGET_EVENT "},"1420":{i:0.00129707686526344,u:"../Content/Reference Material/W/WIDGET_INFO.htm",a:"The WIDGET_INFO function is used to obtain information about the widget subsystem and individual widgets. The specific area for which information is desired is selected by setting the appropriate keyword. Syntax Result = WIDGET_INFO( [ Widget_ID ] ) Keywords that apply to all widgets: [, / ACTIVE ] ...",t:"WIDGET_INFO "},"1421":{i:0.000195663065824226,u:"../Content/Reference Material/W/WIDGET_LABEL.htm",a:"The WIDGET_LABEL function is used to create label widgets. Label widgets display static text. They are similar to single-line text widgets but are optimized for small labeling purposes. If you need to display more than a single line of text, or if the text must be editable by the user, use a text ...",t:"WIDGET_LABEL "},"1422":{i:0.000442334825271233,u:"../Content/Reference Material/W/WIDGET_LIST.htm",a:"The WIDGET_LIST function is used to create list widgets. A list widget offers the user a list of text elements from which to choose. List widgets have a vertical scrollbar when the number of list items exceeds the height specified by the SCR_YSIZE keyword. The user can select an item by pointing at ...",t:"WIDGET_LIST "},"1423":{i:0.00205610328535876,u:"../Content/Reference Material/W/WIDGET_PROPERTYSHEET.htm",a:"The WIDGET_PROPERTYSHEET function creates a property sheet widget, which exposes the properties of an IDL object subclassed from the IDLitComponent class in a graphical interface. The property sheet widget must be a child of a base or tab widget, and it cannot be the parent of any other widget. The ...",t:"WIDGET_PROPERTYSHEET"},"1424":{i:0.000195899418676082,u:"../Content/Reference Material/W/WIDGET_SLIDER.htm",a:"The WIDGET_SLIDER function is used to create slider widgets. Slider widgets are used to indicate an integer value from a range of possible values. They consist of a rectangular region which represents the possible range of values. Inside this region is a sliding pointer that displays the current ...",t:"WIDGET_SLIDER "},"1425":{i:0.000368403241800556,u:"../Content/Reference Material/W/WIDGET_TAB.htm",a:"The WIDGET_TAB function is used to create a tab widget. Tab widgets present a display area on which different pages (base widgets and their children) can be displayed by selecting the appropriate tab — that is, selecting a tab displays the contents of a specified base widget within the tab widget. ...",t:"WIDGET_TAB "},"1426":{i:0.000390725001947283,u:"../Content/Reference Material/W/WIDGET_TABLE.htm",a:"The WIDGET_TABLE function creates table widgets. Table widgets are used to display two-dimensional data in tabular format. Individual table cells (or ranges of cells) can be selected for editing by the user. They can have one or more rows and columns, and automatically create scroll bars when ...",t:"WIDGET_TABLE "},"1427":{i:0.000302762914928332,u:"../Content/Reference Material/W/WIDGET_TEXT.htm",a:"The WIDGET_TEXT function creates text widgets. Text widgets display text and optionally get textual input from the user. They can have one or more lines, and can optionally contain scroll bars to allow viewing more text than can otherwise be displayed on the screen. Syntax Result = WIDGET_TEXT( ...",t:"WIDGET_TEXT "},"1428":{i:0.000328593356896645,u:"../Content/Reference Material/W/WIDGET_TREE.htm",a:"The WIDGET_TREE function is used to create and populate a tree widget. The tree widget presents a hierarchical view that can be used to organize a wide variety of data structures and information. The WIDGET_TREE function performs two separate tasks: creating the tree widget and populating the tree ...",t:"WIDGET_TREE "},"1429":{i:0.000127504425985857,u:"../Content/Reference Material/W/WIDGET_TREE_MOVE.htm",a:"The WIDGET_TREE_MOVE procedure copies and moves tree widget nodes from one tree to another or within the same tree. WIDGET_TREE_MOVE has two parameters that specify the widget IDs of the nodes to copy and the folder (or root) in which to move (or copy) them. Each of the nodes in the first parameter ...",t:"WIDGET_TREE_MOVE"},"1430":{i:0.000425218558872307,u:"../Content/Reference Material/W/WIDGET_WINDOW.htm",a:"The WIDGET_WINDOW function creates a graphics widget. Example The following lines create a simple widget application. For a more complete example, see the end of this topic. ; Create the widgets. wBase = WIDGET_BASE(/COLUMN) wDraw = WIDGET_WINDOW(wBase,  X_SCROLL_SIZE=400, Y_SCROLL_SIZE=400) ...",t:"WIDGET_WINDOW"},"1431":{i:0.000333523044897046,u:"../Content/Reference Material/W/WIENER_FILTER.htm",a:"The WIENER_FILTER function reduces degradation and noise in an image by statistically comparing it with an undegraded image. This method assumes that images and noise are random variables and the objective is to minimize the mean square error between the image ƒ and an estimate. The mean square ...",t:"WIENER_FILTER"},"1432":{i:0.00180159091404366,u:"../Content/Reference Material/W/WINDOW.htm",a:"The WINDOW function creates an empty graphics window. The WINDOW function is useful if you want to set up a graphics area, perhaps add some text or polygon annotations, and then later add graphics. Brief Example The following lines create the window shown at the top of this topic. ; Create the ...",t:"WINDOW"},"1433":{i:0.000105859881090647,u:"../Content/Reference Material/W/WINDOW_Procedure.htm",a:"Please see the WINDOW function, which replicates the functionality of this routine and offers an interactive interface. The WINDOW procedure creates a window for a Direct Graphics window display of graphics or text. It is only necessary to use WINDOW if more than one simultaneous window or a special ...",t:"WINDOW Procedure"},"1434":{i:0.000898206057880611,u:"../Content/Reference Material/W/WRITE_BMP.htm",a:"The WRITE_BMP procedure writes an image and its color table vectors to a Microsoft Windows Version 3 device independent bitmap file (.BMP). WRITE_BMP does not handle 1-bit-images or compressed images. This routine is written in the IDL language. Its source code can be found in the file write_bmp.pro ...",t:"WRITE_BMP "},"1435":{i:0.000159255301208469,u:"../Content/Reference Material/W/WRITE_CSV.htm",a:"The WRITE_CSV procedure writes data to a “comma-separated value” (comma-delimited) text file consisting of columns of data. This routine writes CSV files consisting of one or more optional table header lines, followed by one optional column header line, followed by columnar data, with commas ...",t:"WRITE_CSV"},"1436":{i:0.000444446239613029,u:"../Content/Reference Material/W/WRITE_GIF.htm",a:"The WRITE_GIF procedure writes an image and its color table vectors to a Graphics Interchange Format (GIF) file. WRITE_GIF produces 8-bit non-interlaced GIF files. This routine is written in the IDL language. Its source code can be found in the file write_gif.pro in the lib subdirectory of the IDL ...",t:"WRITE_GIF"},"1437":{i:0.000197381590941896,u:"../Content/Reference Material/W/WRITE_IMAGE.htm",a:"The WRITE_IMAGE procedure writes an image and its color table vectors, if any, to a file of a specified type. WRITE_IMAGE can write most types of image files supported by IDL. Syntax WRITE_IMAGE, Filename , Format , Data [, Red , Green , Blue ] [, / APPEND ] Arguments Filename A scalar string ...",t:"WRITE_IMAGE"},"1438":{i:0.000584548929427874,u:"../Content/Reference Material/W/WRITE_JPEG.htm",a:"The WRITE_JPEG procedure writes compressed images to files. JPEG (Joint Photographic Experts Group) is a standardized compression method for full-color and gray-scale images. This procedure is based in part on the work of the Independent JPEG Group. As the Independent JPEG Group states, JPEG is ...",t:"WRITE_JPEG "},"1439":{i:0.000137634577162537,u:"../Content/Reference Material/W/WRITE_JPEG2000.htm",a:"The WRITE_JPEG2000 procedure writes image data into a JPEG2000 file. This procedure is a wrapper around the IDLffJPEG2000 object interface that presents JPEG2000 image writing in a familiar way to users of the WRITE_* image routines. However this procedure is not as efficient as the object interface ...",t:"WRITE_JPEG2000"},"1440":{i:6.15518474307913E-05,u:"../Content/Reference Material/W/WRITE_NRIF.htm",a:"The WRITE_NRIF procedure writes an image and its color table vectors to an NCAR Raster Interchange Format (NRIF) rasterfile. WRITE_NRIF only writes 8- or 24-bit deep rasterfiles of types “Indexed Color” (8-bit) and “Direct Color integrated” (24-bit). The color map is included only for 8-bit files. ...",t:"WRITE_NRIF "},"1441":{i:0.000234134022223679,u:"../Content/Reference Material/W/WRITE_PICT.htm",a:"The WRITE_PICT procedure writes an image and its color table vectors to a PICT (version 2) format image file. The PICT format is used by Apple Macintosh computers. WRITE_PICT creates 8-bit images. This routine is written in the IDL language. Its source code can be found in the file write_pict.pro in ...",t:"WRITE_PICT "},"1442":{i:0.000340630492536558,u:"../Content/Reference Material/W/WRITE_PNG.htm",a:"The WRITE_PNG procedure writes a 2-D or 3-D IDL variable into a Portable Network Graphics (PNG) file. The data in the file is stored using lossless compression with either 8 or 16 data bits per channel, based on the input IDL variable type. 3-D IDL variables must have the number of channels as their ...",t:"WRITE_PNG "},"1443":{i:0.000238701556198908,u:"../Content/Reference Material/W/WRITE_PPM.htm",a:"The WRITE_PPM procedure writes an image to a PPM (TrueColor) or PGM (gray scale) file. This routine is written in the IDL language. Its source code can be found in the file write_ppm.pro in the lib subdirectory of the IDL distribution. WRITE_PPM only writes 8-bit deep PGM/PPM files of the standard ...",t:"WRITE_PPM "},"1444":{i:0.000352764634779707,u:"../Content/Reference Material/W/WRITE_SPR.htm",a:"The WRITE_SPR procedure writes a row-indexed sparse array structure to a specified file. Row-indexed sparse arrays are created using the SPRSIN function. Examples ; Create an array: A = [[3.,0., 1., 0., 0.],$ [0.,4., 0., 0., 0.],$ [0.,7., 5., 9., 0.],$ [0.,0., 0., 0., 2.],$ [0.,0., 0., 6., 5.]]  ; ...",t:"WRITE_SPR "},"1445":{i:0.000326169637500489,u:"../Content/Reference Material/W/WRITE_SRF.htm",a:"The WRITE_SRF procedure writes an image and its color table vectors to a Sun Raster File (SRF). WRITE_SRF only writes 32-, 24-, and 8-bit-deep rasterfiles of type RT_STANDARD. Use the UNIX command rasfilter8to1 to convert these files to 1-bit deep files. See the file /usr/include/rasterfile.h for ...",t:"WRITE_SRF "},"1446":{i:0.000410293669563345,u:"../Content/Reference Material/W/WRITE_SYLK.htm",a:"The WRITE_SYLK function writes the contents of an IDL variable to a SYLK (Symbolic Link) format spreadsheet data file. SYLK files can be read by common spreadsheet applications like Microsoft Excel. This routine writes only numeric and string SYLK data. It cannot handle spreadsheet and cell ...",t:"WRITE_SYLK "},"1447":{i:0.000282536971250042,u:"../Content/Reference Material/W/WRITE_TIFF.htm",a:"The WRITE_TIFF procedure can write TIFF files with one or more channels, where each channel can contain 1, 4, 8, 16, or 32-bit integer pixels, or floating-point values. If you create a TIFF file larger than 4 GB, IDL automatically creates a file with the correct BigTIFF header. However, if you ...",t:"WRITE_TIFF "},"1448":{i:0.00035081484806342,u:"../Content/Reference Material/W/WRITE_VIDEO.htm",a:"WRITE_VIDEO is a wrapper for IDLffVideoWrite . This function provides a way to easily write video and/or audio streams to a video file. If you are writing both video and audio  to the same file, you must define both streams  before any data can be written. Frame counts may vary slightly depending on ...",t:"WRITE_VIDEO"},"1449":{i:6.15518474307913E-05,u:"../Content/Reference Material/W/WRITE_WAV.htm",a:"The WRITE_WAV procedure writes the audio stream to the named .WAV file. Syntax WRITE_WAV , Filename , Data , Rate Arguments Filename A scalar string containing the full pathname of the .WAV file to write. Data The array to write into the new .WAV file. The array can be a one- or two-dimensional ...",t:"WRITE_WAV "},"1450":{i:0.000410293669563345,u:"../Content/Reference Material/W/WRITE_WAVE.htm",a:"The WRITE_WAVE procedure writes a three dimensional IDL array to a .wave or .bwave file for use with the Wavefront Advanced Data Visualizer. Note that this routine only writes one scalar field for each Wavefront file that it creates. This routine is written in the IDL language. Its source code can ...",t:"WRITE_WAVE "},"1451":{i:0.000841981342064022,u:"../Content/Reference Material/W/WRITEU.htm",a:"The WRITEU procedure writes unformatted binary data from an expression into a file. This procedure performs a direct transfer with no processing of any kind being done to the data. Examples ; Create some data to store in a file: D = BYTSCL(DIST(200)) ; Open a new file for writing as IDL file unit ...",t:"WRITEU "},"1452":{i:8.43419471391142E-05,u:"../Content/Reference Material/W/WSET_Procedure.htm",a:"The WSET procedure selects the current Direct Graphics window. Most IDL graphics routines do not explicitly require the IDL window to be specified. Instead, they use the window known as the current window. The window index number of the current window is contained in the read-only system variable ...",t:"WSET Procedure"},"1453":{i:0.000267548304033045,u:"../Content/Reference Material/W/WSHOW_Procedure.htm",a:"The WSHOW procedure exposes or hides the designated Direct Graphics window. Examples To bring IDL windw number 0 to the front, enter: WSHOW, 0 Syntax WSHOW [, Window_Index [, Show ]] [, / ICONIC ] Arguments Window_Index The window index of the window to be hidden or exposed. If this argument is not ...",t:"WSHOW Procedure"},"1454":{i:0.000417735237211728,u:"../Content/Reference Material/W/WTN.htm",a:"The WTN function returns a multi-dimensional discrete wavelet transform of the input array A . The transform is based on a Daubechies wavelet filter. WTN is based on the routine wtn described in section 13.10 of Numerical Recipes in C: The Art of Scientific Computing (Second Edition), published by ...",t:"WTN "},"1455":{i:0.000237334078636714,u:"../Content/Reference Material/W/WV_APPLET.htm",a:"The WV_APPLET procedure runs the IDL Wavelet Toolkit graphical user interface. Examples WV_APPLET, TOOLS=[\u0027Renormalize\u0027,\u0027My Tool\u0027] The above statement will start up the Wavelet Toolkit, and add the user tools \u0027 Renormalize \u0027 and \u0027 My Tool \u0027 to the Tools menu. When these are selected the actual ...",t:"WV_APPLET"},"1456":{i:0.000558330833118843,u:"../Content/Reference Material/W/WV_CWT.htm",a:"The WV_CWT function returns the one-dimensional continuous wavelet transform of the input array. The transform is done using a user-inputted wavelet function. Example ; Assume we have monthly random data. n = 500 dt = 1d/12  ; time sampling seed = 999 data = RANDOMN(seed, n) time = 1960 + ...",t:"WV_CWT"},"1457":{i:0.000121353360730528,u:"../Content/Reference Material/W/WV_CW_WAVELET.htm",a:"The WV_CW_WAVELET function is a compound widget that lets the user select and display wavelet functions. WV_CW_WAVELET is accessible from the Visualize Menu of WV_APPLET. Syntax Result = WV_CW_WAVELET( [ Parent ] [, / DISCRETE ] [, / NO_COLOR ] [, / NO_DRAW_WINDOW ] [, TITLE = string ] [, UNAME = ...",t:"WV_CW_WAVELET"},"1458":{i:0.000108511459850436,u:"../Content/Reference Material/W/WV_DENOISE.htm",a:"The WV_DENOISE function uses the wavelet transform to filter (or de-noise) a multi-dimensional array. WV_DENOISE computes the discrete wavelet transform of Array , and then discards wavelet coefficients smaller than a certain threshold. WV_DENOISE then computes the inverse wavelet transform on the ...",t:"WV_DENOISE"},"1459":{i:0.000595297426569235,u:"../Content/Reference Material/W/WV_DWT.htm",a:"The WV_DWT function returns the multi-dimensional discrete wavelet transform of the input Array . The transform is done by WV_PWT using a user-inputted wavelet filter. The length of each dimension of Array must be either a power of two (2), or must be less than four (4). The transform is not ...",t:"WV_DWT"},"1460":{i:0.000177683163464211,u:"../Content/Reference Material/W/WV_FN_COIFLET.htm",a:"The WV_FN_COIFLET function constructs wavelet coefficients for the coiflet wavelet function. Syntax Result = WV_FN_COIFLET( [ Order , Scaling , Wavelet , Ioff , Joff ] ) Return Value The returned value of this function is an anonymous structure of information about the particular wavelet. Tag Type ...",t:"WV_FN_COIFLET"},"1461":{i:0.000177683163464211,u:"../Content/Reference Material/W/WV_FN_DAUBECHIES.htm",a:"The WV_FN_DAUBECHIES function constructs wavelet coefficients for the Daubechies wavelet function. Syntax Result = WV_FN_DAUBECHIES( [ Order , Scaling , Wavelet , Ioff , Joff ] ) Return Value The returned value of this function is an anonymous structure of information about the particular wavelet. ...",t:"WV_FN_DAUBECHIES"},"1462":{i:0.000439545316005705,u:"../Content/Reference Material/W/WV_FN_GAUSSIAN.htm",a:"The WV_FN_GAUSSIAN function constructs wavelet coefficients for the Gaussian wavelet function. In real space, the Gaussian wavelet function is proportional to the m -th order derivative of a Gaussian, exp(–x 2 /2). The Gaussian second derivative, (x 2 –1) exp(–x 2 /2), is often referred to as the ...",t:"WV_FN_GAUSSIAN"},"1463":{i:0.000177683163464211,u:"../Content/Reference Material/W/WV_FN_HAAR.htm",a:"The WV_FN_HAAR function constructs wavelet coefficients for the Haar wavelet function. The Haar wavelet is the same as the Daubechies wavelet of order 1. Syntax Result = WV_FN_HAAR( [ Order , Scaling , Wavelet , Ioff , Joff ] ) Return Value The returned value of this function is an anonymous ...",t:"WV_FN_HAAR"},});