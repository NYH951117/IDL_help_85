define({"437":{i:0.000554221602751792,u:"../Content/Reference Material/F/FLTARR.htm",a:"The FLTARR function creates a floating-point vector or array of the specified dimensions. Examples Create F, a 3-element by 3-element floating-point array with each element set to 0.0 by entering: F = FLTARR(3, 3) Syntax Result = FLTARR( D 1 [ , ..., D 8 ] [, / NOZERO ] ) Return Value Returns a ...",t:"FLTARR "},"438":{i:0.000187837479541763,u:"../Content/Reference Material/F/FLUSH.htm",a:"The FLUSH procedure causes all buffered output on the specified file units to be written. IDL uses buffered output for reasons of efficiency. This buffering leads to rare occasions where a program needs to be certain that output data are not waiting in a buffer, but have actually been output. Syntax ...",t:"FLUSH "},"439":{i:0.000373610814328887,u:"../Content/Reference Material/F/FOLDERWATCH.htm",a:"The IDL folder watching system monitors folders for changes and invokes a user-defined callback whenever a change occurs.  This enables IDL programmers to create a \"batch\" client that watches a specified \"hot folder\" and subsequently performs processing when specific conditions have been met (i.e., ...",t:"FOLDERWATCH"},"440":{i:0.000255128494311443,u:"../Content/Reference Material/F/FOR.htm",a:"The FOR statement executes one or more statements repeatedly, incrementing or decrementing a variable with each repetition, until a condition is met. Syntax FOR variable = init , limit [, Increment ] DO statement or FOR variable = init , limit [, Increment ] DO BEGIN  statements ENDFOR Data Type for ...",t:"FOR "},"441":{i:0.000325828471414315,u:"../Content/Reference Material/F/FOREACH.htm",a:"The FOREACH statement executes one or more statements for each element of an input set (which can be an array, list, or hash table). Within the FOREACH loop, the element’s value and (optionally) the index or key to which the element corresponds are available. Unlike other loop statements in IDL, ...",t:"FOREACH"},"442":{i:5.60100244612055E-05,u:"../Content/Reference Material/F/FORMAT_AXIS_VALUES.htm",a:"The FORMAT_AXIS_VALUES function converts a vector of numeric values into a vector of string values. This routine uses the same rules for formatting as do the axis routines that label tick marks given a set of tick values. Examples Suppose we have a vector of axis values: axis_values = [7.9, 12.1, ...",t:"FORMAT_AXIS_VALUES "},"443":{i:0.000140306488720722,u:"../Content/Reference Material/F/FORWARD_FUNCTION.htm",a:"The FORWARD_FUNCTION statement causes argument(s) to be interpreted as functions rather than variables (versions of IDL prior to 5.0 used parentheses to declare arrays). Syntax FORWARD_FUNCTION Name 1 , Name 2 , ..., Name n Example Ambiguities can arise between function calls and array references ...",t:"FORWARD_FUNCTION "},"444":{i:0.000259271560841674,u:"../Content/Reference Material/F/FREE_LUN.htm",a:"The FREE_LUN procedure deallocates previously-allocated file units. This routine is usually used with file units allocated with GET_LUN, but it will also close any other specified file unit. If the specified file units are open, they are closed prior to the deallocation. Examples See the example for ...",t:"FREE_LUN "},"445":{i:0.000156209111962333,u:"../Content/Reference Material/F/FSTAT.htm",a:"The FSTAT function returns status information about a specified file unit. Examples If file unit number 1 is open, the FSTAT information on that unit can be seen by entering: PRINT, FSTAT(1) Specific information can be obtained by referring to single fields within the structure returned by FSTAT. ...",t:"FSTAT "},"446":{i:0.000359130851748269,u:"../Content/Reference Material/F/FULSTR.htm",a:"The FULSTR restores a row-indexed sparse array to full storage mode. If the sparse array was created with the SPRSIN function using the THRESH keyword, any values in the original array that were below the specified threshold are replaced with zeros. Examples Suppose we have converted an array to ...",t:"FULSTR "},"447":{i:5.52317565356281E-05,u:"../Content/Reference Material/F/FUNCT.htm",a:"The FUNCT procedure evaluates the sum of a Gaussian and a 2nd-order polynomial and optionally returns the value of its partial derivatives. Normally, this function is used by CURVEFIT to fit the sum of a line and a varying background to actual data. This routine is written in the IDL language. Its ...",t:"FUNCT "},"448":{i:5.79563159634795E-05,u:"../Content/Reference Material/F/FUNCTION.htm",a:"The FUNCTION statement defines a function. A function is a program unit containing one or more IDL statements that returns a value. For information on using the FUNCTION statement, see Defining a Function . Syntax FUNCTION Function_Name , parameter 1 , ..., parameter n IDL does not allow a function ...",t:"FUNCTION "},"449":{i:0.000340301450650365,u:"../Content/Reference Material/F/FV_TEST.htm",a:"The FV_TEST function computes the F-statistic and the probability that two sample populations X and Y have significantly different variances. X and Y may be of different lengths. The F-statistic formula for sample populations x and y with means x and y is defined as: where x = ( x 0 , x 1 , x 2 , ...",t:"FV_TEST "},"450":{i:0.000467123433566342,u:"../Content/Reference Material/F/FX_ROOT.htm",a:"The FX_ROOT function computes a real or complex root of a univariate nonlinear function using an optimal Müller’s method. FX_ROOT uses an algorithm that is described in section 9.5 of Numerical Recipes in C: The Art of Scientific Computing (Second Edition), published by Cambridge University Press, ...",t:"FX_ROOT "},"451":{i:0.000601870573341153,u:"../Content/Reference Material/F/FZ_ROOTS.htm",a:"The FZ_ROOTS function is used to find the roots of an m -degree complex polynomial, using Laguerre’s method. FZ_ROOTS is based on the routine zroots described in section 9.5 of Numerical Recipes in C: The Art of Scientific Computing (Second Edition), published by Cambridge University Press, and is ...",t:"FZ_ROOTS "},"452":{i:5.50327019655568E-05,u:"../Content/Reference Material/G/G_list.htm",a:"G Routines ",t:"G Routines"},"453":{i:0.000220791752008782,u:"../Content/Reference Material/G/GAMMA.htm",a:"The GAMMA function returns the gamma function of Z . The gamma function is defined as: Use the LNGAMMA function to obtain the natural logarithm of the gamma function when there is a possibility of overflow. Examples Plot the gamma function over the range 0 to 0.5: ; Generate the numbers to use in ...",t:"GAMMA"},"454":{i:0.000201846931420792,u:"../Content/Reference Material/G/GAMMA_CT.htm",a:"The GAMMA_CT procedure applies gamma correction to a color table. This routine is written in the IDL language. Its source code can be found in the file gamma_ct.pro in the lib subdirectory of the IDL distribution. Syntax GAMMA_CT, Gamma [, / CURRENT ] [, / INTENSITY ] Arguments Gamma The value of ...",t:"GAMMA_CT "},"455":{i:0.000455241046278014,u:"../Content/Reference Material/G/GAUSS_CVF.htm",a:"The GAUSS_CVF function computes the cutoff value V in a standard Gaussian (normal) distribution with a mean of 0.0 and a variance of 1.0 such that the probability that a random variable X is greater than V is equal to a user-supplied probability P . This routine is written in the IDL language. Its ...",t:"GAUSS_CVF "},"456":{i:0.000536383862243845,u:"../Content/Reference Material/G/GAUSS_PDF.htm",a:"The GAUSS_PDF function computes the cumulative distribution function for a standard Gaussian (normal) distribution. This is the probability P that, in a Gaussian distribution with a mean of 0.0 and a variance of 1.0, a random variable X is less than or equal to a user-specified cutoff value V . This ...",t:"GAUSS_PDF "},"457":{i:0.000181824823590306,u:"../Content/Reference Material/G/GAUSS_SMOOTH.htm",a:"The GAUSS_SMOOTH function smoothes using a Gaussian kernel. Also known as a Gaussian blur, it is typically used to reduce noise and detail in an image. Examples ; Create test grid x = 200 & y = 200 img = FLTARR(x,y) index = LINDGEN(LONG(x)*LONG(y)) img[WHERE(index MOD 20 LT 9)] += 125 ...",t:"GAUSS_SMOOTH"},"458":{i:0.000233722229051492,u:"../Content/Reference Material/G/GAUSS2DFIT.htm",a:"The GAUSS2DFIT function fits a two-dimensional, elliptical Gaussian equation to rectilinearly gridded data. Given a set of gridded data, Z = F ( x, y ), where: And the elliptical function is: The rotated coordinate system is defined as: The parameters of the ellipse U are: Axis lengths are 2 a and 2 ...",t:"GAUSS2DFIT "},"459":{i:0.000557663628243682,u:"../Content/Reference Material/G/GAUSSFIT.htm",a:"The GAUSSFIT function computes a non-linear least-squares fit to a function f ( x ) with from three to six unknown parameters. f ( x ) is a linear combination of a Gaussian and a quadratic; the number of terms is controlled by the keyword parameter NTERMS. This routine is written in the IDL ...",t:"GAUSSFIT "},"460":{i:0.000156066116915411,u:"../Content/Reference Material/G/GAUSSIAN_FUNCTION.htm",a:"The GAUSSIAN_FUNCTION function  creates a Gaussian kernel used in convolution. Examples ; Create a 2-D Gaussian with a sigma of 1 gauss1 = GAUSSIAN_FUNCTION([1,1])  ; Create a 2-D Gaussian with a sigma of 3, a width of 20, ; and a peak height of 5 gauss2 = GAUSSIAN_FUNCTION([3,3], WIDTH=20, ...",t:"GAUSSIAN_FUNCTION"},"461":{i:8.09904632105235E-05,u:"../Content/Reference Material/G/GAUSSINT.htm",a:"The GAUSSINT function evaluates the integral of the Gaussian probability function. The Gaussian integral is defined as: Examples Plot the Gaussian probability function for a range of numbers raised to one of several exponents: ; Generate our base values. X = FINDGEN(50)/100.  ; Plot the base values ...",t:"GAUSSINT "},"462":{i:0.000378869667502728,u:"../Content/Reference Material/G/GET_DRIVE_LIST.htm",a:"The GET_DRIVE_LIST function returns valid drive or volume names for the file system. Under Microsoft Windows, keywords can be used to specify that only drives of certain types should be returned. The UNIX operating system presents all files within a single unified file hierarchy, and does not ...",t:"GET_DRIVE_LIST "},"463":{i:8.58863166715639E-05,u:"../Content/Reference Material/G/GET_DXF_OBJECTS.htm",a:"The GET_DXF_OBJECTS function returns an IDLgrModel containing graphics from a given DXF file. Examples filename = FILEPATH(\u0027heart.dxf\u0027, SUBDIR=[\u0027examples\u0027, \u0027data\u0027]) oModel = GET_DXF_OBJECTS(filename) XOBJVIEW, oModel Syntax Result = GET_DXF_OBJECTS( Filename [, Blocktable ] [, Layertable ] [, / ...",t:"GET_DXF_OBJECTS"},"464":{i:0.000145820732154386,u:"../Content/Reference Material/G/GET_KBRD.htm",a:"The GET_KBRD function returns the next character available from the standard input (IDL file unit 0). Depending on the value of the Wait argument, it will either return immediately or wait until a character is present in the terminal type-ahead buffer. Use a GUI interface (e.g. WIDGET_BUTTON) ...",t:"GET_KBRD "},"465":{i:5.76486568194904E-05,u:"../Content/Reference Material/G/GET_LOGIN_INFO.htm",a:"The GET_LOGIN_INFO function returns the name of the computer running the IDL process, as well as the user’s login name. Examples At the command line, type: help, GET_LOGIN_INFO(), /STRUCTURES IDL displays information similar to the following: ** Structure \u003c1778568\u003e, 2 tags, length=24, data ...",t:"GET_LOGIN_INFO"},"466":{i:0.000319465212744829,u:"../Content/Reference Material/G/GET_LUN.htm",a:"The GET_LUN procedure allocates a file unit from a pool of free units. Instead of writing routines to assume the use of certain file units, IDL functions and procedures should use GET_LUN to reserve unit numbers in order to avoid conflicts with other routines. Use FREE_LUN to free the file units ...",t:"GET_LUN "},"467":{i:9.88380500463478E-05,u:"../Content/Reference Material/G/GET_SCREEN_SIZE.htm",a:"The GET_SCREEN_SIZE function returns size, measured in device units, of the screen. On multi-monitor configurations, the GET_SCREEN_SIZE function returns information for the primary monitor only. For information about other monitors, use the IDLsysMonitorInfo object. Examples You can find the ...",t:"GET_SCREEN_SIZE "},"468":{i:0.000981644737226415,u:"../Content/Reference Material/G/GETENV.htm",a:"The GETENV function returns the value of one or more specified environment variables from the environment of the IDL process. About the Process Environment Every process has an environment consisting of environment variables, each of which has an associated string value. Some environment variables ...",t:"GETENV "},"469":{i:0.000571142157685773,u:"../Content/Reference Material/G/GETWINDOWS.htm",a:"The GETWINDOWS function retrieves either a specific graphic window or all graphics windows. Example p = PLOT(/TEST) c = CONTOUR(/TEST) pwin = GetWindows(\u0027Plot\u0027) HELP, pwin  win = GetWindows(NAMES=winNames) HELP, win PRINT, winNames When this example is run, IDL prints: PWIN            OBJREF    = ...",t:"GETWINDOWS"},"470":{i:0.00024748887170734,u:"../Content/Reference Material/G/GOTO.htm",a:"The GOTO statement transfers program control to point specified by a label. The GOTO statement is generally considered to be a poor programming practice that leads to unwieldy programs. Its use should be avoided. Using a GOTO to jump into the middle of a loop results in an error. You must be careful ...",t:"GOTO "},"471":{i:0.000281886560371792,u:"../Content/Reference Material/G/GREG2JUL.htm",a:"The GREG2JUL function calculates the Julian Date (which begins at noon) for the specified Gregorian date. This is the inverse of the JUL2GREG procedure. Notes The GREG2JUL function uses the proleptic Gregorian date, which is produced by extending the Gregorian calendar backwards to dates preceeding ...",t:"GREG2JUL "},"472":{i:0.000220261776824322,u:"../Content/Reference Material/G/GRIB Routines.htm",a:"GRIB Routines ",t:"GRIB Routines"},"473":{i:5.50327019655568E-05,u:"../Content/Reference Material/G/GRIB Routines/GRIB_CLONE.htm",a:"The GRIB_CLONE function clones an existing handle using the context of the original handle. The message is copied and reparsed. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax Result = GRIB_CLONE( Ghandle ) Return Value Returns a GRIB handle that is a clone of the ...",t:"GRIB_CLONE"},"474":{i:0.000129141444807381,u:"../Content/Reference Material/G/GRIB Routines/GRIB_CLOSE.htm",a:"GRIB_CLOSE The GRIB_CLOSE procedure closes a GRIB file. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax GRIB_CLOSE, FID Arguments Fid The GRIB file ID returned by GRIB_OPEN. Version History 8.1 Introduced See Also GRIB_OPEN  ",t:"GRIB_CLOSE"},"475":{i:5.50327019655568E-05,u:"../Content/Reference Material/G/GRIB Routines/GRIB_COUNT.htm",a:"The GRIB_COUNT function returns the number of messages in the file. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax Result = GRIB_COUNT( Filename ) Return Value Returns the number of messages in the file. Arguments Filename The name of the file to be searched. ...",t:"GRIB_COUNT"},"476":{i:9.57090966120056E-05,u:"../Content/Reference Material/G/GRIB Routines/GRIB_FIND_NEAREST.htm",a:"The GRIB_FIND_NEAREST procedure finds the four nearest points of a latitude/longitude point. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax GRIB_FIND_NEAREST, Ghandle, Lon, Lat [, MODE = Array ] [, LATITUDES = Array ] [, LONGITUDES = Array ] [, INDEXES = Array ] ...",t:"GRIB_FIND_NEAREST"},"477":{i:7.84216139489386E-05,u:"../Content/Reference Material/G/GRIB Routines/GRIB_GET.htm",a:"The GRIB_GET function returns a value from a key/value pair. If several keys of the same name are present, the last key is returned. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax Result = GRIB_GET( Ghandle, Key ) Return Value Returns the value from a key/value ...",t:"GRIB_GET"},"478":{i:5.50327019655568E-05,u:"../Content/Reference Material/G/GRIB Routines/GRIB_GET_API_VERSION.htm",a:"The GRIB_GET_API_VERSION function returns the current GRIB API version number. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax Result = GRIB_GET_API_VERSION(  ) Return Value Returns a long value containing the GRIB library version number. For example, if the ...",t:"GRIB_GET_API_VERSION"},"479":{i:0.00316751542159145,u:"../Content/Reference Material/G/GRIB Routines/GRIB_GET_ARRAY.htm",a:"The GRIB_GET_ARRAY function gets a value array from a key. If several keys of the same name are present, the last one is returned. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax Result = GRIB_GET_ARRAY( Ghandle , Key ) Return Value Returns a value array from a ...",t:"GRIB_GET_ARRAY"},"480":{i:0.00285261756318975,u:"../Content/Reference Material/G/GRIB Routines/GRIB_GET_DOUBLE_ELEMENTS.htm",a:"The GRIB_GET_DOUBLE_ELEMENTS function gets (as a DOUBLE array) the elements of the key whose indexes are listed in the input array index. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax Result = GRIB_GET_DOUBLE_ELEMENTS( Ghandle , Key, Index ) Return Value Returns ...",t:"GRIB_GET_DOUBLE_ELEMENTS"},"481":{i:9.40142219378598E-05,u:"../Content/Reference Material/G/GRIB Routines/GRIB_GET_MESSAGE_SIZE.htm",a:"The GRIB_GET_MESSAGE_SIZE function returns the size of the coded message in bytes. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax Result = GRIB_GET_MESSAGE_SIZE( Ghandle ) Return Value Returns the size of the coded message in bytes. Arguments Ghandle A GRIB ...",t:"GRIB_GET_MESSAGE_SIZE"},"482":{i:0.00100141147002104,u:"../Content/Reference Material/G/GRIB Routines/GRIB_GET_NATIVE_TYPE.htm",a:"The GRIB_GET_NATIVE_TYPE function retrieves the native type of a key. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax Result = GRIB_GET_NATIVE_TYPE( Ghandle , Key ) Return Value The return values are the values corresponding to IDL data types. Possible values are: ...",t:"GRIB_GET_NATIVE_TYPE"},"483":{i:5.50327019655568E-05,u:"../Content/Reference Material/G/GRIB Routines/GRIB_GET_SIZE.htm",a:"The GRIB_GET_SIZE function returns the number of coded values from a key. If several keys of the same name are present, the total sum is returned. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax Result = GRIB_GET_SIZE( Ghandle , Key ) Return Value Returns the ...",t:"GRIB_GET_SIZE"},"484":{i:0.00380330335323095,u:"../Content/Reference Material/G/GRIB Routines/GRIB_GET_VALUES.htm",a:"The GRIB_GET_VALUES function gets an array of values. This function is the same as using GRIB_GET_ARRAY with the key set to \"values\". Examples The following function opens a GRIB file and returns the message data. If the HEADER keyword is specified, the function returns the header information for ...",t:"GRIB_GET_VALUES"},"485":{i:0.000127229441965727,u:"../Content/Reference Material/G/GRIB Routines/GRIB_GETDATA.htm",a:"The GRIB_GETDATA function returns the key/value pairs associated with a requested record in the form of an ORDEREDHASH . Examples In this example, we locate a GRIB file and ask IDL to return the 2nd record. file = FILEPATH(\u0027atl.grb2\u0027,SUBDIRECTORY=[\u0027examples\u0027,\u0027data\u0027]) data = GRIB_GETDATA(file, 2)  ...",t:"GRIB_GETDATA"},"486":{i:5.50327019655568E-05,u:"../Content/Reference Material/G/GRIB Routines/GRIB_GRIBEX_MODE.htm",a:"The GRIB_GRIBEX_MODE procedure turns the GRIBEX compatibility mode on or off. The default mode is off. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax GRIB_GRIBEX_MODE, Mode Arguments Mode Set this to 1 to enable GRIBEX support. Set to 0 to disable. Version History ...",t:"GRIB_GRIBEX_MODE"},"487":{i:5.50327019655568E-05,u:"../Content/Reference Material/G/GRIB Routines/GRIB_GTS_HEADER.htm",a:"GRIB_GTS_HEADER The GRIB_GTS_HEADER procedure turns GTS headers on or off. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax GRIB_GTS_HEADER, MODE Arguments MODE Set to 1 to enable GTS headers, and 0 to disable them. Version History 8.1 Introduced  ",t:"GRIB_GTS_HEADER"},"488":{i:0.000107330923653848,u:"../Content/Reference Material/G/GRIB Routines/GRIB_INDEX_GET.htm",a:"The GRIB_INDEX_GET function returns the distinct key values contained in the index. The key must belong to the index. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax Result = GRIB_INDEX_GET( Gindex , Key [, / DOUBLE ] [, / LONG ]  [, / STRING ]) Return Value ...",t:"GRIB_INDEX_GET"},"489":{i:6.1715248246523E-05,u:"../Content/Reference Material/G/GRIB Routines/GRIB_INDEX_GET_SIZE.htm",a:"The GRIB_INDEX_GET_SIZE function returns the number of distinct values of the Key contained in Gindex . Key must belong to Gindex . Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax Result = GRIB_INDEX_GET_SIZE( Gindex , Key ) Return Value Returns the number of ...",t:"GRIB_INDEX_GET_SIZE"},"490":{i:0.000107330923653848,u:"../Content/Reference Material/G/GRIB Routines/GRIB_INDEX_NEW_FROM_FILE.htm",a:"The GRIB_INDEX_NEW_FROM_FILE function creates a new index from a file. The file is indexed with Keys . Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax Result = GRIB_INDEX_NEW_FROM_FILE( Filename , Keys ) Return Value Returns a GRIB file index. Arguments Filename A ...",t:"GRIB_INDEX_NEW_FROM_FILE"},"491":{i:6.1715248246523E-05,u:"../Content/Reference Material/G/GRIB Routines/GRIB_INDEX_READ.htm",a:"The GRIB_INDEX_READ function loads an index from a file. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax Result = GRIB_INDEX_READ( IndexFile ) Return Value Returns an index handle. Arguments IndexFile A string giving the filename from which to load the index. ...",t:"GRIB_INDEX_READ"},"492":{i:0.000107330923653848,u:"../Content/Reference Material/G/GRIB Routines/GRIB_INDEX_RELEASE.htm",a:"The GRIB_INDEX_RELEASE procedure deletes the GRIB index and releases the memory. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax GRIB_INDEX_RELEASE, Gindex Arguments Gindex A GRIB index created from a file. Version History 8.1 Introduced See Also ...",t:"GRIB_INDEX_RELEASE "},"493":{i:0.000107330923653848,u:"../Content/Reference Material/G/GRIB Routines/GRIB_INDEX_SELECT.htm",a:"The GRIB_INDEX_SELECT procedure selects the message subset where Key equals Value . Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax GRIB_INDEX_SELECT( Gindex , Key , Value , [, / DOUBLE ] [, / LONG ] [, / STRING ]) Arguments Gindex A GRIB index created from a file. ...",t:"GRIB_INDEX_SELECT"},"494":{i:5.50327019655568E-05,u:"../Content/Reference Material/G/GRIB Routines/GRIB_INDEX_WRITE.htm",a:"The GRIB_INDEX_WRITE procedure writes an index to a file for later use. Examples See GRIB_SET for a general example using the GRIB routines. Syntax GRIB_INDEX_WRITE , Filename , Gindex Arguments Filename The file in which to save the index. Gindex The GRIB index to write to a file. Version History ...",t:"GRIB_INDEX_WRITE"},"495":{i:9.57090966120056E-05,u:"../Content/Reference Material/G/GRIB Routines/GRIB_IS_MISSING.htm",a:"The GRIB_IS_MISSING function checks if a key value is missing. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax Result = GRIB_IS_MISSING( Ghandle , Key ) Return Value Returns 1 if the key value is missing, 0 otherwise. Arguments Ghandle A GRIB handle. Key A ...",t:"GRIB_IS_MISSING"},"496":{i:0.000140117961428373,u:"../Content/Reference Material/G/GRIB Routines/GRIB_ITERATOR_DELETE.htm",a:"The GRIB_ITERATOR_DELETE procedure deletes the iterator handle and frees the memory. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax GRIB_ITERATOR_DELETE, Iterid Arguments Iterid An iterator handle. Version History 8.1 Introduced See Also GRIB_ITERATOR_NEW ",t:"GRIB_ITERATOR_DELETE"},"497":{i:0.000141537858457005,u:"../Content/Reference Material/G/GRIB Routines/GRIB_ITERATOR_NEW.htm",a:"The GRIB_ITERATOR_NEW function creates a new iterator from a handle, using current geometry and values. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax Result = GRIB_ITERATOR_NEW( Ghandle ) Return Value Returns the iterator handle. Arguments Ghandle A GRIB handle. ...",t:"GRIB_ITERATOR_NEW "},"498":{i:9.51351286278371E-05,u:"../Content/Reference Material/G/GRIB Routines/GRIB_ITERATOR_NEXT.htm",a:"The GRIB_ITERATOR_NEXT function gets the next value from an iterator. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax Result = GRIB_ITERATOR_NEXT( Iterid ) Return Value Returns a 3 x N array where the first dimension is [ lat , lon , value ] if successful; ...",t:"GRIB_ITERATOR_NEXT"},"499":{i:9.06377256876135E-05,u:"../Content/Reference Material/G/GRIB Routines/GRIB_KEYS_ITERATOR_DELETE.htm",a:"The GRIB_KEYS_ITERATOR_DELETE procedure deletes the iterator. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax GRIB_KEYS_ITERATOR_DELETE, Iterid Arguments Iterid A GRIB keys iterator. Version History 8.1 Introduced See Also GRIB_KEYS_ITERATOR_GET_NAME , ...",t:"GRIB_KEYS_ITERATOR_DELETE"},"500":{i:0.000106046150140988,u:"../Content/Reference Material/G/GRIB Routines/GRIB_KEYS_ITERATOR_GET_NAME.htm",a:"The GRIB_KEYS_ITERATOR_GET_NAME function gets the key name from the iterator. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax Result = GRIB_KEYS_ITERATOR_GET_NAME( Iterid ) Return Value A string containing the key name of the iterator. Arguments Iterid A GRIB keys ...",t:"GRIB_KEYS_ITERATOR_GET_NAME"},"501":{i:0.000124074009070632,u:"../Content/Reference Material/G/GRIB Routines/GRIB_KEYS_ITERATOR_NEW.htm",a:"The GRIB_KEYS_ITERATOR_NEW function creates a new iterator from a valid and initialized handle. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax Result = GRIB_KEYS_ITERATOR_NEW( Ghandle [, /ALL ][, / CODED ][ , /COMPUTED ][, / DUPLICATES ][, /EDITION_SPECIFIC ][, / ...",t:"GRIB_KEYS_ITERATOR_NEW"},"502":{i:0.000106046150140988,u:"../Content/Reference Material/G/GRIB Routines/GRIB_KEYS_ITERATOR_NEXT.htm",a:"The GRIB_ITERATOR_NEXT function steps to the next iterator. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax Result = GRIB_KEYS_ITERATOR_NEXT( Iterid ) Return Value Returns 1 if successful; otherwise, returns 0. Arguments Iterid A GRIB keys iterator. Version History ...",t:"GRIB_KEYS_ITERATOR_NEXT"},"503":{i:0.000124074009070632,u:"../Content/Reference Material/G/GRIB Routines/GRIB_KEYS_ITERATOR_REWIND.htm",a:"GRIB_KEYS_ITERATOR_REWIND The GRIB_KEYS_ITERATOR_REWIND procedure rewinds a key iterator. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax GRIB_KEYS_ITERATOR_REWIND, Iterid Arguments Iterid A GRIB keys iterator. Version History 8.1 Introduced ",t:"GRIB_KEYS_ITERATOR_REWIND"},"504":{i:0.000154265722142081,u:"../Content/Reference Material/G/GRIB Routines/GRIB_LIST.htm",a:"The GRIB_LIST routine lists the records in a file or all of the keys in a record. When calling GRIB_LIST, IDL prints the output directly to the console unless you specify the OUTPUT keyword. Examples In this example, we locate a GRIB file and ask IDL to return the record information. file = ...",t:"GRIB_LIST"},"505":{i:9.57090966120056E-05,u:"../Content/Reference Material/G/GRIB Routines/GRIB_MULTI_NEW.htm",a:"The GRIB_MULTI_NEW function creates a new multi field handle. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax Result = GRIB_MULTI_NEW( ) Return Value Returns a multi field handle. If the handle cannot be created, !NULL is returned. Version History 8.1 Introduced ...",t:"GRIB_MULTI_NEW"},"506":{i:9.57090966120056E-05,u:"../Content/Reference Material/G/GRIB Routines/GRIB_MULTI_RELEASE.htm",a:"The GRIB_MULTI_RELEASE procedure deletes the multi field handle and releases the memory. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax GRIB_MULTI_RELEASE, Mghandle Arguments Mghandle A GRIB multi field handle. Version History 8.1 Introduced See Also ...",t:"GRIB_MULTI_RELEASE"},"507":{i:5.50327019655568E-05,u:"../Content/Reference Material/G/GRIB Routines/GRIB_MULTI_SUPPORT.htm",a:"The GRIB_MULTI_SUPPORT procedure turns support for multiple fields in a single message on or off. By default, multiple field support is turned off. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax GRIB_MULTI_SUPPORT, Mode Arguments Mode Set to 1 to enable support ...",t:"GRIB_MULTI_SUPPORT"},"508":{i:0.000124253928058875,u:"../Content/Reference Material/G/GRIB Routines/GRIB_MULTI_WRITE.htm",a:"The GRIB_MULTI_WRITE procedure writes a multi-field message to a file. Examples See GRIB_SET for a general example using the GRIB routines. Syntax GRIB_MULTI_WRITE, Filename, Gmhandle Arguments Filename The file in which the file handle is written. Gmhandle The multi-field GRIB handle to be written. ...",t:"GRIB_MULTI_WRITE"},"509":{i:9.31076868381829E-05,u:"../Content/Reference Material/G/GRIB Routines/GRIB_NEW_FROM_FILE.htm",a:"The GRIB_NEW_FROM_FILE function returns a GRIB handle from a file ID. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax Result = GRIB_NEW_FROM_FILE( Fid ) Return Value Returns a GRIB handle. Arguments Fid The file ID returned by GRIB_OPEN. Version History 8.1 ...",t:"GRIB_NEW_FROM_FILE"},});