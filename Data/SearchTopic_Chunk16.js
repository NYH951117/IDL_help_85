define({"1164":{i:0.000258212015365296,u:"../Content/Reference Material/Q/QUERY_GIF.htm",a:"QUERY_GIF is a method of obtaining information about a GIF image file without having to read the file. See QUERY_* Routines for more information. Syntax Result = QUERY_GIF ( Filename [, Info ] ) Return Value This routine returns a long with the value of 1 (one) if the query was successful (and the ...",t:"QUERY_GIF"},"1165":{i:0.000743842499710307,u:"../Content/Reference Material/Q/QUERY_IMAGE.htm",a:"The QUERY_IMAGE function determines whether a file is recognized as a supported image file. QUERY_IMAGE first checks the filename suffix, and if found, calls the corresponding QUERY_ routine. For example, if the specified file is image.bmp, QUERY_BMP is called to determine if the file is a valid ...",t:"QUERY_IMAGE "},"1166":{i:0.000283995034262348,u:"../Content/Reference Material/Q/QUERY_JPEG.htm",a:"QUERY_JPG is a method of obtaining information about a JPEG image file without having to read the file. See QUERY_* Routines for more information. Syntax Result = QUERY_JPEG ( Filename [, Info ] ) Return Value This routine returns a long with the value of 1 (one) if the query was successful (and the ...",t:"QUERY_JPEG "},"1167":{i:0.000110293914885276,u:"../Content/Reference Material/Q/QUERY_JPEG2000.htm",a:"The QUERY_JPEG2000 function allows you to obtain information about a JPEG2000 image file without having to read the file. It is a wrapper around the IDLffJPEG2000 object interface that presents JPEG2000 image loading in a way familiar to users of the QUERY_* image routines. (See QUERY_* Routines for ...",t:"QUERY_JPEG2000"},"1168":{i:0.000243149749965616,u:"../Content/Reference Material/Q/QUERY_MRSID.htm",a:"The QUERY_MRSID function allows you to obtain information about a MrSID image file without having to read the file. It is a wrapper around the object interface that presents MrSID image loading in a familiar way to users of the QUERY_* image routines. (See QUERY_* Routines for more information.) ...",t:"QUERY_MRSID "},"1169":{i:0.000264721288387051,u:"../Content/Reference Material/Q/QUERY_PICT.htm",a:"QUERY_PICT is a method of obtaining information about a PICT image file without having to read the file. See QUERY_* Routines for more information. Syntax Result = QUERY_PICT ( Filename [, Info ] ) Return Value This routine returns a long with the value of 1 (one) if the query was successful (and ...",t:"QUERY_PICT "},"1170":{i:0.000272499616006338,u:"../Content/Reference Material/Q/QUERY_PNG.htm",a:"QUERY_PNG is a method of obtaining information about a PNG image file without having to read the file. See QUERY_* Routines for more information. When an image is read by READ_PNG , it is scaled to the sBIT value, if it is provided in the file. The sBit provides the actual bit depth, which can be ...",t:"QUERY_PNG "},"1171":{i:0.000276661665701111,u:"../Content/Reference Material/Q/QUERY_PPM.htm",a:"QUERY_PPM is a method of obtaining information about a PPM image file without having to read the file. See QUERY_* Routines for more information. Syntax Result = QUERY_PPM ( Filename [, Info ] [, MAXVAL = variable ] ) Return Value This routine returns a long with the value of 1 (one) if the query ...",t:"QUERY_PPM "},"1172":{i:0.000264424822583708,u:"../Content/Reference Material/Q/QUERY_SRF.htm",a:"QUERY_SRF is a method of obtaining information about an SRF image file without having to read the file. See QUERY_* Routines for more information. Syntax Result = QUERY_SRF ( Filename [, Info ] ) Return Value This routine returns a long with the value of 1 (one) if the query was successful (and the ...",t:"QUERY_SRF "},"1173":{i:0.000308076499975308,u:"../Content/Reference Material/Q/QUERY_TIFF.htm",a:"QUERY_TIFF is a method of obtaining information about a TIFF image file without having to read the file. See QUERY_* Routines for more information. Examples This is an example of using QUERY_TIFF to write and read a multi-image TIFF file. The first image is a 16-bit, single channel image stored ...",t:"QUERY_TIFF "},"1174":{i:0.000353430802917354,u:"../Content/Reference Material/Q/QUERY_VIDEO.htm",a:"QUERY_VIDEO obtains information about a video file without having to open and read it. Frame counts may vary slightly depending on the method used to obtain the count. Variabilities in timestamps and video standards, discontinuities in the videos themselves, or differences in the types of frames may ...",t:"QUERY_VIDEO"},"1175":{i:0.00111360769818599,u:"../Content/Reference Material/Q/QUERY_WAV.htm",a:"Syntax | Return Value | Arguments | Keywords | Version History The QUERY_WAV function checks that the file is actually a .WAV file and that the READ_WAV function can read the data in the file. Optionally, it can return additional information about the data in the file. Syntax Result = QUERY_WAV ( ...",t:"QUERY_WAV "},"1176":{i:5.50327019655568E-05,u:"../Content/Reference Material/R/R_list.htm",a:"R Routines ",t:"R Routines"},"1177":{i:0.000636402710933584,u:"../Content/Reference Material/R/R_CORRELATE.htm",a:"The R_CORRELATE function computes Spearman’s (rho) or Kendalls’s (tau) rank correlation of two sample populations X and Y . The result is a two-element vector containing the rank correlation coefficient and the two-sided significance of its deviation from zero. The significance is a value in the ...",t:"R_CORRELATE"},"1178":{i:8.0833354022367E-05,u:"../Content/Reference Material/R/R_TEST.htm",a:"The R_TEST function tests the hypothesis that a binary population (a sequence of 1s and 0s) represents a “random sampling”. This routine is written in the IDL language. Its source code can be found in the file r_test.pro in the lib subdirectory of the IDL distribution. Examples ; Define a binary ...",t:"R_TEST "},"1179":{i:0.000595769180846373,u:"../Content/Reference Material/R/RADON.htm",a:"The RADON function implements the Radon transform, used to detect features within a two-dimensional image. This function can be used to return either the Radon transform, which transforms lines through an image to points in the Radon domain, or the Radon backprojection, where each point in the Radon ...",t:"RADON "},"1180":{i:0.000148641105805547,u:"../Content/Reference Material/R/RANDOMN.htm",a:"The RANDOMN function returns one or more pseudorandom numbers from a normal (Gaussian) distribution with a mean of zero and a standard deviation of one. Using the RANDOMN function is equivalent to using RANDOMU with the /NORMAL keyword, and is provided as a programming convenience. RANDOMN uses the ...",t:"RANDOMN "},"1181":{i:0.00016418042353686,u:"../Content/Reference Material/R/RANDOMU.htm",a:"The RANDOMU function returns one or more pseudo-random numbers with one of the following distributions: uniform (the default), Gaussian, binomial, gamma, or Poisson. Examples Generating Uniform Random Numbers This example simulates rolling three dice 10,000 times and plots the distribution of the ...",t:"RANDOMU "},"1182":{i:5.52317565356281E-05,u:"../Content/Reference Material/R/RANKS.htm",a:"The RANKS function computes the magnitude-based ranks of a sample population X . Elements of identical magnitude “ties” are ranked according to the mean of the ranks that would otherwise be assigned. This routine is written in the IDL language. Its source code can be found in the file ranks.pro in ...",t:"RANKS "},"1183":{i:0.000215539973104577,u:"../Content/Reference Material/R/RDPIX_Procedure.htm",a:"The RDPIX procedure interactively displays the X position, Y position, and pixel value at the cursor. This routine is written in the IDL language. Its source code can be found in the file rdpix.pro in the lib subdirectory of the IDL distribution. Using RDPIX RDPIX displays a stream of X, Y, and ...",t:"RDPIX Procedure"},"1184":{i:0.000519913767273583,u:"../Content/Reference Material/R/READ.htm",a:"The READ procedures perform formatted input into variables. READ performs input from the standard input stream (IDL file unit 0), while READF requires a file unit to be explicitly specified. Examples To read a string value into the variable B from the keyboard, enter: ; Define B as a string before ...",t:"READ/READF "},"1185":{i:0.000732416222551989,u:"../Content/Reference Material/R/READ_ASCII.htm",a:"The READ_ASCII function reads data from an ASCII file into an IDL structure variable. READ_ASCII may be used with templates created by the ASCII_TEMPLATE function. This routine handles ASCII files consisting of an optional header of a fixed number of lines, followed by columnar data. One or more ...",t:"READ_ASCII "},"1186":{i:0.000554934006549502,u:"../Content/Reference Material/R/READ_BINARY.htm",a:"The READ_BINARY function reads the contents of a binary file using a passed template or basic command line keywords. Data is read from the given filename or from the current file position in the open file pointed to by FileUnit . If no template is provided, keywords can be used to read a single IDL ...",t:"READ_BINARY"},"1187":{i:0.000666562285191562,u:"../Content/Reference Material/R/READ_BMP.htm",a:"The READ_BMP function reads a Microsoft Windows Version 3 device independent bitmap file (.BMP) and returns the image. READ_BMP does not handle 1-bit-images or compressed images. This routine is written in the IDL language. Its source code can be found in the file read_bmp.pro in the lib ...",t:"READ_BMP "},"1188":{i:0.000300012687143606,u:"../Content/Reference Material/R/READ_CSV.htm",a:"The READ_CSV function reads data from a “comma-separated value” (comma-delimited) text file or URL into an IDL structure variable. This routine handles CSV files consisting of one or more optional table header lines, followed by one optional column header line, followed by columnar data, with commas ...",t:"READ_CSV"},"1189":{i:0.000294415952482395,u:"../Content/Reference Material/R/READ_DICOM.htm",a:"The READ_DICOM function reads an image from a DICOM file along with any associated color table.The return array type depends on the DICOM image pixel type. This routine is written in the IDL language. Its source code can be found in the file read_dicom.pro in the lib subdirectory of the IDL ...",t:"READ_DICOM "},"1190":{i:0.000428539824912085,u:"../Content/Reference Material/R/READ_GIF.htm",a:"The READ_GIF procedure reads the contents of a GIF format image file and returns the image and color table vectors (if present) in the form of IDL variables. Only 8-bit images are supported. This routine is written in the IDL language. Its source code can be found in the file read_gif.pro in the lib ...",t:"READ_GIF"},"1191":{i:0.000624370575200143,u:"../Content/Reference Material/R/READ_IMAGE.htm",a:"The READ_IMAGE function reads the image contents of a file and returns the image in an IDL variable. If the image contains a palette it can be returned as well in three IDL variables. READ_IMAGE returns the image in the form of a two-dimensional array (for grayscale images) or a (3, n, m) array (for ...",t:"READ_IMAGE "},"1192":{i:6.15518474307913E-05,u:"../Content/Reference Material/R/READ_INTERFILE.htm",a:"The READ_INTERFILE procedure reads image data stored in Interfile (v3.3) format. READ_INTERFILE can only read a series of images if all images have the same height and width. It does not get additional keyword information beyond what is needed to read the image data. If any problems occur when ...",t:"READ_INTERFILE "},"1193":{i:0.000549871412027538,u:"../Content/Reference Material/R/READ_JPEG.htm",a:"The READ_JPEG procedure reads JPEG (Joint Photographic Experts Group) format compressed images from files or memory. JPEG is a standardized compression method for full-color and gray-scale images. This procedure reads JFIF, the JPEG File Interchange Format, including those produced by WRITE_JPEG. ...",t:"READ_JPEG "},"1194":{i:0.000137634577162537,u:"../Content/Reference Material/R/READ_JPEG2000.htm",a:"The READ_JPEG2000 function extracts and returns image data from a JPEG2000 file. This function is a wrapper around the IDLffJPEG2000 object interface that presents JPEG2000 image loading in a familiar way to users of the READ_* image routines. However this function is not as efficient as the object ...",t:"READ_JPEG2000"},"1195":{i:8.58863166715639E-05,u:"../Content/Reference Material/R/READ_MRSID.htm",a:"The READ_MRSID function extracts and returns image data from a MrSID file at the specified level and location. It is a wrapper around the object interface that presents MrSID image loading in a familiar way to users of the READ_* image routines. However this function is not as efficient as the ...",t:"READ_MRSID "},"1196":{i:0.000344379114958869,u:"../Content/Reference Material/R/READ_PICT.htm",a:"The READ_PICT procedure reads the contents of a PICT (version 2) format image file and returns the image and color table vectors (if present) in the form of IDL variables. The PICT format is used by Apple Macintosh computers. This routine is written in the IDL language. Its source code can be found ...",t:"READ_PICT "},"1197":{i:0.000495774621587862,u:"../Content/Reference Material/R/READ_PNG.htm",a:"The READ_PNG routine reads the image contents of a Portable Network Graphics (PNG) file and returns the image in an IDL variable. If the image contains a palette (see QUERY_PNG ), it can be returned  in three IDL variables. READ_PNG supports 1, 2, 3 and 4 channel images with channel depths of 8 or ...",t:"READ_PNG \n        "},"1198":{i:0.000238701556198908,u:"../Content/Reference Material/R/READ_PPM.htm",a:"The READ_PPM procedure reads the contents of a PGM (gray scale) or PPM (portable pixmap for color) format image file and returns the image in the form of a 2-D byte array (for grayscale images) or a (3, n , m ) byte array (for TrueColor images). Files to be read should adhere to the PGM/PPM ...",t:"READ_PPM "},"1199":{i:0.000352764634779707,u:"../Content/Reference Material/R/READ_SPR.htm",a:"The READ_SPR function reads a row-indexed sparse array. Row-indexed sparse arrays are created using the SPRSIN function and written to a file using the WRITE_SPR function. This routine is written in the IDL language. Its source code can be found in the file read_spr.pro in the lib subdirectory of ...",t:"READ_SPR "},"1200":{i:0.000228889894107761,u:"../Content/Reference Material/R/READ_SRF.htm",a:"The READ_SRF procedure reads the contents of a Sun rasterfile and returns the image and color table vectors (if present) in the form of IDL variables. READ_SRF only handles 1-, 8-, 24-, and 32-bit rasterfiles of type RT_OLD and RT_STANDARD . See the file /usr/include/rasterfile.h for the structure ...",t:"READ_SRF "},"1201":{i:0.000410293669563345,u:"../Content/Reference Material/R/READ_SYLK.htm",a:"The READ_SYLK function reads the contents of a SYLK (Symbolic Link) format spreadsheet data file and returns the contents of the file, or of a cell data range, in an IDL variable. This routine reads only numeric and string SYLK data. It ignores all spreadsheet and cell formatting information (cell ...",t:"READ_SYLK "},"1202":{i:0.000443895540405442,u:"../Content/Reference Material/R/READ_TIFF.htm",a:"The READ_TIFF function reads single or multi-channel images from TIFF format files and returns the image and color table vectors in the form of IDL variables. Image dimensions may exceed the capacity of IDL integers and even unsigned integers (respective limits being 32,767 and 65,535).  Therefore, ...",t:"READ_TIFF "},"1203":{i:0.00035081484806342,u:"../Content/Reference Material/R/READ_VIDEO.htm",a:"The READ_VIDEO function is a wrapper for IDLffVideoRead and provides a way to read video, audio, and/or data streams from a video file. Frame counts may vary slightly depending on the method used to obtain the count. Variabilities in timestamps and video standards, discontinuities in the videos ...",t:"READ_VIDEO"},"1204":{i:6.15518474307913E-05,u:"../Content/Reference Material/R/READ_WAV.htm",a:"The READ_WAV function reads the audio stream from the named .WAV file. Optionally, it can return the sampling rate of the audio stream. Syntax Result = READ_WAV ( Filename [, Rate ] ) Return Value In the case of a single channel stream, the returned variable is a BYTE or INT (depending on the number ...",t:"READ_WAV "},"1205":{i:0.000410293669563345,u:"../Content/Reference Material/R/READ_WAVE.htm",a:"The READ_WAVE procedure reads a .wave or .bwave file created by the Wavefront Advanced Data Visualizer into a series of IDL variables. READ_WAVE only preserves the structure of the variables if they are regularly gridded. This routine is written in the IDL language. Its source code can be found in ...",t:"READ_WAVE "},"1206":{i:0.000593759064567778,u:"../Content/Reference Material/R/READ_X11_BITMAP.htm",a:"The READ_X11_BITMAP procedure reads bitmaps stored in the X Windows X11 format. The X Windows bitmap program produces a C header file containing the definition of a bitmap produced by that program. This procedure reads such a file and creates an IDL byte array containing the bitmap. It is used ...",t:"READ_X11_BITMAP "},"1207":{i:0.000313893417018712,u:"../Content/Reference Material/R/READ_XWD.htm",a:"The READ_XWD function reads the contents of a file created by the xwd (X Windows Dump) command and returns the image and color table vectors in the form of IDL variables. This function is intended to be used only on files containing 8-bit pixmaps created with xwd version 6 or later. This routine is ...",t:"READ_XWD "},"1208":{i:0.000449513240798547,u:"../Content/Reference Material/R/READS.htm",a:"The READS procedure performs formatted input from a string variable and writes the results into one or more output variables. This procedure differs from the READ procedure only in that the input comes from memory instead of a file. This routine is useful when you need to examine the format of a ...",t:"READS "},"1209":{i:0.000796911245551211,u:"../Content/Reference Material/R/READU.htm",a:"The READU procedure reads unformatted binary data from a file into IDL variables. READU transfers data directly with no processing of any kind performed on the data. Examples The following commands can be used to open the IDL distribution file people.dat and read an image from that file: ; Open the ...",t:"READU "},"1210":{i:0.000156640368168681,u:"../Content/Reference Material/R/REAL_PART.htm",a:"The REAL_PART function returns the real part of its complex-valued argument. Examples The following example demonstrates how you can use REAL_PART to obtain the real parts of an array of complex variables. ; Create an array of complex values: cValues = COMPLEX([1, 2, 3],[4, 5, 6]) ; Print just the ...",t:"REAL_PART "},"1211":{i:0.000565226946511581,u:"../Content/Reference Material/R/REBIN.htm",a:"The REBIN function resizes a vector or array to dimensions given by the parameters D i . The supplied dimensions must be integral multiples or factors of the original dimension. The expansion or compression of each dimension is independent of the others, so that each dimension can be expanded or ...",t:"REBIN "},"1212":{i:5.56823939650951E-05,u:"../Content/Reference Material/R/RECALL_COMMANDS.htm",a:"The RECALL_COMMANDS function returns a string array containing the entries in IDL’s command recall buffer. Syntax Result = RECALL_COMMANDS() Return Value The size of the returned array is the size of recall buffer, even if fewer than commands have been entered (any “empty” buffer entries will ...",t:"RECALL_COMMANDS "},"1213":{i:0.000710690468215196,u:"../Content/Reference Material/R/RECON3.htm",a:"The RECON3 function can reconstruct a three-dimensional data array from two or more images (or projections) of an object. For example, if you placed a dark object in front of a white background and then photographed it three times (each time rotating the object a known amount) then these three ...",t:"RECON3 "},"1214":{i:5.77047329653662E-05,u:"../Content/Reference Material/R/REDUCE_COLORS.htm",a:"The REDUCE_COLORS procedure reduces the number of colors used in an image by eliminating pixel values without members. The pixel distribution histogram is obtained and the WHERE function is used to find bins with non-zero values. Next, a lookup table is made where table[old_pixel_value] contains ...",t:"REDUCE_COLORS "},"1215":{i:0.000434040880636123,u:"../Content/Reference Material/R/REFORM.htm",a:"The REFORM function changes the dimensions of an array without changing the total number of elements. Examples REFORM can be used to remove “degenerate” leading dimensions of size one. Such dimensions can appear when a subarray is extracted from an array with more dimensions. For example ; a is a ...",t:"REFORM "},"1216":{i:0.000370978903235253,u:"../Content/Reference Material/R/REGION_GROW.htm",a:"The REGION_GROW function performs region growing for a given region within an N-dimensional array by finding all pixels within the array that are connected neighbors to the region pixels and that fall within provided constraints. The constraints are specified either as a threshold range (a minimum ...",t:"REGION_GROW "},"1217":{i:0.000393216844268142,u:"../Content/Reference Material/R/REGISTER_CURSOR.htm",a:"The REGISTER_CURSOR procedure associates the given name with the given cursor information. This name can then be used with the IDLgrWindow::SetCurrentCursor method. You can use the CREATE_CURSOR function to translate a string array into an image array suitable for the Image argument. You can also ...",t:"REGISTER_CURSOR"},"1218":{i:0.000531904921568786,u:"../Content/Reference Material/R/REGRESS.htm",a:"The REGRESS function performs a multiple linear regression fit and returns an Nterm -element column vector of coefficients. REGRESS fits the function: y i = const + a 0 x 0, i + a 1 x 1, i + ... + a Nterms -1 x Nterms -1, i This routine is written in the IDL language. Its source code can be found in ...",t:"REGRESS "},"1219":{i:0.000250250490269886,u:"../Content/Reference Material/R/REPEAT___UNTIL.htm",a:"REPEAT...UNTIL loops are used to repetitively execute a subject statement until a condition is true. The condition is checked after the subject statement is executed. Therefore, the subject statement is always executed at least once. See Definition of True and False for details on how the “truth” of ...",t:"REPEAT...UNTIL "},"1220":{i:0.000159355406187492,u:"../Content/Reference Material/R/REPLICATE.htm",a:"The REPLICATE function returns an array with the given dimensions, filled with the scalar value specified as the first parameter. Examples Create D, a 5-element by 5-element array with every element set to the string “IDL” by entering: D = REPLICATE(\u0027IDL\u0027, 5, 5) REPLICATE can also be used to create ...",t:"REPLICATE "},"1221":{i:0.00014740124337848,u:"../Content/Reference Material/R/REPLICATE_INPLACE.htm",a:"The REPLICATE_INPLACE procedure updates an existing array by replacing all or selected parts of it with a specified value. REPLICATE_INPLACE can be faster and use less memory than the IDL function REPLICATE or the IDL array notation for large arrays that already exist. REPLICATE_INPLACE is much ...",t:"REPLICATE_INPLACE "},"1222":{i:0.00143583555631021,u:"../Content/Reference Material/R/RESOLVE_ALL.htm",a:"The RESOLVE_ALL procedure iteratively resolves (by compiling) any uncompiled procedures or functions that are called in any already-compiled procedure or function. The process ends when there are no unresolved routines left to compile. If an unresolved procedure or function is not in the IDL search ...",t:"RESOLVE_ALL "},"1223":{i:0.000754831641067793,u:"../Content/Reference Material/R/RESOLVE_ROUTINE.htm",a:"The RESOLVE_ROUTINE procedure compiles user-written or library procedures or functions, given their names. Routines are compiled even if they are already defined. RESOLVE_ROUTINE looks for the given filename in IDL’s search path. If the file is not found in the path, then the routine exits with an ...",t:"RESOLVE_ROUTINE "},"1224":{i:0.00065027917362662,u:"../Content/Reference Material/R/RESTORE.htm",a:"The RESTORE procedure restores the IDL variables and routines saved in a file by the SAVE procedure. RESTORE provides a very simple interface that restores the entire contents of the specified SAVE file in a single atomic operation. If you wish to query the contents of a SAVE file without first ...",t:"RESTORE "},"1225":{i:0.000496263371728481,u:"../Content/Reference Material/R/RETALL.htm",a:"RETALL The RETALL command returns control to the main program level. The effect is the same as entering the RETURN command at the interactive command prompt until the main level is reached. Syntax RETALL Arguments None Version History Original Introduced See Also RETURN ",t:"RETALL"},"1226":{i:0.000883600759666953,u:"../Content/Reference Material/R/RETURN.htm",a:"The RETURN command causes the program context to revert to the next-higher program level. RETURN can be called at the interactive command prompt (see .RETURN ), inside a procedure definition, or inside a function definition. Calling RETURN from the main program level has no effect other than to ...",t:"RETURN"},"1227":{i:0.000534097085444534,u:"../Content/Reference Material/R/REVERSE.htm",a:"The REVERSE function reverses the order of one dimension of an array. This routine is written in the IDL language. Its source code can be found in the file reverse.pro in the lib subdirectory of the IDL distribution. Examples Reverse the order of an array where each element is set to the value of ...",t:"REVERSE "},"1228":{i:9.78636203987086E-05,u:"../Content/Reference Material/R/RK4.htm",a:"The RK4 function uses the fourth-order Runge-Kutta method to advance a solution to a system of ordinary differential equations one time-step H , given values for the variables Y and their derivatives Dydx known at X . RK4 is based on the routine rk4 described in section 16.1 of Numerical Recipes in ...",t:"RK4"},"1229":{i:0.000370907668553314,u:"../Content/Reference Material/R/ROBERTS.htm",a:"The ROBERTS function returns an approximation to the Roberts edge enhancement operator for images: where ( j , k ) are the coordinates of each pixel F jk in the Image . This is equivalent to a convolution using the masks, where the underline indicates the current pixel F jk . The last column and row ...",t:"ROBERTS "},"1230":{i:0.00146154026537798,u:"../Content/Reference Material/R/ROT.htm",a:"The ROT function rotates an image by an arbitrary amount. At the same time, it can magnify, demagnify, and/or translate an image. If you want to rotate an array by a multiple of 90 degrees, you should use the ROTATE function for faster results. This routine is written in the IDL language. Its source ...",t:"ROT "},"1231":{i:0.00111106409297297,u:"../Content/Reference Material/R/ROTATE.htm",a:"The ROTATE function returns a rotated and/or transposed copy of Array . ROTATE can only rotate arrays in multiples of 90 degrees. To rotate by amounts other than multiples of 90 degrees, use the ROT function. Note, however, that ROTATE is more efficient. ROTATE can also be used to reverse the order ...",t:"ROTATE "},"1232":{i:0.000370980768695837,u:"../Content/Reference Material/R/ROUND.htm",a:"The ROUND function rounds the argument to its closest integer. Examples Print the rounded values of a 2-element vector: PRINT, ROUND([5.1, 5.9]) IDL prints: 5      6 Print the result of rounding 3000000000.1, a value that is too large to represent in a 32-bit integer: PRINT, ROUND(3000000000.1D, ...",t:"ROUND "},"1233":{i:9.72916742309453E-05,u:"../Content/Reference Material/R/ROUTINE_FILEPATH.htm",a:"The ROUTINE_FILEPATH function returns the full path to a currently-compiled procedure or function (or a list of procedures and functions). Examples Create the following routine and save it in a file called ex_routine_filepath.pro : pro ex_routine_filepath ; Where is my current routine located? ...",t:"ROUTINE_FILEPATH"},"1234":{i:0.00114177677067576,u:"../Content/Reference Material/R/ROUTINE_INFO.htm",a:"The ROUTINE_INFO function provides information about currently-compiled procedures and functions. Examples To see information on all currently compiled routines: myResult = ROUTINE_INFO( /SOURCE, /FUNCTIONS) PRINT, myResult Syntax Result = ROUTINE_INFO( [ Routine ] [, / PARAMETERS ] [, / SOURCE ] ...",t:"ROUTINE_INFO"},"1235":{i:0.000398153692529309,u:"../Content/Reference Material/R/RS_TEST.htm",a:"The RS_TEST function tests the hypothesis that two sample populations X and Y have the same median of distribution against the hypothesis that they differ. X and Y may be of different lengths. This type of test is often referred to as the “Wilcoxon Rank-Sum Test” or the “Mann-Whitney U-Test.” The ...",t:"RS_TEST "},"1236":{i:5.50327019655568E-05,u:"../Content/Reference Material/S/S_list.htm",a:"S Routines ",t:"S Routines"},"1237":{i:0.000398153692529309,u:"../Content/Reference Material/S/S_TEST.htm",a:"The S_TEST function tests the hypothesis that two sample populations X and Y have the same mean of distribution against the hypothesis that they differ. This routine is written in the IDL language. Its source code can be found in the file s_test.pro in the lib subdirectory of the IDL distribution. ...",t:"S_TEST "},"1238":{i:0.00120042440050904,u:"../Content/Reference Material/S/SAVE.htm",a:"The SAVE procedure saves variables, system variables, and IDL routines in a SAVE file using the XDR (eXternal Data Representation) format for later recovery by RESTORE. Note that variables and routines cannot be saved in the same file. SAVE files containing routines may not be compatible between ...",t:"SAVE "},});