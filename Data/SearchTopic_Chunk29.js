define({"2093":{i:0.000158214736833886,u:"../Content/Object Classes/Graphics/IDLgrVolume__Cleanup.htm",a:"IDLgrVolume::Cleanup Syntax | Arguments | Keywords | Version History The IDLgrVolume:: Cleanup procedure method performs all cleanup on the object. Syntax Obj -\u003e Cleanup or Obj -\u003e[ IDLgrVolume ::]Cleanup or OBJ_DESTROY, Obj Arguments None Keywords None Version History 5.0 Introduced ",t:"IDLgrVolume::Cleanup"},"2094":{i:0.000158214736833886,u:"../Content/Object Classes/Graphics/IDLgrVolume__ComputeBoun.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrVolume:: ComputeBounds procedure method computes the smallest bounding box that contains all voxels whose opacity lookup is greater than a given opacity value. The BOUNDS property is updated to the computed bounding box. Syntax Obj -\u003e[ ...",t:"IDLgrVolume::ComputeBounds"},"2095":{i:0.000115521766631671,u:"../Content/Object Classes/Graphics/IDLgrVolume__GetCTM.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrVolume:: GetCTM function method returns the 4-by-4 double-precision floating-point graphics transform matrix from the current object upward through the graphics tree. Syntax Result = Obj -\u003e[ IDLgrVolume ::]GetCTM( [, DESTINATION = objref ] [, ...",t:"IDLgrVolume::GetCTM"},"2096":{i:0.000165343775154883,u:"../Content/Object Classes/Graphics/IDLgrVolume__GetProperty.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrVolume:: GetProperty procedure method retrieves the value of a property or group of properties for the volume. Syntax Obj -\u003e[ IDLgrVolume ::]GetProperty[, PROPERTY=variable ] [, / NO_COPY ] Arguments None Keywords Any property listed under ...",t:"IDLgrVolume::GetProperty"},"2097":{i:0.000165343775154883,u:"../Content/Object Classes/Graphics/IDLgrVolume__Init.htm",a:"Syntax | Return Value | Arguments | Keywords | Version History The IDLgrVolume:: Init function method initializes the volume object. At least one volume must be specified, via arguments or keywords. Init methods are special lifecycle methods , and as such cannot be called outside the context of ...",t:"IDLgrVolume::Init"},"2098":{i:0.000115521766631671,u:"../Content/Object Classes/Graphics/IDLgrVolume__PickVoxel.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrVolume:: PickVoxel function method computes the coordinates of the voxel projected to a location specified by the 2-D device coordinates point, [ x i , y i ], and the current Z-buffer. The function returns the volume indices as a a vector of ...",t:"IDLgrVolume::PickVoxel"},"2099":{i:0.000165343775154883,u:"../Content/Object Classes/Graphics/IDLgrVolume__SetProperty.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrVolume:: SetProperty procedure method sets the value of a property or group of properties for the volume. Syntax Obj -\u003e[ IDLgrVolume ::]SetProperty[, PROPERTY=value ] [/ NO_COPY ] Arguments None Keywords Any property listed under IDLgrVolume ...",t:"IDLgrVolume::SetProperty"},"2100":{i:0.000500847220234516,u:"../Content/Object Classes/Graphics/IDLgrVRML.htm",a:"Superclasses | Creation | Properties | Methods | Version History The IDLgrVRML object allows you to save the contents of an Object Graphics hierarchy into a VRML 2.0 format file. The graphics tree can only contain a single view due to limitations in the VRML specification. The resulting VRML file is ...",t:"IDLgrVRML"},"2101":{i:0.000296836712943817,u:"../Content/Object Classes/Graphics/IDLgrVRML_Properties.htm",a:"IDLgrVRML objects have the following properties in addition to properties inherited from any superclasses. Properties with the word “Yes” in the “Get” column of the property table can be retrieved via IDLgrVRML::GetProperty . Properties with the word “Yes” in the “Init” column of the property table ...",t:"IDLgrVRML Properties"},"2102":{i:0.000163017112680692,u:"../Content/Object Classes/Graphics/IDLgrVRML__Cleanup.htm",a:"IDLgrVRML::Cleanup Syntax | Arguments | Keywords | Version History The IDLgrVRML::Cleanup procedure method performs all cleanup on the object. Syntax Obj -\u003e Cleanup or Obj -\u003e[ IDLgrVRML ::]Cleanup or OBJ_DESTROY, Obj Arguments None Keywords None Version History 5.1 Introduced ",t:"IDLgrVRML::Cleanup"},"2103":{i:0.00013079266672375,u:"../Content/Object Classes/Graphics/IDLgrVRML__Draw.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrVRML:: Draw procedure method draws the given picture to this graphics destination. Syntax Obj -\u003e[ IDLgrVRML ::]Draw [, Picture ] Arguments Picture The view (an instance of an IDLgrView object) to be drawn. If the view has a LOCATION property, ...",t:"IDLgrVRML::Draw"},"2104":{i:0.000163017112680692,u:"../Content/Object Classes/Graphics/IDLgrVRML__GetDeviceInfo.htm",a:"Syntax | Arguments | Keywords | Version History The IDL grVRML::GetDeviceInfo procedure method returns information which allows IDL applications to intelligently make decisions for optimal performance. For example, it allows an application to determine if RENDERER=1 is actually implemented in ...",t:"IDLgrVRML::GetDeviceInfo"},"2105":{i:0.00013079266672375,u:"../Content/Object Classes/Graphics/IDLgrVRML__GetFontnames.htm",a:"The IDLgrVRML:: GetFontnames function method returns the list of available fonts that can be used in IDLgrFont objects. This method will only return the names of the available TrueType fonts. Hershey fonts will not be returned . Syntax Result = Obj -\u003e[ IDLgrVRML ::]GetFontnames( FamilyName [, ...",t:"IDLgrVRML::GetFontnames"},"2106":{i:0.000189470021426084,u:"../Content/Object Classes/Graphics/IDLgrVRML__GetProperty.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrVRML:: GetProperty procedure method retrieves the value of a property or group of properties for the VRML object. Syntax Obj -\u003e[ IDLgrVRML ::]GetProperty[, PROPERTY=variable ] Arguments None Keywords Any property listed under IDLgrVRML ...",t:"IDLgrVRML::GetProperty"},"2107":{i:0.00011902820929155,u:"../Content/Object Classes/Graphics/IDLgrVRML__GetTextDimens.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrVRML:: GetTextDimensions function method retrieves the dimensions of a text or axis object that will be rendered in a window. In order to compute the effective text dimensions, the object must be inserted into an object graphics hierarchy ...",t:"IDLgrVRML::GetTextDimensions"},"2108":{i:0.000189470021426084,u:"../Content/Object Classes/Graphics/IDLgrVRML__Init.htm",a:"Syntax | Return Value | Arguments | Keywords | Version History The IDLgrVRML:: Init function method initializes the VRML object. This creates an object that will convert object hierarchies rendered to it into VRML format files. Init methods are special lifecycle methods , and as such cannot be ...",t:"IDLgrVRML::Init"},"2109":{i:0.000189470021426084,u:"../Content/Object Classes/Graphics/IDLgrVRML__SetProperty.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrVRML:: SetProperty procedure method sets the value of a property or group of properties for the VRML world. Syntax Obj -\u003e[ IDLgrVRML ::]SetProperty[, PROPERTY=value ] Arguments None Keywords Any property listed under IDLgrVRML Properties that ...",t:"IDLgrVRML::SetProperty"},"2110":{i:0.00229693625107144,u:"../Content/Object Classes/Graphics/IDLgrWindow.htm",a:"Superclasses | Creation | Properties | Methods | Version History A window object is a representation of an on-screen area on a display device that serves as a graphics destination. Objects or subclasses of this type can not be saved or restored. Note on Window Size Limits The OpenGL libraries IDL ...",t:"IDLgrWindow"},"2111":{i:0.000674250918985571,u:"../Content/Object Classes/Graphics/IDLgrWindow_Properties.htm",a:"IDLgrWindow objects have the following properties in addition to properties inherited from any superclasses. Properties with the word “Yes” in the “Get” column of the property table can be retrieved via IDLgrWindow::GetProperty . Properties with the word “Yes” in the “Init” column of the property ...",t:"IDLgrWindow Properties"},"2112":{i:0.000198604556174544,u:"../Content/Object Classes/Graphics/IDLgrWindow__Cleanup.htm",a:"IDLgrWindow::Cleanup Syntax | Arguments | Keywords | Version History The IDLgrWindow:: Cleanup procedure method performs all cleanup on the object. Syntax Obj -\u003e Cleanup or Obj -\u003e[ IDLgrWindow ::]Cleanup or OBJ_DESTROY, Obj Arguments None Keywords None Version History 5.0 Introduced ",t:"IDLgrWindow::Cleanup"},"2113":{i:0.000137586809828551,u:"../Content/Object Classes/Graphics/IDLgrWindow__Draw.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrWindow:: Draw procedure method draws the specified scene or view object to this graphics destination. Objects are drawn to the destination device in the order that they are added to the model, view, viewgroup, or scene object that contains ...",t:"IDLgrWindow::Draw"},"2114":{i:0.000298417960975138,u:"../Content/Object Classes/Graphics/IDLgrWindow__Erase.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrWindow:: Erase procedure method erases the entire contents of the window and initializes the depth buffer. Syntax Obj -\u003e[ IDLgrWindow ::]Erase [, COLOR = index or RGB vector ] Arguments None Keywords COLOR Set this keyword to the color to be ...",t:"IDLgrWindow::Erase"},"2115":{i:0.000145012207341183,u:"../Content/Object Classes/Graphics/IDLgrWindow__GetContiguo.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrWindow:: GetContiguousPixels function method returns an array of long integers whose length is equal to the number of colors available in the index color mode (that is, the value of the N_COLORS property). The returned array marks contiguous ...",t:"IDLgrWindow::GetContiguousPixels"},"2116":{i:0.000717998207592965,u:"../Content/Object Classes/Graphics/IDLgrWindow__GetDeviceIn.htm",a:"Syntax | Arguments | Keywords | Version History The IDL grWindow::GetDeviceInfo procedure method returns information which allows IDL applications to intelligently make decisions for optimal performance. For example, it allows an application to determine if RENDERER=0 is actually implemented in ...",t:"IDLgrWindow::GetDeviceInfo"},"2117":{i:0.000159344981761059,u:"../Content/Object Classes/Graphics/IDLgrWindow__GetDimensio.htm",a:"Syntax | Arguments | Keywords | Version History The IDL grWindow::GetDimensions function method returns a two-element vector, [ width , height ], representing the visible dimensions (in pixel units) of this window. Syntax Result = Obj -\u003e [ IDLgrWindow ::]GetDimensions ( [, MINIMUM_VIRTUAL_DIMENSIONS ...",t:"IDLgrWindow::GetDimensions"},"2118":{i:0.000159344981761059,u:"../Content/Object Classes/Graphics/IDLgrWindow__GetFontname.htm",a:"The IDLgrWindow:: GetFontnames function method returns the list of available fonts that can be used in IDLgrFont objects. This method will only return the names of the available TrueType fonts. Hershey fonts will not be returned . Syntax Result = Obj -\u003e[ IDLgrWindow ::]GetFontnames( FamilyName [, ...",t:"IDLgrWindow::GetFontnames"},"2119":{i:0.000239315537370317,u:"../Content/Object Classes/Graphics/IDLgrWindow__GetProperty.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrWindow:: GetProperty procedure method retrieves the value of a property or group of properties for the window. Syntax Obj -\u003e[ IDLgrWindow ::]GetProperty[, PROPERTY=variable ] Arguments None Keywords Any property listed under IDLgrWindow ...",t:"IDLgrWindow::GetProperty"},"2120":{i:0.000145012207341183,u:"../Content/Object Classes/Graphics/IDLgrWindow__GetTextDime.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrWindow:: GetTextDimensions function method retrieves the dimensions of a text or axis object that will be rendered in a window. In order to compute the effective text dimensions, the object must be inserted into an object graphics hierarchy ...",t:"IDLgrWindow::GetTextDimensions"},"2121":{i:0.000198604556174544,u:"../Content/Object Classes/Graphics/IDLgrWindow__Iconify.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrWindow:: Iconify procedure method iconifies or de-iconifies the window. Iconification under window systems is solely handled by the window manager; client applications, such as IDL, do not have the capability to manage icons. The Iconify ...",t:"IDLgrWindow::Iconify"},"2122":{i:0.00027007745142088,u:"../Content/Object Classes/Graphics/IDLgrWindow__Init.htm",a:"Syntax | Return Value | Arguments | Keywords | Version History The IDLgrWindow:: Init function method initializes the window object. Init methods are special lifecycle methods , and as such cannot be called outside the context of object creation. This means that in most cases, you cannot call the ...",t:"IDLgrWindow::Init"},"2123":{i:0.000198604556174544,u:"../Content/Object Classes/Graphics/IDLgrWindow__OnEnter.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrWindow:: OnEnter procedure method handles notification from the window that a mouse enter event has occurred. This method is only useful in conjunction with the Export Bridge. The method is only a stub and provides no functionality. In your ...",t:"IDLgrWindow::OnEnter"},"2124":{i:0.000198604556174544,u:"../Content/Object Classes/Graphics/IDLgrWindow__OnExit.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrWindow:: OnExit procedure method handles notification from the window that a mouse exit event has occurred. This method is only useful in conjunction with the Export Bridge. The method is only a stub, and provides no functionality. In your ...",t:"IDLgrWindow::OnExit"},"2125":{i:0.000159344981761059,u:"../Content/Object Classes/Graphics/IDLgrWindow__OnExpose.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrWindow:: OnExpose procedure method handles notification from the window that an expose event has occurred. This method is only useful in conjunction with the Export Bridge. By default, the OnExpose method will automatically redraw the graphics ...",t:"IDLgrWindow::OnExpose"},"2126":{i:0.000198604556174544,u:"../Content/Object Classes/Graphics/IDLgrWindow__OnKeyboard.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrWindow:: OnKeyboard procedure method handles notification from the window that a keyboard event has occurred. This method is only useful in conjunction with the Export Bridge. The method is only a stub and provides no functionality. In your ...",t:"IDLgrWindow::OnKeyboard"},"2127":{i:0.000198604556174544,u:"../Content/Object Classes/Graphics/IDLgrWindow__OnMouseDown.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrWindow:: OnMouseDown procedure method handles notification from the window that a mouse-down event has occurred. This method is only useful in conjunction with the Export Bridge. The method is only a stub and provides no functionality. In your ...",t:"IDLgrWindow::OnMouseDown"},"2128":{i:0.000198604556174544,u:"../Content/Object Classes/Graphics/IDLgrWindow__OnMouseMoti.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrWindow:: OnMouseMotion procedure method handles notification from the window that a mouse-motion event has occurred. This method is only useful in conjunction with the Export Bridge. The method is only a stub and provides no functionality. In ...",t:"IDLgrWindow::OnMouseMotion"},"2129":{i:0.000198604556174544,u:"../Content/Object Classes/Graphics/IDLgrWindow__OnMouseUp.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrWindow:: OnMouseUp procedure method handles notification from the window that a mouse-up event has occurred. This method is only useful in conjunction with the Export Bridge. The method is only a stub and provides no functionality. In your ...",t:"IDLgrWindow::OnMouseUp"},"2130":{i:0.000198604556174544,u:"../Content/Object Classes/Graphics/IDLgrWindow__OnResize.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrWindow:: OnResize procedure method handles notification from the window that a resize event has occurred. This method is only useful in conjunction with the Export Bridge. By default, the OnResize method will automatically resize the window. ...",t:"IDLgrWindow::OnResize"},"2131":{i:0.000114196871481689,u:"../Content/Object Classes/Graphics/IDLgrWindow__OnWheel.htm",a:"The IDLgrWindow::OnWheel procedure method handles notification (from the native window device) that a mouse wheel event has occurred. This method is only useful in conjunction with the Export Bridge. The method is only a stub and provides no functionality. In your subclass of IDLgrWindow, you should ...",t:"IDLgrWindow::OnWheel"},"2132":{i:0.000159344981761059,u:"../Content/Object Classes/Graphics/IDLgrWindow__PickData.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrWindow:: PickData function method maps a point in the two-dimensional device space of the window to a point in the three-dimensional data space of an object tree. The resulting 3-D data space coordinates are returned in a user-specified ...",t:"IDLgrWindow::PickData"},"2133":{i:0.000133045066837779,u:"../Content/Object Classes/Graphics/IDLgrWindow__QueryRequir.htm",a:"The IDLgrWindow::QueryRequiredTiles function method is used in conjunction with an IDLgrImage object that supports tiling. Initially, this type of IDLgrImage object contains no data. Call this method to determine what data to load into this destination object based on which tiles are visible in a ...",t:"IDLgrWindow::QueryRequiredTiles "},"2134":{i:0.000239315537370317,u:"../Content/Object Classes/Graphics/IDLgrWindow__Read.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrWindow:: Read function method reads an image from a window. The returned value is an instance of the IDLgrImage object class. Syntax Result = Obj -\u003e[ IDLgrWindow ::]Read() Arguments None Keywords None Version History 5.0 Introduced ",t:"IDLgrWindow::Read "},"2135":{i:0.000202378800966259,u:"../Content/Object Classes/Graphics/IDLgrWindow__Select.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrWindow:: Select function method returns a list of objects selected at a specified location. If no objects are selected, the Select function returns -1. IDL returns a maximum of 512 objects. This maximum may be smaller if any of the objects are ...",t:"IDLgrWindow::Select"},"2136":{i:0.000414245707205096,u:"../Content/Object Classes/Graphics/IDLgrWindow__SetCurrentC.htm",a:"Syntax | Arguments | Keywords | Version History | See Also The IDLgrWindow:: SetCurrentCursor procedure method s ets the current cursor image to be used while positioned over a drawing area. Syntax Obj -\u003e[ IDLgrWindow ::]SetCurrentCursor [, CursorName ] [, IMAGE = 16 x 16 bitmap ] [, MASK = 16 x 16 ...",t:"IDLgrWindow::SetCurrentCursor"},"2137":{i:0.000159344981761059,u:"../Content/Object Classes/Graphics/IDLgrWindow__SetCurrentZ.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrWindow:: SetCurrentZoom procedure method does the following: Sets the CURRENT_ZOOM property. Sets the ZOOM_NSTEP property to the closest integer multiple of ZOOM_BASE that results in the specified zoom factor. This method does not change the ...",t:"IDLgrWindow::SetCurrentZoom"},"2138":{i:0.000239315537370317,u:"../Content/Object Classes/Graphics/IDLgrWindow__SetProperty.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrWindow:: SetProperty procedure method sets the value of a property or group of properties for the window. Syntax Obj -\u003e[ IDLgrWindow ::]SetProperty[, PROPERTY=value ] Arguments None Keywords Any property listed under IDLgrWindow Properties ...",t:"IDLgrWindow::SetProperty"},"2139":{i:0.000198604556174544,u:"../Content/Object Classes/Graphics/IDLgrWindow__Show.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrWindow:: Show procedure method exposes or hides a window. Syntax Obj -\u003e[ IDLgrWindow ::]Show, Position Arguments Position Set this argument equal to a non-zero value to expose the window, or to 0 to hide the window. Keywords None Version ...",t:"IDLgrWindow::Show"},"2140":{i:0.000184142901030497,u:"../Content/Object Classes/Graphics/IDLgrWindow__ZoomIn.htm",a:"Syntax | Arguments | Keywords | Example | Version History The IDLgrWindow:: ZoomIn procedure method does the following: Increments the value of the ZOOM_NSTEP property. Updates the value of the CURRENT_ZOOM property to reflect the product of the ZOOM_BASE and ZOOM_NSTEP properties. This method does ...",t:"IDLgrWindow::ZoomIn"},"2141":{i:0.000145012207341183,u:"../Content/Object Classes/Graphics/IDLgrWindow__ZoomOut.htm",a:"Syntax | Arguments | Keywords | Example | Version History The IDLgrWindow:: ZoomOut procedure method does the following: Decrements the value of the ZOOM_NSTEP property. Updates the value of the CURRENT_ZOOM property to reflect the product of the ZOOM_BASE and ZOOM_NSTEP properties. This method does ...",t:"IDLgrWindow::ZoomOut"},"2142":{i:6.43882667589095E-05,u:"../Content/Object Classes/Miscellaneous/objects_misc.htm",a:"Miscellaneous Object Classes This section describes IDL’s Container, Bridge, Savefile, COM, Java, and Trackball class libraries. ",t:"Miscellaneous Object Classes"},"2143":{i:0.00181517081136592,u:"../Content/Reference Material/I/IDL_Container.htm",a:"An IDL_Container object holds other heap variables including objects and pointers. The IDL_Container class provides a way to group different objects or pointers into single object, and allows you to easily move or destroy the items within the container. Destroying an IDL_Container destroys any ...",t:"IDL_Container"},"2144":{i:5.50327019655568E-05,u:"../Content/Reference Material/I/IDL_Container_Properties.htm",a:"IDL_Container Properties Objects of this class have no properties of their own. ",t:"IDL_Container Properties"},"2145":{i:0.000887264215907893,u:"../Content/Reference Material/I/IDL_Container__Add.htm",a:"The IDL_Container::Add procedure method adds one or more objects or pointers to the container. Examples Add three objects to a container, and then retrieve them all: o = IDL_Container() o.Add, IDL_Object() o.Add, IDL_Object() o.Add, IDL_Object() PRINT, o.Get(/ALL) IDL prints: ...",t:"IDL_Container::Add"},"2146":{i:0.0002264705908772,u:"../Content/Reference Material/I/IDL_Container__Cleanup.htm",a:"The IDL_Container::Cleanup procedure method performs all cleanup on the object. The IDL_Container::Cleanup method will destroy all contained objects or pointers, regardless of their current reference count. Cleanup methods are special lifecycle methods , and as such cannot be called outside the ...",t:"IDL_Container::Cleanup"},"2147":{i:0.000730359110543867,u:"../Content/Reference Material/I/IDL_Container__Count.htm",a:"The IDL_Container::Count function method returns the number of heap variables (objects or pointers) within the container. Syntax Result = Obj -\u003e[ IDL_Container ::]Count() Return Value An integer containing the current number of items within the container. Arguments None. Keywords None. Version ...",t:"IDL_Container::Count"},"2148":{i:0.000741293822812836,u:"../Content/Reference Material/I/IDL_Container__Equals.htm",a:"The IDL_Container::Equals function method tests the value of each item in a container against an input value and returns true (1) if the specified item is equal to that value, or false (0) otherwise. The IDL_Container::Equals method is only available for containers of pointers. If you try to use the ...",t:"IDL_Container::Equals"},"2149":{i:0.000821740746566607,u:"../Content/Reference Material/I/IDL_Container__Get.htm",a:"The IDL_Container::Get function method returns heap variables (objects or pointers) from the container. By default, IDL returns the first item in the container unless you specify the ALL or POSITION keywords. If the container is empty, the Get method returns -1 or !NULL if you set the NULL keyword. ...",t:"IDL_Container::Get"},"2150":{i:0.0002264705908772,u:"../Content/Reference Material/I/IDL_Container__Init.htm",a:"The IDL_Container::Init function method initializes the container object. Init methods are special lifecycle methods , and as such cannot be called outside the context of object creation. This means that in most cases, you cannot call the Init method directly. There is one exception to this rule: if ...",t:"IDL_Container::Init"},"2151":{i:0.000819049362013309,u:"../Content/Reference Material/I/IDL_Container__IsContain.htm",a:"The IDL_Container::IsContained function method returns true (1) if the specified item is in the container, or false (0) otherwise. Syntax Result = Obj-\u003e [ IDL_Container ::]IsContained( Heapvar [, POSITION = variable ] ) Return Value A scalar or array of zeroes (0) and ones (1). Arguments Heapvar A ...",t:"IDL_Container::IsContained"},"2152":{i:0.000730359110543867,u:"../Content/Reference Material/I/IDL_Container__Move.htm",a:"The IDL_Container::Move procedure method moves an item from one position in a container to a new position. The order of the other items in the container remains unchanged. For object graphics, the position of objects within the container controls their rendering order. IDL first renders the object ...",t:"IDL_Container::Move"},"2153":{i:0.000820730450146524,u:"../Content/Reference Material/I/IDL_Container__Remove.htm",a:"The IDL_Container::Remove procedure method removes an item from the container. Syntax Obj-\u003e [ IDL_Container ::]Remove [, Heapvar ] [, POSITION = index ] [, / ALL ] Arguments Heapvar A scalar or array of heap variables (object references or pointers) to be removed. If Heapvar is not provided (and ...",t:"IDL_Container::Remove"},"2154":{i:0.00131970474879289,u:"../Content/Object Classes/Miscellaneous/IDLdbDatabase.htm",a:"An IDLdbDatabase object represents a connection to a datasource. Use the IDLdbDatabase object’s instance data and methods to connect to, disconnect from, and perform operations to a Database Management System (DBMS). Superclasses None Creation Use the following IDL DataMiner command to create a new ...",t:"IDLdbDatabase\n        "},"2155":{i:0.000167209547865357,u:"../Content/Object Classes/Miscellaneous/IDLdbDatabase__Cleanup.htm",a:"The IDLdbDatabase:: Cleanup procedure method performs all cleanup on the object. Cleanup methods are special lifecycle methods , and as such cannot be called outside the context of object creation and destruction. This means that in most cases, you cannot call the Cleanup method directly. There is ...",t:"IDLdbDatabase::Cleanup"},"2156":{i:0.000414395946994514,u:"../Content/Object Classes/Miscellaneous/IDLdbDatabase__Connect.htm",a:"Use the IDLdbDatabase::Connect procedure method to connect to the data source associated with a database object. Syntax DBobj -\u003e [ IDLdbDatabase ::]Connect [, CONNECTION = string ] [, DATASOURCE = string ] [, USER_ID = string ] [, PASSWORD = string ] Arguments None. Keywords CONNECTION Set this ...",t:"IDLdbDatabase::Connect\n        "},"2157":{i:0.000167209547865357,u:"../Content/Object Classes/Miscellaneous/IDLdbDatabase__ExecuteSQ.htm",a:"Use the IDLdbDatabase::ExecuteSQL procedure method to execute an SQL statement. No results are expected from this statement; any that are received are discarded. You can use this method to perform actions such as creating or deleting a table. To use this method, the object must already be connected ...",t:"IDLdbDatabase::ExecuteSQL\n        "},"2158":{i:0.000167209547865357,u:"../Content/Object Classes/Miscellaneous/IDLdbDatabase__GetDataso.htm",a:"The IDLdbDatabase::GetDatasources function method returns an array of available datasources. You do not need to make a connection before calling this method. Not all drivers support the ability to return a list of available data sources. Syntax Datasources = DBobj -\u003e [ IDLdbDatabase ...",t:"IDLdbDatabase::GetDatasources\n        "},"2159":{i:0.000167209547865357,u:"../Content/Object Classes/Miscellaneous/IDLdbDatabase__GetProper.htm",a:"Use the IDLdbDatabase::GetProperty procedure method to retrieve properties of the database object. You must have made a connection to a database before using this method. Syntax DBobj -\u003e [ IDLdbDatabase ::]GetProperty [, PROPERTY = variable ] Arguments None. Keywords Any property listed under ...",t:"IDLdbDatabase::GetProperty\n        "},"2160":{i:0.000167209547865357,u:"../Content/Object Classes/Miscellaneous/IDLdbDatabase__GetTables.htm",a:"The IDLdbDatabase::GetTables function method returns a list of available tables in the datasource. A connection is required before this method is called. This method is not supported for all drivers. This function is not available in all ODBC drivers. Use the CAN_GET_TABLES keyword to the ...",t:"IDLdbDatabase::GetTables\n        "},"2161":{i:0.000167209547865357,u:"../Content/Object Classes/Miscellaneous/IDLdbDatabase__Init.htm",a:"The IDLdbDatabase:: Init function method initializes a database object. Init methods are special lifecycle methods , and as such cannot be called outside the context of object creation. This means that in most cases, you cannot call the Init method directly. There is one exception to this rule: if ...",t:"IDLdbDatabase::Init"},"2162":{i:0.000167209547865357,u:"../Content/Object Classes/Miscellaneous/IDLdbDatabase__SetProper.htm",a:"IDLdbDatabase ::SetProperty Use the IDLdbDatabase::SetProperty procedure method to set properties of the database object. You must connect to the data source associated with the database object (using the IDLdbDatabase::Connect method) before attempting to set properties on the database object. ...",t:"IDLdbDatabase::SetProperty\n        "},});