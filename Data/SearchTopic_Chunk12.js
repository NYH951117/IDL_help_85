define({"867":{i:0.000195609744317092,u:"../Content/Reference Material/I/IPUTDATA.htm",a:"Syntax IPUTDATA, Id , Data1 , Data2 , ... [, TOOL = iToolID ] Arguments Id A string containing the identifier of the iTools object whose data is to be replaced. If you pass a partial identifier, the IGETID function is called to retrieve the full identifier string. Datas Data values to set on the ...",t:"IPUTDATA\n        "},"868":{i:0.000662972103180522,u:"../Content/Reference Material/I/IREGISTER.htm",a:"Examples Suppose you have an iTool class definition file named myTool__define.pro , located in a directory included in IDL’s !PATH system variable. Register this class with the iTool system with the following command: IREGISTER, \u0027My First Tool\u0027, \u0027myTool\u0027 Tools defined by the myTool class definition ...",t:"IREGISTER\n        "},"869":{i:0.000714530330066902,u:"../Content/Reference Material/I/IRESET.htm",a:"Examples The iTool Data Manager system maintains your data during the entire IDL session, unless IRESET is used. This example shows how the data is maintained and how IRESET is used to clear the iTool Data Manager. Read in plot data and load it into an iPlot tool at the IDL Command Line: file = ...",t:"IRESET\n        "},"870":{i:0.000185703410439567,u:"../Content/Reference Material/I/IRESOLVE.htm",a:"Resolves all IDL code within the iTools directory, as well as all other IDL code required for the iTools framework. Examples Example 1 Suppose you wish to create a SAVE file that contains all of the code necessary to run an iTool you have created with the name mytool . First, start with a clean IDL ...",t:"IRESOLVE\n        "},"871":{i:0.00018373995232415,u:"../Content/Reference Material/I/IROTATE.htm",a:"Examples In the following example, we draw a surface data set with the iSurface iTool, and rotate the image around the x axis. ; Read the data from surface.dat file = FILEPATH(\u0027surface.dat\u0027, $ SUBDIRECTORY = [\u0027examples\u0027, \u0027data\u0027]) data = READ_BINARY(file, DATA_DIMS = [350, 450], DATA_TYPE = 2, $ ...",t:"IROTATE\n        "},"872":{i:0.000737637637491745,u:"../Content/Reference Material/I/ISA.htm",a:"The ISA function determines whether a variable is of a certain type, class, or structure name. It can also test whether a variable is a valid object or pointer, whether it is an array or scalar, and if a variable is associated with a file. The ISA function only looks at the high-level properties of ...",t:"ISA"},"873":{i:9.94487015997163E-05,u:"../Content/Reference Material/I/ISAVE.htm",a:"Examples In the following example, we create an iSurface iTool and save it to a JPG file. file = FILEPATH(\u0027surface.dat\u0027, $ SUBDIRECTORY = [\u0027examples\u0027, \u0027data\u0027]) data = READ_BINARY(file, DATA_DIMS = [350, 450], DATA_TYPE = 2, $ ENDIAN = \u0027little\u0027) ISURFACE, data, TITLE = \u0027Maroon Bells Elevation\u0027, $ ...",t:"ISAVE\n        "},"874":{i:0.000223855409155685,u:"../Content/Reference Material/I/ISCALE.htm",a:"Syntax ISCALE, Id [, X [, Y [, Z ]]] [, / RESET ] [, TOOL = iToolID ] [, X = Value ] [, Y = Value ] [, Z = Value ] Arguments Id The identifier of the object to scale. If you pass a partial identifier, the IGETID function is called to retrieve the full identifier string. X, Y, Z The scaling factor ...",t:"ISCALE\n        "},"875":{i:0.000795440424178698,u:"../Content/Reference Material/I/ISETCURRENT.htm",a:"Example In the following example, we create three iPlot iTools and display the ID for each one. At the end, we set the first iTool created as the current iTool. IPLOT, RANDOMU(seed, 30), IDENTIFIER = iToolID1, $ COLOR = [0, 0, 255] currentTool = IGETCURRENT() PRINT, \u0027The current tool is \u0027, ...",t:"ISETCURRENT\n        "},"876":{i:0.000275097953135964,u:"../Content/Reference Material/I/ISETPROPERTY.htm",a:"The keyword name used to set the property may not be the same as the human-readable name displayed on the property sheet. You can call IGETPROPERTY with the _REGISTERED keyword to retrieve all of a visualization’s registered properties. If you misspell a property keyword or try to set a property ...",t:"ISETPROPERTY\n        "},"877":{i:0.000396783126315666,u:"../Content/Reference Material/I/ISHFT.htm",a:"The ISHFT function performs the bit shift operation on bytes, integers and longwords. Examples Bit shift each element of the integer array [1, 2, 3, 4, 5] three bits to the left and store the result in B by entering: B = ISHFT([1,2,3,4,5], 3) The resulting array B is [8, 16, 24, 32, 40]. Syntax ...",t:"ISHFT "},"878":{i:0.000614088838767486,u:"../Content/Reference Material/I/ISOCONTOUR.htm",a:"The ISOCONTOUR procedure interprets the contouring algorithm found in the IDLgrContour object. The algorithm allows for contouring on arbitrary meshes and returns line or orientated tessellated polygonal output. The interface will also allow secondary data values to be interpolated and returned at ...",t:"ISOCONTOUR"},"879":{i:0.000197058767429285,u:"../Content/Reference Material/I/ISOSURFACE.htm",a:"The ISOSURFACE procedure algorithm expands on the SHADE_VOLUME algorithm. It returns topologically consistent triangles by using oriented tetrahedral decomposition internally. This also allows the algorithm to isosurface any arbitrary tetrahedral mesh. If the user provides an optional auxiliary ...",t:"ISOSURFACE "},"880":{i:0.000125274990334146,u:"../Content/Reference Material/I/ISURFACE.htm",a:"Please see the SURFACE function, which replaces the functionality of this routine. If no arguments are specified, the ISURFACE procedure creates an empty Surface tool. Syntax ISURFACE[, Z [, X , Y ]] [, BOTTOM = index or RGB vector ] [, CLIP_PLANES = array ] [, COLOR = RGB vector ] [, DEPTH_OFFSET = ...",t:"ISURFACE\n        "},"881":{i:0.000148547505738384,u:"../Content/Reference Material/I/ITEXT.htm",a:"Please see the TEXT function, which replaces the functionality of this routine. Examples In this example, we draw a polyline that points to a particular red blood cell, turn the line into an arrow by changing the polyline’s properties, and add a caption. ; Create an iTool with some image data ...",t:"ITEXT\n        "},"882":{i:0.00018373995232415,u:"../Content/Reference Material/I/ITRANSLATE.htm",a:"Examples In the following example, we draw a circle over a JPG image, and then translate the circle to another location. ; Open the data filefile = FILEPATH(\u0027marsglobe.jpg\u0027, $ SUBDIRECTORY = [\u0027examples\u0027, \u0027data\u0027])  ; Create an iTool with the image data IIMAGE, file, /FIT_TO_VIEW  circle = [150, 120]  ...",t:"ITRANSLATE\n        "},"883":{i:7.72691510777567E-05,u:"../Content/Reference Material/I/IVECTOR.htm",a:"Please see the VECTOR and STREAMLINE functions, which replace the functionality of this routine. If no arguments are specified, the IVECTOR procedure creates an empty Vector tool. Syntax IVECTOR [, U, V [, X, Y]] [, ARROW_STYLE ={0 | 1}] [, ARROW_THICK = float {1.0 to 10.0}] [, AUTO_COLOR ...",t:"IVECTOR"},"884":{i:0.000134381233912682,u:"../Content/Reference Material/I/IVOLUME.htm",a:"Please see VOLUME() which has replaced the functionality of the IVOLUME routine. If no arguments are specified, the IVOLUME procedure creates an empty Volume tool. IDL converts and stores volume data in a BYTE array. Thus, all incoming volume data is converted to BYTE type. This could alter the ...",t:"IVOLUME\n        "},"885":{i:0.00018373995232415,u:"../Content/Reference Material/I/IZOOM.htm",a:"Examples In the following example, we magnify (zoom) an image in an iSurface tool by 50%. file = FILEPATH(\u0027surface.dat\u0027, $ SUBDIRECTORY = [\u0027examples\u0027, \u0027data\u0027]) data = READ_BINARY(file, DATA_DIMS = [350, 450], DATA_TYPE = 2, $ ENDIAN = \u0027little\u0027) ISURFACE, data, TITLE = \u0027Maroon Bells Elevation\u0027, $ ...",t:"IZOOM\n        "},"886":{i:5.50327019655568E-05,u:"../Content/Reference Material/J/J_list.htm",a:"J Routines ",t:"J Routines"},"887":{i:0.000318724146073155,u:"../Content/Connectivity Bridges/Appendices - IDL Java Object API/PackageSummary.htm",a:"This chapter describes the IDL Java Package interfaces, classes and errors. Class Summary Interface Description JIDLComponentListener The listener interface for receiving component events (expose, resize) on a JIDLCanvas. JIDLKeyListener The listener interface for receiving keyboard events (key ...",t:"IDL Java Package Summary"},"888":{i:6.54525868411162E-05,u:"../Content/Connectivity Bridges/Appendices - IDL Java Object API/JIDLAbortedException.htm",a:"Declaration public class JIDLAbortedException extends JIDLException implements java.io.Serializable  java.lang.Object | +--java.lang.Throwable | +--java.lang.Error | +--com.idl.javaidl.JIDLException | +--com.idl.javaidl.JIDLAbortedException All Implemented Interfaces: java.io.Serializable ...",t:"JIDLAbortedException"},"889":{i:0.000116127468179647,u:"../Content/Connectivity Bridges/Appendices - IDL Java Object API/JIDLArray.htm",a:"Declaration public class JIDLArray implements java.io.Serializable  java.lang.Object | +--com.idl.javaidl.JIDLArray All Implemented Interfaces: java.io.Serializable Description The JIDLArray class wraps a Java array as an object usable by the Java-IDL Export bridge. Wraps arrays of type boolean, ...",t:"JIDLArray"},"890":{i:6.54525868411162E-05,u:"../Content/Connectivity Bridges/Appendices - IDL Java Object API/JIDLBoolean.htm",a:"Declaration public class JIDLBoolean implements JIDLNumber, java.io.Serializable  java.lang.Object | +--com.idl.javaidl.JIDLBoolean All Implemented Interfaces: JIDLNumber, java.io.Serializable Description The JIDLBoolean class wraps a boolean as a mutable object usable by the Java-IDL Export bridge. ...",t:"JIDLBoolean"},"891":{i:6.54525868411162E-05,u:"../Content/Connectivity Bridges/Appendices - IDL Java Object API/JIDLBusyException.htm",a:"Declaration public class JIDLBusyException extends JIDLException implements java.io.Serializable  java.lang.Object | +--java.lang.Throwable | +--java.lang.Error | +--com.idl.javaidl.JIDLException | +--com.idl.javaidl.JIDLBusyException All Implemented Interfaces: java.io.Serializable Description An ...",t:"JIDLBusyException"},"892":{i:6.54525868411162E-05,u:"../Content/Connectivity Bridges/Appendices - IDL Java Object API/JIDLByte.htm",a:"Declaration public class JIDLByte implements JIDLNumber, java.io.Serializable  java.lang.Object | +--com.idl.javaidl.JIDLByte All Implemented Interfaces: JIDLNumber, java.io.Serializable Description The JIDLByte class wraps a byte as a mutable object usable by the Java-IDL Export bridge. Member ...",t:"JIDLByte"},"893":{i:7.89817583784146E-05,u:"../Content/Connectivity Bridges/Appendices - IDL Java Object API/JIDLCanvas.htm",a:"Declaration public abstract class JIDLCanvas extends java.awt.Canvas implements JIDLObjectI, java.awt.event.ComponentListener, java.awt.event.KeyListener, java.awt.event.MouseListener, java.awt.event.MouseMotionListener, JIDLMouseListener, JIDLMouseMotionListener, JIDLKeyListener, ...",t:"JIDLCanvas"},"894":{i:6.54525868411162E-05,u:"../Content/Connectivity Bridges/Appendices - IDL Java Object API/JIDLChar.htm",a:"Declaration public class JIDLChar implements JIDLNumber, java.io.Serializable  java.lang.Object | +--com.idl.javaidl.JIDLChar All Implemented Interfaces: JIDLNumber, java.io.Serializable Description The JIDLChar class wraps a char as a mutable object usable by the Java-IDL Export bridge. Member ...",t:"JIDLChar"},"895":{i:7.89817583784146E-05,u:"../Content/Connectivity Bridges/Appendices - IDL Java Object API/JIDLComponentListener.htm",a:"Declaration public interface JIDLComponentListener All Known Implementing Classes: JIDLCanvas Description The listener interface for receiving component events (expose, resize) on a JIDLCanvas. The class that is interested in handling these events implements this interface (and all the methods it ...",t:"JIDLComponentListener"},"896":{i:6.54525868411162E-05,u:"../Content/Connectivity Bridges/Appendices - IDL Java Object API/JIDLConst.htm",a:"Declaration public class JIDLConst  java.lang.Object | +--com.idl.javaidl.JIDLConst Description Contains constants used by the Java-IDL wrapper classes. Member Summary Fields static int CONTROL_INPROC Control flag for determining object is to be created in-process static int CONTROL_OUTPROC Control ...",t:"JIDLConst"},"897":{i:6.54525868411162E-05,u:"../Content/Connectivity Bridges/Appendices - IDL Java Object API/JIDLDouble.htm",a:"Declaration public class JIDLDouble implements JIDLNumber, java.io.Serializable  java.lang.Object | +--com.idl.javaidl.JIDLDouble All Implemented Interfaces: JIDLNumber, java.io.Serializable Description The JIDLDouble class wraps a double as a mutable object usable by the Java-IDL Export bridge. ...",t:"JIDLDouble"},"898":{i:6.54525868411162E-05,u:"../Content/Connectivity Bridges/Appendices - IDL Java Object API/JIDLException.htm",a:"Declaration public class JIDLException extends java.lang.Error implements java.io.Serializable  java.lang.Object | +--java.lang.Throwable | +--java.lang.Error | +--com.idl.javaidl.JIDLException All Implemented Interfaces: java.io.Serializable Direct Known Subclasses: JIDLAbortedException, ...",t:"JIDLException"},"899":{i:6.54525868411162E-05,u:"../Content/Connectivity Bridges/Appendices - IDL Java Object API/JIDLFloat.htm",a:"Declaration public class JIDLFloat implements JIDLNumber, java.io.Serializable  java.lang.Object | +--com.idl.javaidl.JIDLFloat All Implemented Interfaces: JIDLNumber, java.io.Serializable Description The JIDLFloat class wraps a float as a mutable object usable by the Java-IDL Export bridge. Member ...",t:"JIDLFloat"},"900":{i:6.54525868411162E-05,u:"../Content/Connectivity Bridges/Appendices - IDL Java Object API/JIDLInteger.htm",a:"Declaration public class JIDLInteger implements JIDLNumber, java.io.Serializable  java.lang.Object | +--com.idl.javaidl.JIDLInteger All Implemented Interfaces: JIDLNumber, java.io.Serializable Description The JIDLInteger class wraps an int as a mutable object usable by the Java-IDL Export bridge. ...",t:"JIDLInteger"},"901":{i:7.89817583784146E-05,u:"../Content/Connectivity Bridges/Appendices - IDL Java Object API/JIDLKeyListener.htm",a:"Declaration public interface JIDLKeyListener All Known Implementing Classes: JIDLCanvas Description The listener interface for receiving keyboard events (key pressed, key released) on a JIDLCanvas. The class that is interested in handling these events implements this interface (and all the methods ...",t:"JIDLKeyListener"},"902":{i:6.54525868411162E-05,u:"../Content/Connectivity Bridges/Appendices - IDL Java Object API/JIDLLong.htm",a:"Declaration public class JIDLLong implements JIDLNumber, java.io.Serializable  java.lang.Object | +--com.idl.javaidl.JIDLLong All Implemented Interfaces: JIDLNumber, java.io.Serializable Description The JIDLLong class wraps a long as a mutable object usable by the Java-IDL Export bridge. Member ...",t:"JIDLLong"},"903":{i:7.89817583784146E-05,u:"../Content/Connectivity Bridges/Appendices - IDL Java Object API/JIDLMouseListener.htm",a:"Declaration public interface JIDLMouseListener All Known Implementing Classes: JIDLCanvas Description The listener interface for receiving mouse events from IDL (press, release, enter, and exit) on a JIDLCanvas. A mouse event is generated when the mouse is pressed, released, the mouse cursor enters ...",t:"JIDLMouseListener"},"904":{i:7.89817583784146E-05,u:"../Content/Connectivity Bridges/Appendices - IDL Java Object API/JIDLMouseMotionListener.htm",a:"Declaration public interface JIDLMouseMotionListener All Known Implementing Classes: JIDLCanvas Description The listener interface for receiving mouse motion events from IDL (move and drag) on a JIDLCanvas. (Mouse presses, releases, enter and exits are tracked using JIDLMouseListener.) The class ...",t:"JIDLMouseMotionListener"},"905":{i:7.89817583784146E-05,u:"../Content/Connectivity Bridges/Appendices - IDL Java Object API/JIDLMouseWheelListener.htm",a:"Declaration public interface JIDLMouseWheelListener All Known Implementing Classes: JIDLCanvas Description The listener interface for receiving mouse wheel events on a JIDLCanvas. The class that is interested in processing an IDL mouse wheel event implements this interface. The listener object ...",t:"JIDLMouseWheelListener"},"906":{i:7.89817583784146E-05,u:"../Content/Connectivity Bridges/Appendices - IDL Java Object API/JIDLNotifyListener.htm",a:"Declaration public interface JIDLNotifyListener Description The listener interface for receiving notify events from IDL. IDL objects that sub-class itComponent may trigger a notification by calling IDLitComponent::Notify. Both drawable (JIDLCanvas) and non-drawable (JIDLObject) wrapper objects may ...",t:"JIDLNotifyListener"},"907":{i:0.000116127468179647,u:"../Content/Connectivity Bridges/Appendices - IDL Java Object API/JIDLNumber.htm",a:"Declaration public interface JIDLNumber All Known Implementing Classes: JIDLShort, JIDLLong, JIDLInteger, JIDLFloat, JIDLDouble, JIDLChar, JIDLByte, JIDLBoolean Description The JIDLNumber class wraps a primitive java number as a mutable object usable by the Java-IDL Export bridge. Member Summary ...",t:"JIDLNumber"},"908":{i:7.89817583784146E-05,u:"../Content/Connectivity Bridges/Appendices - IDL Java Object API/JIDLObject.htm",a:"Declaration public class JIDLObject implements JIDLObjectI, java.io.Serializable  java.lang.Object | +--com.idl.javaidl.JIDLObject All Implemented Interfaces: JIDLObjectI, java.io.Serializable Description This class wraps an IDL object. In many of the methods of this class, one or more flags are ...",t:"JIDLObject"},"909":{i:0.000116127468179647,u:"../Content/Connectivity Bridges/Appendices - IDL Java Object API/JIDLObjectI.htm",a:"Declaration public interface JIDLObjectI All Known Implementing Classes: JIDLObject, JIDLCanvas Description The interface that wrapped IDL objects must implement. Both non-drawable and drawable IDL objects implement this interface. In many of the methods of this class, one or more flags are required ...",t:"JIDLObjectI"},"910":{i:7.89817583784146E-05,u:"../Content/Connectivity Bridges/Appendices - IDL Java Object API/JIDLOutputListener.htm",a:"Declaration public interface JIDLOutputListener Description The listener interface for receiving output events from IDL. Both drawable (JIDLCanvas) and non-drawable (JIDLObject) wrapper objects may be listened to. However by default, JIDLObject and JIDLCanvas objects do NOT listen to their output ...",t:"JIDLOutputListener"},"911":{i:6.54525868411162E-05,u:"../Content/Connectivity Bridges/Appendices - IDL Java Object API/JIDLProcessInitializer.htm",a:"Declaration public class JIDLProcessInitializer  java.lang.Object | +--com.idl.javaidl.JIDLProcessInitializer Description When a client calls the createObject method of either the JIDLCanvas or JIDLObject class, the JIDLProcessInitializer object can be passed in to control IDL process creation. ...",t:"JIDLProcessInitializer"},"912":{i:6.54525868411162E-05,u:"../Content/Connectivity Bridges/Appendices - IDL Java Object API/JIDLShort.htm",a:"Declaration public class JIDLShort implements JIDLNumber, java.io.Serializable  java.lang.Object | +--com.idl.javaidl.JIDLShort All Implemented Interfaces: JIDLNumber, java.io.Serializable Description The JIDLShort class wraps a short as a mutable object usable by the Java-IDL Export bridge. Member ...",t:"JIDLShort"},"913":{i:0.000116127468179647,u:"../Content/Connectivity Bridges/Appendices - IDL Java Object API/JIDLString.htm",a:"Declaration public class JIDLString implements java.io.Serializable  java.lang.Object | +--com.idl.javaidl.JIDLString All Implemented Interfaces: java.io.Serializable Description The JIDLString class wraps a String as a mutable object usable by the Java-IDL Export bridge. Member Summary Constructors ...",t:"JIDLString"},"914":{i:0.000279335254953174,u:"../Content/Reference Material/J/JOURNAL.htm",a:"The JOURNAL procedure provides a record of an interactive session by saving, in a file, all text entered from the terminal in response to the IDL prompt. The first call to JOURNAL starts the logging process. The read-only system variable !JOURNAL is set to the file unit used. To stop saving commands ...",t:"JOURNAL "},"915":{i:0.000128376762131726,u:"../Content/Reference Material/J/JSON_PARSE.htm",a:"The JSON_PARSE function takes a JSON (JavaScript Object Notation) string or file and converts it into an IDL variable. This routine is written in the IDL language. Its source code can be found in the file json_parse.pro in the lib subdirectory of the IDL distribution. The default result of ...",t:"JSON_PARSE"},"916":{i:7.78832905125E-05,u:"../Content/Reference Material/J/JSON_SERIALIZE.htm",a:"The JSON_SERIALIZE function takes a HASH, LIST, or structure variable and converts it into a JSON (JavaScript Object Notation) string. This routine is written in the IDL language. Its source code can be found in the file json_serialize.pro in the lib subdirectory of the IDL distribution. The ...",t:"JSON_SERIALIZE"},"917":{i:0.000281886560371792,u:"../Content/Reference Material/J/JUL2GREG.htm",a:"The JUL2GREG procedure calculates the Gregorian month, day, year (and optional hour, minute, second) from a Julian Date. This is the inverse of the GREG2JUL function. Notes The JUL2GREG procedure uses the proleptic Gregorian date, which is produced by extending the Gregorian calendar backwards to ...",t:"JUL2GREG"},"918":{i:0.000554123593392661,u:"../Content/Reference Material/J/JULDAY.htm",a:"The JULDAY function calculates the Julian Date (which begins at noon) for the specified date. This is the inverse of the CALDAT procedure. Notes The Julian calendar, established by Julius Caesar in the year 45 BCE, was corrected by Pope Gregory XIII in 1582, excising ten days from the calendar. For ...",t:"JULDAY "},"919":{i:5.50327019655568E-05,u:"../Content/Reference Material/K/K_list.htm",a:"K Routines ",t:"K Routines"},"920":{i:0.000598634201793542,u:"../Content/Reference Material/K/KEYWORD_SET.htm",a:"The KEYWORD_SET function returns a byte value based on the value of the specified expression. It returns 1 (true) if its argument is defined and nonzero, and 0 (false) otherwise. The exact rules used to determine this are given in Return Value below. Examples Suppose that you are writing an IDL ...",t:"KEYWORD_SET "},"921":{i:0.000541819573245967,u:"../Content/Reference Material/K/KRIG2D.htm",a:"The KRIG2D function using the kriging method to interpolate a regularly- or irregularly-gridded set of points to a regular grid. The parameters of the data model – the range, nugget, and sill – are highly dependent upon the degree and type of spatial variation of your data, and should be determined ...",t:"KRIG2D "},"922":{i:0.000357433692525937,u:"../Content/Reference Material/K/KURTOSIS.htm",a:"The KURTOSIS function computes the statistical kurtosis of an n -element vector. Kurtosis is defined as the degree to which a statistical frequency curve is peaked. KURTOSIS calls the IDL function MOMENT. KURTOSIS subtracts 3 from the raw kurtosis value since 3 is the kurtosis for a Gaussian ...",t:"KURTOSIS "},"923":{i:0.000398153692529309,u:"../Content/Reference Material/K/KW_TEST.htm",a:"The KW_TEST function tests the hypothesis that three or more sample populations have the same mean of distribution against the hypothesis that they differ. The populations may be of equal or unequal lengths. The output is a vector containing the test statistic, H, and value indicating the ...",t:"KW_TEST "},"924":{i:5.50327019655568E-05,u:"../Content/Reference Material/L/L_list.htm",a:"L Routines ",t:"L Routines"},"925":{i:0.000372695851085868,u:"../Content/Reference Material/L/L64INDGEN.htm",a:"The L64INDGEN function creates a 64-bit integer array with the specified dimensions. Each element of the array is set to the value of its one-dimensional subscript. For example, to create a 10-element by 10-element 64-bit array where each element is set to the value of its one-dimensional subscript, ...",t:"L64INDGEN "},"926":{i:0.000475695711313888,u:"../Content/Reference Material/L/LA_CHOLDC.htm",a:"The LA_CHOLDC procedure computes the Cholesky factorization of an n -by- n symmetric (or Hermitian) positive-definite array as: If A is real: A = U T U or A = L L T If A is complex: A = U H U or A = L L H where U and L are upper and lower triangular arrays. The T represents the transpose while H ...",t:"LA_CHOLDC "},"927":{i:0.000335727813657801,u:"../Content/Reference Material/L/LA_CHOLMPROVE.htm",a:"The LA_CHOLMPROVE function uses Cholesky factorization to improve the solution to a system of linear equations, AX = B (where A is symmetric or Hermitian), and provides optional error bounds and backward error estimates. The LA_CHOLMPROVE function may also be used to improve the solutions for ...",t:"LA_CHOLMPROVE"},"928":{i:0.000396664477344148,u:"../Content/Reference Material/L/LA_CHOLSOL.htm",a:"The LA_CHOLSOL function is used in conjunction with the LA_CHOLDC to solve a set of n linear equations in n unknowns, AX = B , where A must be a symmetric (or Hermitian) positive-definite array. The parameter A is input not as the original array, but as its Cholesky decomposition, created by the ...",t:"LA_CHOLSOL "},"929":{i:0.000137903621814848,u:"../Content/Reference Material/L/LA_DETERM.htm",a:"The LA_DETERM function uses LU decomposition to compute the determinant of a square array. This routine is written in the IDL language. Its source code can be found in the file la_determ.pro in the lib subdirectory of the IDL distribution. Examples The following program computes the determinant of a ...",t:"LA_DETERM "},"930":{i:0.000133713718937769,u:"../Content/Reference Material/L/LA_EIGENPROBLEM.htm",a:"The LA_EIGENPROBLEM function uses the QR algorithm to compute all eigenvalues λ and eigenvectors v ≠ 0 of an n -by- n real nonsymmetric or complex non-Hermitian array A , for the eigenproblem Av = λ v . The routine can also compute the left eigenvectors u ≠ 0, which satisfy u H A = λ u H . ...",t:"LA_EIGENPROBLEM "},"931":{i:9.92953340946574E-05,u:"../Content/Reference Material/L/LA_EIGENQL.htm",a:"The LA_EIGENQL function computes selected eigenvalues λ and eigenvectors z ≠ 0 of an n -by- n real symmetric or complex Hermitian array A , for the eigenproblem Az = λ z . LA_EIGENQL may also be used for the generalized symmetric eigenproblems: Az = λ Bz or ABz = λ z or BAz = λ z where A and B are ...",t:"LA_EIGENQL "},"932":{i:0.000294517983930759,u:"../Content/Reference Material/L/LA_EIGENVEC.htm",a:"The LA_EIGENVEC function uses the QR algorithm to compute all or some of the eigenvectors v ≠ 0 of an n -by- n real nonsymmetric or complex non-Hermitian array A , for the eigenproblem Av = λ v . The routine can also compute the left eigenvectors u ≠ 0, which satisfy u H A = λ u H . The left and ...",t:"LA_EIGENVEC"},"933":{i:0.000419160003488485,u:"../Content/Reference Material/L/LA_ELMHES.htm",a:"The LA_ELMHES function reduces a real nonsymmetric or complex non-Hermitian array to upper Hessenberg form H . If the array is real then the decomposition is A = Q H Q T , where Q is orthogonal. If the array is complex Hermitian then the decomposition is A = Q H Q H , where Q is unitary. The ...",t:"LA_ELMHES "},"934":{i:0.000368202697321914,u:"../Content/Reference Material/L/LA_GM_LINEAR_MODEL.htm",a:"The LA_GM_LINEAR_MODEL function is used to solve a general Gauss-Markov linear model problem: minimize x ||y|| 2 with constraint d = Ax + By where A is an m -column by n -row array, B is a p -column by n -row array, and d is an n -element input vector with m ≤ n ≤ m+p . The following items should be ...",t:"LA_GM_LINEAR_MODEL "},"935":{i:0.0004148233415943,u:"../Content/Reference Material/L/LA_HQR.htm",a:"The LA_HQR function uses the multishift QR algorithm to compute all eigenvalues of an n -by- n upper Hessenberg array. The LA_ELMHES routine can be used to reduce a real or complex array to upper Hessenberg form suitable for input to this procedure. LA_HQR may also be used to compute the matrices T ...",t:"LA_HQR "},"936":{i:0.000123139248144869,u:"../Content/Reference Material/L/LA_INVERT.htm",a:"The LA_INVERT function uses LU decomposition to compute the inverse of a square array. LA_INVERT is based on the following LAPACK routines: Output Type LAPACK Routine Float sgetrf, sgetri Double dgetrf, dgetri Complex cgetrf, cgetri Double complex zgetrf, zgetri Examples The following program ...",t:"LA_INVERT "},"937":{i:0.000368202697321914,u:"../Content/Reference Material/L/LA_LEAST_SQUARE_EQUALITY.htm",a:"The LA_LEAST_SQUARE_EQUALITY function is used to solve the linear least-squares problem: Minimize x ||Ax - c|| 2 with constraint Bx = d where A is an n -column by m -row array, B is an n -column by p -row array, c is an m -element input vector, and d is an p -element input vector with p ≤ n ≤ m+p . ...",t:"LA_LEAST_SQUARE_EQUALITY "},"938":{i:0.000368202697321914,u:"../Content/Reference Material/L/LA_LEAST_SQUARES.htm",a:"The LA_LEAST_SQUARES function is used to solve the linear least-squares problem: Minimize x || Ax - b|| 2 where A is a (possibly rank-deficient) n -column by m -row array, b is an m -element input vector, and x is the n -element solution vector. There are three possible cases: If m ≥ n and the rank ...",t:"LA_LEAST_SQUARES "},"939":{i:0.000170688425476018,u:"../Content/Reference Material/L/LA_LINEAR_EQUATION.htm",a:"The LA_LINEAR_EQUATION function uses LU decomposition to solve a system of linear equations, AX = B , and provides optional error bounds and backward error estimates. The LA_LINEAR_EQUATION function may also be used to solve for multiple systems of linear equations, with each column of B ...",t:"LA_LINEAR_EQUATION "},});