define({"1884":{i:0.000502786963712265,u:"../Content/Object Classes/Graphics/IDLgrFont_Properties.htm",a:"IDLgrFont objects have the following properties. Properties with the word “Yes” in the “Get” column of the property table can be retrieved via IDLgrFont::GetProperty . Properties with the word “Yes” in the “Init” column of the property table can be set via IDLgrFont::Init . Properties with the word ...",t:"IDLgrFont Properties"},"1885":{i:0.00025134210456209,u:"../Content/Object Classes/Graphics/IDLgrFont__Cleanup.htm",a:"IDLgrFont::Cleanup Syntax | Arguments | Keywords | Version History The IDLgrFont:: Cleanup procedure method performs all cleanup on the object. Syntax Obj -\u003e Cleanup or Obj -\u003e[ IDLgrFont ::]Cleanup or OBJ_DESTROY, Obj Arguments None Keywords None Version History 5.0 Introduced ",t:"IDLgrFont::Cleanup"},"1886":{i:0.00032092611764232,u:"../Content/Object Classes/Graphics/IDLgrFont__GetProperty.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrFont:: GetProperty procedure method retrieves the value of a property or group of properties for the font. Syntax Obj -\u003e[ IDLgrFont ::]GetProperty[, PROPERTY=variable ] Arguments None Keywords Any property listed under IDLgrFont Properties ...",t:"IDLgrFont::GetProperty"},"1887":{i:0.00032092611764232,u:"../Content/Object Classes/Graphics/IDLgrFont__Init.htm",a:"Syntax | Return Value | Arguments | Keywords | Version History The IDLgrFont:: Init function method initializes the font object. Init methods are special lifecycle methods , and as such cannot be called outside the context of object creation. This means that in most cases, you cannot call the Init ...",t:"IDLgrFont::Init"},"1888":{i:0.00032092611764232,u:"../Content/Object Classes/Graphics/IDLgrFont__SetProperty.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrFont:: SetProperty procedure method sets the value of a property or group of properties for the font. Syntax Obj -\u003e[ IDLgrFont ::]SetProperty[, PROPERTY=value ] Arguments None Keywords Any property listed under IDLgrFont Properties that ...",t:"IDLgrFont::SetProperty"},"1889":{i:0.00121106494137384,u:"../Content/Object Classes/Graphics/IDLgrImage.htm",a:"Superclasses | Creation | Properties | Methods | Examples | Version History An image object represents a mapping from a two-dimensional array of data values to a two dimensional array of pixel colors, resulting in a flat 2-D-scaled version of the image, drawn at Z = 0. An IDLgrImage object is an ...",t:"IDLgrImage"},"1890":{i:0.000743008952066425,u:"../Content/Object Classes/Graphics/IDLgrImage_Properties.htm",a:"IDLgrImage objects have the following properties in addition to properties inherited from any superclasses. Properties with the word “Yes” in the “Get” column of the property table can be retrieved via IDLgrImage::GetProperty . Properties with the word “Yes” in the “Init” column of the property ...",t:"IDLgrImage Properties"},"1891":{i:0.000167321374970703,u:"../Content/Object Classes/Graphics/IDLgrImage__Cleanup.htm",a:"IDLgrImage::Cleanup Syntax | Arguments | Keywords | Version History The IDLgrImage:: Cleanup procedure method performs all cleanup on the object. Syntax Obj -\u003e Cleanup or Obj -\u003e[ IDLgrImage ::]Cleanup or OBJ_DESTROY, Obj Arguments None Keywords None Version History 5.0 Introduced ",t:"IDLgrImage::Cleanup"},"1892":{i:0.000134245876521577,u:"../Content/Object Classes/Graphics/IDLgrImage__DeleteTileDa.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrImage:: DeleteTileData procedure method removes tile data from the cache. This is useful to free up cache memory if the application knows a number of tiles will not be displayed again for some time. It could also be used if the image data ...",t:"IDLgrImage::DeleteTileData"},"1893":{i:0.0001221707505231,u:"../Content/Object Classes/Graphics/IDLgrImage__GetCTM.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrImage:: GetCTM function method returns the 4 x 4 double-precision floating-point graphics transform matrix from the current object upward through the graphics tree. Syntax Result = Obj -\u003e[ IDLgrImage ::]GetCTM( [, DESTINATION = objref ] [, ...",t:"IDLgrImage::GetCTM"},"1894":{i:0.000202035325175893,u:"../Content/Object Classes/Graphics/IDLgrImage__GetProperty.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrImage:: GetProperty procedure method retrieves the value of the property or group of properties for the image. Syntax Obj -\u003e[ IDLgrImage ::]GetProperty[, PROPERTY=variable ] Arguments None Keywords Any property listed under IDLgrImage ...",t:"IDLgrImage::GetProperty"},"1895":{i:0.000183862571963189,u:"../Content/Object Classes/Graphics/IDLgrImage__Init.htm",a:"Syntax | Return Value | Arguments | Keywords | Version History The IDLgrImage:: Init function method initializes the image object. Init methods are special lifecycle methods , and as such cannot be called outside the context of object creation. This means that in most cases, you cannot call the Init ...",t:"IDLgrImage::Init"},"1896":{i:0.000227521844344295,u:"../Content/Object Classes/Graphics/IDLgrImage__ReadFiltered.htm",a:"The IDLgrImage::ReadFilteredData function method returns image data after a shader program (contained in an IDLgrShader object or object subclassed from IDLgrShader) has been applied, or after one or more shaders (contained in an IDLgrFilterChain object) have been applied. If there is sufficient ...",t:"IDLgrImage::ReadFilteredData"},"1897":{i:0.000202035325175893,u:"../Content/Object Classes/Graphics/IDLgrImage__SetProperty.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrImage:: SetProperty procedure method sets the value of the property or group of properties for the image. Syntax Obj -\u003e[ IDLgrImage ::]SetProperty[, PROPERTY=value ] [, / NO_COPY ] Arguments None Keywords Any property listed under IDLgrImage ...",t:"IDLgrImage::SetProperty"},"1898":{i:0.000568871022212516,u:"../Content/Object Classes/Graphics/IDLgrImage__SetTileData.htm",a:"The I DLgrImage:: SetTileData procedure method stores tile data in the IDLgrImage tile data cache. If a tile has data loaded but not for the required level, the data associated with the next highest available level will be used instead. Otherwise, IDLgrImage renders the tile using the solid color ...",t:"IDLgrImage::SetTileData"},"1899":{i:9.62093127527721E-05,u:"../Content/Object Classes/Graphics/IDLgrImage__TileDataLoad.htm",a:"The I DLgrImage:: TileDataLoaded function method tests whether a specified image tile has data loaded. Syntax Result = Obj -\u003e[ IDLgrImage ::]TileDataLoaded( TileInfo ) Return Value Returns 1 (one) if the tile has data already loaded, or 0 (zero) otherwise. Arguments TileInfo A named structure ...",t:"IDLgrImage::TileDataLoaded"},"1900":{i:0.000399607054871118,u:"../Content/Object Classes/Graphics/IDLgrLegend.htm",a:"Superclasses | Creation | Properties | Methods | Version History The IDLgrLeg end object provides a simple interface for displaying a legend. The legend itself consists of a (filled and/or framed) box around one or more legend items (arranged in a single column) and an optional title string. Each ...",t:"IDLgrLegend"},"1901":{i:0.000253417962167145,u:"../Content/Object Classes/Graphics/IDLgrLegend_Properties.htm",a:"IDLgrLegend objects have the following properties in addition to properties inherited from any superclasses. Properties with the word “Yes” in the “Get” column of the property table can be retrieved via IDLgrLegend::GetProperty . Properties with the word “Yes” in the “Init” column of the property ...",t:"IDLgrLegend Properties"},"1902":{i:0.000154781699319003,u:"../Content/Object Classes/Graphics/IDLgrLegend__Cleanup.htm",a:"IDLgrLegend::Cleanup Syntax | Arguments | Keywords | Version History The IDLgrLegend:: Cleanup procedure method performs all cleanup on the object. Syntax Obj -\u003e Cleanup or Obj -\u003e[ IDLgrLegend ::]Cleanup or OBJ_DESTROY, Obj Arguments None Keywords None Version History 5.1 Introduced ",t:"IDLgrLegend::Cleanup"},"1903":{i:0.000124185237460449,u:"../Content/Object Classes/Graphics/IDLgrLegend__ComputeDime.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrLegend:: ComputeDimensions function method retrieves the dimensions of a legend object for the given destination object. In order to compute the effective dimensions, the object must be inserted into an object graphics hierarchy prior to using ...",t:"IDLgrLegend::ComputeDimensions"},"1904":{i:0.000161756040750212,u:"../Content/Object Classes/Graphics/IDLgrLegend__GetProperty.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrLegend:: GetProperty procedure method retrieves the value of a property or group of properties for the legend. Syntax Obj -\u003e[ IDLgrLegend ::]GetProperty[, PROPERTY=variable ] Arguments None Keywords Any property listed under IDLgrLegend ...",t:"IDLgrLegend::GetProperty"},"1905":{i:0.000161756040750212,u:"../Content/Object Classes/Graphics/IDLgrLegend__Init.htm",a:"Syntax | Return Value | Arguments | Keywords | Version History The IDLgrLegend:: Init function method initializes the legend object. Init methods are special lifecycle methods , and as such cannot be called outside the context of object creation. This means that in most cases, you cannot call the ...",t:"IDLgrLegend::Init"},"1906":{i:0.000154781699319003,u:"../Content/Object Classes/Graphics/IDLgrLegend__Remove.htm",a:"The IDLgrLegend:: Remove procedure method removes a legend item from the legend. Syntax Obj -\u003e[ IDLgrLegend ::]Remove [, Items] [, / ALL ] Arguments Items A single item, an array of items, or a list of items to be removed from the legend. An item can be a graphic reference or a graphic name. ...",t:"IDLgrLegend::Remove"},"1907":{i:0.000161756040750212,u:"../Content/Object Classes/Graphics/IDLgrLegend__SetProperty.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrLegend:: SetProperty procedure method sets the value of a property or group of properties for the legend. Syntax Obj -\u003e[ IDLgrLegend ::]SetProperty[, PROPERTY=value ] Arguments None Keywords Any property listed under IDLgrLegend Properties ...",t:"IDLgrLegend::SetProperty"},"1908":{i:0.000463336206078878,u:"../Content/Object Classes/Graphics/IDLgrLight.htm",a:"Superclasses | Creation | Properties | Methods | Version History A light object represents a source of illumination for three-dimensional graphic objects. Lights may be either ambient, positional, directional, or spotlights. The first 8 non-ambient type lights encountered in a scene are activated. ...",t:"IDLgrLight"},"1909":{i:0.000296877929948211,u:"../Content/Object Classes/Graphics/IDLgrLight_Properties.htm",a:"IDLgrLight objects have the following properties in addition to properties inherited from any superclasses. Properties with the word “Yes” in the “Get” column of the property table can be retrieved via IDLgrLight::GetProperty . Properties with the word “Yes” in the “Init” column of the property ...",t:"IDLgrLight Properties"},"1910":{i:0.000181325971994383,u:"../Content/Object Classes/Graphics/IDLgrLight__Cleanup.htm",a:"IDLgrLight::Cleanup Syntax | Arguments | Keywords | Version History The IDLgrLight:: Cleanup procedure method performs all cleanup on the object. Syntax Obj -\u003e Cleanup or Obj -\u003e[ IDLgrLight ::]Cleanup or OBJ_DESTROY, Obj Arguments None Keywords None Version History 5.0 Introduced ",t:"IDLgrLight::Cleanup"},"1911":{i:0.000132396605608919,u:"../Content/Object Classes/Graphics/IDLgrLight__GetCTM.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrLight:: GetCTM function method returns the 4-by-4 double-precision floating-point graphics transform matrix from the current object upward through the graphics tree. Syntax Result = Obj -\u003e[ IDLgrLight ::]GetCTM( [, DESTINATION = objref ] [, ...",t:"IDLgrLight::GetCTM"},"1912":{i:0.000189496400083024,u:"../Content/Object Classes/Graphics/IDLgrLight__GetProperty.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrLight:: GetProperty procedure method retrieves the value of a property or group of properties for the light. Syntax Obj -\u003e[ IDLgrLight ::]GetProperty[, PROPERTY=variable ] Arguments None Keywords Any property listed under IDLgrLight Properties ...",t:"IDLgrLight::GetProperty"},"1913":{i:0.000189496400083024,u:"../Content/Object Classes/Graphics/IDLgrLight__Init.htm",a:"Syntax | Return Value | Arguments | Keywords | Version History The IDLgrLight:: Init function method initializes the light object. Init methods are special lifecycle methods , and as such cannot be called outside the context of object creation. This means that in most cases, you cannot call the Init ...",t:"IDLgrLight::Init"},"1914":{i:0.000189496400083024,u:"../Content/Object Classes/Graphics/IDLgrLight__SetProperty.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrLight:: SetProperty procedure method sets the value of a property or group of properties for the light. Syntax Obj -\u003e[ IDLgrLight ::]SetProperty[, PROPERTY=value ] Arguments None Keywords Any property listed under IDLgrLight Properties that ...",t:"IDLgrLight::SetProperty"},"1915":{i:0.00272416844234895,u:"../Content/Object Classes/Graphics/IDLgrModel.htm",a:"A model object represents a graphical item or group of items that can be transformed (rotated, scaled, and/or translated). It serves as a container of other IDLgrModel objects or atomic graphic objects. IDLgrModel applies a transform to the current view tree. Superclasses IDL_Container ...",t:"IDLgrModel"},"1916":{i:0.000632650566994545,u:"../Content/Object Classes/Graphics/IDLgrModel_Properties.htm",a:"IDLgrModel objects have the following properties in addition to properties inherited from any superclasses. Properties with the word “Yes” in the “Get” column of the property table can be retrieved via IDLgrModel::GetProperty . Properties with the word “Yes” in the “Init” column of the property ...",t:"IDLgrModel Properties"},"1917":{i:0.00157231164228877,u:"../Content/Object Classes/Graphics/IDLgrModel__Add.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrModel:: Add procedure method adds a child to this Model. Syntax Obj -\u003e[ IDLgrModel ::]Add, Object [, / ALIAS ] [, POSITION = index ] Arguments Object An instance of an atomic graphic object or another model object to be added to the model ...",t:"IDLgrModel::Add"},"1918":{i:0.000332604125220064,u:"../Content/Object Classes/Graphics/IDLgrModel__Cleanup.htm",a:"IDLgrModel::Cleanup Syntax | Arguments | Keywords | Version History The IDLgrModel:: Cleanup procedure method performs all cleanup on the object. Syntax Obj -\u003e Cleanup or Obj -\u003e[ IDLgrModel ::]Cleanup or OBJ_DESTROY, Obj Arguments None Keywords None Version History 5.0 Introduced ",t:"IDLgrModel::Cleanup"},"1919":{i:0.000191244084433086,u:"../Content/Object Classes/Graphics/IDLgrModel__Draw.htm",a:"The IDLgrModel:: Draw procedure method draws the specified picture to the specified graphics destination. This method is provided for purposes of sub-classing only, and is intended to be called only from the Draw method of a subclass of IDLgrModel. Objects are drawn to the destination device in the ...",t:"IDLgrModel::Draw"},"1920":{i:0.000332604125220064,u:"../Content/Object Classes/Graphics/IDLgrModel__GetByName.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrModel:: GetByName function method finds contained objects by name and returns the object reference to the named object. If the named object is not found, the GetByName function returns a null object reference. The GetByName function does not ...",t:"IDLgrModel::GetByName"},"1921":{i:0.000266854448024727,u:"../Content/Object Classes/Graphics/IDLgrModel__GetCTM.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrModel:: GetCTM function method returns the 4-by-4 double-precision floating-point graphics transform matrix from the current object upward through the graphics tree. Syntax Result = Obj -\u003e[ IDLgrModel ::]GetCTM( [, DESTINATION = objref ] [, ...",t:"IDLgrModel::GetCTM"},"1922":{i:0.000341893229911342,u:"../Content/Object Classes/Graphics/IDLgrModel__GetProperty.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrModel:: GetProperty procedure method retrieves the value of a property or group of properties for the model. Syntax Obj -\u003e[ IDLgrModel ::]GetProperty[, PROPERTY=variable ] Arguments None Keywords Any property listed under IDLgrModel Properties ...",t:"IDLgrModel::GetProperty"},"1923":{i:0.000541814360920451,u:"../Content/Object Classes/Graphics/IDLgrModel__Init.htm",a:"Syntax | Return Value | Arguments | Keywords | Version History The IDLgrModel:: Init procedure method initializes the model object. Init methods are special lifecycle methods , and as such cannot be called outside the context of object creation. This means that in most cases, you cannot call the ...",t:"IDLgrModel::Init"},"1924":{i:0.000332604125220064,u:"../Content/Object Classes/Graphics/IDLgrModel__Reset.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrModel:: Reset procedure method sets the current transform matrix for the model object to the identity matrix. Using this method is functionally identical to the following statement: Obj -\u003e[ IDLgrModel ::]SetProperty, TRANSFORM=IDENTITY(4) ...",t:"IDLgrModel::Reset"},"1925":{i:0.000372501050292375,u:"../Content/Object Classes/Graphics/IDLgrModel__Rotate.htm",a:"The IDLgrModel:: Rotate procedure method rotates the model about the specified axis by the specified angle. IDL computes and maintains the resulting transform matrix in double-precision floating-point. Syntax Obj -\u003e[ IDLgrModel ::]Rotate , Axis, Angle [, / PREMULTIPLY ] Arguments Axis A ...",t:"IDLgrModel::Rotate"},"1926":{i:0.000422190966936958,u:"../Content/Object Classes/Graphics/IDLgrModel__Scale.htm",a:"The IDLgrModel:: Scale procedure method scales the model by the specified scaling factors. IDL computes and maintains the resulting transform matrix in double-precision floating-point. Syntax Obj -\u003e[ IDLgrModel ::]Scale , Sx, Sy, Sz [, / PREMULTIPLY ] Arguments Sx, Sy, Sz The floating-point scaling ...",t:"IDLgrModel::Scale"},"1927":{i:0.00048435832057736,u:"../Content/Object Classes/Graphics/IDLgrModel__SetProperty.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrModel:: SetProperty procedure method sets the value of a property or group of properties for the model. Syntax Obj -\u003e[ IDLgrModel ::]SetProperty[, PROPERTY=value ] Arguments None Keywords Any property listed under IDLgrModel Properties that ...",t:"IDLgrModel::SetProperty"},"1928":{i:0.000372501050292375,u:"../Content/Object Classes/Graphics/IDLgrModel__Translate.htm",a:"The IDLgrModel:: Translate procedure method translates the model by the specified translation offsets. IDL computes and maintains the resulting transform matrix in double-precision floating-point. Syntax Obj -\u003e[ IDLgrModel ::]Translate , Tx, Ty, Tz [, / PREMULTIPLY ] Arguments Tx, Ty, Tz The offsets ...",t:"IDLgrModel::Translate"},"1929":{i:0.00139629893479,u:"../Content/Object Classes/Graphics/IDLgrPalette.htm",a:"Superclasses | Creation | Properties | Methods | Examples | Version History A palette object represents a color lookup table that maps indices to red, green, and blue values. Superclasses None Creation See IDLgrPalette::Init . Properties Objects of this class have the following properties. See ...",t:"IDLgrPalette"},"1930":{i:0.000614995284137839,u:"../Content/Object Classes/Graphics/IDLgrPalette_Properties.htm",a:"IDLgrPalette objects have the following properties in addition to properties inherited from any superclasses. Properties with the word “Yes” in the “Get” column of the property table can be retrieved via IDLgrPalette::GetProperty . Properties with the word “Yes” in the “Init” column of the property ...",t:"IDLgrPalette Properties"},"1931":{i:0.00026772305917083,u:"../Content/Object Classes/Graphics/IDLgrPalette__Cleanup.htm",a:"IDLgrPalette::Cleanup Syntax | Arguments | Keywords | Version History The IDLgrPalette:: Cleanup procedure method performs all cleanup on the object. Syntax Obj -\u003e Cleanup or Obj -\u003e[ IDLgrPalette ::]Cleanup or OBJ_DESTROY, Obj Arguments None Keywords None Version History 5.0 Introduced ",t:"IDLgrPalette::Cleanup"},"1932":{i:0.00026772305917083,u:"../Content/Object Classes/Graphics/IDLgrPalette__GetRGB.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrPalette:: GetRGB function method returns the RGB values contained in the palette at the given index. The returned value is a three-element vector of the form [red, green, blue]. Syntax Result = Obj -\u003e[ IDLgrPalette ::]GetRGB( Index ) Return ...",t:"IDLgrPalette::GetRGB"},"1933":{i:0.000360687076352244,u:"../Content/Object Classes/Graphics/IDLgrPalette__GetPropert.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrPalette:: GetProperty procedure method retrieves the value of a property or group of properties for the palette. Syntax Obj -\u003e[ IDLgrPalette ::]GetProperty[, PROPERTY=variable ] Arguments None Keywords Any property listed under IDLgrPalette ...",t:"IDLgrPalette::GetProperty"},"1934":{i:0.000536855496659544,u:"../Content/Object Classes/Graphics/IDLgrPalette__Init.htm",a:"Syntax | Return Value | Arguments | Keywords | Version History The IDLgrPalette:: Init function method initializes a palette object. Init methods are special lifecycle methods , and as such cannot be called outside the context of object creation. This means that in most cases, you cannot call the ...",t:"IDLgrPalette::Init"},"1935":{i:0.000243282659398431,u:"../Content/Object Classes/Graphics/IDLgrPalette__LoadCT.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrPalette:: LoadCT procedure method loads one of the IDL predefined color tables into an IDLgrPalette object. Syntax Obj -\u003e[ IDLgrPalette ::]LoadCT, TableNum [, FILE = colortable filename ] Arguments TableNum The number of the pre-defined IDL ...",t:"IDLgrPalette::LoadCT"},"1936":{i:0.000156124625003867,u:"../Content/Object Classes/Graphics/IDLgrPalette__NearestCol.htm",a:"The IDLgrPalette:: NearestColor function method returns the index of the palette color that best matches the given RGB values, using a simple squared-distance formula. Syntax Result = Obj -\u003e[ IDLgrPalette ::]NearestColor( Red , Green , Blue ) Return Value Returns the index of the color in the ...",t:"IDLgrPalette::NearestColor"},"1937":{i:0.00026772305917083,u:"../Content/Object Classes/Graphics/IDLgrPalette__SetRGB.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrPalette:: SetRGB procedure method sets the color values at a specified index in the palette to the specified Red, Green and Blue values. Syntax Obj -\u003e[ IDLgrPalette ::]SetRGB, Index , Red , Green , Blue Arguments Index The index within the ...",t:"IDLgrPalette::SetRGB"},"1938":{i:0.000360687076352244,u:"../Content/Object Classes/Graphics/IDLgrPalette__SetPropert.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrPalette:: SetProperty procedure method sets the value of a property or group of properties for the palette. Syntax Obj -\u003e[ IDLgrPalette ::]SetProperty[, PROPERTY=value ] Arguments None Keywords Any property listed under IDLgrPalette Properties ...",t:"IDLgrPalette::SetProperty"},"1939":{i:0.000423588523368462,u:"../Content/Object Classes/Graphics/IDLgrPattern.htm",a:"Superclasses | Creation | Properties | Methods | Version History A pattern object describes which pixels are filled and which are left blank when an area is filled. Pattern objects are used by setting the FILL_PATTERN property of a polygon object equal to the object reference of the pattern object. ...",t:"IDLgrPattern"},"1940":{i:0.000400231912142466,u:"../Content/Object Classes/Graphics/IDLgrPattern_Properties.htm",a:"IDLgrPattern objects have the following properties. Properties with the word “Yes” in the “Get” column of the property table can be retrieved via IDLgrPattern::GetProperty . Properties with the word “Yes” in the “Init” column of the property table can be set via IDLgrPattern::Init . Properties with ...",t:"IDLgrPattern Properties"},"1941":{i:0.000200074958056923,u:"../Content/Object Classes/Graphics/IDLgrPattern__Cleanup.htm",a:"IDLgrPattern::Cleanup Syntax | Arguments | Keywords | Version History The IDLgrPattern:: Cleanup procedure method performs all cleanup on the object. Syntax Obj -\u003e Cleanup or Obj -\u003e[ IDLgrPattern ::]Cleanup or OBJ_DESTROY, Obj Arguments None Keywords None Version History 5.0 Introduced ",t:"IDLgrPattern::Cleanup"},"1942":{i:0.000255465717303163,u:"../Content/Object Classes/Graphics/IDLgrPattern__GetPropert.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrPattern:: GetProperty procedure method retrieves the value of a property or group of properties for the pattern. Syntax Obj -\u003e[ IDLgrPattern ::]GetProperty[, PROPERTY=variable ] Arguments None Keywords Any property listed under IDLgrPattern ...",t:"IDLgrPattern::GetProperty"},"1943":{i:0.000255465717303163,u:"../Content/Object Classes/Graphics/IDLgrPattern__Init.htm",a:"Syntax | Return Value | Arguments | Keywords | Version History The IDLgrPattern:: Init function method initializes the pattern object. Init methods are special lifecycle methods , and as such cannot be called outside the context of object creation. This means that in most cases, you cannot call the ...",t:"IDLgrPattern::Init"},"1944":{i:0.000255465717303163,u:"../Content/Object Classes/Graphics/IDLgrPattern__SetPropert.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrPattern:: SetProperty procedure method sets the value of a property or group of properties for the pattern. Syntax Obj -\u003e[ IDLgrPattern ::]SetProperty[, PROPERTY=value ] Arguments None Keywords Any property listed under IDLgrPattern Properties ...",t:"IDLgrPattern::SetProperty"},"1945":{i:6.79921554264926E-05,u:"../Content/Object Classes/Graphics/IDLgrPDF.htm",a:"Superclasses | Creation | Properties | Methods | Examples | Version History An IDLgrPDF object saves Object Graphics output to a PDF file. Superclasses IDLitComponent Creation See IDLgrPDF::Init . Properties Objects of this class have the following properties. See IDLgrClipboard Properties for ...",t:"IDLgrPDF"},"1946":{i:0.000346566293111817,u:"../Content/Object Classes/Graphics/IDLgrPlot.htm",a:"Superclasses | Creation | Properties | Methods | Version History A plot object creates a set of polylines connecting data points in two-dimensional space. An IDLgrPlot object is an atomic graphic object ; it is one of the basic drawable elements of the IDL Object Graphics system, and it is not a ...",t:"IDLgrPlot"},"1947":{i:0.000251940787705826,u:"../Content/Object Classes/Graphics/IDLgrPlot_Properties.htm",a:"IDLgrPlot objects have the following properties in addition to properties inherited from any superclasses. Properties with the word “Yes” in the “Get” column of the property table can be retrieved via IDLgrPlot::GetProperty . Properties with the word “Yes” in the “Init” column of the property table ...",t:"IDLgrPlot Properties"},"1948":{i:0.000142283347913253,u:"../Content/Object Classes/Graphics/IDLgrPlot__Cleanup.htm",a:"IDLgrPlot::Cleanup Syntax | Arguments | Keywords | Version History The IDLgrPlot:: Cleanup procedure method performs all cleanup on the object. Syntax Obj -\u003e Cleanup or Obj -\u003e[ IDLgrPlot ::]Cleanup or OBJ_DESTROY, Obj Arguments None Keywords None Version History 5.0 Introduced ",t:"IDLgrPlot::Cleanup"},"1949":{i:0.000103889370743068,u:"../Content/Object Classes/Graphics/IDLgrPlot__GetCTM.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrPlot:: GetCTM function method returns the 4-by-4 double-precision floating-point graphics transform matrix from the current object upward through the graphics tree. Syntax Result = Obj -\u003e[ IDLgrPlot ::]GetCTM( [, DESTINATION = objref ] [, PATH ...",t:"IDLgrPlot::GetCTM"},"1950":{i:0.000147359086321177,u:"../Content/Object Classes/Graphics/IDLgrPlot__GetProperty.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrPlot:: GetProperty procedure method retrieves the value of the property or group of properties for the plot. Syntax Obj -\u003e[ IDLgrPlot ::]GetProperty[, PROPERTY=variable ] Arguments None Keywords Any property listed under IDLgrPlot Properties ...",t:"IDLgrPlot::GetProperty"},"1951":{i:0.000100564945205508,u:"../Content/Object Classes/Graphics/IDLgrPlot__GetVertexAttr.htm",a:"The IDLgrPlot::GetVertexAttributeData procedure method retrieves the data associated with a named attribute variable containing per-vertex attribute data. This method is useful when a shader program defined by an IDLgrShader object modifies the vertices of an object. Syntax Obj -\u003e[ IDLgrPlot ...",t:"IDLgrPlot::GetVertexAttributeData"},"1952":{i:0.000147359086321177,u:"../Content/Object Classes/Graphics/IDLgrPlot__Init.htm",a:"Syntax | Return Value | Arguments | Keywords | Version History The IDLgrPlot:: Init function method initializes the plot object. Init methods are special lifecycle methods , and as such cannot be called outside the context of object creation. This means that in most cases, you cannot call the Init ...",t:"IDLgrPlot::Init"},"1953":{i:0.000147359086321177,u:"../Content/Object Classes/Graphics/IDLgrPlot__SetProperty.htm",a:"Syntax | Arguments | Keywords | Version History The IDLgrPlot:: SetProperty procedure method sets the value of the property or group of properties for the plot. Syntax Obj -\u003e[ IDLgrPlot ::]SetProperty[, PROPERTY=value ] Arguments None Keywords Any property listed under IDLgrPlot Properties that ...",t:"IDLgrPlot::SetProperty"},});