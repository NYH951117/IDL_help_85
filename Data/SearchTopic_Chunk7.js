define({"510":{i:5.50327019655568E-05,u:"../Content/Reference Material/G/GRIB Routines/GRIB_NEW_FROM_INDEX.htm",a:"The GRIB_NEW_FROM_INDEX function creates a new handle from an index after selecting the key values. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax Result = GRIB_NEW_FROM_INDEX( Gindex ) Return Value Returns an index handle. Arguments Gindex A GRIB index created ...",t:"GRIB_NEW_FROM_INDEX"},"511":{i:5.50327019655568E-05,u:"../Content/Reference Material/G/GRIB Routines/GRIB_NEW_FROM_SAMPLES.htm",a:"The GRIB_NEW_FROM_SAMPLES function creates a new GRIB handle from a sample. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax Result = GRIB_NEW_FROM_SAMPLES( Resourcename ) Return Value Returns a new GRIB handle. Arguments Resourcename The resource name in \u003c IDL_DIR ...",t:"GRIB_NEW_FROM_SAMPLES"},"512":{i:0.000174373374128043,u:"../Content/Reference Material/G/GRIB Routines/GRIB_OPEN.htm",a:"The GRIB_OPEN function opens a GRIB file. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax Result = GRIB_OPEN( Filename ) Return Value Returns the file ID for the GRIB file. Arguments Filename A named variable containing the filename string. Version History 8.1 ...",t:"GRIB_OPEN"},"513":{i:0.000127229441965727,u:"../Content/Reference Material/G/GRIB Routines/GRIB_PUTDATA.htm",a:"This procedure adds a new record to an existing GRIB file. If the file doesn\u0027t exists, IDL will create a file in the specified location. Examples In this example, we locate a GRIB file on disk, create a copy in the current directory file = FILEPATH(\u0027atl.grb2\u0027, $ SUBDIRECTORY=[\u0027examples\u0027,\u0027data\u0027]) ...",t:"GRIB_PUTDATA"},"514":{i:9.31076868381829E-05,u:"../Content/Reference Material/G/GRIB Routines/GRIB_RELEASE.htm",a:"The GRIB_RELEASE procedure deletes the file handle and releases the file memory. Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax GRIB_RELEASE, Ghandle Arguments Ghandle A GRIB handle. Version History 8.1 Introduced See Also GRIB_OPEN , GRIB_NEW_FROM_FILE  ",t:"GRIB_RELEASE"},"515":{i:0.00113070943990583,u:"../Content/Reference Material/G/GRIB Routines/GRIB_SET.htm",a:"The GRIB_SET procedure sets the value of a scalar key in a GRIB message. Examples This example procedure reads the GRIB file filename_in , sets key/value pairs, and writes the output to the file filename_out . Set the KEY keyword to a case-sensitive string. If KEY is set, VALUE must be set. Set the ...",t:"GRIB_SET"},"516":{i:5.50327019655568E-05,u:"../Content/Reference Material/G/GRIB Routines/GRIB_SET_ARRAY.htm",a:"The GRIB_SET_ARRAY procedure sets the value of a scalar key in a GRIB message. Examples See GRIB_SET for a general example using the GRIB routines. Syntax GRIB_SET_ARRAY, Ghandle , Key , Value Arguments Ghandle The GRIB file handle. Key The key name, which must be a case-sensitive string. Value The ...",t:"GRIB_SET_ARRAY"},"517":{i:9.57090966120056E-05,u:"../Content/Reference Material/G/GRIB Routines/GRIB_SET_MISSING.htm",a:"The GRIB_SET_MISSING procedure sets the value of a key as \"missing.\" Examples See GRIB_GET_VALUES for a general example using the GRIB routines. Syntax GRIB_SET_MISSING, Ghandle , Key Arguments Ghandle A GRIB handle. Key Key string whose value is to be set as missing. Version History 8.1 Introduced ...",t:"GRIB_SET_MISSING"},"518":{i:0.0010402278070402,u:"../Content/Reference Material/G/GRIB Routines/GRIB_SET_VALUES.htm",a:"The GRIB_SET_VALUES procedure sets the contents of the values key. Examples See GRIB_SET for a general example using the GRIB routines. Syntax GRIB_SET_VALUES, Ghandle , Values Arguments Ghandle The GRIB file handle. Values The array of key values to set. The values array must be of a type that can ...",t:"GRIB_SET_VALUES"},"519":{i:5.50327019655568E-05,u:"../Content/Reference Material/G/GRIB Routines/GRIB_WRITE_MESSAGE.htm",a:"The GRIB_WRITE_MESSAGE procedure writes a message to a file. Examples See GRIB_SET for a general example using the GRIB routines. Syntax GRIB_WRITE_MESSAGE, Filename, Ghandle Arguments Filename The file in which the file handle is written. Ghandle The GRIB handle to be written. Version History 8.1 ...",t:"GRIB_WRITE_MESSAGE"},"520":{i:0.000631407266498162,u:"../Content/Reference Material/G/GRID_INPUT.htm",a:"The GRID_INPUT procedure preprocesses and sorts two-dimensional scattered data points, and removes duplicate values. This procedure is also used for converting spherical coordinates to Cartesian coordinates. GRID_INPUT accepts complex input but only utilizes the real part of any complex number. ...",t:"GRID_INPUT "},"521":{i:0.000356830869110799,u:"../Content/Reference Material/G/GRID_TPS.htm",a:"The GRID_TPS function uses thin plate splines to interpolate a set of values over a regular two dimensional grid, from irregularly sampled data values. Thin plate splines are ideal for modeling functions with complex local distortions, such as warping functions, which are too complex to be fit with ...",t:"GRID_TPS "},"522":{i:9.30261358193128E-05,u:"../Content/Reference Material/G/GRID3.htm",a:"The GRID3 function fits a smooth function to a set of 3D scattered nodes ( x i , y i , z i ) with associated data values ( f i ). The function can be sampled over a set of user-specified points, or over an arbitrary 3D grid which can then be viewed using the SLICER3 procedure. GRID3 uses the method ...",t:"GRID3 "},"523":{i:0.000661933592484128,u:"../Content/Reference Material/G/GRIDDATA.htm",a:"The GRIDDATA function interpolates scattered data values on a plane or a sphere to a regular grid, an irregular grid, a specified set of interpolates, or scattered data points. The returned value is a two-dimensional floating point array. Computations are performed in double-precision floating ...",t:"GRIDDATA "},"524":{i:0.000503212723797371,u:"../Content/Reference Material/G/GS_ITER.htm",a:"The GS_ITER function solves an n by n linear system of equations using Gauss-Seidel iteration with over- and under-relaxation to enhance convergence. The equations must be entered in diagonally dominant form to guarantee convergence. A system is diagonally dominant if the diagonal element in a given ...",t:"GS_ITER "},"525":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/H_list.htm",a:"H Routines ",t:"H Routines"},"526":{i:0.00148374924071536,u:"../Content/Reference Material/H/H_EQ_CT.htm",a:"The H_EQ_CT procedure histogram-equalizes the color tables for an image or a region of the display. A pixel-distribution histogram is obtained, the cumulative integral is taken and scaled, and the result is applied to the current color table. Histogram equalization is used to change either an image ...",t:"H_EQ_CT "},"527":{i:0.0014381144921593,u:"../Content/Reference Material/H/H_EQ_INT.htm",a:"The H_EQ_INT procedure interactively histogram-equalizes the color tables of an image or a region of the display. By moving the cursor across the screen, the amount of histogram-equalization can be varied. Either the image parameter or a region of the display marked by the user is used to obtain a ...",t:"H_EQ_INT "},"528":{i:7.22170477038535E-05,u:"../Content/Reference Material/H/HANNING.htm",a:"The HANNING function is used to create a “window” for Fourier Transform filtering. It can be used to create both Hanning and Hamming windows. This routine is written in the IDL language. Its source code can be found in the file hanning.pro in the lib subdirectory of the IDL distribution. The Hanning ...",t:"HANNING "},"529":{i:0.000392681617032271,u:"../Content/Reference Material/H/HASH.htm",a:"The HASH function creates a new hash. A hash is a compound data type that contains key-value pairs of different data types, including any mixture of scalars, arrays, structures, pointers, object references, lists , and other hashes. Hashes have the following properties: Elements in a hash are ...",t:"HASH"},"530":{i:6.15518474307913E-05,u:"../Content/Reference Material/H/HDF_Routines.htm",a:"HDF Routines HDF Overview ",t:"HDF Routines"},"531":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_AN_ANNLEN.htm",a:"This function returns the number of characters contained in the HDF AN annotation specified by the annotation identifier Annotation_id . Syntax Result = HDF_AN_ANNLEN( Annotation_id ) Return Value The number of characters contained in the HDF AN annotation. Arguments Annotation_id Annotation ...",t:"HDF_AN_ANNLEN "},"532":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_AN_ANNLIST.htm",a:"This function obtains a list of identifiers of the annotations that are of the type specified by the parameter Annotation_type and are attached to the object identified by its tag, Object_tag , and its reference number, Object_ref . Syntax Result = HDF_AN_ANNLIST( Annotation_id , Annotation_type , ...",t:"HDF_AN_ANNLIST "},"533":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_AN_ATYPE2TAG.htm",a:"This function returns the HDF tag that corresponds to the annotation type specified by the parameter Annotation_type . Syntax Result = HDF_AN_ATYPE2TAG( Annotation_type ) Return Value Returns the HDF annotation tag ( Annotation_tag ) if successful, or not found (0) otherwise. Arguments ...",t:"HDF_AN_ATYPE2TAG "},"534":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_AN_CREATE.htm",a:"This function creates an HDF AN data annotation of type Annotation_type for the object specified by its HDF tag, Object_tag , and its HDF reference number, Object_ref . Use HDF_AN_CREATEF to create a file annotation. Currently, the user must write to a newly-created annotation before creating ...",t:"HDF_AN_CREATE"},"535":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_AN_CREATEF.htm",a:"This function creates an HDF AN file annotation of the type specified by the parameter Annotation_type . Use HDF_AN_CREATE to create a data annotation. Currently, the user must write to a newly-created annotation before creating another annotation of the same type. Creating two consecutive ...",t:"HDF_AN_CREATEF"},"536":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_AN_END.htm",a:"This procedure terminates access to the HDF AN interface identified by Annotation_id , which is previously initialized by a call to HDF_AN_START. Note that there must be one call to HDF_AN_END for each call to HDF_AN_START. Syntax HDF_AN_END, Annotation_id Arguments Annotation_id HDF AN interface ...",t:"HDF_AN_END"},"537":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_AN_ENDACCESS.htm",a:"This procedure terminates access to the annotation identified by the parameter Annotation_id. Note that there must be one call to HDF_AN_ENDACCESS for every call to HDF_AN_SELECT, HDF_AN_CREATE or HDF_AN_CREATEF. Syntax HDF_AN_ENDACCESS, Annotation_id Arguments Annotation_id Annotation identifier ...",t:"HDF_AN_ENDACCESS"},"538":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_AN_FILEINFO.htm",a:"This function retrieves the total number of the four kinds of annotations and stores them in the appropriate parameters. Note that the numbers of data labels and descriptions refer to the total number of data labels and data descriptions in the file, not for a specific object. Use HDF_AN_NUMANN to ...",t:"HDF_AN_FILEINFO"},"539":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_AN_GET_TAGREF.htm",a:"This function retrieves the HDF tag and reference number of the annotation identified by its index and by its annotation type. Syntax Result = HDF_AN_GET_TAGREF( Annotation_id , index , Annotation_type , Annotation_tag , Annotation_ref ) Return Value Returns SUCCEED (0) if successful or FAIL (-1) ...",t:"HDF_AN_GET_TAGREF"},"540":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_AN_ID2TAGREF.htm",a:"This function retrieves the HDF tag/reference number pair of the HDF AN annotation identified by its annotation identifier. Syntax Result = HDF_AN_ID2TAGREF( Annotation_id , Annotation_tag , Annotation_ref ) Return Value Returns SUCCEED (0) if successful or FAIL (-1) otherwise. Arguments ...",t:"HDF_AN_ID2TAGREF"},"541":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_AN_NUMANN.htm",a:"This function returns the total number of HDF AN annotations that are of a given type and that are attached to the object identified by its HDF tag and its HDF reference number. Syntax Result = HDF_AN_NUMANN( Annotation_id , Annotation_type , Object_tag , Object_ref ) Return Value Returns the number ...",t:"HDF_AN_NUMANN"},"542":{i:0.000366875705816166,u:"../Content/Reference Material/H/HDF Routines/HDF_AN_READANN.htm",a:"This function reads the HDF AN annotation identified by the annotation identifier and stores the annotation into a variable. Syntax Result = HDF_AN_READANN( Annotation_id , annotation [, LENGTH = characters ] ) Return Value Returns SUCCEED (0) if successful or FAIL (-1) otherwise. Arguments ...",t:"HDF_AN_READANN"},"543":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_AN_SELECT.htm",a:"This function obtains the HDF AN identifier of the annotation specified by its index and by its annotation type. Syntax Result = HDF_AN_SELECT( Annotation_id , index , Annotation_type ) Return Value Returns the annotation identifier ( Annotation_id ) if successful or FAIL (-1) otherwise. Arguments ...",t:"HDF_AN_SELECT"},"544":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_AN_START.htm",a:"This function initializes the HDF AN interface for the specified file. A call to HDF_AN_START is required before any HDF AN functions can be invoked. HDF_AN_START is used with the HDF_AN_END function to define the extent of an HDF AN session. A call to HDF_AN_END is required for each call to ...",t:"HDF_AN_START"},"545":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_AN_TAG2ATYPE.htm",a:"This function returns the HDF AN annotation type that corresponds to the specified HDF annotation tag. Syntax Result = HDF_AN_TAG2ATYPE( Annotation_tag ) Return Value Returns the annotation type if successful or FAIL (-1) otherwise. Arguments Annotation_tag HDF tag of the annotation. The following ...",t:"HDF_AN_TAG2ATYPE"},"546":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_AN_TAGREF2ID.htm",a:"This function returns the HDF AN identifier of the annotation specified by its HDF tag and its HDF reference number. Syntax Result = HDF_AN_TAGREF2ID( Annotation_id , Annotation_tag , Annotation_ref ) Return Value Returns the annotation identifier ( Annotation_id ) if successful or FAIL (-1) ...",t:"HDF_AN_TAGREF2ID"},"547":{i:0.000366875705816166,u:"../Content/Reference Material/H/HDF Routines/HDF_AN_WRITEANN.htm",a:"This function writes the annotation text provided in the parameter annotation to the HDF AN annotation specified by the parameter Annotation_id . Syntax Result = HDF_AN_WRITEANN( Annotation_id , annotation [, LENGTH = characters ] ) Return Value Returns SUCCEED (0) if successful or FAIL (-1) ...",t:"HDF_AN_WRITEANN"},"548":{i:0.000574229718127207,u:"../Content/Reference Material/H/HDF Routines/HDF_BROWSER.htm",a:"The HDF_BROWSER function presents a graphical user interface (GUI) that allows the user to view the contents of a Hierarchical Data Format (HDF), HDF-EOS, or NetCDF file, and prepare a template for the extraction of HDF data and metadata into IDL. The output template is an IDL structure that may be ...",t:"HDF_BROWSER"},"549":{i:0.000190619369644461,u:"../Content/Reference Material/H/HDF Routines/HDF_CLOSE.htm",a:"HDF_CLOSE The HDF_CLOSE procedure closes the HDF file associated with the given file handle. Syntax HDF_CLOSE, FileHandle Arguments FileHandle The HDF file handle returned from a previous call to HDF_OPEN. Keywords None Version History Pre 4.0 Introduced See Also HDF_OPEN ",t:"HDF_CLOSE"},"550":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_DELDD.htm",a:"The HDF_DELDD procedure deletes a tag or reference from the list of data descriptors in an HDF file. Syntax HDF_DELDD, FileHandle , Tag , Ref Arguments FileHandle The HDF file handle returned from a previous call to HDF_OPEN. Tag The data descriptor tag to delete. Reference The data descriptor ...",t:"HDF_DELDD"},"551":{i:0.000110068431054021,u:"../Content/Reference Material/H/HDF Routines/HDF_DF24_ADDIMAGE.htm",a:"The HDF_DF24_ADDIMAGE procedure writes a 24-bit raster image to an HDF file. The interlace is set automatically based upon the dimensions of the image being written: ARR(3, Width, Height) for pixel interlace, ARR(Width, 3, Height) for scan-line interlace, and ARR(Width, Height, 3) for scan-plane ...",t:"HDF_DF24_ADDIMAGE"},"552":{i:0.000594751016769444,u:"../Content/Reference Material/H/HDF Routines/HDF_DF24_GETIMAGE.htm",a:"The HDF_DF24_GETIMAGE procedure reads a 24-bit raster image from an HDF file. The default is to use the same format for reading as that used in writing the image. Note: it is slower to read an image in a different interlace than the one in which the image was originally written. Syntax ...",t:"HDF_DF24_GETIMAGE"},"553":{i:7.62521950722906E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_DF24_GETINFO.htm",a:"The HDF_DF24_GETINFO procedure retrieves information about the current 24-bit HDF image. Syntax HDF_DF24_GETINFO, Filename , Width , Height , Interlace Arguments Filename A string containing the name of the file to be read. Width A named variable in which the width of the image is returned. Height A ...",t:"HDF_DF24_GETINFO"},"554":{i:6.79955833861044E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_DF24_LASTREF.htm",a:"The HDF_DF24_LASTREF function returns the reference number of the most recently read or written 24-bit image in an HDF file. Examples ; Open an HDF file. h=HDF_OPEN(\u0027myhdf.hdf\u0027) PRINT, HDF_DF24_LASTREF() ; IDL prints 0, meaning that the call was successful, ; but no reference number was available.  ...",t:"HDF_DF24_LASTREF"},"555":{i:7.62521950722906E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_DF24_NIMAGES.htm",a:"The HDF_DF24_NIMAGES function returns the number of 24-bit images in an HDF file. Examples ; Open HDF file: h = HDF_OPEN(\u0027myhdf.hdf\u0027) ; Return the number of 24-bit images in the file: number = HDF_DF24_NIMAGES(\u0027myhdf.hdf\u0027) ; Print information about the returned value. If there were five ; images in ...",t:"HDF_DF24_NIMAGES"},"556":{i:8.92150764928383E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_DF24_READREF.htm",a:"The HDF_DF24_READREF procedure sets the reference number of the image in an HDF file to be read by the next call to HDF_DF24_GETIMAGE. Syntax HDF_DF24_READREF, Filename , Reference_number Arguments Filename A scalar string containing the name of the file to be read. Reference_number The reference ...",t:"HDF_DF24_READREF"},"557":{i:8.92150764928383E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_DF24_RESTART.htm",a:"HDF_DF24_RESTART The HDF_DF24_RESTART procedure causes the next call to HDF_DF24_GETIMAGE to read the first 24-bit image in the HDF file. Syntax HDF_DF24_RESTART Arguments None Keywords None Version History 4.0 Introduced ",t:"HDF_DF24_RESTART"},"558":{i:6.63044685156903E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_DFAN_ADDFDS.htm",a:"The HDF_DFAN_ADDFDS procedure adds a file description to an HDF file. Syntax HDF_DFAN_ADDFDS, Filename , Description Arguments Filename A scalar string containing the name of the file to be written. Description A string or a array of bytes containing the information to be written. Keywords None ...",t:"HDF_DFAN_ADDFDS"},"559":{i:6.63044685156903E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_DFAN_ADDFID.htm",a:"The HDF_DFAN_ADDFID procedure adds a file annotation to an HDF file. A file can have multiple annotations added. Examples ; Open the HDF file: filename = \u0027FID.hdf\u0027 hid = HDF_OPEN(filename,/CREATE) ; Write two file annotations: HDF_DFAN_ADDFID, filename, \u0027File Annotation #1\u0027 HDF_DFAN_ADDFID, ...",t:"HDF_DFAN_ADDFID"},"560":{i:0.000683204793044973,u:"../Content/Reference Material/H/HDF Routines/HDF_DFAN_GETDESC.htm",a:"The HDF_DFAN_GETDESC procedure reads the description for the given tag and reference number in an HDF file. Examples desc1 = \u0027FILE DESCRIPTION NUMBER 1\u0027 tag_image = 302 file = \u0027DEMOdesc.hdf\u0027 fid = HDF_OPEN(file, /CREATE) HDF_DFR8_ADDIMAGE, file, DIST(10) HDF_DFAN_PUTDESC, file, tag_image, ...",t:"HDF_DFAN_GETDESC"},"561":{i:6.63044685156903E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_DFAN_GETFDS.htm",a:"The HDF_DFAN_GETFDS procedure reads the next available file description from an HDF file. Examples filename = \u0027DEMOfds.hdf\u0027 fds1 = \u0027FILE DESCRIPTION NUMBER 1\u0027 fds2 = \u0027SHORT FDS 2\u0027 ; Create an HDF file: fid = HDF_OPEN(filename, /CREATE) ; Add first file description: HDF_DFAN_ADDFDS, filename, fds1 ; ...",t:"HDF_DFAN_GETFDS"},"562":{i:0.000442018515141285,u:"../Content/Reference Material/H/HDF Routines/HDF_DFAN_GETFID.htm",a:"The HDF_DFAN_GETFID procedure reads the next available file annotation from an HDF file. Syntax HDF_DFAN_GETFID, Filename , Label [, / FIRST ] Arguments Filename A scalar string containing the name of the file to be read. Label A named variable in which the annotation is returned as a string. ...",t:"HDF_DFAN_GETFID"},"563":{i:8.38327782458494E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_DFAN_GETLABEL.htm",a:"The HDF_DFAN_GETLABEL procedure reads the label for the given tag-reference pair in an HDF file. Examples fid = HDF_OPEN(\u0027test.hdf\u0027, /ALL) label = \u0027TEST LABEL\u0027 tag = 105 ; The annotation tag. ref = 2 ; Choose a reference number. ; Write the label: HDF_DFAN_PUTLABEL, \u0027test.hdf\u0027, tag, ref, label ; ...",t:"HDF_DFAN_GETLABEL"},"564":{i:0.000101647255795084,u:"../Content/Reference Material/H/HDF Routines/HDF_DFAN_LABLIST.htm",a:"The HDF_DFAN_LABLIST function retrieves a list of the reference numbers and the corresponding labels for a given tag in an HDF file. Examples tag_image = 302 file = \u0027DEMOlablist.hdf\u0027 n_images = HDF_DFAN_LABLIST(file, tag_image, refs, list, /STRING) help, n_images, refs, list PRINT, list(0) ; Find ...",t:"HDF_DFAN_LABLIST"},"565":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_DFAN_LASTREF.htm",a:"The HDF_DFAN_LASTREF function returns the reference number of the most recently read or written annotation in an HDF file. Syntax Result = HDF_DFAN_LASTREF( ) Return Value Returns the reference number of the most recently read or written annotation. Arguments None Keywords None Version History 4.0 ...",t:"HDF_DFAN_LASTREF"},"566":{i:0.000363207800815827,u:"../Content/Reference Material/H/HDF Routines/HDF_DFAN_PUTDESC.htm",a:"The HDF_DFAN_PUTDESC procedure writes a description for the given tag and reference number in an HDF file. Syntax HDF_DFAN_PUTDESC, Filename , Tag , Ref , Description Arguments Filename A scalar string containing the name of the file to be written. Tag The tag number. Reference The reference number. ...",t:"HDF_DFAN_PUTDESC"},"567":{i:0.000101647255795084,u:"../Content/Reference Material/H/HDF Routines/HDF_DFAN_PUTLABEL.htm",a:"The HDF_DFAN_PUTLABEL procedure writes a label for the given tag and reference number in an HDF file. Syntax HDF_DFAN_PUTLABEL, Filename , Tag , Ref , Label Arguments Filename A scalar string containing the name of the file to be written. Tag The tag number. Ref The reference number. Label A string ...",t:"HDF_DFAN_PUTLABEL"},"568":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_DFP_ADDPAL.htm",a:"The HDF_DFP_ADDPAL procedure appends a palette to an HDF file. Syntax HDF_DFP_ADDPAL, Filename , Palette Arguments Filename A scalar string containing the name of the file to be written. Palette A vector or array containing palette data. Palettes must be either [3, 256] arrays or 786-element ...",t:"HDF_DFP_ADDPAL"},"569":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_DFP_GETPAL.htm",a:"The HDF_DFP_GETPAL procedure reads the next available palette from an HDF file. Syntax HDF_DFP_GETPAL, Filename , Palette Arguments Filename A scalar string containing the name of the file to be read. Palette A named variable in which the palette data is returned. Keywords None Version History 4.0 ...",t:"HDF_DFP_GETPAL"},"570":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_DFP_LASTREF.htm",a:"The HDF_DFP_LASTREF function returns the reference number of the most recently read or written palette in an HDF file. Syntax Result = HDF_DFP_LASTREF( ) Return Value Returns the reference number of the most recently read or written palette. Arguments None Keywords None Version History 4.0 ...",t:"HDF_DFP_LASTREF"},"571":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_DFP_NPALS.htm",a:"The HDF_DFP_NPALS function returns the number of palettes present in an HDF file. This number includes palettes associated with RIS8 (8-bit raster) images. Syntax Result = HDF_DFP_NPALS( Filename ) Return Value Returns the number of palettes. Arguments Filename A scalar string containing the name of ...",t:"HDF_DFP_NPALS"},"572":{i:0.000366875705816166,u:"../Content/Reference Material/H/HDF Routines/HDF_DFP_PUTPAL.htm",a:"The HDF_DFP_PUTPAL procedure appends a palette to an HDF file. Examples ; Create HDF file: id = HDF_OPEN(\u0027test.hdf\u0027, /CREATE, /RDWR) ; Add a palette: HDF_DFP_PUTPAL,\u0027test.hdf\u0027’, FINDGEN(3,256) ; Print number of palettes: PRINT, HDF_DFP_NPALS(\u0027test.hdf\u0027) ; Append a palette: ...",t:"HDF_DFP_PUTPAL"},"573":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_DFP_READREF.htm",a:"The HDF_DFP_READREF procedure sets the reference number of the palette in an HDF file to be read by the next call to HDF_DFP_GETPAL. Syntax HDF_DFP_READREF, Filename , Reference_number Arguments Filename A scalar string containing the name of the file to be read. Reference_number The reference ...",t:"HDF_DFP_READREF"},"574":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_DFP_RESTART.htm",a:"HDF_DFP_RESTART The HDF_DFP_RESTART procedure causes the next call to HDF_DFP_GETPAL to read from the first palette in an HDF file. Syntax HDF_DFP_RESTART Arguments None Keywords None Version History 4.0 Introduced ",t:"HDF_DFP_RESTART"},"575":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_DFP_WRITEREF.htm",a:"The HDF_DFP_WRITEREF procedure sets the reference number for the next palette to be written to an HDF file. Normally, the HDF library automatically chooses a reference number for the palette. This procedure allows you to override that choice. Syntax HDF_DFP_WRITEREF, Filename , Reference_number ...",t:"HDF_DFP_WRITEREF"},"576":{i:0.000107689113019212,u:"../Content/Reference Material/H/HDF Routines/HDF_DFR8_ADDIMAGE.htm",a:"The HDF_DFR8_ADDIMAGE procedure appends an 8-bit raster image to the specified HDF file. Input data is converted to bytes before being written to the file, as images in the DFR8 HDF model are necessarily byte images. Examples Assuming that we start with a file, new.hdf , with no 8-bit raster images, ...",t:"HDF_DFR8_ADDIMAGE"},"577":{i:0.000145608024199983,u:"../Content/Reference Material/H/HDF Routines/HDF_DFR8_GETIMAGE.htm",a:"The HDF_DFR8_GETIMAGE procedure retrieves an image and optionally, its palette, from an HDF file. Syntax HDF_DFR8_GETIMAGE, Filename , Image [, Palette ] Arguments Filename A scalar string containing the name of the file to be read. Image A named variable in which the image is returned. Palette A ...",t:"HDF_DFR8_GETIMAGE"},"578":{i:8.38753906166525E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_DFR8_GETINFO.htm",a:"The HDF_DFR8_GETINFO procedure retrieves information about the current 8-bit HDF image. Examples ; Open the file myhdf.hdf: h = HDF_OPEN(\u0027myhdf.hdf\u0027) ; Retrieve info about an image: HDF_DFR8_GETINFO, \u0027myhdf.hdf\u0027, width, height, has_palette ; Print info about returned variables: HELP, width, height, ...",t:"HDF_DFR8_GETINFO"},"579":{i:7.20366234075774E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_DFR8_LASTREF.htm",a:"The HDF_DFR8_LASTREF function returns the reference number of the most recently read or written 8-bit image in an HDF file. Examples h = HDF_OPEN(\u0027myhdf.hdf\u0027) ; Open an hdf file. ; IDL prints \"0\", meaning that the call was successful, ; but no reference number was available: PRINT, ...",t:"HDF_DFR8_LASTREF"},"580":{i:9.45664254274492E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_DFR8_NIMAGES.htm",a:"The HDF_DFR8_NIMAGES function returns the number of 8-bit images in the specified HDF file. Examples ; Open the file myhdf.hdf: h = HDF_OPEN(\u0027myhdf.hdf\u0027) ; Retrieve the number of 8-bit images in the file into a variable: number = HDF_DFR8_NIMAGES(\u0027myhdf.hdf\u0027) HDF_CLOSE, h ; Close the file. Syntax ...",t:"HDF_DFR8_NIMAGES"},"581":{i:9.89418032633772E-05,u:"../Content/Reference Material/H/HDF Routines/HDF_DFR8_PUTIMAGE.htm",a:"The HDF_DFR8_PUTIMAGE procedure writes an 8-bit raster image as the first image in an HDF file. If there are images in the file, this procedure erases all other 8-bit and 24-bit images and writes Image as the first image in the file. Input data is converted to bytes before being written to the file, ...",t:"HDF_DFR8_PUTIMAGE"},});