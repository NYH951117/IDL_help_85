define({"724":{i:9.57090966120056E-05,u:"../Content/Reference Material/H/HDF5 Routines/H5G_GET_OBJ_NAME_BY_IDX.htm",a:"The H5G_GET_OBJ_NAME_BY_IDX function returns a name of an object specified by an index. Syntax Result = H5G_GET_OBJ_NAME_BY_IDX( Loc_id , Index ) Return Value Result is a string containing the name of the object. Arguments Loc_id An integer giving file or group identifier. Index An integer index ...",t:"H5G_GET_OBJ_NAME_BY_IDX"},"725":{i:0.000695131977914066,u:"../Content/Reference Material/H/HDF5 Routines/H5G_GET_OBJINFO.htm",a:"The H5G_GET_OBJINFO function retrieves information from a specified object. Syntax Result = H5G_GET_OBJINFO( Loc_id , Name [, / FOLLOW_LINK ] ) Return Value Returns a structure of the name H5F_STAT containing the following fields: FILENO This field contains two integers which, along with the OBJNO ...",t:"H5G_GET_OBJINFO "},"726":{i:9.71073042191653E-05,u:"../Content/Reference Material/H/HDF5 Routines/H5G_LINK.htm",a:"The H5G_LINK procedure creates a link of the specified type. A link can only point to one of the three classes of named objects: group, dataset, and named datatype. Example See the example under H5F_CREATE . Syntax H5G_LINK, Loc_id , Current_Name , New_Name [, / SOFTLINK ] [, NEW_LOC_ID = value ] ...",t:"H5G_LINK"},"727":{i:7.6789836178486E-05,u:"../Content/Reference Material/H/HDF5 Routines/H5G_MOVE.htm",a:"The H5G_MOVE procedure renames/moves an object within an HDF5 group or file. Example See the example under H5F_CREATE . Syntax H5G_MOVE, Loc_id , Src_Name , Dst_Name [, NEW_LOC_ID = value ] Arguments Loc_id An integer giving the file or group identifier. Src_Name Original string name of the object. ...",t:"H5G_MOVE"},"728":{i:0.000186005033602037,u:"../Content/Reference Material/H/HDF5 Routines/H5G_OPEN.htm",a:"The H5G_OPEN function opens an existing group within an HDF5 file. Syntax Result = H5G_OPEN( Loc_id , Name ) Return Value Returns the group’s identifier number. This identifier can be released with the H5G_CLOSE . Arguments Loc_id An integer representing the identifier of the file or group ...",t:"H5G_OPEN "},"729":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF5 Routines/H5G_SET_COMMENT.htm",a:"The H5G_SET_COMMENT procedure sets a comment for a specified object. Example See the example under H5F_CREATE . Syntax H5G_SET_COMMENT, Loc_id , Name , Comment Arguments Loc_id An integer giving the file or group identifier containing the object. Name Name of the object within Loc_id whose comment ...",t:"H5G_SET_COMMENT"},"730":{i:7.5668018317585E-05,u:"../Content/Reference Material/H/HDF5 Routines/H5G_UNLINK.htm",a:"The H5G_UNLINK procedure removes the link to an object from a group. Example See the example under H5F_CREATE . Syntax H5G_UNLINK, Loc_id , Name Arguments Loc_id An integer giving the file or group identifier containing the object. Name Name of the object within Loc_id to unlink. Keywords None ...",t:"H5G_UNLINK"},"731":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF5 Routines/H5I_GET_FILE_ID.htm",a:"The H5I_GET_FILE_ID function retrieves an identifier for the file containing the specified object. Syntax Result = H5I_GET_FILE_ID( Loc_id ) Return Value The Result is the identifier of the file. Arguments Loc_id An integer giving the identifier of the object whose associated file identifier will be ...",t:"H5I_GET_FILE_ID"},"732":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF5 Routines/H5I_GET_TYPE.htm",a:"The H5I_GET_TYPE function returns the object’s type. Syntax Result = H5I_GET_TYPE( Obj_id ) Return Value Returns a string representing the object type. Possible return values include: ‘FILE‘ ‘GROUP‘ ‘DATATYPE‘ ‘DATASPACE‘ ‘DATASET‘ ‘ATTR‘ ‘BADID‘ Arguments Obj_id An integer representing the object’s ...",t:"H5I_GET_TYPE "},"733":{i:9.85469703914152E-05,u:"../Content/Reference Material/H/HDF5 Routines/H5R_CREATE.htm",a:"The H5R_CREATE function creates a reference to either an object or a dataspace region of a dataset. Example See the example under H5F_CREATE . Syntax Result = H5R_CREATE( Loc_id , Name [, DATASPACE_ID = value ]) Return Value The Result is the reference pointing to the specified object. It is ...",t:"H5R_CREATE"},"734":{i:0.000366875705816166,u:"../Content/Reference Material/H/HDF5 Routines/H5R_DEREFERENCE.htm",a:"The H5R_DEREFERENCE function opens a reference and returns the object identifier. Syntax Result = H5R_DEREFERENCE( Loc_id , Reference ) Return Value The Result is the identifier number. This identifier should be released using the appropriate close procedure. Arguments Loc_id An integer giving the ...",t:"H5R_DEREFERENCE "},"735":{i:0.000366875705816166,u:"../Content/Reference Material/H/HDF5 Routines/H5R_GET_OBJECT_TYPE.htm",a:"The H5R_GET_OBJECT_TYPE function returns the type of object that an object reference points to. Syntax Result = H5R_GET_OBJECT_TYPE( Loc_id , Reference ) Return Value The Result is a string giving the object type. Possible return values include: \u0027DATASET\u0027 \u0027GROUP\u0027 \u0027LINK\u0027 \u0027TYPE\u0027 \u0027UNKNOWN\u0027 Arguments ...",t:"H5R_GET_OBJECT_TYPE "},"736":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF5 Routines/H5R_GET_REGION.htm",a:"The H5R_GET_REGION function retrieves a dataspace associated with a region reference. Example Assuming the file, \u0027hdf5_out.h5\u0027 was created using the example in H5F_CREATE, the dataspace region saved in the reference attached to the “Hanning” dataset could be obtained as follows: fid = ...",t:"H5R_GET_REGION"},"737":{i:0.000899419011822302,u:"../Content/Reference Material/H/HDF5 Routines/H5S_CLOSE.htm",a:"The H5S_CLOSE procedure releases and terminates access to a dataspace. After this routine is used, the dataspace’s identifier is no longer available. Failure to release a dataspace using this procedure will result in resource leaks. Syntax H5S_CLOSE, Dataspace_id Arguments Dataspace_id An integer ...",t:"H5S_CLOSE "},"738":{i:0.000211677496802191,u:"../Content/Reference Material/H/HDF5 Routines/H5S_COPY.htm",a:"The H5S_COPY function copies an existing dataspace. Syntax Result = H5S_COPY( Dataspace_id ) Return Value Returns the dataspace’s identifier number. The dataspace identifier can be released with the H5S_CLOSE . Arguments Dataspace_id An integer representing the dataspace identifier to copy. Keywords ...",t:"H5S_COPY "},"739":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF5 Routines/H5S_CREATE_SCALAR.htm",a:"The H5S_CREATE_SCALAR function creates a scalar dataspace. Scalar dataspaces have no dimensionality thus H5S_GET_SIMPLE_EXTENT_DIMS and H5S_GET_SIMPLE_EXTENT_NDIMS will both return 0. Syntax Result = H5S_CREATE_SCALAR() Return Value The Result gives the dataspace identifier. This identifier should ...",t:"H5S_CREATE_SCALAR"},"740":{i:0.000552863019421099,u:"../Content/Reference Material/H/HDF5 Routines/H5S_CREATE_SIMPLE.htm",a:"The H5S_CREATE_SIMPLE function creates a simple dataspace. Syntax Result = H5S_CREATE_SIMPLE( Dimensions [, MAX_DIMENSIONS = vector ] ) Return Value Returns the dataspace’s identifier number. This dataspace identifier can be released with the H5S_CLOSE . Arguments Dimensions Set this argument to a ...",t:"H5S_CREATE_SIMPLE "},"741":{i:0.000327298750438738,u:"../Content/Reference Material/H/HDF5 Routines/H5S_GET_SELECT_BOUNDS.htm",a:"The H5S_GET_SELECT_BOUNDS function retrieves the coordinates of the bounding box containing the current dataspace selection. Syntax Result = H5S_GET_SELECT_BOUNDS( Dataspace_id ) Return Value Returns an ( m x 2) array, where m is the number of dimensions (or rank) of the dataspace. The first row in ...",t:"H5S_GET_SELECT_BOUNDS "},"742":{i:0.00037424043165093,u:"../Content/Reference Material/H/HDF5 Routines/H5S_GET_SELECT_ELEM_NPOI.htm",a:"The H5S_GET_SELECT_ELEM_NPOINTS function determines the number of element points in the current dataspace selection. Syntax Result = H5S_GET_SELECT_ELEM_NPOINTS( Dataspace_id ) Return Value Returns the number of element points. Arguments Dataspace_id An integer representing the dataspace’s ...",t:"H5S_GET_SELECT_ELEM_NPOINTS "},"743":{i:0.000127542119147839,u:"../Content/Reference Material/H/HDF5 Routines/H5S_GET_SELECT_ELEM_POIN.htm",a:"The H5S_GET_SELECT_ELEM_POINTLIST function returns a list of the element points in the current dataspace selection. Syntax Result = H5S_GET_SELECT_ELEM_POINTLIST( Dataspace_id [, START = value ] [, NUMBER = value ] ) Return Value The Result is an ( m x n ) array, where m is the number of dimensions ...",t:"H5S_GET_SELECT_ELEM_POINTLIST"},"744":{i:0.00022459039580471,u:"../Content/Reference Material/H/HDF5 Routines/H5S_GET_SELECT_HYPER_BLO.htm",a:"The H5S_GET_SELECT_HYPER_BLOCKLIST function returns a list of the hyperslab blocks in the current dataspace selection. Syntax Result = H5S_GET_SELECT_HYPER_BLOCKLIST( Dataspace_id [, START = value ] [, NUMBER = value ] ) Return Value Returns an ( m x 2 n ) array, where m is the number of dimensions ...",t:"H5S_GET_SELECT_HYPER_BLOCKLIST "},"745":{i:0.000339556691426624,u:"../Content/Reference Material/H/HDF5 Routines/H5S_GET_SELECT_HYPER_NBL.htm",a:"The H5S_GET_SELECT_HYPER_NBLOCKS function determines the number of hyperslab blocks in the current dataspace selection. Syntax Result = H5S_GET_SELECT_HYPER_NBLOCKS( Dataspace_id ) Return Value Returns the number of blocks. Arguments Dataspace_id An integer representing the dataspace identifier to ...",t:"H5S_GET_SELECT_HYPER_NBLOCKS "},"746":{i:0.000494074905643466,u:"../Content/Reference Material/H/HDF5 Routines/H5S_GET_SELECT_NPOINTS.htm",a:"The H5S_GET_SELECT_NPOINTS function determines the number of elements in a dataspace selection. Syntax Result = H5S_GET_SELECT_NPOINTS( Dataspace_id ) Return Value Returns the number of elements. Arguments Dataspace_id An integer representing the dataspace identifier to be queried. Keywords None ...",t:"H5S_GET_SELECT_NPOINTS "},"747":{i:0.00101506883653233,u:"../Content/Reference Material/H/HDF5 Routines/H5S_GET_SIMPLE_EXTENT_DI.htm",a:"The H5S_GET_SIMPLE_EXTENT_DIMS function returns the dimension sizes for a dataspace. Syntax Result = H5S_GET_SIMPLE_EXTENT_DIMS( Dataspace_id [, MAX_DIMENSIONS = variable ] ) Return Value Returns a vector containing the dimension sizes. Arguments Dataspace_id An integer representing the dataspace’s ...",t:"H5S_GET_SIMPLE_EXTENT_DIMS "},"748":{i:0.000790964614986217,u:"../Content/Reference Material/H/HDF5 Routines/H5S_GET_SIMPLE_EXTENT_ND.htm",a:"The H5S_GET_SIMPLE_EXTENT_NDIMS function determines the number of dimensions (or rank) of a dataspace. Syntax Result = H5S_GET_SIMPLE_EXTENT_NDIMS( Dataspace_id ) Return Value Returns the number of dimensions. Arguments Dataspace_id An integer representing the dataspace’s identifier to be queried. ...",t:"H5S_GET_SIMPLE_EXTENT_NDIMS "},"749":{i:0.00104516543833061,u:"../Content/Reference Material/H/HDF5 Routines/H5S_GET_SIMPLE_EXTENT_NP.htm",a:"The H5S_GET_SIMPLE_EXTENT_NPOINTS function determines the number of elements in a dataspace. Syntax Result = H5S_GET_SIMPLE_EXTENT_NPOINTS( Dataspace_id ) Return Value Returns the number of elements. Arguments Dataspace_id An integer representing the dataspace’s identifier to be queried. Keywords ...",t:"H5S_GET_SIMPLE_EXTENT_NPOINTS "},"750":{i:0.000790964614986217,u:"../Content/Reference Material/H/HDF5 Routines/H5S_GET_SIMPLE_EXTENT_TY.htm",a:"The H5S_GET_SIMPLE_EXTENT_TYPE function returns the current class of a dataspace. Syntax Result = H5S_GET_SIMPLE_EXTENT_TYPE( Dataspace_id ) Return Value Returns a string containing the class. Possible values are: ‘H5S_SCALAR’ ‘H5S_SIMPLE’ ‘H5S_COMPLEX’ ‘H5S_NO_CLASS’ Arguments Dataspace_id An ...",t:"H5S_GET_SIMPLE_EXTENT_TYPE "},"751":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF5 Routines/H5S_IS_SIMPLE.htm",a:"The H5S_IS_SIMPLE function determines whether a dataspace is a simple dataspace. Syntax Result = H5S_IS_SIMPLE( Dataspace_id ) Return Value Returns 1 if the dataspace is simple and 0 if it is not. Arguments Dataspace_id An integer representing the dataspace’s identifier to be queried. Keywords None ...",t:"H5S_IS_SIMPLE "},"752":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF5 Routines/H5S_OFFSET_SIMPLE.htm",a:"The H5S_OFFSET_SIMPLE procedure sets the selection offset for a simple dataspace. The offset allows the same shaped selection to be moved to different locations within the dataspace. Syntax H5S_OFFSET_SIMPLE, Dataspace_id , Offset Arguments Dataspace_id An integer representing the dataspace’s ...",t:"H5S_OFFSET_SIMPLE "},"753":{i:6.98828078775762E-05,u:"../Content/Reference Material/H/HDF5 Routines/H5S_SELECT_ALL.htm",a:"The H5S_SELECT_ALL procedure selects the entire extent of a dataspace. Syntax H5S_SELECT_ALL, Dataspace_id Arguments Dataspace_id An integer representing the dataspace’s identifier to be selected. Keywords None Version History 5.6 Introduced See Also H5S_GET_SELECT_NPOINTS , H5S_SELECT_ELEMENTS , ...",t:"H5S_SELECT_ALL "},"754":{i:0.000213955152017205,u:"../Content/Reference Material/H/HDF5 Routines/H5S_SELECT_ELEMENTS.htm",a:"The H5S_SELECT_ELEMENTS procedure selects array elements to be included in the selection for a dataspace. Because of a bug in the underlying HDF5 library (from The HDF Group), you must specify the RESET keyword when using H5S_SELECT_ELEMENTS. Currently, there is no way to add to an existing ...",t:"H5S_SELECT_ELEMENTS "},"755":{i:0.000213955152017205,u:"../Content/Reference Material/H/HDF5 Routines/H5S_SELECT_HYPERSLAB.htm",a:"The H5S_SELECT_HYPERSLAB procedure selects a hyperslab region to be included in the selection for a dataspace. If all of the elements in the selected hyperslab region are already selected, then a new hyperslab region is not created. Syntax H5S_SELECT_HYPERSLAB, Dataspace_id , Start , Count , [, ...",t:"H5S_SELECT_HYPERSLAB "},"756":{i:6.98828078775762E-05,u:"../Content/Reference Material/H/HDF5 Routines/H5S_SELECT_NONE.htm",a:"The H5S_SELECT_NONE procedure resets the dataspace selection region to include no elements. Syntax H5S_SELECT_NONE, Dataspace_id Arguments Dataspace_id An integer representing the dataspace’s identifier to be reset. Keywords None Version History 5.6 Introduced See Also H5S_GET_SELECT_NPOINTS , ...",t:"H5S_SELECT_NONE "},"757":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF5 Routines/H5S_SELECT_VALID.htm",a:"The H5S_SELECT_VALID function verifies that the selection is within the extent of a dataspace. Syntax Result = H5S_SELECT_VALID( Dataspace_id ) Return Value Returns 1 if the selection is within the dataspace and 0 if it is not. Arguments Dataspace_id An integer representing the dataspace’s ...",t:"H5S_SELECT_VALID "},"758":{i:9.22980960244313E-05,u:"../Content/Reference Material/H/HDF5 Routines/H5S_SET_EXTENT_NONE.htm",a:"The H5S_SET_EXTENT_NONE removes the extent of a dataspace and sets the type to H5S_NO_CLASS. As such the dataspace cannot be resized or used in the creation of datasets or attributes. Syntax H5S_SET_EXTENT_NONE, Dataspace_id Arguments Dataspace_id An integer giving the dataspace identifier. Keywords ...",t:"H5S_SET_EXTENT_NONE"},"759":{i:0.000131524815929203,u:"../Content/Reference Material/H/HDF5 Routines/H5S_SET_EXTENT_SIMPLE.htm",a:"The H5S_SET_EXTENT_SIMPLE procedure sets or resets the extent of a dataspace. Syntax H5S_SET_EXTENT_SIMPLE, Dataspace_id , Dimensions [, MAX_DIMENSIONS = vector ] Arguments Dataspace_id An integer giving the dataspace identifier. Dimensions An integer array or scalar giving the size of each array ...",t:"H5S_SET_EXTENT_SIMPLE"},"760":{i:0.000260990474998675,u:"../Content/Reference Material/H/HDF5 Routines/H5T_ARRAY_CREATE.htm",a:"The H5T_ARRAY_CREATE function creates an array datatype object. Example See the example under H5F_CREATE . Syntax Result = H5T_ARRAY_CREATE( Datatype_id , Dimensions ) Return Value The Result gives the identifier of the new datatype. The datatype identifier returned from this function should be ...",t:"H5T_ARRAY_CREATE"},"761":{i:0.00370388991875767,u:"../Content/Reference Material/H/HDF5 Routines/H5T_CLOSE.htm",a:"The H5T_CLOSE procedure releases the specified datatype’s identifier and releases resources used by it. After this routine is used, the datatype’s identifier is no longer available until the H5T_OPEN routine is used again to specify that datatype. Syntax H5T_CLOSE, Datatype_id Arguments Datatype_id ...",t:"H5T_CLOSE "},"762":{i:0.000138960638617901,u:"../Content/Reference Material/H/HDF5 Routines/H5T_COMMIT.htm",a:"The H5T_COMMIT procedure commits a transient datatype to a file, creating a new named datatype. A named datatype can be shared by objects within the same HDF5 file, but not by objects in other files. Example See the example under H5F_CREATE . Syntax H5T_COMMIT, Loc_id , Name , Datatype_id Arguments ...",t:"H5T_COMMIT"},"763":{i:9.44049132352704E-05,u:"../Content/Reference Material/H/HDF5 Routines/H5T_COMMITTED.htm",a:"The H5T_COMMITTED function determines whether a datatype is a named datatype or a transient type. Syntax Result = H5T_COMMITTED( Datatype_id ) Return Value Returns 1 if the datatype is named and 0 if the datatype is transient. Arguments Datatype_id An integer representing the datatyped identifier to ...",t:"H5T_COMMITTED "},"764":{i:5.87164034645955E-05,u:"../Content/Reference Material/H/HDF5 Routines/H5T_COMPOUND_CREATE.htm",a:"The H5T_COMPOUND_CREATE function creates a compound datatype object. Example dt1 = H5T_ENUM_CREATE() H5T_ENUM_SET_DATA, dt1, [\u0027Radar_1\u0027, \u0027Radar_2\u0027], [1, 2] dt2 = H5T_IDL_CREATE(1ul) dt = H5T_COMPOUND_CREATE([dt1, dt2], [\u0027Radar_Id\u0027, \u0027Ctrl_Num\u0027]) Syntax Result = H5T_COMPOUND_CREATE( Datatype_id , Name ...",t:"H5T_COMPOUND_CREATE"},"765":{i:0.00010181052593232,u:"../Content/Reference Material/H/HDF5 Routines/H5T_COPY.htm",a:"The H5T_COPY function copies an existing datatype. The returned type is transient and unlocked. Syntax Result = H5T_COPY( Datatype_id ) Return Value Returns the datatype’s identifier number. This identifier can be released with the H5T_CLOSE procedure. Arguments Datatype_id An integer representing ...",t:"H5T_COPY "},"766":{i:0.000605177369370564,u:"../Content/Reference Material/H/HDF5 Routines/H5T_ENUM_CREATE.htm",a:"The H5T_ENUM_CREATE function creates an enumeration datatype object. Name/value pairs must be assigned to the datatype before it is used to create a dataset. The dataset stores the state of the datatype at the time the dataset is created; additional changes to the datatype will not be reflected in ...",t:"H5T_ENUM_CREATE"},"767":{i:8.19298862213419E-05,u:"../Content/Reference Material/H/HDF5 Routines/H5T_ENUM_GET_DATA.htm",a:"The H5T_ENUM_GET_DATA function retrieves the name/value pairs from an enumeration datatype object. This routine is written in the IDL language. Its source code can be found in the file h5t_enum_get_data.pro in the lib subdirectory of the IDL distribution. Syntax Result = H5T_ENUM_GET_DATA( ...",t:"H5T_ENUM_GET_DATA"},"768":{i:0.000362344050272365,u:"../Content/Reference Material/H/HDF5 Routines/H5T_ENUM_INSERT.htm",a:"The H5T_ENUM_INSERT procedure inserts a new member into an existing enumeration datatype. Syntax H5T_ENUM_INSERT, Datatype_id , Name , Value Arguments Datatype_id A long integer containing the identifier of the enumeration datatype to which the new member will be added. Name A scalar string ...",t:"H5T_ENUM_INSERT"},"769":{i:0.000132571062893886,u:"../Content/Reference Material/H/HDF5 Routines/H5T_ENUM_NAMEOF.htm",a:"The H5T_ENUM_NAMEOF function retrieves the name of a member of an enumeration datatype corresponding to the specified value. Syntax Result = H5T_ENUM_NAMEOF( Datatype_id , Value ) Return Value Returns a string containing the name that corresponds to the specified value. Arguments Datatype_id A long ...",t:"H5T_ENUM_NAMEOF"},"770":{i:8.19298862213419E-05,u:"../Content/Reference Material/H/HDF5 Routines/H5T_ENUM_SET_DATA.htm",a:"The H5T_ENUM_SET_DATA procedure sets all the name/value pairs on an enumeration datatype object. This routine is written in the IDL language. Its source code can be found in the file h5t_enum_set_data.pro in the lib subdirectory of the IDL distribution. Syntax H5T_ENUM_SET_DATA, Datatype_id , Data , ...",t:"H5T_ENUM_SET_DATA"},"771":{i:0.000115059146344682,u:"../Content/Reference Material/H/HDF5 Routines/H5T_ENUM_VALUEOF.htm",a:"The H5T_ENUM_VALUEOF function retrieves the value of a member of an enumeration datatype corresponding to the specified name. Syntax Result = H5T_ENUM_VALUEOF( Datatype_id , Name ) Return Value Returns an integer containing the value that corresponds to the specified name. Arguments Datatype_id A ...",t:"H5T_ENUM_VALUEOF"},"772":{i:5.87164034645955E-05,u:"../Content/Reference Material/H/HDF5 Routines/H5T_ENUM_VALUES_TO_NAMES.htm",a:"The H5T_ENUM_VALUES_TO_NAMES function converts values to the corresponding names of an enumeration datatype. This routine is written in the IDL language. Its source code can be found in the file h5t_enum_values_to_names.pro in the lib subdirectory of the IDL distribution. Syntax Result = ...",t:"H5T_ENUM_VALUES_TO_NAMES"},"773":{i:5.50327019655568E-05,u:"../Content/Reference Material/H/HDF5 Routines/H5T_EQUAL.htm",a:"The H5T_EQUAL function determines whether two datatype identifiers refer to the same datatype. Syntax Result = H5T_EQUAL( Datatype_id1 , Datatype_id2 ) Return Value Returns 1 if the identifiers refer to the same datatype and 0 if they do not. Arguments Datatype_id1 An integer representing the first ...",t:"H5T_EQUAL "},"774":{i:0.000476294463182133,u:"../Content/Reference Material/H/HDF5 Routines/H5T_GET_ARRAY_DIMS.htm",a:"The H5T_GET_ARRAY_DIMS function returns the dimension sizes for an array datatype object. Syntax Result = H5T_GET_ARRAY_DIMS( Datatype_id [, PERMUTATIONS = variable ]) Return Value Returns a vector containing the dimension sizes. Arguments Datatype_id An integer representing the datatype’s ...",t:"H5T_GET_ARRAY_DIMS "},"775":{i:0.0002574569484502,u:"../Content/Reference Material/H/HDF5 Routines/H5T_GET_ARRAY_NDIMS.htm",a:"The H5T_GET_ARRAY_NDIMS function determines the number of dimensions (or rank) of an array datatype object. Syntax Result = H5T_GET_ARRAY_NDIMS( Datatype_id ) Return Value Returns the number of dimensions. Arguments Datatype_id An integer representing the datatype’s identifier to be queried. ...",t:"H5T_GET_ARRAY_NDIMS "},"776":{i:0.000302960810014895,u:"../Content/Reference Material/H/HDF5 Routines/H5T_GET_CLASS.htm",a:"The H5T_GET_CLASS function returns the datatype’s class. Syntax Result = H5T_GET_CLASS( Datatype_id ) Return Value Returns a string containing the datatype’s class. Possible return values include: ‘H5T_INTEGER’ ‘H5T_FLOAT’ ‘H5T_TIME’ ‘H5T_STRING’ ‘H5T_BITFIELD’ ‘H5T_OPAQUE’ ‘H5T_COMPOUND’ ...",t:"H5T_GET_CLASS "},"777":{i:0.000135004560144756,u:"../Content/Reference Material/H/HDF5 Routines/H5T_GET_CSET.htm",a:"The H5T_GET_CSET function returns the character set type of a string datatype. Syntax Result = H5T_GET_CSET( Datatype_id ) Return Value Returns a string containing the character set type. Possible values are: ‘ASCII’ — US ASCII ‘ERROR’ Arguments Datatype_id An integer representing the datatype’s ...",t:"H5T_GET_CSET "},"778":{i:0.000145290165436037,u:"../Content/Reference Material/H/HDF5 Routines/H5T_GET_EBIAS.htm",a:"The H5T_GET_EBIAS function returns the exponent bias of a floating-point type. Syntax Result = H5T_GET_EBIAS( Datatype_id ) Return Value Returns the exponent bias. Arguments Datatype_id An integer representing the datatype’s identifier to be queried. Keywords None Version History 5.6 Introduced See ...",t:"H5T_GET_EBIAS "},"779":{i:0.000743284696918297,u:"../Content/Reference Material/H/HDF5 Routines/H5T_GET_FIELDS.htm",a:"The H5T_GET_FIELDS function retrieves information about the positions and sizes of bit fields within a floating-point datatype. Syntax Result = H5T_GET_FIELDS( Datatype_id ) Return Value Returns a structure named H5T_GET_FIELDS containing the following tags: TYPE_ID The datatype’s identifier ...",t:"H5T_GET_FIELDS "},"780":{i:0.000373826254555113,u:"../Content/Reference Material/H/HDF5 Routines/H5T_GET_INPAD.htm",a:"The H5T_GET_INPAD function returns the padding method for unused internal bits within a floating-point datatype. Syntax Result = H5T_GET_INPAD( Datatype_id ) Return Value Returns the padding method. Possible values are: 0 — Background set to zeroes 1 — Background set to ones 2 — Background left ...",t:"H5T_GET_INPAD "},"781":{i:0.000315152621027204,u:"../Content/Reference Material/H/HDF5 Routines/H5T_GET_MEMBER_CLASS.htm",a:"The H5T_GET_MEMBER_CLASS function returns the datatype class of a compound datatype member. Syntax Result = H5T_GET_MEMBER_CLASS( Datatype_id , Member ) Return Value Returns a string containing the datatype class. Possible values are: ‘H5T_INTEGER’ ‘H5T_FLOAT’ ‘H5T_TIME’ ‘H5T_STRING’ ‘H5T_BITFIELD’ ...",t:"H5T_GET_MEMBER_CLASS "},"782":{i:0.000102115537567721,u:"../Content/Reference Material/H/HDF5 Routines/H5T_GET_MEMBER_INDEX.htm",a:"The H5T_GET_MEMBER_INDEX function retrieves the index of a specified member of a compound or enumeration datatype. Syntax Result = H5T_GET_MEMBER_INDEX( Datatype_id , Field_name ) Return Value Returns an integer containing the index of the specified datatype member. Arguments Datatype_id A long ...",t:"H5T_GET_MEMBER_INDEX"},"783":{i:0.000315152621027204,u:"../Content/Reference Material/H/HDF5 Routines/H5T_GET_MEMBER_NAME.htm",a:"The H5T_GET_MEMBER_NAME function retrieves the name of a compound or enumeration datatype member. Syntax Result = H5T_GET_MEMBER_NAME( Datatype_id , Member ) Return Value Returns a string containing the name of the specified datatype member. Arguments Datatype_id A long integer containing the ...",t:"H5T_GET_MEMBER_NAME "},"784":{i:0.000315152621027204,u:"../Content/Reference Material/H/HDF5 Routines/H5T_GET_MEMBER_OFFSET.htm",a:"The H5T_GET_MEMBER_OFFSET function returns the byte offset of a field within a compound datatype. Syntax Result = H5T_GET_MEMBER_OFFSET( Datatype_id , Member ) Return Value Returns an integer representing the byte offset. Arguments Datatype_id An integer representing the datatype’s identifier to be ...",t:"H5T_GET_MEMBER_OFFSET "},"785":{i:0.000326600631957538,u:"../Content/Reference Material/H/HDF5 Routines/H5T_GET_MEMBER_TYPE.htm",a:"The H5T_GET_MEMBER_TYPE function returns the datatype identifier for a specified member within a compound datatype. Syntax Result = H5T_GET_MEMBER_TYPE( Datatype_id , Member ) Return Value Returns the datatype identifier. This identifier should be closed using H5T_CLOSE . Arguments Datatype_id An ...",t:"H5T_GET_MEMBER_TYPE "},"786":{i:0.000102115537567721,u:"../Content/Reference Material/H/HDF5 Routines/H5T_GET_MEMBER_VALUE.htm",a:"The H5T_GET_MEMBER_VALUE function retrieves the value of an enumeration datatype member. Syntax Result = H5T_GET_MEMBER_VALUE( Datatype_id , Member ) Return Value Returns an integer containing the value of the specified datatype member. Arguments Datatype_id A long integer containing the identifier ...",t:"H5T_GET_MEMBER_VALUE"},"787":{i:0.000315152621027204,u:"../Content/Reference Material/H/HDF5 Routines/H5T_GET_NMEMBERS.htm",a:"The H5T_GET_NMEMBERS function returns the number of fields in a compound datatype. Syntax Result = H5T_GET_NMEMBERS( Datatype_id ) Return Value Returns the number of fields. Arguments Datatype_id An integer representing the datatype’s identifier to be queried. Keywords None Version History 5.6 ...",t:"H5T_GET_NMEMBERS "},"788":{i:0.000145290165436037,u:"../Content/Reference Material/H/HDF5 Routines/H5T_GET_NORM.htm",a:"The H5T_GET_NORM function returns the mantissa normalization of a floating-point datatype. Syntax Result = H5T_GET_NORM( Datatype_id ) Return Value Returns a string containing the mantissa normalization. Possible values are: ‘IMPLIED’ — Most-significant bit of mantissa not stored, always 1 ‘MSBSET’ ...",t:"H5T_GET_NORM "},"789":{i:0.000145290165436037,u:"../Content/Reference Material/H/HDF5 Routines/H5T_GET_OFFSET.htm",a:"The H5T_GET_OFFSET function returns the bit offset of the first significant bit in an atomic datatype. The offset is the number of bits of padding that follows the significant bits (for big endian) or precedes the significant bits (for little endian). Syntax Result = H5T_GET_OFFSET( Datatype_id ) ...",t:"H5T_GET_OFFSET"},"790":{i:0.000303442291082405,u:"../Content/Reference Material/H/HDF5 Routines/H5T_GET_ORDER.htm",a:"The H5T_GET_ORDER function returns the byte order of an atomic datatype. Syntax Result = H5T_GET_ORDER( Datatype_id ) Return Value Returns a string representing the byte order. Possible values are: ‘LE’ — Little endian ‘BE’ — Big endian ‘VAX’ — VAX mixed ordering ‘NONE’ ‘ERROR’ Arguments Datatype_id ...",t:"H5T_GET_ORDER "},"791":{i:0.000303442291082405,u:"../Content/Reference Material/H/HDF5 Routines/H5T_GET_PAD.htm",a:"The H5T_GET_PAD function returns the padding method of the least significant bit ( lsb ) and most significant bit ( msb ) of an atomic datatype. Syntax Result = H5T_GET_PAD( Datatype_id ) Return Value Returns a two-element vector [ lsb , msb ]. Possible values are: 0 — Background set to zeroes 1 — ...",t:"H5T_GET_PAD "},"792":{i:0.000332835916348217,u:"../Content/Reference Material/H/HDF5 Routines/H5T_GET_PRECISION.htm",a:"The H5T_GET_PRECISION function returns the precision in bits of an atomic datatype. The precision is the number of significant bits which, unless padded, is 8 times larger than the byte size from H5T_GET_CSET . Syntax Result = H5T_GET_PRECISION( Datatype_id ) Return Value Returns the bit precision, ...",t:"H5T_GET_PRECISION "},});