define({"2726":{i:0.000117428458478256,u:"../Content/Creating IDL Programs/Creating Applications in IDL/Implementing_Drag_and_Dr.htm",a:"In IDL versions 6.3 and later, you can create applications that allow users to drag tree nodes from a tree widget to a draw widget. Drag and drop functionality is not enabled by default. When creating an IDL application that incorporates both a tree widget and a draw widget you can enable drag and ...",t:"Implementing Drag and Drop Functionality"},"2727":{i:0.000200676870350651,u:"../Content/Creating IDL Programs/Creating Applications in IDL/About_Property_Sheet_Wid.htm",a:"The purpose of a property sheet (created with WIDGET_PROPERTYSHEET ) is to enable the user to view and edit the properties of an object subclassed from the IDLitComponent class. (All IDLit* objects and most IDLgr* subclass from the IDLitComponent class.) For example, a user may have rendered data as ...",t:"About Property Sheet Widgets"},"2728":{i:7.63550738898047E-05,u:"../Content/Creating IDL Programs/Creating Applications in IDL/Registering_Properties.htm",a:"In order for a property associated with a component object to be included in the property sheet for that component, the property must be registered . The property registration mechanism accomplishes several things: It allows you to expose as many or as few of the properties of an underlying object ...",t:"Registering Properties"},"2729":{i:0.000221999242274899,u:"../Content/Creating IDL Programs/Creating Applications in IDL/Selecting_Properties.htm",a:"A property sheet consists of rows and columns. The left-most column identifies the properties, and the other column or columns identify the property values of one or more objects (also known as components). A select event is generated whenever a cell containing a property name or a property value is ...",t:"Selecting Properties"},"2730":{i:7.63550738898047E-05,u:"../Content/Creating IDL Programs/Creating Applications in IDL/Changing_Properties.htm",a:"A change event is generated whenever a new value is entered for a property. It is also used to signal that a user-defined property needs changing. The event structure (WIDGET_PROPSHEET_CHANGE) provided when a change occurs contains a COMPONENT, an IDENTIFIER, a PROPTYPE, and a SET_DEFINED tag. The ...",t:"Changing Properties"},"2731":{i:0.000221999242274899,u:"../Content/Creating IDL Programs/Creating Applications in IDL/User_defined_Properties.htm",a:"User-defined properties allow IDL programmers to provide their own custom means for editing a property. One significant difference from other types of properties is that user-defined properties must have a string version of their value. This string value is stored in the USERDEF attribute of the ...",t:"User-defined Properties"},"2732":{i:0.000221999242274899,u:"../Content/Creating IDL Programs/Creating Applications in IDL/Property_Sheet_Sizing.htm",a:"Property sheets without a size definition (lacking a specified SCR_XSIZE or XSIZE keyword value) are naturally sized. Column widths are dependent upon the cell contents of the components. Naturally sized property sheets allow the full contents of the longest cell to be visible in a column as shown ...",t:"Property Sheet Sizing"},"2733":{i:7.63550738898047E-05,u:"../Content/Creating IDL Programs/Creating Applications in IDL/Property_Sheet_Example.htm",a:"The following example provides a property sheet containing all the available controls, including user-defined properties of a custom component. Enter the following text into the IDL Editor: ; Property Sheet Demo ; ; This program contains these sections of code: ; ; (1) Definition of the IDLitTester ...",t:"Property Sheet Example"},"2734":{i:7.63550738898047E-05,u:"../Content/Creating IDL Programs/Creating Applications in IDL/Multiple_Properties_Exam.htm",a:"The following example shows how to create a property sheet for multiple components. Enter the following text in the IDL Editor: ; ExMultiSheet.pro ; ; Provides an example of a property sheet that is ; associated with more than one object. In this case, ; multiple IDLitVisAxis objects are used, with ...",t:"Multiple Properties Example"},"2735":{i:0.00012710535211748,u:"../Content/Creating IDL Programs/Creating Applications in IDL/About_Table_Widgets.htm",a:"Table widgets display two-dimensional data and allow in-place data editing. See WIDGET_TABLE for a complete description of the function used to create table widgets. This section discusses the following topics: Default Table Size Table Widget Selection Modes Table Widget Data Types Table Widget Data ...",t:"About Table Widgets"},"2736":{i:6.70371957480065E-05,u:"../Content/Creating IDL Programs/Creating Applications in IDL/Default_Table_Size.htm",a:"Table widgets are sized according to the value of the following pairs of keywords to WIDGET_TABLE, in order of precedence: SCR_XSIZE/SCR_YSIZE, XSIZE/YSIZE, X_SCROLL_SIZE/Y_SCROLL_SIZE, and VALUE. If either dimension remains unspecified by one of the above keywords, the default value of six (columns ...",t:"Default Table Size"},"2737":{i:0.000273118568029835,u:"../Content/Creating IDL Programs/Creating Applications in IDL/Table_Widget_Selection_M.htm",a:"Groups of table cells can be selected either manually (using the mouse or keyboard) or programmatically. The table widget supports two selection modes — standard and disjoint . Both modes can be used either by an interactive table user or by the IDL programmer. See Table Widget Data Retrieval for ...",t:"Table Widget Selection Modes"},"2738":{i:0.000201045917877911,u:"../Content/Creating IDL Programs/Creating Applications in IDL/Table_Widget_Data_Types.htm",a:"Table data can be of any IDL data type or types. Single Data Type If all of the table data is of the same data type, the table value is specified as a two-dimensional array. Values returned by the GET_VALUE keyword to WIDGET_CONTROL are either a two-dimensional array (for full tables or selections ...",t:"Table Widget Data Types"},"2739":{i:0.000315311818704297,u:"../Content/Creating IDL Programs/Creating Applications in IDL/Table_Widget_Data_Retrie.htm",a:"To retrieve data from a table widget, use the GET_VALUE keyword to WIDGET_CONTROL. You can retrieve the entire contents of the table or the contents of either a standard or disjoint selection. The format of the variable returned by the GET_VALUE keyword depends on the type of data displayed in the ...",t:"Table Widget Data Retrieval"},"2740":{i:9.07600532864143E-05,u:"../Content/Creating IDL Programs/Creating Applications in IDL/Table_Widget_Edit_Mode.htm",a:"Edit mode allows a user to select and change the contents of a table cell. There are numerous ways to enter and exit Edit mode, including: Clicking on an unselected cell, then typing any character. This replaces the existing text with the new character. Clicking on an unselected cell, then typing a ...",t:"Table Widget Edit Mode"},"2741":{i:0.000194236323617387,u:"../Content/Creating IDL Programs/Creating Applications in IDL/Table_Widget_Cell_Attrib.htm",a:"The table widget supports a variety of cell attributes that you can apply either to the entire table or to a subset of its cells. You can set them at table creation with the WIDGET_TABLE function and change them after creation with the WIDGET_CONTROL procedure. You can also query for some of them ...",t:"Table Widget Cell Attributes"},"2742":{i:6.70371957480065E-05,u:"../Content/Creating IDL Programs/Creating Applications in IDL/Example__Single_Data_Typ.htm",a:"The following procedures build a simple application that allows the user to select data from a table, plotting the data in a draw window and optionally displaying the data values in a text widget. The user can switch the table between standard and disjoint selection modes. This example is included ...",t:"Example: Single Data Type Data in a Table Widget"},"2743":{i:6.70371957480065E-05,u:"../Content/Creating IDL Programs/Creating Applications in IDL/Example__Structure_Data.htm",a:"The following procedures build a simple application that displays the same structure data in two table widgets; one in row-major format and one in column-major format. This example is included in the file table_widget_example2. pro in the examples/doc/widgets subdirectory of the IDL distribution. ...",t:"Example: Structure Data in a Table Widget"},"2744":{i:0.000107223664413553,u:"../Content/Creating IDL Programs/Creating Applications in IDL/About_Tab_Widgets.htm",a:"Tab widgets create a “tabbed” interface that allows the user to select one of a list of rectangular display areas to be displayed in a single space (the tab set ). The displayed interface elements are contained in base widgets. That is, selecting a tab displays the contents of a specified base ...",t:"About Tab Widgets"},"2745":{i:0.000135335729860931,u:"../Content/Creating IDL Programs/Creating Applications in IDL/Example__A_Simple_Tab_Wi.htm",a:"The following procedures build a simple tabbed interface with three tabs containing a variety of other widgets. This example is included in the file tab_widget_example1. pro in the examples/doc/widgets subdirectory of the IDL distribution. Run this example procedure by entering tab_widget_example1 ...",t:"Example: A Simple Tab Widget"},"2746":{i:7.78178678747434E-05,u:"../Content/Creating IDL Programs/Creating Applications in IDL/Tab_Sizing_and_Multiline.htm",a:"The size of the rectangular area of the tab display (where individual widgets are placed) is determined by the size of the largest base widget included in the tab set. The size of the “tab” itself (the curved area that sticks out from the rectangular base and contains the tab’s title) is determined ...",t:"Tab Sizing and Multiline Behavior"},"2747":{i:0.000135335729860931,u:"../Content/Creating IDL Programs/Creating Applications in IDL/Example__Retrieving_Valu.htm",a:"The following example builds on Example: A Simple Tab Widget by adding the following features: “Next” and “Previous” buttons that switch the tab display to the next (or previous) tab in the tab set. A mechanism for saving the values of the widgets in the tab interface. Implementing such a mechanism ...",t:"Example: Retrieving Values"},"2748":{i:0.000113161673969092,u:"../Content/Creating IDL Programs/Creating Applications in IDL/About_Tree_Widgets.htm",a:"Tree widgets display information in a hierarchical structure or tree . Branches and sub-branches of the tree can be expanded and collapsed (either programmatically or by the user) to display or hide the information they contain. See WIDGET_TREE for a complete description of the function used to ...",t:"About Tree Widgets"},"2749":{i:6.57202499102489E-05,u:"../Content/Creating IDL Programs/Creating Applications in IDL/Types_of_Tree_Widgets.htm",a:"Tree widgets behave slightly differently depending on whether their parent widget is a base widget or another tree widget: If the tree widget’s Parent is a base widget, the tree widget becomes the root of a new tree widget hierarchy. The tree widget itself is not displayed, but it becomes the parent ...",t:"Types of Tree Widgets"},"2750":{i:6.57202499102489E-05,u:"../Content/Creating IDL Programs/Creating Applications in IDL/Example__A_Simple_Tree.htm",a:"The following ex ample builds a simple tree widget:. Double-clicking on the leaf nodes toggles the value of the displayed text between the values “On” and “Off.” This example is included in the file tree_widget_example. pro in the examples/doc/widgets subdirectory of the IDL distribution. Run this ...",t:"Example: A Simple Tree"},"2751":{i:6.57202499102489E-05,u:"../Content/Creating IDL Programs/Creating Applications in IDL/Setting_the_Tree_Selecti.htm",a:"You can programmatically select or deselect nodes in a tree widget hierarchy using the SET_TREE_SELECT keyword to WIDGET_CONTROL . Selecting a node or nodes visually highlights the node on the tree display. In the above example, placing the following command just above the call to XMANAGER: ...",t:"Setting the Tree Selection State"},"2752":{i:6.57202499102489E-05,u:"../Content/Creating IDL Programs/Creating Applications in IDL/Making_a_Tree_Entry_Visi.htm",a:"If your tree is large or has many branches, you may need to explicitly bring a given node to the user’s attention. You can do this using the SET_TREE_VISIBLE keyword to WIDGET_CONTROL : WIDGET_CONTROL, wTreeNode , /SET_TREE_VISIBLE were wTreeNode is any node attached to a tree widget — that is, any ...",t:"Making a Tree Entry Visible"},"2753":{i:6.57202499102489E-05,u:"../Content/Creating IDL Programs/Creating Applications in IDL/Replacing_the_Default_Bi.htm",a:"By default, tree widgets use bitmap images of a folder and a single piece of paper as the icons representing branch and leaf nodes in a tree widget hierarchy. You can modify the look of the tree widget by supplying your own bitmap for a given node. Set the BITMAP keyword to WIDGET_TREE equal to a 16 ...",t:"Replacing the Default Bitmaps"},"2754":{i:0.000105639672157715,u:"../Content/Creating IDL Programs/Creating Applications in IDL/Dragging_and_Dropping_Tr.htm",a:"In IDL versions 6.3 and later, you can create applications that allow users to drag tree nodes within a single tree widget, between tree widgets, or from a tree widget to a draw widget. Depending on the circumstances, the dragged tree node is either copied to the new location (leaving the source ...",t:"Dragging and Dropping Tree Nodes"},"2755":{i:6.99983804529072E-05,u:"../Content/Creating IDL Programs/Creating Applications in IDL/Tree_Widget_Drag_and_Dro.htm",a:"Tree Widget Drag and Drop Ex amples Tree widget drag and drop scenarios can range from relatively straight forward to quite complex. The degree of complexity usually increases with the inclusion of multiple selection and custom drag callbacks. Two example applications are included in the IDL ...",t:"Tree Widget Drag and Drop Examples"},"2756":{i:6.57202499102489E-05,u:"../Content/Creating IDL Programs/Creating Applications in IDL/Positioning_Tree_Nodes.htm",a:"The position of tree widget nodes within a tree can be controlled in several ways. When a tree node is created without the TOP or INDEX keywords, the default behavior is to position the new node last among its siblings. If the TOP keyword is specified, the new node is created as the first child. If ...",t:"Positioning Tree Nodes"},"2757":{i:9.67543252583799E-05,u:"../Content/Creating IDL Programs/Creating Applications in IDL/Using_Tree_Widget_Checkboxes.htm",a:"You can create checkboxes on tree widgets with the WIDGET_TREE function, using the CHECKBOX keyword. To control the state of the checkboxes, use the CHECKED keyword. The following image shows checked nodes in tree widget nodes. The filled-in squares next to folders indicate a mixed check state, ...",t:"Using Tree Widget Checkboxes"},"2758":{i:5.50327019655568E-05,u:"../Content/Creating IDL Programs/Creating Applications in IDL/About_Runtime_Distributi.htm",a:"If your IDL application is intended to be run in an installation with an IDL development license, you do not need to create an IDL distribution. Simply package up your application files (either .pro files or .sav files, and any necessary data files) and distribute it to your users along with ...",t:"About Runtime Distributions"},"2759":{i:5.50327019655568E-05,u:"../Content/Creating IDL Programs/Creating Applications in IDL/Providing_Help_Within_th.htm",a:"There are numerous ways to supply help and feedback to users of a widget application without the need to display a help file in an external window. The following techniques can augment, if not necessarily replace, a more complete online help file. Tooltips Tooltips are short text strings that appear ...",t:"Providing Help Within the User Interface"},"2760":{i:5.50327019655568E-05,u:"../Content/Connectivity Bridges/Bridges.htm",a:"Connectivity Bridges ",t:"Connectivity Bridges"},"2761":{i:0.000227969046620839,u:"../Content/Connectivity Bridges/Appendices - COM Object Creation/COMObjectCreation.htm",a:"COM Object Creation The following topics  show how to create a custom IDL wrapper object (initialized with and without parameters) from several COM programming languages: Sample IDL Object Visual Basic .NET Code Sample C++ Client Code Sample C# Code Sample Visual Basic 6 Code Sample ",t:"COM Object Creation"},"2762":{i:0.00013315362536057,u:"../Content/Connectivity Bridges/Appendices - COM Object Creation/CplusplusClientCodeSample.htm",a:"The C++ project must somewhere include the following line, in order to pull in the CoClass and Interface definitions for the wrapper object: #import \"IDLexFoo.tlb\" no_namespace no_implementation raw_interfaces_only named_guids For details about the object parameters, see Sample IDL Object . ...",t:"C++ Client Code Sample"},"2763":{i:0.00013315362536057,u:"../Content/Connectivity Bridges/Appendices - COM Object Creation/CsharpCodeSample.htm",a:"Within Visual Studio .NET, in the Solution Explorer window, underneath the project that will use the wrapper object, right-click on the References item, then select Add Reference… . This brings up a dialog. Select the COM tab, then Browse , and change the path to the wrapper .dll . This imports the ...",t:"C# Code Sample"},"2764":{i:0.00032058733442366,u:"../Content/Connectivity Bridges/Appendices - COM Object Creation/SampleIDLObject.htm",a:"The COM CreateObject method creates an instance of an underlying IDL object and calls its Init method with any specified parameters (see CreateObject for details). Through this object instance, you have access to the properties and methods of the object as well as the underlying IDL process. The ...",t:"Sample IDL Object for COM"},"2765":{i:0.00013315362536057,u:"../Content/Connectivity Bridges/Appendices - COM Object Creation/VisualBasic6CodeSample.htm",a:"Within Visual Basic 6, select Project \u003e Components , then Browse for the .dll of the wrapper object in order to include the objects definition in the project. For details about the object parameters, see Sample IDL Object . Initiation Without Parameters in Visual Basic 6 Use the following code to ...",t:"Visual Basic 6 Code Sample"},"2766":{i:0.00013315362536057,u:"../Content/Connectivity Bridges/Appendices - COM Object Creation/VisualBasicdotNETCodeSample.htm",a:"Within Visual Studio .NET, select Project \u003e Add Reference… . This brings up a dialog. Select the COM tab, then Browse , and change the path to the idlexfoo.dll . This imports the object reference into the project. Within the project that will use the wrapper object, include the following line at the ...",t:"Visual Basic .NET Code Sample"},"2767":{i:0.000463149568812259,u:"../Content/Connectivity Bridges/Appendices - Multidimensional Array Storage and Access/MASAOverview.htm",a:"This appendix is designed to explain how multidimensional arrays are stored and accessed, with specific relevance to marshaling arrays between COM clients and IDL. Please note that if you use the Convert Majority property in the Export Bridge Assistant on exported property or method parameters ...",t:"Multidimensional Array Storage and Access Overview"},"2768":{i:0.000102619301660494,u:"../Content/Connectivity Bridges/Appendices - Multidimensional Array Storage and Access/2DArrayExamples.htm",a:"Let’s create a 2D array that has 3 rows by 5 columns (3x5). Since the ultimate goal is to give the array to IDL for processing, let’s pretend it is an “image.” We will set the first row to all red, the second row to all green, and the third row to all blue. Here’s the conceptual layout of our array ...",t:"2D Array Examples"},"2769":{i:5.54698778904798E-05,u:"../Content/Connectivity Bridges/Appendices - Multidimensional Array Storage and Access/StorageandAccessinCOMandIDL.htm",a:"There is a difference between storage and access. Storage focuses on the way a multidimensional array of items gets arranged in linear memory. Since all memory is linear memory, it is paramount to understand how arrays are arranged in linear memory. Access is the way a language allows interaction ...",t:"Storage and Access in COM and IDL"},"2770":{i:5.54698778904798E-05,u:"../Content/Connectivity Bridges/Appendices - Multidimensional Array Storage and Access/WhyStorageandAccessMatter.htm",a:"Clients that need to pass an array to IDL need to understand the memory layouts of the arrays in order to know if they should convert arrays from one format to the other. Simply trying to understand which format is “row” and which is “column” major is not enough because the definitions of those ...",t:"Why Storage and Access Matter"},"2771":{i:6.86053714797257E-05,u:"../Content/Connectivity Bridges/ExportFromIDL - COM Objects/OverviewOfCOMExportObjects.htm",a:"Once you have chosen to use a connector object or have exported a custom IDL source object using the Assistant, use the method and event reference information described here to create an instance of the object and interact with the IDL process from an external COM environment. This chapter presents ...",t:"Overview of COM Export Objects"},"2772":{i:6.98434733293994E-05,u:"../Content/Connectivity Bridges/ExportFromIDL - COM Objects/COMWrapperObjects.htm",a:"A COM wrapper object is defined as one that wraps a nondrawable IDL object, and an ActiveX control as one that wraps a drawable IDL object. Typically, only ActiveX controls handle (user) events, but COM wrapper objects can also fire events so that the client can receive IDL output and notifications. ...",t:"COM Wrapper Objects"},"2773":{i:0.000163018161237605,u:"../Content/Connectivity Bridges/ExportFromIDL - COM Objects/EventHandling.htm",a:"Clients subscribe to wrapper instance events through a process called advising. The wrapper object defines an outgoing source interface (event interface) containing the event methods, and the client implements that interface. During advising, the client passes a reference to its event interface to ...",t:"COM Event Handling"},"2774":{i:0.000152389606093164,u:"../Content/Connectivity Bridges/ExportFromIDL - COM Objects/ErrorHandling.htm",a:"Each method of a wrapper object returns an HRESULT value. If the method call was successful, it returns S_OK; otherwise it returns a standard COM failure. If any of the methods calls return an HRESULT error code, the client can then call the GetLastError method to retrieve an error string, which is ...",t:"COM Error Handling"},"2775":{i:6.39508763420919E-05,u:"../Content/Connectivity Bridges/ExportFromIDL - COM Objects/DebuggingCOMWrapperObjects.htm",a:"When running an application that relies on a COM wrapper object, it is often difficult to determine when errors occur in the associated IDL object or IDL process. Since the instance of the wrapper object is invoked outside of IDL, the normal debugging capabilities of the IDL Workbench are not ...",t:"Debugging COM Wrapper Objects"},"2776":{i:0.00121763170358687,u:"../Content/Connectivity Bridges/ExportFromIDL - COM Objects/StockCOMWrapperMethods.htm",a:"This section describes the stock methods in the COM wrapper objects created by the Export Bridge Assistant: Abort CreateObject CreateObjectEx DestroyObject ExecuteString GetIDLObjectClassName GetIDLObjectVariableName GetIDLVariable GetLastError GetProcessName SetIDLVariable SetProcessName Every ...",t:"Stock COM Wrapper Methods"},"2777":{i:6.98434733293994E-05,u:"../Content/Connectivity Bridges/ExportFromIDL - COM Objects/AboutCOMExportObjectExamples.htm",a:"An IDL object can be wrapped for use in a COM application using the Export Bridge Assistant as described in Using the Export Bridge Assistant . This chapter provides several Visual Basic .NET examples that use custom COM export objects. These include: Nondrawable examples show how to access the ...",t:"About COM Export Object Examples"},"2778":{i:6.63415334811953E-05,u:"../Content/Connectivity Bridges/ExportFromIDL - COM Objects/COMIDLgrWindowBasedHistogramPlotGenerator.htm",a:"This drawable object example inherits from IDLgrWindow and creates a histogram plot for a selected monochrome or RGB image file. While this example does contain several custom methods including those for opening a file, creating the plots, and changing plot characteristics, it does not use keyboard ...",t:"COM IDLgrWindow Based Histogram Plot Generator"},"2779":{i:0.00022370386218553,u:"../Content/Connectivity Bridges/ExportFromIDL - COM Objects/COMIDLitWindowSurfaceManipulation.htm",a:"This drawable object example inherits from IDLitWindow and creates an ISURFACE display in a COM control. A listbox in a Visual Basic .NET Windows application is populated with manipulator string values that, when selected, allow you to draw annotations, rotate, or zoom within the exported ...",t:"COM IDLitWindow Surface Manipulation"},"2780":{i:6.39508763420919E-05,u:"../Content/Connectivity Bridges/ExportFromIDL - COM Objects/DrawableCOMExportExamples.htm",a:"A COM export object that supports graphics must be based on a custom IDL object that inherits from IDLgrWindow, IDLitWindow or IDLitDirectWindow (as described in Exporting Drawable Objects ). Additionally, your IDL object must also implement a set of callback methods if you want to be able to ...",t:"Drawable COM Export Examples"},"2781":{i:0.00012934323836946,u:"../Content/Connectivity Bridges/ExportFromIDL - COM Objects/NondrawableCOMExportExample.htm",a:"Nondrawable objects provide access to the enormous processing power of IDL, but do not provide IDL drawing capabilities. This is useful for applications that need the data manipulation capabilities of IDL, but have no need for, or have independent drawing capabilities. Hello World COM Example with ...",t:"Nondrawable COM Export Example"},"2782":{i:8.13096076145354E-05,u:"../Content/Connectivity Bridges/ExportFromIDL - COM Objects/Tri-WindowCOMExportExample.htm",a:"The examples/doc/bridges directory includes three object definition files that inherit from the three types of drawable objects: IDLgrWindow, IDLitDirectWindow and IDLitWindow. The following example uses the Export Bridge Assistant to create ActiveX controls from these object definition files and ...",t:"Tri-Window COM Export Example"},"2783":{i:5.50327019655568E-05,u:"../Content/Connectivity Bridges/Connectivity Bridges Overview/COMObjectsandIDL.htm",a:"Microsoft’s Component Object Model, or COM, is a specification for developing modular software components. COM is not a programming language or an API, but an implementation of a component architecture. A component architecture is a method of designing software components so that they can be easily ...",t:"COM Objects and IDL"},"2784":{i:5.54698778904798E-05,u:"../Content/Connectivity Bridges/Connectivity Bridges Overview/SkillsRequiredtoUseCOMObjects.htm",a:"Although IDL provides an abstracted interface to COM functionality, you must be familiar with some aspects of COM to intertwine COM and IDL successfully. If You Are Using COM Objects If you are using a COM object directly, via the IDLcomIDispatch object, you will need a thorough understanding of the ...",t:"Skills Required to Use COM Objects"},"2785":{i:7.6789836178486E-05,u:"../Content/Connectivity Bridges/Connectivity Bridges Overview/UsingCOMObjectsWithIDL.htm",a:"The methods for using COM objects with IDL are: Exposing a COM Object as an IDL Object Including an ActiveX Control in an IDL Widget Hierarchy Exposing a COM Object as an IDL Object IDL’s IDLcomIDispatch object class creates an IDL object that communicates with an underlying COM object using the COM ...",t:"Using COM Objects With IDL"},"2786":{i:0.000417623494562935,u:"../Content/Connectivity Bridges/ImportToIDL - COM Objects/AboutUsingCOMObjects.htm",a:"If you want to incorporate a COM object that does not present its own user interface into your IDL application, use IDL’s IDLcomIDispatch object class. IDL’s IDLcomIDispatch object class creates an IDL object that uses the COM IDispatch interface to communicate with an underlying COM object. When ...",t:"About Using COM Objects In IDL"},"2787":{i:0.000101829292021405,u:"../Content/Connectivity Bridges/ImportToIDL - COM Objects/COM-IDLDataTypeMapping.htm",a:"When data moves from IDL to a COM object and back, IDL handles conversion of variable data types automatically. The data type mappings are shown below. COM Type IDL Type BOOL (VT_BOOL) Byte (true =1, false=0) ERROR (VT_ERROR) Long CY (VT_CY) Double (see note below) DATE (VT_DATE) Double I1 (VT_I1) ...",t:"COM-IDL Data Type Mapping"},"2788":{i:0.000327686621385056,u:"../Content/Connectivity Bridges/ImportToIDL - COM Objects/CreatingIDLcomIDispatchObjects.htm",a:"To expose a COM object as an IDL object, use the OBJ_NEW function to create a dynamic subclass of the IDLcomIDispatch object class. The name of the subclass must be constructed as described in IDLcomIDispatch Object Naming Scheme , and identifies the COM object to be instantiated. If the COM object ...",t:"Creating IDLcomIDispatch Objects"},"2789":{i:0.000114633402237376,u:"../Content/Connectivity Bridges/ImportToIDL - COM Objects/DestroyingIDLcomIDispatchObjects.htm",a:"Use the OBJ_DESTROY procedure to destroy and IDLcomIDispatch object. When OBJ_DESTROY is called with an IDLcomIDispatch object as an argument, the underlying reference to the COM object is released and IDL resources relating to that object are freed. Destroying an IDLcomIDispatch object does not ...",t:"Destroying IDLcomIDispatch Objects"},"2790":{i:5.54698778904798E-05,u:"../Content/Connectivity Bridges/ImportToIDL - COM Objects/ExampleRSIDemoComponent.htm",a:"This example uses a COM component included in the IDL distribution. The RSIDemoComponent is included purely for demonstration purposes, and does not perform any useful work beyond illustrating how IDLcomIDispatch objects are created and used. The RSIDemoComponent is contained in a file named ...",t:"Example RSIDemoComponent"},});